=begin
#Veeva Vault API v25.1

#The latest GA version of the Vault REST API.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve API Versions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def api_get(opts = {})
      api_get_with_http_info(opts)
      nil
    end

    # Retrieve API Versions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_get ...'
      end
      # resource path
      local_var_path = '/api/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.api_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Content File
    # @param component_type_and_record_name [String] The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def api_mdl_components_component_type_and_record_name_files_get(component_type_and_record_name, opts = {})
      api_mdl_components_component_type_and_record_name_files_get_with_http_info(component_type_and_record_name, opts)
      nil
    end

    # Retrieve Content File
    # @param component_type_and_record_name [String] The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_components_component_type_and_record_name_files_get_with_http_info(component_type_and_record_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_mdl_components_component_type_and_record_name_files_get ...'
      end
      # verify the required parameter 'component_type_and_record_name' is set
      if @api_client.config.client_side_validation && component_type_and_record_name.nil?
        fail ArgumentError, "Missing the required parameter 'component_type_and_record_name' when calling DefaultApi.api_mdl_components_component_type_and_record_name_files_get"
      end
      # resource path
      local_var_path = '/api/mdl/components/{component_type_and_record_name}/files'.sub('{' + 'component_type_and_record_name' + '}', CGI.escape(component_type_and_record_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.api_mdl_components_component_type_and_record_name_files_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_mdl_components_component_type_and_record_name_files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Component Record (MDL)
    # @param component_type_and_record_name [String] The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def api_mdl_components_component_type_and_record_name_get(component_type_and_record_name, opts = {})
      api_mdl_components_component_type_and_record_name_get_with_http_info(component_type_and_record_name, opts)
      nil
    end

    # Retrieve Component Record (MDL)
    # @param component_type_and_record_name [String] The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_components_component_type_and_record_name_get_with_http_info(component_type_and_record_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_mdl_components_component_type_and_record_name_get ...'
      end
      # verify the required parameter 'component_type_and_record_name' is set
      if @api_client.config.client_side_validation && component_type_and_record_name.nil?
        fail ArgumentError, "Missing the required parameter 'component_type_and_record_name' when calling DefaultApi.api_mdl_components_component_type_and_record_name_get"
      end
      # resource path
      local_var_path = '/api/mdl/components/{component_type_and_record_name}'.sub('{' + 'component_type_and_record_name' + '}', CGI.escape(component_type_and_record_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.api_mdl_components_component_type_and_record_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_mdl_components_component_type_and_record_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Asynchronous MDL Script Results
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def api_mdl_execute_async_job_id_results_get(job_id, opts = {})
      api_mdl_execute_async_job_id_results_get_with_http_info(job_id, opts)
      nil
    end

    # Retrieve Asynchronous MDL Script Results
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_execute_async_job_id_results_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_mdl_execute_async_job_id_results_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.api_mdl_execute_async_job_id_results_get"
      end
      # resource path
      local_var_path = '/api/mdl/execute_async/{job_id}/results'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.api_mdl_execute_async_job_id_results_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_mdl_execute_async_job_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute MDL Script Asynchronously
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def api_mdl_execute_async_post(opts = {})
      api_mdl_execute_async_post_with_http_info(opts)
      nil
    end

    # Execute MDL Script Asynchronously
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_execute_async_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_mdl_execute_async_post ...'
      end
      # resource path
      local_var_path = '/api/mdl/execute_async'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.api_mdl_execute_async_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_mdl_execute_async_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute MDL Script
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def api_mdl_execute_post(opts = {})
      api_mdl_execute_post_with_http_info(opts)
      nil
    end

    # Execute MDL Script
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_execute_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_mdl_execute_post ...'
      end
      # resource path
      local_var_path = '/api/mdl/execute'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.api_mdl_execute_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_mdl_execute_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload Content File
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def api_mdl_files_post(opts = {})
      api_mdl_files_post_with_http_info(opts)
      nil
    end

    # Upload Content File
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_files_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_mdl_files_post ...'
      end
      # resource path
      local_var_path = '/api/mdl/files'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.api_mdl_files_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_mdl_files_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Audit Details
    # @param audit_trail_type [String] The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
    # @option opts [String] :end_date Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
    # @option opts [String] :all_dates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
    # @option opts [String] :format_result To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
    # @option opts [String] :limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
    # @option opts [String] :objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
    # @option opts [String] :events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def audittrail_audit_trail_type_get(audit_trail_type, opts = {})
      audittrail_audit_trail_type_get_with_http_info(audit_trail_type, opts)
      nil
    end

    # Retrieve Audit Details
    # @param audit_trail_type [String] The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
    # @option opts [String] :end_date Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
    # @option opts [String] :all_dates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
    # @option opts [String] :format_result To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
    # @option opts [String] :limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
    # @option opts [String] :objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
    # @option opts [String] :events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def audittrail_audit_trail_type_get_with_http_info(audit_trail_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.audittrail_audit_trail_type_get ...'
      end
      # verify the required parameter 'audit_trail_type' is set
      if @api_client.config.client_side_validation && audit_trail_type.nil?
        fail ArgumentError, "Missing the required parameter 'audit_trail_type' when calling DefaultApi.audittrail_audit_trail_type_get"
      end
      # resource path
      local_var_path = '/audittrail/{audit_trail_type}'.sub('{' + 'audit_trail_type' + '}', CGI.escape(audit_trail_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'all_dates'] = opts[:'all_dates'] if !opts[:'all_dates'].nil?
      query_params[:'format_result'] = opts[:'format_result'] if !opts[:'format_result'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'objects'] = opts[:'objects'] if !opts[:'objects'].nil?
      query_params[:'events'] = opts[:'events'] if !opts[:'events'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.audittrail_audit_trail_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#audittrail_audit_trail_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Authentication Type Discovery
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def auth_discovery_post(opts = {})
      auth_discovery_post_with_http_info(opts)
      nil
    end

    # Authentication Type Discovery
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def auth_discovery_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_discovery_post ...'
      end
      # resource path
      local_var_path = '/auth/discovery'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.auth_discovery_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_discovery_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # OAuth 2.0 / OpenID Connect
    # @param oath_oidc_profile_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def auth_oauth_session_oath_oidc_profile_id_post(oath_oidc_profile_id, opts = {})
      auth_oauth_session_oath_oidc_profile_id_post_with_http_info(oath_oidc_profile_id, opts)
      nil
    end

    # OAuth 2.0 / OpenID Connect
    # @param oath_oidc_profile_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def auth_oauth_session_oath_oidc_profile_id_post_with_http_info(oath_oidc_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_oauth_session_oath_oidc_profile_id_post ...'
      end
      # verify the required parameter 'oath_oidc_profile_id' is set
      if @api_client.config.client_side_validation && oath_oidc_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'oath_oidc_profile_id' when calling DefaultApi.auth_oauth_session_oath_oidc_profile_id_post"
      end
      # resource path
      local_var_path = '/auth/oauth/session/{oath_oidc_profile_id}'.sub('{' + 'oath_oidc_profile_id' + '}', CGI.escape(oath_oidc_profile_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.auth_oauth_session_oath_oidc_profile_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_oauth_session_oath_oidc_profile_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # User Name and Password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def auth_post(opts = {})
      auth_post_with_http_info(opts)
      nil
    end

    # User Name and Password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def auth_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_post ...'
      end
      # resource path
      local_var_path = '/auth'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.auth_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Single Source Code File
    # @param class_name [String] The fully qualified class name of your file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def code_class_name_delete(class_name, opts = {})
      code_class_name_delete_with_http_info(class_name, opts)
      nil
    end

    # Delete Single Source Code File
    # @param class_name [String] The fully qualified class name of your file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_class_name_delete_with_http_info(class_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.code_class_name_delete ...'
      end
      # verify the required parameter 'class_name' is set
      if @api_client.config.client_side_validation && class_name.nil?
        fail ArgumentError, "Missing the required parameter 'class_name' when calling DefaultApi.code_class_name_delete"
      end
      # resource path
      local_var_path = '/code/{class_name}'.sub('{' + 'class_name' + '}', CGI.escape(class_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.code_class_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#code_class_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable Vault Extension
    # @param class_name [String] The fully qualified class name of your file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def code_class_name_disable_put(class_name, opts = {})
      code_class_name_disable_put_with_http_info(class_name, opts)
      nil
    end

    # Disable Vault Extension
    # @param class_name [String] The fully qualified class name of your file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_class_name_disable_put_with_http_info(class_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.code_class_name_disable_put ...'
      end
      # verify the required parameter 'class_name' is set
      if @api_client.config.client_side_validation && class_name.nil?
        fail ArgumentError, "Missing the required parameter 'class_name' when calling DefaultApi.code_class_name_disable_put"
      end
      # resource path
      local_var_path = '/code/{class_name}/disable'.sub('{' + 'class_name' + '}', CGI.escape(class_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.code_class_name_disable_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#code_class_name_disable_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Vault Extension
    # @param class_name [String] The fully qualified class name of your file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def code_class_name_enable_put(class_name, opts = {})
      code_class_name_enable_put_with_http_info(class_name, opts)
      nil
    end

    # Enable Vault Extension
    # @param class_name [String] The fully qualified class name of your file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_class_name_enable_put_with_http_info(class_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.code_class_name_enable_put ...'
      end
      # verify the required parameter 'class_name' is set
      if @api_client.config.client_side_validation && class_name.nil?
        fail ArgumentError, "Missing the required parameter 'class_name' when calling DefaultApi.code_class_name_enable_put"
      end
      # resource path
      local_var_path = '/code/{class_name}/enable'.sub('{' + 'class_name' + '}', CGI.escape(class_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.code_class_name_enable_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#code_class_name_enable_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Single Source Code File
    # @param class_name [String] The fully qualified class name of your file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def code_class_name_get(class_name, opts = {})
      code_class_name_get_with_http_info(class_name, opts)
      nil
    end

    # Retrieve Single Source Code File
    # @param class_name [String] The fully qualified class name of your file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_class_name_get_with_http_info(class_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.code_class_name_get ...'
      end
      # verify the required parameter 'class_name' is set
      if @api_client.config.client_side_validation && class_name.nil?
        fail ArgumentError, "Missing the required parameter 'class_name' when calling DefaultApi.code_class_name_get"
      end
      # resource path
      local_var_path = '/code/{class_name}'.sub('{' + 'class_name' + '}', CGI.escape(class_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.code_class_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#code_class_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Profiling Sessions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def code_profiler_get(opts = {})
      code_profiler_get_with_http_info(opts)
      nil
    end

    # Retrieve All Profiling Sessions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.code_profiler_get ...'
      end
      # resource path
      local_var_path = '/code/profiler'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.code_profiler_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#code_profiler_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Profiling Session
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def code_profiler_post(opts = {})
      code_profiler_post_with_http_info(opts)
      nil
    end

    # Create Profiling Session
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.code_profiler_post ...'
      end
      # resource path
      local_var_path = '/code/profiler'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.code_profiler_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#code_profiler_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # End Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def code_profiler_session_name_actions_end_post(session_name, opts = {})
      code_profiler_session_name_actions_end_post_with_http_info(session_name, opts)
      nil
    end

    # End Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_session_name_actions_end_post_with_http_info(session_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.code_profiler_session_name_actions_end_post ...'
      end
      # verify the required parameter 'session_name' is set
      if @api_client.config.client_side_validation && session_name.nil?
        fail ArgumentError, "Missing the required parameter 'session_name' when calling DefaultApi.code_profiler_session_name_actions_end_post"
      end
      # resource path
      local_var_path = '/code/profiler/{session_name}/actions/end'.sub('{' + 'session_name' + '}', CGI.escape(session_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.code_profiler_session_name_actions_end_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#code_profiler_session_name_actions_end_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def code_profiler_session_name_delete(session_name, opts = {})
      code_profiler_session_name_delete_with_http_info(session_name, opts)
      nil
    end

    # Delete Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_session_name_delete_with_http_info(session_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.code_profiler_session_name_delete ...'
      end
      # verify the required parameter 'session_name' is set
      if @api_client.config.client_side_validation && session_name.nil?
        fail ArgumentError, "Missing the required parameter 'session_name' when calling DefaultApi.code_profiler_session_name_delete"
      end
      # resource path
      local_var_path = '/code/profiler/{session_name}'.sub('{' + 'session_name' + '}', CGI.escape(session_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.code_profiler_session_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#code_profiler_session_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def code_profiler_session_name_get(session_name, opts = {})
      code_profiler_session_name_get_with_http_info(session_name, opts)
      nil
    end

    # Retrieve Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_session_name_get_with_http_info(session_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.code_profiler_session_name_get ...'
      end
      # verify the required parameter 'session_name' is set
      if @api_client.config.client_side_validation && session_name.nil?
        fail ArgumentError, "Missing the required parameter 'session_name' when calling DefaultApi.code_profiler_session_name_get"
      end
      # resource path
      local_var_path = '/code/profiler/{session_name}'.sub('{' + 'session_name' + '}', CGI.escape(session_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.code_profiler_session_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#code_profiler_session_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Profiling Session Results
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def code_profiler_session_name_results_get(session_name, opts = {})
      code_profiler_session_name_results_get_with_http_info(session_name, opts)
      nil
    end

    # Download Profiling Session Results
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_session_name_results_get_with_http_info(session_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.code_profiler_session_name_results_get ...'
      end
      # verify the required parameter 'session_name' is set
      if @api_client.config.client_side_validation && session_name.nil?
        fail ArgumentError, "Missing the required parameter 'session_name' when calling DefaultApi.code_profiler_session_name_results_get"
      end
      # resource path
      local_var_path = '/code/profiler/{session_name}/results'.sub('{' + 'session_name' + '}', CGI.escape(session_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.code_profiler_session_name_results_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#code_profiler_session_name_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or Replace Single Source Code File
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def code_put(opts = {})
      code_put_with_http_info(opts)
      nil
    end

    # Add or Replace Single Source Code File
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.code_put ...'
      end
      # resource path
      local_var_path = '/code'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.code_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#code_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Specific Root Nodes
    # @param edl_hierarchy_or_template [String] Choose to retrieve either edl_hierarchy__v or edl_template__v
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def composites_trees_edl_hierarchy_or_template_actions_listnodes_post(edl_hierarchy_or_template, opts = {})
      composites_trees_edl_hierarchy_or_template_actions_listnodes_post_with_http_info(edl_hierarchy_or_template, opts)
      nil
    end

    # Retrieve Specific Root Nodes
    # @param edl_hierarchy_or_template [String] Choose to retrieve either edl_hierarchy__v or edl_template__v
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def composites_trees_edl_hierarchy_or_template_actions_listnodes_post_with_http_info(edl_hierarchy_or_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.composites_trees_edl_hierarchy_or_template_actions_listnodes_post ...'
      end
      # verify the required parameter 'edl_hierarchy_or_template' is set
      if @api_client.config.client_side_validation && edl_hierarchy_or_template.nil?
        fail ArgumentError, "Missing the required parameter 'edl_hierarchy_or_template' when calling DefaultApi.composites_trees_edl_hierarchy_or_template_actions_listnodes_post"
      end
      # resource path
      local_var_path = '/composites/trees/{edl_hierarchy_or_template}/actions/listnodes'.sub('{' + 'edl_hierarchy_or_template' + '}', CGI.escape(edl_hierarchy_or_template.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.composites_trees_edl_hierarchy_or_template_actions_listnodes_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#composites_trees_edl_hierarchy_or_template_actions_listnodes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Root Nodes
    # @param edl_hierarchy_or_template [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def composites_trees_edl_hierarchy_or_template_get(edl_hierarchy_or_template, opts = {})
      composites_trees_edl_hierarchy_or_template_get_with_http_info(edl_hierarchy_or_template, opts)
      nil
    end

    # Retrieve All Root Nodes
    # @param edl_hierarchy_or_template [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def composites_trees_edl_hierarchy_or_template_get_with_http_info(edl_hierarchy_or_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.composites_trees_edl_hierarchy_or_template_get ...'
      end
      # verify the required parameter 'edl_hierarchy_or_template' is set
      if @api_client.config.client_side_validation && edl_hierarchy_or_template.nil?
        fail ArgumentError, "Missing the required parameter 'edl_hierarchy_or_template' when calling DefaultApi.composites_trees_edl_hierarchy_or_template_get"
      end
      # resource path
      local_var_path = '/composites/trees/{edl_hierarchy_or_template}'.sub('{' + 'edl_hierarchy_or_template' + '}', CGI.escape(edl_hierarchy_or_template.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.composites_trees_edl_hierarchy_or_template_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#composites_trees_edl_hierarchy_or_template_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Node's Children
    # @param parent_node_id [String] The ID of a parent node in the hierarchy.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def composites_trees_edl_hierarchy_v_parent_node_id_children_get(parent_node_id, opts = {})
      composites_trees_edl_hierarchy_v_parent_node_id_children_get_with_http_info(parent_node_id, opts)
      nil
    end

    # Retrieve a Node&#39;s Children
    # @param parent_node_id [String] The ID of a parent node in the hierarchy.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def composites_trees_edl_hierarchy_v_parent_node_id_children_get_with_http_info(parent_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_get ...'
      end
      # verify the required parameter 'parent_node_id' is set
      if @api_client.config.client_side_validation && parent_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'parent_node_id' when calling DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_get"
      end
      # resource path
      local_var_path = '/composites/trees/edl_hierarchy__v/{parent_node_id}/children'.sub('{' + 'parent_node_id' + '}', CGI.escape(parent_node_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#composites_trees_edl_hierarchy_v_parent_node_id_children_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Node Order
    # @param parent_node_id [String] The ID of a parent node in the hierarchy.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def composites_trees_edl_hierarchy_v_parent_node_id_children_put(parent_node_id, opts = {})
      composites_trees_edl_hierarchy_v_parent_node_id_children_put_with_http_info(parent_node_id, opts)
      nil
    end

    # Update Node Order
    # @param parent_node_id [String] The ID of a parent node in the hierarchy.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def composites_trees_edl_hierarchy_v_parent_node_id_children_put_with_http_info(parent_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_put ...'
      end
      # verify the required parameter 'parent_node_id' is set
      if @api_client.config.client_side_validation && parent_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'parent_node_id' when calling DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_put"
      end
      # resource path
      local_var_path = '/composites/trees/edl_hierarchy__v/{parent_node_id}/children'.sub('{' + 'parent_node_id' + '}', CGI.escape(parent_node_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#composites_trees_edl_hierarchy_v_parent_node_id_children_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Component Record (XML/JSON)
    # @param component_type_and_record_name [String] The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by setting loc to true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def configuration_component_type_and_record_name_get(component_type_and_record_name, opts = {})
      configuration_component_type_and_record_name_get_with_http_info(component_type_and_record_name, opts)
      nil
    end

    # Retrieve Component Record (XML/JSON)
    # @param component_type_and_record_name [String] The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by setting loc to true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_component_type_and_record_name_get_with_http_info(component_type_and_record_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_component_type_and_record_name_get ...'
      end
      # verify the required parameter 'component_type_and_record_name' is set
      if @api_client.config.client_side_validation && component_type_and_record_name.nil?
        fail ArgumentError, "Missing the required parameter 'component_type_and_record_name' when calling DefaultApi.configuration_component_type_and_record_name_get"
      end
      # resource path
      local_var_path = '/configuration/{component_type_and_record_name}'.sub('{' + 'component_type_and_record_name' + '}', CGI.escape(component_type_and_record_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.configuration_component_type_and_record_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_component_type_and_record_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Component Record Collection
    # @param component_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def configuration_component_type_get(component_type, opts = {})
      configuration_component_type_get_with_http_info(component_type, opts)
      nil
    end

    # Retrieve Component Record Collection
    # @param component_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_component_type_get_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_component_type_get ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling DefaultApi.configuration_component_type_get"
      end
      # resource path
      local_var_path = '/configuration/{component_type}'.sub('{' + 'component_type' + '}', CGI.escape(component_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.configuration_component_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_component_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Details from a Specific Object
    # @param object_name_and_object_type [String] The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by setting loc to true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def configuration_object_name_and_object_type_get(object_name_and_object_type, opts = {})
      configuration_object_name_and_object_type_get_with_http_info(object_name_and_object_type, opts)
      nil
    end

    # Retrieve Details from a Specific Object
    # @param object_name_and_object_type [String] The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by setting loc to true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_object_name_and_object_type_get_with_http_info(object_name_and_object_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_object_name_and_object_type_get ...'
      end
      # verify the required parameter 'object_name_and_object_type' is set
      if @api_client.config.client_side_validation && object_name_and_object_type.nil?
        fail ArgumentError, "Missing the required parameter 'object_name_and_object_type' when calling DefaultApi.configuration_object_name_and_object_type_get"
      end
      # resource path
      local_var_path = '/configuration/{object_name_and_object_type}'.sub('{' + 'object_name_and_object_type' + '}', CGI.escape(object_name_and_object_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.configuration_object_name_and_object_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_object_name_and_object_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Details from All Object Types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def configuration_objecttype_get(opts = {})
      configuration_objecttype_get_with_http_info(opts)
      nil
    end

    # Retrieve Details from All Object Types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_objecttype_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_objecttype_get ...'
      end
      # resource path
      local_var_path = '/configuration/Objecttype'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.configuration_objecttype_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_objecttype_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Lifecycle Role Assignment Override Rules
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def configuration_role_assignment_rule_delete(opts = {})
      configuration_role_assignment_rule_delete_with_http_info(opts)
      nil
    end

    # Delete Lifecycle Role Assignment Override Rules
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_role_assignment_rule_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_role_assignment_rule_delete ...'
      end
      # resource path
      local_var_path = '/configuration/role_assignment_rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.configuration_role_assignment_rule_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_role_assignment_rule_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Lifecycle Role Assignment Rules (Default & Override)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :lifecycle__v Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
    # @option opts [String] :role__v Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
    # @option opts [String] :product__v Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
    # @option opts [String] :country__v Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
    # @option opts [String] :study__v In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
    # @option opts [String] :study_country__v In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def configuration_role_assignment_rule_get(opts = {})
      configuration_role_assignment_rule_get_with_http_info(opts)
      nil
    end

    # Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :lifecycle__v Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
    # @option opts [String] :role__v Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
    # @option opts [String] :product__v Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
    # @option opts [String] :country__v Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
    # @option opts [String] :study__v In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
    # @option opts [String] :study_country__v In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_role_assignment_rule_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_role_assignment_rule_get ...'
      end
      # resource path
      local_var_path = '/configuration/role_assignment_rule'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'lifecycle__v'] = opts[:'lifecycle__v'] if !opts[:'lifecycle__v'].nil?
      query_params[:'role__v'] = opts[:'role__v'] if !opts[:'role__v'].nil?
      query_params[:'product__v'] = opts[:'product__v'] if !opts[:'product__v'].nil?
      query_params[:'country__v'] = opts[:'country__v'] if !opts[:'country__v'].nil?
      query_params[:'study__v'] = opts[:'study__v'] if !opts[:'study__v'].nil?
      query_params[:'study_country__v'] = opts[:'study_country__v'] if !opts[:'study_country__v'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.configuration_role_assignment_rule_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_role_assignment_rule_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Lifecycle Role Assignment Override Rules
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def configuration_role_assignment_rule_post(opts = {})
      configuration_role_assignment_rule_post_with_http_info(opts)
      nil
    end

    # Create Lifecycle Role Assignment Override Rules
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_role_assignment_rule_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_role_assignment_rule_post ...'
      end
      # resource path
      local_var_path = '/configuration/role_assignment_rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.configuration_role_assignment_rule_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_role_assignment_rule_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Lifecycle Role Assignment Rules (Default & Override)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def configuration_role_assignment_rule_put(opts = {})
      configuration_role_assignment_rule_put_with_http_info(opts)
      nil
    end

    # Update Lifecycle Role Assignment Rules (Default &amp; Override)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_role_assignment_rule_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_role_assignment_rule_put ...'
      end
      # resource path
      local_var_path = '/configuration/role_assignment_rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.configuration_role_assignment_rule_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_role_assignment_rule_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Delegated Session
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def delegation_login_post(opts = {})
      delegation_login_post_with_http_info(opts)
      nil
    end

    # Initiate Delegated Session
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delegation_login_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delegation_login_post ...'
      end
      # resource path
      local_var_path = '/delegation/login'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delegation_login_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delegation_login_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Delegations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def delegation_vaults_get(opts = {})
      delegation_vaults_get_with_http_info(opts)
      nil
    end

    # Retrieve Delegations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delegation_vaults_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delegation_vaults_get ...'
      end
      # resource path
      local_var_path = '/delegation/vaults'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delegation_vaults_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delegation_vaults_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Session Keep Alive
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def keep_alive_post(opts = {})
      keep_alive_post_with_http_info(opts)
      nil
    end

    # Session Keep Alive
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def keep_alive_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.keep_alive_post ...'
      end
      # resource path
      local_var_path = '/keep-alive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.keep_alive_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#keep_alive_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Limits on Objects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def limits_get(opts = {})
      limits_get_with_http_info(opts)
      nil
    end

    # Retrieve Limits on Objects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def limits_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.limits_get ...'
      end
      # resource path
      local_var_path = '/limits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.limits_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#limits_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Daily API Usage
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
    # @option opts [String] :log_format Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def logs_api_usage_get(opts = {})
      logs_api_usage_get_with_http_info(opts)
      nil
    end

    # Download Daily API Usage
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
    # @option opts [String] :log_format Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_api_usage_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logs_api_usage_get ...'
      end
      # resource path
      local_var_path = '/logs/api_usage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'log_format'] = opts[:'log_format'] if !opts[:'log_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.logs_api_usage_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logs_api_usage_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Debug Logs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
    # @option opts [Boolean] :include_inactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def logs_code_debug_get(opts = {})
      logs_code_debug_get_with_http_info(opts)
      nil
    end

    # Retrieve All Debug Logs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
    # @option opts [Boolean] :include_inactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logs_code_debug_get ...'
      end
      # resource path
      local_var_path = '/logs/code/debug'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'include_inactive'] = opts[:'include_inactive'] if !opts[:'include_inactive'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.logs_code_debug_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logs_code_debug_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Debug Log
    # @param id [String] The ID of the debug log to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def logs_code_debug_id_actions_reset_delete(id, opts = {})
      logs_code_debug_id_actions_reset_delete_with_http_info(id, opts)
      nil
    end

    # Delete Debug Log
    # @param id [String] The ID of the debug log to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_id_actions_reset_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logs_code_debug_id_actions_reset_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.logs_code_debug_id_actions_reset_delete"
      end
      # resource path
      local_var_path = '/logs/code/debug/{id}/actions/reset'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.logs_code_debug_id_actions_reset_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logs_code_debug_id_actions_reset_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset Debug Log
    # @param id [String] The ID of the debug log to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def logs_code_debug_id_actions_reset_post(id, opts = {})
      logs_code_debug_id_actions_reset_post_with_http_info(id, opts)
      nil
    end

    # Reset Debug Log
    # @param id [String] The ID of the debug log to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_id_actions_reset_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logs_code_debug_id_actions_reset_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.logs_code_debug_id_actions_reset_post"
      end
      # resource path
      local_var_path = '/logs/code/debug/{id}/actions/reset'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.logs_code_debug_id_actions_reset_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logs_code_debug_id_actions_reset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Debug Log Files
    # @param id [String] The ID of the debug log to download.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def logs_code_debug_id_files_get(id, opts = {})
      logs_code_debug_id_files_get_with_http_info(id, opts)
      nil
    end

    # Download Debug Log Files
    # @param id [String] The ID of the debug log to download.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_id_files_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logs_code_debug_id_files_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.logs_code_debug_id_files_get"
      end
      # resource path
      local_var_path = '/logs/code/debug/{id}/files'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.logs_code_debug_id_files_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logs_code_debug_id_files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Single Debug Log
    # @param id [String] The ID of the debug log to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def logs_code_debug_id_get(id, opts = {})
      logs_code_debug_id_get_with_http_info(id, opts)
      nil
    end

    # Retrieve Single Debug Log
    # @param id [String] The ID of the debug log to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logs_code_debug_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.logs_code_debug_id_get"
      end
      # resource path
      local_var_path = '/logs/code/debug/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.logs_code_debug_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logs_code_debug_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Debug Log
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def logs_code_debug_post(opts = {})
      logs_code_debug_post_with_http_info(opts)
      nil
    end

    # Create Debug Log
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logs_code_debug_post ...'
      end
      # resource path
      local_var_path = '/logs/code/debug'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.logs_code_debug_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logs_code_debug_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download SDK Runtime Log
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date 
    # @option opts [String] :log_format Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def logs_code_runtime_get(opts = {})
      logs_code_runtime_get_with_http_info(opts)
      nil
    end

    # Download SDK Runtime Log
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date 
    # @option opts [String] :log_format Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_runtime_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logs_code_runtime_get ...'
      end
      # resource path
      local_var_path = '/logs/code/runtime'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'log_format'] = opts[:'log_format'] if !opts[:'log_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.logs_code_runtime_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logs_code_runtime_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import Bulk Translation File
    # @param message_type [String] The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def messages_message_type_actions_import_post(message_type, opts = {})
      messages_message_type_actions_import_post_with_http_info(message_type, opts)
      nil
    end

    # Import Bulk Translation File
    # @param message_type [String] The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def messages_message_type_actions_import_post_with_http_info(message_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.messages_message_type_actions_import_post ...'
      end
      # verify the required parameter 'message_type' is set
      if @api_client.config.client_side_validation && message_type.nil?
        fail ArgumentError, "Missing the required parameter 'message_type' when calling DefaultApi.messages_message_type_actions_import_post"
      end
      # resource path
      local_var_path = '/messages/{message_type}/actions/import'.sub('{' + 'message_type' + '}', CGI.escape(message_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.messages_message_type_actions_import_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#messages_message_type_actions_import_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export Bulk Translation File
    # @param message_type [String] The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
    # @param lang [String] A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def messages_message_type_language_lang_actions_export_post(message_type, lang, opts = {})
      messages_message_type_language_lang_actions_export_post_with_http_info(message_type, lang, opts)
      nil
    end

    # Export Bulk Translation File
    # @param message_type [String] The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
    # @param lang [String] A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def messages_message_type_language_lang_actions_export_post_with_http_info(message_type, lang, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.messages_message_type_language_lang_actions_export_post ...'
      end
      # verify the required parameter 'message_type' is set
      if @api_client.config.client_side_validation && message_type.nil?
        fail ArgumentError, "Missing the required parameter 'message_type' when calling DefaultApi.messages_message_type_language_lang_actions_export_post"
      end
      # verify the required parameter 'lang' is set
      if @api_client.config.client_side_validation && lang.nil?
        fail ArgumentError, "Missing the required parameter 'lang' when calling DefaultApi.messages_message_type_language_lang_actions_export_post"
      end
      # resource path
      local_var_path = '/messages/{message_type}/language/{lang}/actions/export'.sub('{' + 'message_type' + '}', CGI.escape(message_type.to_s)).sub('{' + 'lang' + '}', CGI.escape(lang.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.messages_message_type_language_lang_actions_export_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#messages_message_type_language_lang_actions_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Audit Metadata
    # @param audit_trail_type [String] The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_audittrail_audit_trail_type_get(audit_trail_type, opts = {})
      metadata_audittrail_audit_trail_type_get_with_http_info(audit_trail_type, opts)
      nil
    end

    # Retrieve Audit Metadata
    # @param audit_trail_type [String] The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_audittrail_audit_trail_type_get_with_http_info(audit_trail_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_audittrail_audit_trail_type_get ...'
      end
      # verify the required parameter 'audit_trail_type' is set
      if @api_client.config.client_side_validation && audit_trail_type.nil?
        fail ArgumentError, "Missing the required parameter 'audit_trail_type' when calling DefaultApi.metadata_audittrail_audit_trail_type_get"
      end
      # resource path
      local_var_path = '/metadata/audittrail/{audit_trail_type}'.sub('{' + 'audit_trail_type' + '}', CGI.escape(audit_trail_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_audittrail_audit_trail_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_audittrail_audit_trail_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Audit Types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_audittrail_get(opts = {})
      metadata_audittrail_get_with_http_info(opts)
      nil
    end

    # Retrieve Audit Types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_audittrail_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_audittrail_get ...'
      end
      # resource path
      local_var_path = '/metadata/audittrail'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_audittrail_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_audittrail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Component Type Metadata
    # @param component_type [String] The component type name (Picklist, Docfield, Doctype, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_components_component_type_get(component_type, opts = {})
      metadata_components_component_type_get_with_http_info(component_type, opts)
      nil
    end

    # Retrieve Component Type Metadata
    # @param component_type [String] The component type name (Picklist, Docfield, Doctype, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_components_component_type_get_with_http_info(component_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_components_component_type_get ...'
      end
      # verify the required parameter 'component_type' is set
      if @api_client.config.client_side_validation && component_type.nil?
        fail ArgumentError, "Missing the required parameter 'component_type' when calling DefaultApi.metadata_components_component_type_get"
      end
      # resource path
      local_var_path = '/metadata/components/{component_type}'.sub('{' + 'component_type' + '}', CGI.escape(component_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_components_component_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_components_component_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Component Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_components_get(opts = {})
      metadata_components_get_with_http_info(opts)
      nil
    end

    # Retrieve All Component Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_components_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_components_get ...'
      end
      # resource path
      local_var_path = '/metadata/components'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_components_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_components_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder Template Node Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_binders_templates_bindernodes_get(opts = {})
      metadata_objects_binders_templates_bindernodes_get_with_http_info(opts)
      nil
    end

    # Retrieve Binder Template Node Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_binders_templates_bindernodes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_binders_templates_bindernodes_get ...'
      end
      # resource path
      local_var_path = '/metadata/objects/binders/templates/bindernodes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_binders_templates_bindernodes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_binders_templates_bindernodes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder Template Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_binders_templates_get(opts = {})
      metadata_objects_binders_templates_get_with_http_info(opts)
      nil
    end

    # Retrieve Binder Template Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_binders_templates_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_binders_templates_get ...'
      end
      # resource path
      local_var_path = '/metadata/objects/binders/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_binders_templates_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_binders_templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Annotation Placemark Type Metadata
    # @param placemark_type [String] The name of the placemark type. For example, sticky__sys.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_annotations_placemarks_types_placemark_type_get(placemark_type, opts = {})
      metadata_objects_documents_annotations_placemarks_types_placemark_type_get_with_http_info(placemark_type, opts)
      nil
    end

    # Retrieve Annotation Placemark Type Metadata
    # @param placemark_type [String] The name of the placemark type. For example, sticky__sys.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_annotations_placemarks_types_placemark_type_get_with_http_info(placemark_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_annotations_placemarks_types_placemark_type_get ...'
      end
      # verify the required parameter 'placemark_type' is set
      if @api_client.config.client_side_validation && placemark_type.nil?
        fail ArgumentError, "Missing the required parameter 'placemark_type' when calling DefaultApi.metadata_objects_documents_annotations_placemarks_types_placemark_type_get"
      end
      # resource path
      local_var_path = '/metadata/objects/documents/annotations/placemarks/types/{placemark_type}'.sub('{' + 'placemark_type' + '}', CGI.escape(placemark_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_annotations_placemarks_types_placemark_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_annotations_placemarks_types_placemark_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Annotation Reference Type Metadata
    # @param reference_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_annotations_references_types_reference_type_get(reference_type, opts = {})
      metadata_objects_documents_annotations_references_types_reference_type_get_with_http_info(reference_type, opts)
      nil
    end

    # Retrieve Annotation Reference Type Metadata
    # @param reference_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_annotations_references_types_reference_type_get_with_http_info(reference_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_annotations_references_types_reference_type_get ...'
      end
      # verify the required parameter 'reference_type' is set
      if @api_client.config.client_side_validation && reference_type.nil?
        fail ArgumentError, "Missing the required parameter 'reference_type' when calling DefaultApi.metadata_objects_documents_annotations_references_types_reference_type_get"
      end
      # resource path
      local_var_path = '/metadata/objects/documents/annotations/references/types/{reference_type}'.sub('{' + 'reference_type' + '}', CGI.escape(reference_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_annotations_references_types_reference_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_annotations_references_types_reference_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Annotation Type Metadata
    # @param annotation_type [String] The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_annotations_types_annotation_type_get(annotation_type, opts = {})
      metadata_objects_documents_annotations_types_annotation_type_get_with_http_info(annotation_type, opts)
      nil
    end

    # Retrieve Annotation Type Metadata
    # @param annotation_type [String] The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_annotations_types_annotation_type_get_with_http_info(annotation_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_annotations_types_annotation_type_get ...'
      end
      # verify the required parameter 'annotation_type' is set
      if @api_client.config.client_side_validation && annotation_type.nil?
        fail ArgumentError, "Missing the required parameter 'annotation_type' when calling DefaultApi.metadata_objects_documents_annotations_types_annotation_type_get"
      end
      # resource path
      local_var_path = '/metadata/objects/documents/annotations/types/{annotation_type}'.sub('{' + 'annotation_type' + '}', CGI.escape(annotation_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_annotations_types_annotation_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_annotations_types_annotation_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Event SubType Metadata
    # @param event_type [String] The event type. For example, distribution__v.
    # @param event_subtype [String] The event subtype. For example, approved_email__v.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_events_event_type_types_event_subtype_get(event_type, event_subtype, opts = {})
      metadata_objects_documents_events_event_type_types_event_subtype_get_with_http_info(event_type, event_subtype, opts)
      nil
    end

    # Retrieve Document Event SubType Metadata
    # @param event_type [String] The event type. For example, distribution__v.
    # @param event_subtype [String] The event subtype. For example, approved_email__v.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_events_event_type_types_event_subtype_get_with_http_info(event_type, event_subtype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_events_event_type_types_event_subtype_get ...'
      end
      # verify the required parameter 'event_type' is set
      if @api_client.config.client_side_validation && event_type.nil?
        fail ArgumentError, "Missing the required parameter 'event_type' when calling DefaultApi.metadata_objects_documents_events_event_type_types_event_subtype_get"
      end
      # verify the required parameter 'event_subtype' is set
      if @api_client.config.client_side_validation && event_subtype.nil?
        fail ArgumentError, "Missing the required parameter 'event_subtype' when calling DefaultApi.metadata_objects_documents_events_event_type_types_event_subtype_get"
      end
      # resource path
      local_var_path = '/metadata/objects/documents/events/{event_type}/types/{event_subtype}'.sub('{' + 'event_type' + '}', CGI.escape(event_type.to_s)).sub('{' + 'event_subtype' + '}', CGI.escape(event_subtype.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_events_event_type_types_event_subtype_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_events_event_type_types_event_subtype_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Event Types and Subtypes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_events_get(opts = {})
      metadata_objects_documents_events_get_with_http_info(opts)
      nil
    end

    # Retrieve Document Event Types and Subtypes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_events_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_events_get ...'
      end
      # resource path
      local_var_path = '/metadata/objects/documents/events'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_events_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Lock Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_lock_get(opts = {})
      metadata_objects_documents_lock_get_with_http_info(opts)
      nil
    end

    # Retrieve Document Lock Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_lock_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_lock_get ...'
      end
      # resource path
      local_var_path = '/metadata/objects/documents/lock'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_lock_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_lock_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Common Document Fields
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_properties_find_common_post(opts = {})
      metadata_objects_documents_properties_find_common_post_with_http_info(opts)
      nil
    end

    # Retrieve Common Document Fields
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_properties_find_common_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_properties_find_common_post ...'
      end
      # resource path
      local_var_path = '/metadata/objects/documents/properties/find_common'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_properties_find_common_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_properties_find_common_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Document Fields
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_properties_get(opts = {})
      metadata_objects_documents_properties_get_with_http_info(opts)
      nil
    end

    # Retrieve All Document Fields
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_properties_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_properties_get ...'
      end
      # resource path
      local_var_path = '/metadata/objects/documents/properties'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_properties_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_properties_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Template Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_templates_get(opts = {})
      metadata_objects_documents_templates_get_with_http_info(opts)
      nil
    end

    # Retrieve Document Template Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_templates_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_templates_get ...'
      end
      # resource path
      local_var_path = '/metadata/objects/documents/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_templates_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Document Types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_types_get(opts = {})
      metadata_objects_documents_types_get_with_http_info(opts)
      nil
    end

    # Retrieve All Document Types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_types_get ...'
      end
      # resource path
      local_var_path = '/metadata/objects/documents/types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_types_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Type
    # @param type [String] The document type. See Retrieve Document Types.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_types_type_get(type, opts = {})
      metadata_objects_documents_types_type_get_with_http_info(type, opts)
      nil
    end

    # Retrieve Document Type
    # @param type [String] The document type. See Retrieve Document Types.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_types_type_get_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_types_type_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.metadata_objects_documents_types_type_get"
      end
      # resource path
      local_var_path = '/metadata/objects/documents/types/{type}'.sub('{' + 'type' + '}', CGI.escape(type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_types_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_types_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Type Relationships
    # @param type [String] The document type. See Retrieve Document Types.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_types_type_relationships_get(type, opts = {})
      metadata_objects_documents_types_type_relationships_get_with_http_info(type, opts)
      nil
    end

    # Retrieve Document Type Relationships
    # @param type [String] The document type. See Retrieve Document Types.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_types_type_relationships_get_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_types_type_relationships_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.metadata_objects_documents_types_type_relationships_get"
      end
      # resource path
      local_var_path = '/metadata/objects/documents/types/{type}/relationships'.sub('{' + 'type' + '}', CGI.escape(type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_types_type_relationships_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_types_type_relationships_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Classification
    # @param type [String] The document type. See Retrieve Document Types.
    # @param subtype [String] The document subtype. See Retrieve Document Types.
    # @param classification [String] The document classification. See Retrieve Document Types.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get(type, subtype, classification, opts = {})
      metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get_with_http_info(type, subtype, classification, opts)
      nil
    end

    # Retrieve Document Classification
    # @param type [String] The document type. See Retrieve Document Types.
    # @param subtype [String] The document subtype. See Retrieve Document Types.
    # @param classification [String] The document classification. See Retrieve Document Types.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get_with_http_info(type, subtype, classification, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get"
      end
      # verify the required parameter 'subtype' is set
      if @api_client.config.client_side_validation && subtype.nil?
        fail ArgumentError, "Missing the required parameter 'subtype' when calling DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get"
      end
      # verify the required parameter 'classification' is set
      if @api_client.config.client_side_validation && classification.nil?
        fail ArgumentError, "Missing the required parameter 'classification' when calling DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get"
      end
      # resource path
      local_var_path = '/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}'.sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'subtype' + '}', CGI.escape(subtype.to_s)).sub('{' + 'classification' + '}', CGI.escape(classification.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Subtype
    # @param type [String] The document type. See Retrieve Document Types.
    # @param subtype [String] The document subtype. See Retrieve Document Types.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_documents_types_type_subtypes_subtype_get(type, subtype, opts = {})
      metadata_objects_documents_types_type_subtypes_subtype_get_with_http_info(type, subtype, opts)
      nil
    end

    # Retrieve Document Subtype
    # @param type [String] The document type. See Retrieve Document Types.
    # @param subtype [String] The document subtype. See Retrieve Document Types.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_types_type_subtypes_subtype_get_with_http_info(type, subtype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_get"
      end
      # verify the required parameter 'subtype' is set
      if @api_client.config.client_side_validation && subtype.nil?
        fail ArgumentError, "Missing the required parameter 'subtype' when calling DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_get"
      end
      # resource path
      local_var_path = '/metadata/objects/documents/types/{type}/subtypes/{subtype}'.sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'subtype' + '}', CGI.escape(subtype.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_documents_types_type_subtypes_subtype_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Group Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_groups_get(opts = {})
      metadata_objects_groups_get_with_http_info(opts)
      nil
    end

    # Retrieve Group Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_groups_get ...'
      end
      # resource path
      local_var_path = '/metadata/objects/groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Security Policy Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_securitypolicies_get(opts = {})
      metadata_objects_securitypolicies_get_with_http_info(opts)
      nil
    end

    # Retrieve Security Policy Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_securitypolicies_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_securitypolicies_get ...'
      end
      # resource path
      local_var_path = '/metadata/objects/securitypolicies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_securitypolicies_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_securitypolicies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve User Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_objects_users_get(opts = {})
      metadata_objects_users_get_with_http_info(opts)
      nil
    end

    # Retrieve User Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_objects_users_get ...'
      end
      # resource path
      local_var_path = '/metadata/objects/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_objects_users_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_objects_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Archived Document Signature Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_query_archived_documents_relationships_document_signature_sysr_get(opts = {})
      metadata_query_archived_documents_relationships_document_signature_sysr_get_with_http_info(opts)
      nil
    end

    # Retrieve Archived Document Signature Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_query_archived_documents_relationships_document_signature_sysr_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_query_archived_documents_relationships_document_signature_sysr_get ...'
      end
      # resource path
      local_var_path = '/metadata/query/archived_documents/relationships/document_signature__sysr'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_query_archived_documents_relationships_document_signature_sysr_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_query_archived_documents_relationships_document_signature_sysr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Signature Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_query_documents_relationships_document_signature_sysr_get(opts = {})
      metadata_query_documents_relationships_document_signature_sysr_get_with_http_info(opts)
      nil
    end

    # Retrieve Document Signature Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_query_documents_relationships_document_signature_sysr_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_query_documents_relationships_document_signature_sysr_get ...'
      end
      # resource path
      local_var_path = '/metadata/query/documents/relationships/document_signature__sysr'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_query_documents_relationships_document_signature_sysr_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_query_documents_relationships_document_signature_sysr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Object Collection
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_vobjects_get(opts = {})
      metadata_vobjects_get_with_http_info(opts)
      nil
    end

    # Retrieve Object Collection
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_vobjects_get ...'
      end
      # resource path
      local_var_path = '/metadata/vobjects'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_vobjects_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_vobjects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel Raw Object Deployment
    # @param object_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_vobjects_object_name_actions_canceldeployment_post(object_name, opts = {})
      metadata_vobjects_object_name_actions_canceldeployment_post_with_http_info(object_name, opts)
      nil
    end

    # Cancel Raw Object Deployment
    # @param object_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_object_name_actions_canceldeployment_post_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_vobjects_object_name_actions_canceldeployment_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.metadata_vobjects_object_name_actions_canceldeployment_post"
      end
      # resource path
      local_var_path = '/metadata/vobjects/{object_name}/actions/canceldeployment'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_vobjects_object_name_actions_canceldeployment_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_vobjects_object_name_actions_canceldeployment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Object Field Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_field_name [String] The object field name value (id, name__v, external_id__v, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_vobjects_object_name_fields_object_field_name_get(object_name, object_field_name, opts = {})
      metadata_vobjects_object_name_fields_object_field_name_get_with_http_info(object_name, object_field_name, opts)
      nil
    end

    # Retrieve Object Field Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_field_name [String] The object field name value (id, name__v, external_id__v, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_object_name_fields_object_field_name_get_with_http_info(object_name, object_field_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_vobjects_object_name_fields_object_field_name_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.metadata_vobjects_object_name_fields_object_field_name_get"
      end
      # verify the required parameter 'object_field_name' is set
      if @api_client.config.client_side_validation && object_field_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_field_name' when calling DefaultApi.metadata_vobjects_object_name_fields_object_field_name_get"
      end
      # resource path
      local_var_path = '/metadata/vobjects/{object_name}/fields/{object_field_name}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_field_name' + '}', CGI.escape(object_field_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_vobjects_object_name_fields_object_field_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_vobjects_object_name_fields_object_field_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Object Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_vobjects_object_name_get(object_name, opts = {})
      metadata_vobjects_object_name_get_with_http_info(object_name, opts)
      nil
    end

    # Retrieve Object Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_object_name_get_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_vobjects_object_name_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.metadata_vobjects_object_name_get"
      end
      # resource path
      local_var_path = '/metadata/vobjects/{object_name}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_vobjects_object_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_vobjects_object_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Page Layouts
    # @param object_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_vobjects_object_name_page_layouts_get(object_name, opts = {})
      metadata_vobjects_object_name_page_layouts_get_with_http_info(object_name, opts)
      nil
    end

    # Retrieve Page Layouts
    # @param object_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_object_name_page_layouts_get_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_vobjects_object_name_page_layouts_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.metadata_vobjects_object_name_page_layouts_get"
      end
      # resource path
      local_var_path = '/metadata/vobjects/{object_name}/page_layouts'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_vobjects_object_name_page_layouts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_vobjects_object_name_page_layouts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Page Layout Metadata
    # @param object_name [String] The name of the object from which to retrieve page layout metadata.
    # @param layout_name [String] The name of the page layout from which to retrieve metadata.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def metadata_vobjects_object_name_page_layouts_layout_name_get(object_name, layout_name, opts = {})
      metadata_vobjects_object_name_page_layouts_layout_name_get_with_http_info(object_name, layout_name, opts)
      nil
    end

    # Retrieve Page Layout Metadata
    # @param object_name [String] The name of the object from which to retrieve page layout metadata.
    # @param layout_name [String] The name of the page layout from which to retrieve metadata.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_object_name_page_layouts_layout_name_get_with_http_info(object_name, layout_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.metadata_vobjects_object_name_page_layouts_layout_name_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.metadata_vobjects_object_name_page_layouts_layout_name_get"
      end
      # verify the required parameter 'layout_name' is set
      if @api_client.config.client_side_validation && layout_name.nil?
        fail ArgumentError, "Missing the required parameter 'layout_name' when calling DefaultApi.metadata_vobjects_object_name_page_layouts_layout_name_get"
      end
      # resource path
      local_var_path = '/metadata/vobjects/{object_name}/page_layouts/{layout_name}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'layout_name' + '}', CGI.escape(layout_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.metadata_vobjects_object_name_page_layouts_layout_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#metadata_vobjects_object_name_page_layouts_layout_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Email Notification Histories
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
    # @option opts [String] :end_date Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
    # @option opts [Boolean] :all_dates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
    # @option opts [String] :format_result To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
    # @option opts [String] :limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def notifications_histories_get(opts = {})
      notifications_histories_get_with_http_info(opts)
      nil
    end

    # Retrieve Email Notification Histories
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
    # @option opts [String] :end_date Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
    # @option opts [Boolean] :all_dates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
    # @option opts [String] :format_result To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
    # @option opts [String] :limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notifications_histories_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notifications_histories_get ...'
      end
      # resource path
      local_var_path = '/notifications/histories'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'all_dates'] = opts[:'all_dates'] if !opts[:'all_dates'].nil?
      query_params[:'format_result'] = opts[:'format_result'] if !opts[:'format_result'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.notifications_histories_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notifications_histories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Bulk Workflow Action Details
    # @param action [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def object_workflow_actions_action_get(action, opts = {})
      object_workflow_actions_action_get_with_http_info(action, opts)
      nil
    end

    # Retrieve Bulk Workflow Action Details
    # @param action [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_action_get_with_http_info(action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.object_workflow_actions_action_get ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DefaultApi.object_workflow_actions_action_get"
      end
      # resource path
      local_var_path = '/object/workflow/actions/{action}'.sub('{' + 'action' + '}', CGI.escape(action.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.object_workflow_actions_action_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#object_workflow_actions_action_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Workflow Actions on Multiple Workflows
    # @param action [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def object_workflow_actions_action_post(action, opts = {})
      object_workflow_actions_action_post_with_http_info(action, opts)
      nil
    end

    # Initiate Workflow Actions on Multiple Workflows
    # @param action [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_action_post_with_http_info(action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.object_workflow_actions_action_post ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DefaultApi.object_workflow_actions_action_post"
      end
      # resource path
      local_var_path = '/object/workflow/actions/{action}'.sub('{' + 'action' + '}', CGI.escape(action.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.object_workflow_actions_action_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#object_workflow_actions_action_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel Workflow Tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def object_workflow_actions_canceltasks_post(opts = {})
      object_workflow_actions_canceltasks_post_with_http_info(opts)
      nil
    end

    # Cancel Workflow Tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_canceltasks_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.object_workflow_actions_canceltasks_post ...'
      end
      # resource path
      local_var_path = '/object/workflow/actions/canceltasks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.object_workflow_actions_canceltasks_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#object_workflow_actions_canceltasks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel Workflows
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def object_workflow_actions_cancelworkflows_post(opts = {})
      object_workflow_actions_cancelworkflows_post_with_http_info(opts)
      nil
    end

    # Cancel Workflows
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_cancelworkflows_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.object_workflow_actions_cancelworkflows_post ...'
      end
      # resource path
      local_var_path = '/object/workflow/actions/cancelworkflows'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.object_workflow_actions_cancelworkflows_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#object_workflow_actions_cancelworkflows_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Bulk Workflow Actions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def object_workflow_actions_get(opts = {})
      object_workflow_actions_get_with_http_info(opts)
      nil
    end

    # Retrieve Bulk Workflow Actions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.object_workflow_actions_get ...'
      end
      # resource path
      local_var_path = '/object/workflow/actions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.object_workflow_actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#object_workflow_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reassign Workflow Tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def object_workflow_actions_reassigntasks_post(opts = {})
      object_workflow_actions_reassigntasks_post_with_http_info(opts)
      nil
    end

    # Reassign Workflow Tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_reassigntasks_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.object_workflow_actions_reassigntasks_post ...'
      end
      # resource path
      local_var_path = '/object/workflow/actions/reassigntasks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.object_workflow_actions_reassigntasks_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#object_workflow_actions_reassigntasks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace Workflow Owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def object_workflow_actions_replaceworkflowowner_post(opts = {})
      object_workflow_actions_replaceworkflowowner_post_with_http_info(opts)
      nil
    end

    # Replace Workflow Owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_replaceworkflowowner_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.object_workflow_actions_replaceworkflowowner_post ...'
      end
      # resource path
      local_var_path = '/object/workflow/actions/replaceworkflowowner'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.object_workflow_actions_replaceworkflowowner_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#object_workflow_actions_replaceworkflowowner_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder Export Results
    # @param job_id [String] The id value of the requested export job. This is returned with the export binder requests above.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_actions_export_job_id_results_get(job_id, opts = {})
      objects_binders_actions_export_job_id_results_get_with_http_info(job_id, opts)
      nil
    end

    # Retrieve Binder Export Results
    # @param job_id [String] The id value of the requested export job. This is returned with the export binder requests above.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_actions_export_job_id_results_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_actions_export_job_id_results_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.objects_binders_actions_export_job_id_results_get"
      end
      # resource path
      local_var_path = '/objects/binders/actions/export/{job_id}/results'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_actions_export_job_id_results_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_actions_export_job_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export Binder (Latest Version)
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :source to include source content or not
    # @option opts [String] :renditiontype to include viewable renditions
    # @option opts [String] :docversion to include all major versions
    # @option opts [String] :attachments to include all versions of attachments
    # @option opts [String] :export configurable filename metadata
    # @option opts [Boolean] :docfield to exclude document metadata csv
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_actions_export_post(binder_id, opts = {})
      objects_binders_binder_id_actions_export_post_with_http_info(binder_id, opts)
      nil
    end

    # Export Binder (Latest Version)
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :source to include source content or not
    # @option opts [String] :renditiontype to include viewable renditions
    # @option opts [String] :docversion to include all major versions
    # @option opts [String] :attachments to include all versions of attachments
    # @option opts [String] :export configurable filename metadata
    # @option opts [Boolean] :docfield to exclude document metadata csv
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_actions_export_post_with_http_info(binder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_actions_export_post ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_actions_export_post"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/actions/export'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'renditiontype'] = opts[:'renditiontype'] if !opts[:'renditiontype'].nil?
      query_params[:'docversion'] = opts[:'docversion'] if !opts[:'docversion'].nil?
      query_params[:'attachments'] = opts[:'attachments'] if !opts[:'attachments'].nil?
      query_params[:'export'] = opts[:'export'] if !opts[:'export'].nil?
      query_params[:'docfield'] = opts[:'docfield'] if !opts[:'docfield'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_actions_export_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_actions_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh Binder Auto-Filing
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_actions_post(binder_id, opts = {})
      objects_binders_binder_id_actions_post_with_http_info(binder_id, opts)
      nil
    end

    # Refresh Binder Auto-Filing
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_actions_post_with_http_info(binder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_actions_post ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_actions_post"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/actions'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_actions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_actions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Binding Rule
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_binding_rule_put(binder_id, opts = {})
      objects_binders_binder_id_binding_rule_put_with_http_info(binder_id, opts)
      nil
    end

    # Update Binding Rule
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_binding_rule_put_with_http_info(binder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_binding_rule_put ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_binding_rule_put"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/binding_rule'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_binding_rule_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_binding_rule_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Binder
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_delete(binder_id, opts = {})
      objects_binders_binder_id_delete_with_http_info(binder_id, opts)
      nil
    end

    # Delete Binder
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_delete_with_http_info(binder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_delete ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_delete"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Binder Document Binding Rule
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_documents_node_id_binding_rule_put(binder_id, node_id, opts = {})
      objects_binders_binder_id_documents_node_id_binding_rule_put_with_http_info(binder_id, node_id, opts)
      nil
    end

    # Update Binder Document Binding Rule
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_documents_node_id_binding_rule_put_with_http_info(binder_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_documents_node_id_binding_rule_put ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_documents_node_id_binding_rule_put"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling DefaultApi.objects_binders_binder_id_documents_node_id_binding_rule_put"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/documents/{node_id}/binding_rule'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'node_id' + '}', CGI.escape(node_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_documents_node_id_binding_rule_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_documents_node_id_binding_rule_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Document to Binder
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_documents_post(binder_id, opts = {})
      objects_binders_binder_id_documents_post_with_http_info(binder_id, opts)
      nil
    end

    # Add Document to Binder
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_documents_post_with_http_info(binder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_documents_post ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_documents_post"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/documents'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_documents_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_documents_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Document from Binder
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_documents_section_id_delete(binder_id, section_id, opts = {})
      objects_binders_binder_id_documents_section_id_delete_with_http_info(binder_id, section_id, opts)
      nil
    end

    # Remove Document from Binder
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_documents_section_id_delete_with_http_info(binder_id, section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_documents_section_id_delete ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_documents_section_id_delete"
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling DefaultApi.objects_binders_binder_id_documents_section_id_delete"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/documents/{section_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'section_id' + '}', CGI.escape(section_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_documents_section_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_documents_section_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move Document in Binder
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_documents_section_id_put(binder_id, section_id, opts = {})
      objects_binders_binder_id_documents_section_id_put_with_http_info(binder_id, section_id, opts)
      nil
    end

    # Move Document in Binder
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_documents_section_id_put_with_http_info(binder_id, section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_documents_section_id_put ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_documents_section_id_put"
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling DefaultApi.objects_binders_binder_id_documents_section_id_put"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/documents/{section_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'section_id' + '}', CGI.escape(section_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_documents_section_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_documents_section_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_get(binder_id, opts = {})
      objects_binders_binder_id_get_with_http_info(binder_id, opts)
      nil
    end

    # Retrieve Binder
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_get_with_http_info(binder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_get ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_get"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'depth'] = opts[:'depth'] if !opts[:'depth'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Binder Version
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_post(binder_id, opts = {})
      objects_binders_binder_id_post_with_http_info(binder_id, opts)
      nil
    end

    # Create Binder Version
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_post_with_http_info(binder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_post ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_post"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Binder
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_put(binder_id, opts = {})
      objects_binders_binder_id_put_with_http_info(binder_id, opts)
      nil
    end

    # Update Binder
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_put_with_http_info(binder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_put ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_put"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Users & Groups from Roles on a Single Binder
    # @param binder_id [String] The id value of the binder from which to remove roles.
    # @param role_name_and_user_or_group [String] The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
    # @param id [String] The id value of the user or group to remove from the role.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete(binder_id, role_name_and_user_or_group, id, opts = {})
      objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete_with_http_info(binder_id, role_name_and_user_or_group, id, opts)
      nil
    end

    # Remove Users &amp; Groups from Roles on a Single Binder
    # @param binder_id [String] The id value of the binder from which to remove roles.
    # @param role_name_and_user_or_group [String] The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
    # @param id [String] The id value of the user or group to remove from the role.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete_with_http_info(binder_id, role_name_and_user_or_group, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete"
      end
      # verify the required parameter 'role_name_and_user_or_group' is set
      if @api_client.config.client_side_validation && role_name_and_user_or_group.nil?
        fail ArgumentError, "Missing the required parameter 'role_name_and_user_or_group' when calling DefaultApi.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'role_name_and_user_or_group' + '}', CGI.escape(role_name_and_user_or_group.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Binder Section Binding Rule
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_sections_node_id_binding_rule_put(binder_id, node_id, opts = {})
      objects_binders_binder_id_sections_node_id_binding_rule_put_with_http_info(binder_id, node_id, opts)
      nil
    end

    # Update Binder Section Binding Rule
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_sections_node_id_binding_rule_put_with_http_info(binder_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_sections_node_id_binding_rule_put ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_sections_node_id_binding_rule_put"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling DefaultApi.objects_binders_binder_id_sections_node_id_binding_rule_put"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/sections/{node_id}/binding_rule'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'node_id' + '}', CGI.escape(node_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_sections_node_id_binding_rule_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_sections_node_id_binding_rule_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Binder Section
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id of the section.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_sections_node_id_put(binder_id, node_id, opts = {})
      objects_binders_binder_id_sections_node_id_put_with_http_info(binder_id, node_id, opts)
      nil
    end

    # Update Binder Section
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id of the section.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_sections_node_id_put_with_http_info(binder_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_sections_node_id_put ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_sections_node_id_put"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling DefaultApi.objects_binders_binder_id_sections_node_id_put"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/sections/{node_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'node_id' + '}', CGI.escape(node_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_sections_node_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_sections_node_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Binder Section
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_sections_post(binder_id, opts = {})
      objects_binders_binder_id_sections_post_with_http_info(binder_id, opts)
      nil
    end

    # Create Binder Section
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_sections_post_with_http_info(binder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_sections_post ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_sections_post"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/sections'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_sections_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_sections_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Binder Section
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_sections_section_id_delete(binder_id, section_id, opts = {})
      objects_binders_binder_id_sections_section_id_delete_with_http_info(binder_id, section_id, opts)
      nil
    end

    # Delete Binder Section
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_sections_section_id_delete_with_http_info(binder_id, section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_sections_section_id_delete ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_sections_section_id_delete"
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling DefaultApi.objects_binders_binder_id_sections_section_id_delete"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/sections/{section_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'section_id' + '}', CGI.escape(section_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_sections_section_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_sections_section_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder Sections
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_sections_section_id_get(binder_id, section_id, opts = {})
      objects_binders_binder_id_sections_section_id_get_with_http_info(binder_id, section_id, opts)
      nil
    end

    # Retrieve Binder Sections
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_sections_section_id_get_with_http_info(binder_id, section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_sections_section_id_get ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_sections_section_id_get"
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling DefaultApi.objects_binders_binder_id_sections_section_id_get"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/sections/{section_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'section_id' + '}', CGI.escape(section_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_sections_section_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_sections_section_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Binder Versions
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_versions_get(binder_id, opts = {})
      objects_binders_binder_id_versions_get_with_http_info(binder_id, opts)
      nil
    end

    # Retrieve All Binder Versions
    # @param binder_id [String] The binder id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_get_with_http_info(binder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_versions_get ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_get"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/versions'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_versions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export Binder (Specific Version)
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :source to include source content or not
    # @option opts [String] :renditiontype to include viewable renditions
    # @option opts [String] :docversion to include all major versions
    # @option opts [String] :attachments to include all versions of attachments
    # @option opts [String] :export configurable filename metadata
    # @option opts [Boolean] :docfield to exclude document metadata csv
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_actions_export_post(binder_id, major_version, minor_version, opts = {})
      objects_binders_binder_id_versions_major_version_minor_version_actions_export_post_with_http_info(binder_id, major_version, minor_version, opts)
      nil
    end

    # Export Binder (Specific Version)
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :source to include source content or not
    # @option opts [String] :renditiontype to include viewable renditions
    # @option opts [String] :docversion to include all major versions
    # @option opts [String] :attachments to include all versions of attachments
    # @option opts [String] :export configurable filename metadata
    # @option opts [Boolean] :docfield to exclude document metadata csv
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_actions_export_post_with_http_info(binder_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'renditiontype'] = opts[:'renditiontype'] if !opts[:'renditiontype'].nil?
      query_params[:'docversion'] = opts[:'docversion'] if !opts[:'docversion'].nil?
      query_params[:'attachments'] = opts[:'attachments'] if !opts[:'attachments'].nil?
      query_params[:'export'] = opts[:'export'] if !opts[:'export'].nil?
      query_params[:'docfield'] = opts[:'docfield'] if !opts[:'docfield'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_actions_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_delete(binder_id, major_version, minor_version, opts = {})
      objects_binders_binder_id_versions_major_version_minor_version_delete_with_http_info(binder_id, major_version, minor_version, opts)
      nil
    end

    # Delete Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_delete_with_http_info(binder_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_delete ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_delete"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_delete"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_delete"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_get(binder_id, major_version, minor_version, opts = {})
      objects_binders_binder_id_versions_major_version_minor_version_get_with_http_info(binder_id, major_version, minor_version, opts)
      nil
    end

    # Retrieve Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_get_with_http_info(binder_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_get ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_get"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_put(binder_id, major_version, minor_version, opts = {})
      objects_binders_binder_id_versions_major_version_minor_version_put_with_http_info(binder_id, major_version, minor_version, opts)
      nil
    end

    # Update Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_put_with_http_info(binder_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_put ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_put"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_put"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_put"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_post(binder_id, major_version, minor_version, opts = {})
      objects_binders_binder_id_versions_major_version_minor_version_relationships_post_with_http_info(binder_id, major_version, minor_version, opts)
      nil
    end

    # Create Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_post_with_http_info(binder_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_post ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_post"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_post"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_post"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_relationships_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param relationship_id [String] The binder relationship id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete(binder_id, major_version, minor_version, relationship_id, opts = {})
      objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(binder_id, major_version, minor_version, relationship_id, opts)
      nil
    end

    # Delete Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param relationship_id [String] The binder relationship id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(binder_id, major_version, minor_version, relationship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete"
      end
      # verify the required parameter 'relationship_id' is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'relationship_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'relationship_id' + '}', CGI.escape(relationship_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param relationship_id [String] The binder relationship id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get(binder_id, major_version, minor_version, relationship_id, opts = {})
      objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(binder_id, major_version, minor_version, relationship_id, opts)
      nil
    end

    # Retrieve Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param relationship_id [String] The binder relationship id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(binder_id, major_version, minor_version, relationship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get"
      end
      # verify the required parameter 'relationship_id' is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'relationship_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'relationship_id' + '}', CGI.escape(relationship_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder Version Section
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param section_id [String] Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get(binder_id, major_version, minor_version, section_id, opts = {})
      objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get_with_http_info(binder_id, major_version, minor_version, section_id, opts)
      nil
    end

    # Retrieve Binder Version Section
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param section_id [String] Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get_with_http_info(binder_id, major_version, minor_version, section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get ...'
      end
      # verify the required parameter 'binder_id' is set
      if @api_client.config.client_side_validation && binder_id.nil?
        fail ArgumentError, "Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get"
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get"
      end
      # resource path
      local_var_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}'.sub('{' + 'binder_id' + '}', CGI.escape(binder_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'section_id' + '}', CGI.escape(section_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Binder Roles
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_id_roles_get(id, opts = {})
      objects_binders_id_roles_get_with_http_info(id, opts)
      nil
    end

    # Retrieve All Binder Roles
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_roles_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_id_roles_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_roles_get"
      end
      # resource path
      local_var_path = '/objects/binders/{id}/roles'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_id_roles_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_id_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign Users & Groups to Roles on a Single Binder
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_id_roles_post(id, opts = {})
      objects_binders_id_roles_post_with_http_info(id, opts)
      nil
    end

    # Assign Users &amp; Groups to Roles on a Single Binder
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_roles_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_id_roles_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_roles_post"
      end
      # resource path
      local_var_path = '/objects/binders/{id}/roles'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_id_roles_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_id_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Role
    # @param id [String] The binder &#x60;id&#x60;.
    # @param role_name [String] The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_id_roles_role_name_get(id, role_name, opts = {})
      objects_binders_id_roles_role_name_get_with_http_info(id, role_name, opts)
      nil
    end

    # Retrieve Document Role
    # @param id [String] The binder &#x60;id&#x60;.
    # @param role_name [String] The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_roles_role_name_get_with_http_info(id, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_id_roles_role_name_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_roles_role_name_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling DefaultApi.objects_binders_id_roles_role_name_get"
      end
      # resource path
      local_var_path = '/objects/binders/{id}/roles/{role_name}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role_name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_id_roles_role_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_id_roles_role_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder User Actions
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get(id, major_version, minor_version, opts = {})
      objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id, major_version, minor_version, opts)
      nil
    end

    # Retrieve Binder User Actions
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get"
      end
      # resource path
      local_var_path = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder Entry Criteria
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @param name__v [String] The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get(id, major_version, minor_version, name__v, opts = {})
      objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id, major_version, minor_version, name__v, opts)
      nil
    end

    # Retrieve Binder Entry Criteria
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @param name__v [String] The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id, major_version, minor_version, name__v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get"
      end
      # verify the required parameter 'name__v' is set
      if @api_client.config.client_side_validation && name__v.nil?
        fail ArgumentError, "Missing the required parameter 'name__v' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get"
      end
      # resource path
      local_var_path = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'name__v' + '}', CGI.escape(name__v.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Binder User Action
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @param name__v [String] The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put(id, major_version, minor_version, name__v, opts = {})
      objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id, major_version, minor_version, name__v, opts)
      nil
    end

    # Initiate Binder User Action
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @param name__v [String] The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id, major_version, minor_version, name__v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put"
      end
      # verify the required parameter 'name__v' is set
      if @api_client.config.client_side_validation && name__v.nil?
        fail ArgumentError, "Missing the required parameter 'name__v' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put"
      end
      # resource path
      local_var_path = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'name__v' + '}', CGI.escape(name__v.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve User Actions on Multiple Binders
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_lifecycle_actions_post(opts = {})
      objects_binders_lifecycle_actions_post_with_http_info(opts)
      nil
    end

    # Retrieve User Actions on Multiple Binders
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_lifecycle_actions_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_lifecycle_actions_post ...'
      end
      # resource path
      local_var_path = '/objects/binders/lifecycle_actions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_lifecycle_actions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_lifecycle_actions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Bulk Binder User Actions
    # @param user_action_name [String] The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_lifecycle_actions_user_action_name_put(user_action_name, opts = {})
      objects_binders_lifecycle_actions_user_action_name_put_with_http_info(user_action_name, opts)
      nil
    end

    # Initiate Bulk Binder User Actions
    # @param user_action_name [String] The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_lifecycle_actions_user_action_name_put_with_http_info(user_action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_lifecycle_actions_user_action_name_put ...'
      end
      # verify the required parameter 'user_action_name' is set
      if @api_client.config.client_side_validation && user_action_name.nil?
        fail ArgumentError, "Missing the required parameter 'user_action_name' when calling DefaultApi.objects_binders_lifecycle_actions_user_action_name_put"
      end
      # resource path
      local_var_path = '/objects/binders/lifecycle_actions/{user_action_name}'.sub('{' + 'user_action_name' + '}', CGI.escape(user_action_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_lifecycle_actions_user_action_name_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_lifecycle_actions_user_action_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Binder
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_post(opts = {})
      objects_binders_post_with_http_info(opts)
      nil
    end

    # Create Binder
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_post ...'
      end
      # resource path
      local_var_path = '/objects/binders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'async'] = opts[:'async'] if !opts[:'async'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder Template Collection
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_templates_get(opts = {})
      objects_binders_templates_get_with_http_info(opts)
      nil
    end

    # Retrieve Binder Template Collection
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_templates_get ...'
      end
      # resource path
      local_var_path = '/objects/binders/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_templates_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Binder Template
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_templates_post(opts = {})
      objects_binders_templates_post_with_http_info(opts)
      nil
    end

    # Create Binder Template
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_templates_post ...'
      end
      # resource path
      local_var_path = '/objects/binders/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_templates_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_templates_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Binder Template
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_templates_put(opts = {})
      objects_binders_templates_put_with_http_info(opts)
      nil
    end

    # Update Binder Template
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_templates_put ...'
      end
      # resource path
      local_var_path = '/objects/binders/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_templates_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_templates_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder Template Node Attributes
    # @param template_name [String] The binder template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_templates_template_name_bindernodes_get(template_name, opts = {})
      objects_binders_templates_template_name_bindernodes_get_with_http_info(template_name, opts)
      nil
    end

    # Retrieve Binder Template Node Attributes
    # @param template_name [String] The binder template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_template_name_bindernodes_get_with_http_info(template_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_templates_template_name_bindernodes_get ...'
      end
      # verify the required parameter 'template_name' is set
      if @api_client.config.client_side_validation && template_name.nil?
        fail ArgumentError, "Missing the required parameter 'template_name' when calling DefaultApi.objects_binders_templates_template_name_bindernodes_get"
      end
      # resource path
      local_var_path = '/objects/binders/templates/{template_name}/bindernodes'.sub('{' + 'template_name' + '}', CGI.escape(template_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_templates_template_name_bindernodes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_templates_template_name_bindernodes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Binder Template Node
    # @param template_name [String] The binder template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_templates_template_name_bindernodes_post(template_name, opts = {})
      objects_binders_templates_template_name_bindernodes_post_with_http_info(template_name, opts)
      nil
    end

    # Create Binder Template Node
    # @param template_name [String] The binder template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_template_name_bindernodes_post_with_http_info(template_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_templates_template_name_bindernodes_post ...'
      end
      # verify the required parameter 'template_name' is set
      if @api_client.config.client_side_validation && template_name.nil?
        fail ArgumentError, "Missing the required parameter 'template_name' when calling DefaultApi.objects_binders_templates_template_name_bindernodes_post"
      end
      # resource path
      local_var_path = '/objects/binders/templates/{template_name}/bindernodes'.sub('{' + 'template_name' + '}', CGI.escape(template_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_templates_template_name_bindernodes_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_templates_template_name_bindernodes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace Binder Template Nodes
    # @param template_name [String] The binder template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_templates_template_name_bindernodes_put(template_name, opts = {})
      objects_binders_templates_template_name_bindernodes_put_with_http_info(template_name, opts)
      nil
    end

    # Replace Binder Template Nodes
    # @param template_name [String] The binder template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_template_name_bindernodes_put_with_http_info(template_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_templates_template_name_bindernodes_put ...'
      end
      # verify the required parameter 'template_name' is set
      if @api_client.config.client_side_validation && template_name.nil?
        fail ArgumentError, "Missing the required parameter 'template_name' when calling DefaultApi.objects_binders_templates_template_name_bindernodes_put"
      end
      # resource path
      local_var_path = '/objects/binders/templates/{template_name}/bindernodes'.sub('{' + 'template_name' + '}', CGI.escape(template_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_templates_template_name_bindernodes_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_templates_template_name_bindernodes_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Binder Template
    # @param template_name [String] The binder template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_templates_template_name_delete(template_name, opts = {})
      objects_binders_templates_template_name_delete_with_http_info(template_name, opts)
      nil
    end

    # Delete Binder Template
    # @param template_name [String] The binder template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_template_name_delete_with_http_info(template_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_templates_template_name_delete ...'
      end
      # verify the required parameter 'template_name' is set
      if @api_client.config.client_side_validation && template_name.nil?
        fail ArgumentError, "Missing the required parameter 'template_name' when calling DefaultApi.objects_binders_templates_template_name_delete"
      end
      # resource path
      local_var_path = '/objects/binders/templates/{template_name}'.sub('{' + 'template_name' + '}', CGI.escape(template_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_templates_template_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_templates_template_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Binder Template Attributes
    # @param template_name [String] The binder template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_binders_templates_template_name_get(template_name, opts = {})
      objects_binders_templates_template_name_get_with_http_info(template_name, opts)
      nil
    end

    # Retrieve Binder Template Attributes
    # @param template_name [String] The binder template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_template_name_get_with_http_info(template_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_binders_templates_template_name_get ...'
      end
      # verify the required parameter 'template_name' is set
      if @api_client.config.client_side_validation && template_name.nil?
        fail ArgumentError, "Missing the required parameter 'template_name' when calling DefaultApi.objects_binders_templates_template_name_get"
      end
      # resource path
      local_var_path = '/objects/binders/templates/{template_name}'.sub('{' + 'template_name' + '}', CGI.escape(template_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_binders_templates_template_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_binders_templates_template_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Deleted Document IDs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
    # @option opts [String] :end_date Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_deletions_documents_get(opts = {})
      objects_deletions_documents_get_with_http_info(opts)
      nil
    end

    # Retrieve Deleted Document IDs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
    # @option opts [String] :end_date Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_deletions_documents_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_deletions_documents_get ...'
      end
      # resource path
      local_var_path = '/objects/deletions/documents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_deletions_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_deletions_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Deleted Object Record ID
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_deletions_vobjects_object_name_get(object_name, opts = {})
      objects_deletions_vobjects_object_name_get_with_http_info(object_name, opts)
      nil
    end

    # Retrieve Deleted Object Record ID
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_deletions_vobjects_object_name_get_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_deletions_vobjects_object_name_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.objects_deletions_vobjects_object_name_get"
      end
      # resource path
      local_var_path = '/objects/deletions/vobjects/{object_name}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_deletions_vobjects_object_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_deletions_vobjects_object_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Document Workflows
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc When localized (translated) strings are available, retrieve them by setting loc to true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_actions_get(opts = {})
      objects_documents_actions_get_with_http_info(opts)
      nil
    end

    # Retrieve All Document Workflows
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc When localized (translated) strings are available, retrieve them by setting loc to true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_actions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_actions_get ...'
      end
      # resource path
      local_var_path = '/objects/documents/actions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Controlled Copy Job Results
    # @param lifecycle_and_state_and_action [String] The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get(lifecycle_and_state_and_action, job_id, opts = {})
      objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get_with_http_info(lifecycle_and_state_and_action, job_id, opts)
      nil
    end

    # Download Controlled Copy Job Results
    # @param lifecycle_and_state_and_action [String] The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get_with_http_info(lifecycle_and_state_and_action, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get ...'
      end
      # verify the required parameter 'lifecycle_and_state_and_action' is set
      if @api_client.config.client_side_validation && lifecycle_and_state_and_action.nil?
        fail ArgumentError, "Missing the required parameter 'lifecycle_and_state_and_action' when calling DefaultApi.objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get"
      end
      # resource path
      local_var_path = '/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results'.sub('{' + 'lifecycle_and_state_and_action' + '}', CGI.escape(lifecycle_and_state_and_action.to_s)).sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Workflow Details
    # @param workflow_name [String] The document workflow name value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc When localized (translated) strings are available, retrieve them by setting loc to true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_actions_workflow_name_get(workflow_name, opts = {})
      objects_documents_actions_workflow_name_get_with_http_info(workflow_name, opts)
      nil
    end

    # Retrieve Document Workflow Details
    # @param workflow_name [String] The document workflow name value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc When localized (translated) strings are available, retrieve them by setting loc to true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_actions_workflow_name_get_with_http_info(workflow_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_actions_workflow_name_get ...'
      end
      # verify the required parameter 'workflow_name' is set
      if @api_client.config.client_side_validation && workflow_name.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_name' when calling DefaultApi.objects_documents_actions_workflow_name_get"
      end
      # resource path
      local_var_path = '/objects/documents/actions/{workflow_name}'.sub('{' + 'workflow_name' + '}', CGI.escape(workflow_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_actions_workflow_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_actions_workflow_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Document Workflow
    # @param workflow_name [String] The document workflow name value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_actions_workflow_name_post(workflow_name, opts = {})
      objects_documents_actions_workflow_name_post_with_http_info(workflow_name, opts)
      nil
    end

    # Initiate Document Workflow
    # @param workflow_name [String] The document workflow name value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_actions_workflow_name_post_with_http_info(workflow_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_actions_workflow_name_post ...'
      end
      # verify the required parameter 'workflow_name' is set
      if @api_client.config.client_side_validation && workflow_name.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_name' when calling DefaultApi.objects_documents_actions_workflow_name_post"
      end
      # resource path
      local_var_path = '/objects/documents/actions/{workflow_name}'.sub('{' + 'workflow_name' + '}', CGI.escape(workflow_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_actions_workflow_name_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_actions_workflow_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Annotations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_annotations_batch_delete(opts = {})
      objects_documents_annotations_batch_delete_with_http_info(opts)
      nil
    end

    # Delete Annotations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_annotations_batch_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_annotations_batch_delete ...'
      end
      # resource path
      local_var_path = '/objects/documents/annotations/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_annotations_batch_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_annotations_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Multiple Annotations
    # @param authorization [String] 
    # @param content_type [String] 
    # @param accept [String] 
    # @param x_vault_api_client_id [String] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def objects_documents_annotations_batch_post(authorization, content_type, accept, x_vault_api_client_id, opts = {})
      objects_documents_annotations_batch_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, opts)
      nil
    end

    # Create Multiple Annotations
    # @param authorization [String] 
    # @param content_type [String] 
    # @param accept [String] 
    # @param x_vault_api_client_id [String] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_annotations_batch_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_annotations_batch_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.objects_documents_annotations_batch_post"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 0
        fail ArgumentError, 'invalid value for "authorization" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be smaller than or equal to 0.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be greater than or equal to 0.'
      end

      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling DefaultApi.objects_documents_annotations_batch_post"
      end
      if @api_client.config.client_side_validation && content_type.to_s.length > 0
        fail ArgumentError, 'invalid value for "content_type" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be smaller than or equal to 0.'
      end

      if @api_client.config.client_side_validation && content_type.to_s.length < 0
        fail ArgumentError, 'invalid value for "content_type" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be greater than or equal to 0.'
      end

      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling DefaultApi.objects_documents_annotations_batch_post"
      end
      if @api_client.config.client_side_validation && accept.to_s.length > 0
        fail ArgumentError, 'invalid value for "accept" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be smaller than or equal to 0.'
      end

      if @api_client.config.client_side_validation && accept.to_s.length < 0
        fail ArgumentError, 'invalid value for "accept" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be greater than or equal to 0.'
      end

      # verify the required parameter 'x_vault_api_client_id' is set
      if @api_client.config.client_side_validation && x_vault_api_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vault_api_client_id' when calling DefaultApi.objects_documents_annotations_batch_post"
      end
      if @api_client.config.client_side_validation && x_vault_api_client_id.to_s.length > 0
        fail ArgumentError, 'invalid value for "x_vault_api_client_id" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be smaller than or equal to 0.'
      end

      if @api_client.config.client_side_validation && x_vault_api_client_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "x_vault_api_client_id" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/objects/documents/annotations/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = authorization
      header_params[:'Content-Type'] = content_type
      header_params[:'Accept'] = accept
      header_params[:'X-VaultAPI-ClientID'] = x_vault_api_client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_annotations_batch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_annotations_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Annotations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_annotations_batch_put(opts = {})
      objects_documents_annotations_batch_put_with_http_info(opts)
      nil
    end

    # Update Annotations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_annotations_batch_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_annotations_batch_put ...'
      end
      # resource path
      local_var_path = '/objects/documents/annotations/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_annotations_batch_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_annotations_batch_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Annotation Replies
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_annotations_replies_batch_post(opts = {})
      objects_documents_annotations_replies_batch_post_with_http_info(opts)
      nil
    end

    # Add Annotation Replies
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_annotations_replies_batch_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_annotations_replies_batch_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/annotations/replies/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_annotations_replies_batch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_annotations_replies_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Multiple Document Attachments
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_attachments_batch_delete(opts = {})
      objects_documents_attachments_batch_delete_with_http_info(opts)
      nil
    end

    # Delete Multiple Document Attachments
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_attachments_batch_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_attachments_batch_delete ...'
      end
      # resource path
      local_var_path = '/objects/documents/attachments/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_attachments_batch_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_attachments_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Multiple Document Attachments
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_attachments_batch_post(opts = {})
      objects_documents_attachments_batch_post_with_http_info(opts)
      nil
    end

    # Create Multiple Document Attachments
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_attachments_batch_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_attachments_batch_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/attachments/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_attachments_batch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_attachments_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Multiple Document Attachment Descriptions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_attachments_batch_put(opts = {})
      objects_documents_attachments_batch_put_with_http_info(opts)
      nil
    end

    # Update Multiple Document Attachment Descriptions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_attachments_batch_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_attachments_batch_put ...'
      end
      # resource path
      local_var_path = '/objects/documents/attachments/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_attachments_batch_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_attachments_batch_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Export Results
    # @param job_id [String] The id value of the requested export job. This is returned with the export document requests.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_batch_actions_fileextract_job_id_results_get(job_id, opts = {})
      objects_documents_batch_actions_fileextract_job_id_results_get_with_http_info(job_id, opts)
      nil
    end

    # Retrieve Document Export Results
    # @param job_id [String] The id value of the requested export job. This is returned with the export document requests.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_actions_fileextract_job_id_results_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_batch_actions_fileextract_job_id_results_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.objects_documents_batch_actions_fileextract_job_id_results_get"
      end
      # resource path
      local_var_path = '/objects/documents/batch/actions/fileextract/{job_id}/results'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_batch_actions_fileextract_job_id_results_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_batch_actions_fileextract_job_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export Documents
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
    # @option opts [Boolean] :renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
    # @option opts [Boolean] :allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_batch_actions_fileextract_post(opts = {})
      objects_documents_batch_actions_fileextract_post_with_http_info(opts)
      nil
    end

    # Export Documents
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
    # @option opts [Boolean] :renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
    # @option opts [Boolean] :allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_actions_fileextract_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_batch_actions_fileextract_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/batch/actions/fileextract'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'renditions'] = opts[:'renditions'] if !opts[:'renditions'].nil?
      query_params[:'allversions'] = opts[:'allversions'] if !opts[:'allversions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_batch_actions_fileextract_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_batch_actions_fileextract_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reclassify Multiple Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_batch_actions_reclassify_put(opts = {})
      objects_documents_batch_actions_reclassify_put_with_http_info(opts)
      nil
    end

    # Reclassify Multiple Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_actions_reclassify_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_batch_actions_reclassify_put ...'
      end
      # resource path
      local_var_path = '/objects/documents/batch/actions/reclassify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-MigrationMode'] = opts[:'x_vault_api_migration_mode'] if !opts[:'x_vault_api_migration_mode'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_batch_actions_reclassify_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_batch_actions_reclassify_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Multiple Document Renditions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_batch_actions_rerender_post(opts = {})
      objects_documents_batch_actions_rerender_post_with_http_info(opts)
      nil
    end

    # Update Multiple Document Renditions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_actions_rerender_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_batch_actions_rerender_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/batch/actions/rerender'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_batch_actions_rerender_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_batch_actions_rerender_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Multiple Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param If you’re identifying documents in your input by their external ID
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_batch_delete(opts = {})
      objects_documents_batch_delete_with_http_info(opts)
      nil
    end

    # Delete Multiple Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param If you’re identifying documents in your input by their external ID
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_batch_delete ...'
      end
      # resource path
      local_var_path = '/objects/documents/batch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'idParam'] = opts[:'id_param'] if !opts[:'id_param'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_batch_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Undo Collaborative Authoring Checkout
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_batch_lock_delete(opts = {})
      objects_documents_batch_lock_delete_with_http_info(opts)
      nil
    end

    # Undo Collaborative Authoring Checkout
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_lock_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_batch_lock_delete ...'
      end
      # resource path
      local_var_path = '/objects/documents/batch/lock'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_batch_lock_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_batch_lock_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Multiple Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_batch_post(opts = {})
      objects_documents_batch_post_with_http_info(opts)
      nil
    end

    # Create Multiple Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_batch_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-MigrationMode'] = opts[:'x_vault_api_migration_mode'] if !opts[:'x_vault_api_migration_mode'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_batch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Multiple Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_batch_put(opts = {})
      objects_documents_batch_put_with_http_info(opts)
      nil
    end

    # Update Multiple Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_batch_put ...'
      end
      # resource path
      local_var_path = '/objects/documents/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-MigrationMode'] = opts[:'x_vault_api_migration_mode'] if !opts[:'x_vault_api_migration_mode'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_batch_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_batch_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Anchor IDs
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_anchors_get(doc_id, opts = {})
      objects_documents_doc_id_anchors_get_with_http_info(doc_id, opts)
      nil
    end

    # Retrieve Anchor IDs
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_anchors_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_anchors_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_anchors_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/anchors'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_anchors_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_anchors_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export Document Annotations to PDF
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_annotations_file_get(doc_id, opts = {})
      objects_documents_doc_id_annotations_file_get_with_http_info(doc_id, opts)
      nil
    end

    # Export Document Annotations to PDF
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_annotations_file_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_annotations_file_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_annotations_file_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/annotations/file'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_annotations_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_annotations_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import Document Annotations from PDF
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_annotations_file_post(doc_id, opts = {})
      objects_documents_doc_id_annotations_file_post_with_http_info(doc_id, opts)
      nil
    end

    # Import Document Annotations from PDF
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_annotations_file_post_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_annotations_file_post ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_annotations_file_post"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/annotations/file'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_annotations_file_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_annotations_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Single Document Attachment
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_delete(doc_id, attachment_id, opts = {})
      objects_documents_doc_id_attachments_attachment_id_delete_with_http_info(doc_id, attachment_id, opts)
      nil
    end

    # Delete Single Document Attachment
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_delete_with_http_info(doc_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_delete ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_delete"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_delete"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments/{attachment_id}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Document Attachment
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_file_get(doc_id, attachment_id, opts = {})
      objects_documents_doc_id_attachments_attachment_id_file_get_with_http_info(doc_id, attachment_id, opts)
      nil
    end

    # Download Document Attachment
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_file_get_with_http_info(doc_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_file_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_file_get"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_file_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/file'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Attachment Metadata
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_get(doc_id, attachment_id, opts = {})
      objects_documents_doc_id_attachments_attachment_id_get_with_http_info(doc_id, attachment_id, opts)
      nil
    end

    # Retrieve Document Attachment Metadata
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_get_with_http_info(doc_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_get"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments/{attachment_id}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Document Attachment Description
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_put(doc_id, attachment_id, opts = {})
      objects_documents_doc_id_attachments_attachment_id_put_with_http_info(doc_id, attachment_id, opts)
      nil
    end

    # Update Document Attachment Description
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_put_with_http_info(doc_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_put ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_put"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_put"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments/{attachment_id}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Single Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete(doc_id, attachment_id, attachment_version, opts = {})
      objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(doc_id, attachment_id, attachment_version, opts)
      nil
    end

    # Delete Single Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(doc_id, attachment_id, attachment_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete"
      end
      # verify the required parameter 'attachment_version' is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s)).sub('{' + 'attachment_version' + '}', CGI.escape(attachment_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get(doc_id, attachment_id, attachment_version, opts = {})
      objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id, attachment_id, attachment_version, opts)
      nil
    end

    # Download Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id, attachment_id, attachment_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # verify the required parameter 'attachment_version' is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s)).sub('{' + 'attachment_version' + '}', CGI.escape(attachment_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Attachment Version Metadata
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get(doc_id, attachment_id, attachment_version, opts = {})
      objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id, attachment_id, attachment_version, opts)
      nil
    end

    # Retrieve Document Attachment Version Metadata
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id, attachment_id, attachment_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get"
      end
      # verify the required parameter 'attachment_version' is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s)).sub('{' + 'attachment_version' + '}', CGI.escape(attachment_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :restore The parameter restore must be set to true. 
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post(doc_id, attachment_id, attachment_version, opts = {})
      objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(doc_id, attachment_id, attachment_version, opts)
      nil
    end

    # Restore Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :restore The parameter restore must be set to true. 
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(doc_id, attachment_id, attachment_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post"
      end
      # verify the required parameter 'attachment_version' is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s)).sub('{' + 'attachment_version' + '}', CGI.escape(attachment_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'restore'] = opts[:'restore'] if !opts[:'restore'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Attachment Versions
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_versions_get(doc_id, attachment_id, opts = {})
      objects_documents_doc_id_attachments_attachment_id_versions_get_with_http_info(doc_id, attachment_id, opts)
      nil
    end

    # Retrieve Document Attachment Versions
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_versions_get_with_http_info(doc_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_get"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download All Document Attachments
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_file_get(doc_id, opts = {})
      objects_documents_doc_id_attachments_file_get_with_http_info(doc_id, opts)
      nil
    end

    # Download All Document Attachments
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_file_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_file_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_file_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments/file'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Attachments
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_get(doc_id, opts = {})
      objects_documents_doc_id_attachments_get_with_http_info(doc_id, opts)
      nil
    end

    # Retrieve Document Attachments
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Document Attachment
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_attachments_post(doc_id, opts = {})
      objects_documents_doc_id_attachments_post_with_http_info(doc_id, opts)
      nil
    end

    # Create Document Attachment
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_post_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_attachments_post ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_post"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/attachments'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_attachments_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_attachments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Complete Audit History for a Single Document
    # @param doc_id [String] The document ID for which to retrieve audit history.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
    # @option opts [String] :end_date Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
    # @option opts [String] :format_result To request a CSV file of your audit history, use csv. 
    # @option opts [String] :limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
    # @option opts [String] :events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_audittrail_get(doc_id, opts = {})
      objects_documents_doc_id_audittrail_get_with_http_info(doc_id, opts)
      nil
    end

    # Retrieve Complete Audit History for a Single Document
    # @param doc_id [String] The document ID for which to retrieve audit history.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
    # @option opts [String] :end_date Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
    # @option opts [String] :format_result To request a CSV file of your audit history, use csv. 
    # @option opts [String] :limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
    # @option opts [String] :events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_audittrail_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_audittrail_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_audittrail_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/audittrail'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'format_result'] = opts[:'format_result'] if !opts[:'format_result'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'events'] = opts[:'events'] if !opts[:'events'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_audittrail_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_audittrail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Single Document
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_delete(doc_id, opts = {})
      objects_documents_doc_id_delete_with_http_info(doc_id, opts)
      nil
    end

    # Delete Single Document
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_delete_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_delete ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_delete"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Events
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_events_get(doc_id, opts = {})
      objects_documents_doc_id_events_get_with_http_info(doc_id, opts)
      nil
    end

    # Retrieve Document Events
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_events_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_events_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_events_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/events'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_events_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Document File
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :lock_document Set to true to Check Out this document before retrieval. If omitted, defaults to false.
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_file_get(doc_id, opts = {})
      objects_documents_doc_id_file_get_with_http_info(doc_id, opts)
      nil
    end

    # Download Document File
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :lock_document Set to true to Check Out this document before retrieval. If omitted, defaults to false.
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_file_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_file_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_file_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/file'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'lockDocument'] = opts[:'lock_document'] if !opts[:'lock_document'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_get(doc_id, opts = {})
      objects_documents_doc_id_get_with_http_info(doc_id, opts)
      nil
    end

    # Retrieve Document
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Document Lock
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_lock_delete(doc_id, opts = {})
      objects_documents_doc_id_lock_delete_with_http_info(doc_id, opts)
      nil
    end

    # Delete Document Lock
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_lock_delete_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_lock_delete ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_lock_delete"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/lock'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_lock_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_lock_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Lock
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_lock_get(doc_id, opts = {})
      objects_documents_doc_id_lock_get_with_http_info(doc_id, opts)
      nil
    end

    # Retrieve Document Lock
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_lock_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_lock_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_lock_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/lock'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_lock_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_lock_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Document Lock
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_lock_post(doc_id, opts = {})
      objects_documents_doc_id_lock_post_with_http_info(doc_id, opts)
      nil
    end

    # Create Document Lock
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_lock_post_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_lock_post ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_lock_post"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/lock'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_lock_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_lock_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download All Document Version Attachments
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_major_version_minor_version_attachments_file_get(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_major_version_minor_version_attachments_file_get_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Download All Document Version Attachments
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_major_version_minor_version_attachments_file_get_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_major_version_minor_version_attachments_file_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_major_version_minor_version_attachments_file_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_major_version_minor_version_attachments_file_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_major_version_minor_version_attachments_file_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_major_version_minor_version_attachments_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_major_version_minor_version_attachments_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Single Document Version
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :suppress_rendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_post(doc_id, opts = {})
      objects_documents_doc_id_post_with_http_info(doc_id, opts)
      nil
    end

    # Create Single Document Version
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :suppress_rendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_post_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_post ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_post"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'suppressRendition'] = opts[:'suppress_rendition'] if !opts[:'suppress_rendition'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Single Document
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_put(doc_id, opts = {})
      objects_documents_doc_id_put_with_http_info(doc_id, opts)
      nil
    end

    # Update Single Document
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_put_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_put ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_put"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-MigrationMode'] = opts[:'x_vault_api_migration_mode'] if !opts[:'x_vault_api_migration_mode'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Renditions
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_renditions_get(doc_id, opts = {})
      objects_documents_doc_id_renditions_get_with_http_info(doc_id, opts)
      nil
    end

    # Retrieve Document Renditions
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_renditions_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_renditions_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_renditions_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/renditions'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_renditions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_renditions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Single Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_renditions_rendition_type_delete(doc_id, rendition_type, opts = {})
      objects_documents_doc_id_renditions_rendition_type_delete_with_http_info(doc_id, rendition_type, opts)
      nil
    end

    # Delete Single Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_renditions_rendition_type_delete_with_http_info(doc_id, rendition_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_renditions_rendition_type_delete ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_delete"
      end
      # verify the required parameter 'rendition_type' is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        fail ArgumentError, "Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_delete"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/renditions/{rendition_type}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'rendition_type' + '}', CGI.escape(rendition_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_renditions_rendition_type_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_renditions_rendition_type_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Document Rendition File
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :steady_state Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_renditions_rendition_type_get(doc_id, rendition_type, opts = {})
      objects_documents_doc_id_renditions_rendition_type_get_with_http_info(doc_id, rendition_type, opts)
      nil
    end

    # Download Document Rendition File
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :steady_state Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_renditions_rendition_type_get_with_http_info(doc_id, rendition_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_renditions_rendition_type_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_get"
      end
      # verify the required parameter 'rendition_type' is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        fail ArgumentError, "Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/renditions/{rendition_type}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'rendition_type' + '}', CGI.escape(rendition_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'steadyState'] = opts[:'steady_state'] if !opts[:'steady_state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_renditions_rendition_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_renditions_rendition_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Single Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_renditions_rendition_type_post(doc_id, rendition_type, opts = {})
      objects_documents_doc_id_renditions_rendition_type_post_with_http_info(doc_id, rendition_type, opts)
      nil
    end

    # Add Single Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_renditions_rendition_type_post_with_http_info(doc_id, rendition_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_renditions_rendition_type_post ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_post"
      end
      # verify the required parameter 'rendition_type' is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        fail ArgumentError, "Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_post"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/renditions/{rendition_type}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'rendition_type' + '}', CGI.escape(rendition_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_renditions_rendition_type_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_renditions_rendition_type_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_renditions_rendition_type_put(doc_id, rendition_type, opts = {})
      objects_documents_doc_id_renditions_rendition_type_put_with_http_info(doc_id, rendition_type, opts)
      nil
    end

    # Replace Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_renditions_rendition_type_put_with_http_info(doc_id, rendition_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_renditions_rendition_type_put ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_put"
      end
      # verify the required parameter 'rendition_type' is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        fail ArgumentError, "Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_put"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/renditions/{rendition_type}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'rendition_type' + '}', CGI.escape(rendition_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_renditions_rendition_type_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_renditions_rendition_type_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Users & Groups from Roles on a Single Document
    # @param doc_id [String] The id value of the document from which to remove roles.
    # @param role_name_and_user_or_group [String] The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
    # @param id [String] The id value of the user or group to remove from the role.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete(doc_id, role_name_and_user_or_group, id, opts = {})
      objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete_with_http_info(doc_id, role_name_and_user_or_group, id, opts)
      nil
    end

    # Remove Users &amp; Groups from Roles on a Single Document
    # @param doc_id [String] The id value of the document from which to remove roles.
    # @param role_name_and_user_or_group [String] The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
    # @param id [String] The id value of the user or group to remove from the role.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete_with_http_info(doc_id, role_name_and_user_or_group, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete"
      end
      # verify the required parameter 'role_name_and_user_or_group' is set
      if @api_client.config.client_side_validation && role_name_and_user_or_group.nil?
        fail ArgumentError, "Missing the required parameter 'role_name_and_user_or_group' when calling DefaultApi.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'role_name_and_user_or_group' + '}', CGI.escape(role_name_and_user_or_group.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Version Attachments
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_version_major_version_minor_version_attachments_get(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_version_major_version_minor_version_attachments_get_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Retrieve Document Version Attachments
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_version_major_version_minor_version_attachments_get_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_version_major_version_minor_version_attachments_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_version_major_version_minor_version_attachments_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_version_major_version_minor_version_attachments_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_version_major_version_minor_version_attachments_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_version_major_version_minor_version_attachments_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_version_major_version_minor_version_attachments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Versions
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_get(doc_id, opts = {})
      objects_documents_doc_id_versions_get_with_http_info(doc_id, opts)
      nil
    end

    # Retrieve Document Versions
    # @param doc_id [String] The document id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read Annotations by ID
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param annotation_id [String] The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get(doc_id, major_version, minor_version, annotation_id, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get_with_http_info(doc_id, major_version, minor_version, annotation_id, opts)
      nil
    end

    # Read Annotations by ID
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param annotation_id [String] The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get_with_http_info(doc_id, major_version, minor_version, annotation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get"
      end
      # verify the required parameter 'annotation_id' is set
      if @api_client.config.client_side_validation && annotation_id.nil?
        fail ArgumentError, "Missing the required parameter 'annotation_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'annotation_id' + '}', CGI.escape(annotation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read Replies of Parent Annotation
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param annotation_id [String] The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get(doc_id, major_version, minor_version, annotation_id, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get_with_http_info(doc_id, major_version, minor_version, annotation_id, opts)
      nil
    end

    # Read Replies of Parent Annotation
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param annotation_id [String] The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get_with_http_info(doc_id, major_version, minor_version, annotation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get"
      end
      # verify the required parameter 'annotation_id' is set
      if @api_client.config.client_side_validation && annotation_id.nil?
        fail ArgumentError, "Missing the required parameter 'annotation_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'annotation_id' + '}', CGI.escape(annotation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export Document Version Annotations to PDF
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Export Document Version Annotations to PDF
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import Document Version Annotations from PDF
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Import Document Version Annotations from PDF
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read Annotations by Document Version and Type
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
    # @option opts [String] :offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
    # @option opts [String] :annotation_types The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
    # @option opts [String] :pagination_id A unique identifier used to load requests with paginated results.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_get(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_annotations_get_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Read Annotations by Document Version and Type
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
    # @option opts [String] :offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
    # @option opts [String] :annotation_types The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
    # @option opts [String] :pagination_id A unique identifier used to load requests with paginated results.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_get_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'annotation_types'] = opts[:'annotation_types'] if !opts[:'annotation_types'].nil?
      query_params[:'pagination_id'] = opts[:'pagination_id'] if !opts[:'pagination_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_annotations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Document Version Attachment Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param attachment_id [String] The id field value of the attachment.
    # @param attachment_version [String] The version of the attachment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get(doc_id, major_version, minor_version, attachment_id, attachment_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id, major_version, minor_version, attachment_id, attachment_version, opts)
      nil
    end

    # Download Document Version Attachment Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param attachment_id [String] The id field value of the attachment.
    # @param attachment_version [String] The version of the attachment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id, major_version, minor_version, attachment_id, attachment_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # verify the required parameter 'attachment_version' is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s)).sub('{' + 'attachment_version' + '}', CGI.escape(attachment_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Version Attachment Versions
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param attachment_id [String] The id of the document attachment to retrieve.
    # @param attachment_version [String] Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get(doc_id, major_version, minor_version, attachment_id, attachment_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id, major_version, minor_version, attachment_id, attachment_version, opts)
      nil
    end

    # Retrieve Document Version Attachment Versions
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param attachment_id [String] The id of the document attachment to retrieve.
    # @param attachment_version [String] Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id, major_version, minor_version, attachment_id, attachment_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get"
      end
      # verify the required parameter 'attachment_version' is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s)).sub('{' + 'attachment_version' + '}', CGI.escape(attachment_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Single Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_delete(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_delete_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Delete Single Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_delete_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_delete ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_delete"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_delete"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_delete"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Version Notes as CSV
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Retrieve Document Version Notes as CSV
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Document Event
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_events_post(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_events_post_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Create Document Event
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_events_post_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_events_post ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_events_post"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_events_post"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_events_post"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_events_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_events_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Video Annotations
    # @param doc_id [String] The video document id field value.
    # @param major_version [String] The video document major_version_number__v field value.
    # @param minor_version [String] The video document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Retrieve Video Annotations
    # @param doc_id [String] The video document id field value.
    # @param major_version [String] The video document major_version_number__v field value.
    # @param minor_version [String] The video document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Document Version File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_file_get(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_file_get_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Download Document Version File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_file_get_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_file_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_file_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_file_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_file_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_get(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_get_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Retrieve Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_get_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_put(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_put_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Update Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_put_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_put ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_put"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_put"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_put"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-MigrationMode'] = opts[:'x_vault_api_migration_mode'] if !opts[:'x_vault_api_migration_mode'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Relationships
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_get(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_relationships_get_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Retrieve Document Relationships
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_get_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_relationships_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Single Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_post(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_relationships_post_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Create Single Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_post_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_post ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_post"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_post"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_post"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_relationships_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Single Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param relationship_id [String] The relationship id field value. See Retrieve Document Relationships.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete(doc_id, major_version, minor_version, relationship_id, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(doc_id, major_version, minor_version, relationship_id, opts)
      nil
    end

    # Delete Single Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param relationship_id [String] The relationship id field value. See Retrieve Document Relationships.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(doc_id, major_version, minor_version, relationship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete"
      end
      # verify the required parameter 'relationship_id' is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'relationship_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'relationship_id' + '}', CGI.escape(relationship_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param relationship_id [String] The relationship id field value. See Retrieve Document Relationships.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get(doc_id, major_version, minor_version, relationship_id, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(doc_id, major_version, minor_version, relationship_id, opts)
      nil
    end

    # Retrieve Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param relationship_id [String] The relationship id field value. See Retrieve Document Relationships.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(doc_id, major_version, minor_version, relationship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get"
      end
      # verify the required parameter 'relationship_id' is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'relationship_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'relationship_id' + '}', CGI.escape(relationship_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Version Renditions
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_get(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_renditions_get_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Retrieve Document Version Renditions
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_get_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_renditions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete(doc_id, major_version, minor_version, rendition_type, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete_with_http_info(doc_id, major_version, minor_version, rendition_type, opts)
      nil
    end

    # Delete Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete_with_http_info(doc_id, major_version, minor_version, rendition_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete"
      end
      # verify the required parameter 'rendition_type' is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        fail ArgumentError, "Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'rendition_type' + '}', CGI.escape(rendition_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Document Version Rendition File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get(doc_id, major_version, minor_version, rendition_type, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get_with_http_info(doc_id, major_version, minor_version, rendition_type, opts)
      nil
    end

    # Download Document Version Rendition File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get_with_http_info(doc_id, major_version, minor_version, rendition_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get"
      end
      # verify the required parameter 'rendition_type' is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        fail ArgumentError, "Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'rendition_type' + '}', CGI.escape(rendition_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post(doc_id, major_version, minor_version, rendition_type, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post_with_http_info(doc_id, major_version, minor_version, rendition_type, opts)
      nil
    end

    # Upload Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post_with_http_info(doc_id, major_version, minor_version, rendition_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post"
      end
      # verify the required parameter 'rendition_type' is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        fail ArgumentError, "Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'rendition_type' + '}', CGI.escape(rendition_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put(doc_id, major_version, minor_version, rendition_type, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put_with_http_info(doc_id, major_version, minor_version, rendition_type, opts)
      nil
    end

    # Replace Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put_with_http_info(doc_id, major_version, minor_version, rendition_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put"
      end
      # verify the required parameter 'rendition_type' is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        fail ArgumentError, "Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'rendition_type' + '}', CGI.escape(rendition_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Document Version Thumbnail File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get(doc_id, major_version, minor_version, opts = {})
      objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get_with_http_info(doc_id, major_version, minor_version, opts)
      nil
    end

    # Download Document Version Thumbnail File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get_with_http_info(doc_id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get ...'
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get"
      end
      # resource path
      local_var_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail'.sub('{' + 'doc_id' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :named_filter Retrieves only documents which you have created.
    # @option opts [String] :scope Searches only within the document content.
    # @option opts [String] :versionscope Retrieves all document versions, rather than only the latest version.
    # @option opts [String] :search Search for documents based on a {keyword} in searchable document fields.
    # @option opts [String] :limit See VQL documentation for more information.
    # @option opts [String] :sort See VQL documentation for more information.
    # @option opts [String] :start See VQL documentation for more information.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_get(opts = {})
      objects_documents_get_with_http_info(opts)
      nil
    end

    # Retrieve All Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :named_filter Retrieves only documents which you have created.
    # @option opts [String] :scope Searches only within the document content.
    # @option opts [String] :versionscope Retrieves all document versions, rather than only the latest version.
    # @option opts [String] :search Search for documents based on a {keyword} in searchable document fields.
    # @option opts [String] :limit See VQL documentation for more information.
    # @option opts [String] :sort See VQL documentation for more information.
    # @option opts [String] :start See VQL documentation for more information.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_get ...'
      end
      # resource path
      local_var_path = '/objects/documents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'named_filter'] = opts[:'named_filter'] if !opts[:'named_filter'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'versionscope'] = opts[:'versionscope'] if !opts[:'versionscope'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Document Roles
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_id_roles_get(id, opts = {})
      objects_documents_id_roles_get_with_http_info(id, opts)
      nil
    end

    # Retrieve All Document Roles
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_roles_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_id_roles_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_roles_get"
      end
      # resource path
      local_var_path = '/objects/documents/{id}/roles'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_id_roles_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_id_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign Users & Groups to Roles on a Single Document
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_id_roles_post(id, opts = {})
      objects_documents_id_roles_post_with_http_info(id, opts)
      nil
    end

    # Assign Users &amp; Groups to Roles on a Single Document
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_roles_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_id_roles_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_roles_post"
      end
      # resource path
      local_var_path = '/objects/documents/{id}/roles'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_id_roles_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_id_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Role
    # @param id [String] The document &#x60;id&#x60;.
    # @param role_name [String] The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_id_roles_role_name_get(id, role_name, opts = {})
      objects_documents_id_roles_role_name_get_with_http_info(id, role_name, opts)
      nil
    end

    # Retrieve Document Role
    # @param id [String] The document &#x60;id&#x60;.
    # @param role_name [String] The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_roles_role_name_get_with_http_info(id, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_id_roles_role_name_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_roles_role_name_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling DefaultApi.objects_documents_id_roles_role_name_get"
      end
      # resource path
      local_var_path = '/objects/documents/{id}/roles/{role_name}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role_name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_id_roles_role_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_id_roles_role_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document User Actions
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get(id, major_version, minor_version, opts = {})
      objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id, major_version, minor_version, opts)
      nil
    end

    # Retrieve Document User Actions
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id, major_version, minor_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get"
      end
      # resource path
      local_var_path = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Entry Criteria
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @param name__v [String] The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get(id, major_version, minor_version, name__v, opts = {})
      objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id, major_version, minor_version, name__v, opts)
      nil
    end

    # Retrieve Document Entry Criteria
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @param name__v [String] The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id, major_version, minor_version, name__v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get"
      end
      # verify the required parameter 'name__v' is set
      if @api_client.config.client_side_validation && name__v.nil?
        fail ArgumentError, "Missing the required parameter 'name__v' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get"
      end
      # resource path
      local_var_path = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'name__v' + '}', CGI.escape(name__v.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Document User Action
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @param name__v [String] The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put(id, major_version, minor_version, name__v, opts = {})
      objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id, major_version, minor_version, name__v, opts)
      nil
    end

    # Initiate Document User Action
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @param name__v [String] The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id, major_version, minor_version, name__v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put"
      end
      # verify the required parameter 'major_version' is set
      if @api_client.config.client_side_validation && major_version.nil?
        fail ArgumentError, "Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put"
      end
      # verify the required parameter 'minor_version' is set
      if @api_client.config.client_side_validation && minor_version.nil?
        fail ArgumentError, "Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put"
      end
      # verify the required parameter 'name__v' is set
      if @api_client.config.client_side_validation && name__v.nil?
        fail ArgumentError, "Missing the required parameter 'name__v' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put"
      end
      # resource path
      local_var_path = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'major_version' + '}', CGI.escape(major_version.to_s)).sub('{' + 'minor_version' + '}', CGI.escape(minor_version.to_s)).sub('{' + 'name__v' + '}', CGI.escape(name__v.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve User Actions on Multiple Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_lifecycle_actions_post(opts = {})
      objects_documents_lifecycle_actions_post_with_http_info(opts)
      nil
    end

    # Retrieve User Actions on Multiple Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_lifecycle_actions_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_lifecycle_actions_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/lifecycle_actions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_lifecycle_actions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_lifecycle_actions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Bulk Document User Actions
    # @param user_action_name [String] The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_lifecycle_actions_user_action_name_put(user_action_name, opts = {})
      objects_documents_lifecycle_actions_user_action_name_put_with_http_info(user_action_name, opts)
      nil
    end

    # Initiate Bulk Document User Actions
    # @param user_action_name [String] The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_lifecycle_actions_user_action_name_put_with_http_info(user_action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_lifecycle_actions_user_action_name_put ...'
      end
      # verify the required parameter 'user_action_name' is set
      if @api_client.config.client_side_validation && user_action_name.nil?
        fail ArgumentError, "Missing the required parameter 'user_action_name' when calling DefaultApi.objects_documents_lifecycle_actions_user_action_name_put"
      end
      # resource path
      local_var_path = '/objects/documents/lifecycle_actions/{user_action_name}'.sub('{' + 'user_action_name' + '}', CGI.escape(user_action_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_lifecycle_actions_user_action_name_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_lifecycle_actions_user_action_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Single Document
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_post(opts = {})
      objects_documents_post_with_http_info(opts)
      nil
    end

    # Create Single Document
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_migration_mode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_post ...'
      end
      # resource path
      local_var_path = '/objects/documents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-MigrationMode'] = opts[:'x_vault_api_migration_mode'] if !opts[:'x_vault_api_migration_mode'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Multiple Document Relationships
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_relationships_batch_delete(opts = {})
      objects_documents_relationships_batch_delete_with_http_info(opts)
      nil
    end

    # Delete Multiple Document Relationships
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_relationships_batch_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_relationships_batch_delete ...'
      end
      # resource path
      local_var_path = '/objects/documents/relationships/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_relationships_batch_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_relationships_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Multiple Document Relationships
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_relationships_batch_post(opts = {})
      objects_documents_relationships_batch_post_with_http_info(opts)
      nil
    end

    # Create Multiple Document Relationships
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_relationships_batch_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_relationships_batch_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/relationships/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_relationships_batch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_relationships_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Multiple Document Renditions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_renditions_batch_delete(opts = {})
      objects_documents_renditions_batch_delete_with_http_info(opts)
      nil
    end

    # Delete Multiple Document Renditions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_renditions_batch_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_renditions_batch_delete ...'
      end
      # resource path
      local_var_path = '/objects/documents/renditions/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_renditions_batch_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_renditions_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Multiple Document Renditions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param If you’re identifying documents in your input by their external ID
    # @option opts [String] :large_size_asset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [Boolean] :x_vault_api_migration_mode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_renditions_batch_post(opts = {})
      objects_documents_renditions_batch_post_with_http_info(opts)
      nil
    end

    # Add Multiple Document Renditions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param If you’re identifying documents in your input by their external ID
    # @option opts [String] :large_size_asset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [Boolean] :x_vault_api_migration_mode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_renditions_batch_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_renditions_batch_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/renditions/batch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'idParam'] = opts[:'id_param'] if !opts[:'id_param'].nil?
      query_params[:'largeSizeAsset'] = opts[:'large_size_asset'] if !opts[:'large_size_asset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-MigrationMode'] = opts[:'x_vault_api_migration_mode'] if !opts[:'x_vault_api_migration_mode'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_renditions_batch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_renditions_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Users and Groups from Roles on Multiple Documents & Binders
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_roles_batch_delete(opts = {})
      objects_documents_roles_batch_delete_with_http_info(opts)
      nil
    end

    # Remove Users and Groups from Roles on Multiple Documents &amp; Binders
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_roles_batch_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_roles_batch_delete ...'
      end
      # resource path
      local_var_path = '/objects/documents/roles/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_roles_batch_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_roles_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign Users & Groups to Roles on Multiple Documents & Binders
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_roles_batch_post(opts = {})
      objects_documents_roles_batch_post_with_http_info(opts)
      nil
    end

    # Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_roles_batch_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_roles_batch_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/roles/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_roles_batch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_roles_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Template Collection
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_templates_get(opts = {})
      objects_documents_templates_get_with_http_info(opts)
      nil
    end

    # Retrieve Document Template Collection
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_templates_get ...'
      end
      # resource path
      local_var_path = '/objects/documents/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_templates_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Single Document Template
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_templates_post(opts = {})
      objects_documents_templates_post_with_http_info(opts)
      nil
    end

    # Create Single Document Template
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_templates_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_templates_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_templates_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Multiple Document Templates
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_templates_put(opts = {})
      objects_documents_templates_put_with_http_info(opts)
      nil
    end

    # Update Multiple Document Templates
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_templates_put ...'
      end
      # resource path
      local_var_path = '/objects/documents/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_templates_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_templates_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Basic Document Template
    # @param template_name [String] The document template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_templates_template_name_delete(template_name, opts = {})
      objects_documents_templates_template_name_delete_with_http_info(template_name, opts)
      nil
    end

    # Delete Basic Document Template
    # @param template_name [String] The document template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_template_name_delete_with_http_info(template_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_templates_template_name_delete ...'
      end
      # verify the required parameter 'template_name' is set
      if @api_client.config.client_side_validation && template_name.nil?
        fail ArgumentError, "Missing the required parameter 'template_name' when calling DefaultApi.objects_documents_templates_template_name_delete"
      end
      # resource path
      local_var_path = '/objects/documents/templates/{template_name}'.sub('{' + 'template_name' + '}', CGI.escape(template_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_templates_template_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_templates_template_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Document Template File
    # @param template_name [String] The document template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_templates_template_name_file_get(template_name, opts = {})
      objects_documents_templates_template_name_file_get_with_http_info(template_name, opts)
      nil
    end

    # Download Document Template File
    # @param template_name [String] The document template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_template_name_file_get_with_http_info(template_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_templates_template_name_file_get ...'
      end
      # verify the required parameter 'template_name' is set
      if @api_client.config.client_side_validation && template_name.nil?
        fail ArgumentError, "Missing the required parameter 'template_name' when calling DefaultApi.objects_documents_templates_template_name_file_get"
      end
      # resource path
      local_var_path = '/objects/documents/templates/{template_name}/file'.sub('{' + 'template_name' + '}', CGI.escape(template_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_templates_template_name_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_templates_template_name_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Document Template Attributes
    # @param template_name [String] The document template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_templates_template_name_get(template_name, opts = {})
      objects_documents_templates_template_name_get_with_http_info(template_name, opts)
      nil
    end

    # Retrieve Document Template Attributes
    # @param template_name [String] The document template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_template_name_get_with_http_info(template_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_templates_template_name_get ...'
      end
      # verify the required parameter 'template_name' is set
      if @api_client.config.client_side_validation && template_name.nil?
        fail ArgumentError, "Missing the required parameter 'template_name' when calling DefaultApi.objects_documents_templates_template_name_get"
      end
      # resource path
      local_var_path = '/objects/documents/templates/{template_name}'.sub('{' + 'template_name' + '}', CGI.escape(template_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_templates_template_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_templates_template_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Single Document Template
    # @param template_name [String] The document template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_templates_template_name_put(template_name, opts = {})
      objects_documents_templates_template_name_put_with_http_info(template_name, opts)
      nil
    end

    # Update Single Document Template
    # @param template_name [String] The document template name__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_template_name_put_with_http_info(template_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_templates_template_name_put ...'
      end
      # verify the required parameter 'template_name' is set
      if @api_client.config.client_side_validation && template_name.nil?
        fail ArgumentError, "Missing the required parameter 'template_name' when calling DefaultApi.objects_documents_templates_template_name_put"
      end
      # resource path
      local_var_path = '/objects/documents/templates/{template_name}'.sub('{' + 'template_name' + '}', CGI.escape(template_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_templates_template_name_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_templates_template_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Document Tokens
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_tokens_post(opts = {})
      objects_documents_tokens_post_with_http_info(opts)
      nil
    end

    # Document Tokens
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_tokens_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_tokens_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_tokens_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_tokens_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export Document Versions
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
    # @option opts [Boolean] :renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_versions_batch_actions_fileextract_post(opts = {})
      objects_documents_versions_batch_actions_fileextract_post_with_http_info(opts)
      nil
    end

    # Export Document Versions
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
    # @option opts [Boolean] :renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_versions_batch_actions_fileextract_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_versions_batch_actions_fileextract_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/versions/batch/actions/fileextract'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'renditions'] = opts[:'renditions'] if !opts[:'renditions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_versions_batch_actions_fileextract_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_versions_batch_actions_fileextract_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Multiple Document Versions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param If you’re identifying documents in your input by their external ID
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_versions_batch_delete(opts = {})
      objects_documents_versions_batch_delete_with_http_info(opts)
      nil
    end

    # Delete Multiple Document Versions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param If you’re identifying documents in your input by their external ID
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_versions_batch_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_versions_batch_delete ...'
      end
      # resource path
      local_var_path = '/objects/documents/versions/batch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'idParam'] = opts[:'id_param'] if !opts[:'id_param'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_versions_batch_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_versions_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Multiple Document Versions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param If you’re identifying documents in your input by their external ID
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_migration_mode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_versions_batch_post(opts = {})
      objects_documents_versions_batch_post_with_http_info(opts)
      nil
    end

    # Create Multiple Document Versions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param If you’re identifying documents in your input by their external ID
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_migration_mode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_versions_batch_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_documents_versions_batch_post ...'
      end
      # resource path
      local_var_path = '/objects/documents/versions/batch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'idParam'] = opts[:'id_param'] if !opts[:'id_param'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-MigrationMode'] = opts[:'x_vault_api_migration_mode'] if !opts[:'x_vault_api_migration_mode'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_documents_versions_batch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_documents_versions_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Domain Information
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_application To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_domain_get(opts = {})
      objects_domain_get_with_http_info(opts)
      nil
    end

    # Retrieve Domain Information
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_application To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_domain_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_domain_get ...'
      end
      # resource path
      local_var_path = '/objects/domain'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_application'] = opts[:'include_application'] if !opts[:'include_application'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_domain_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_domain_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Domains
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_domains_get(opts = {})
      objects_domains_get_with_http_info(opts)
      nil
    end

    # Retrieve Domains
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_domains_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_domains_get ...'
      end
      # resource path
      local_var_path = '/objects/domains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add EDL Matched Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_edl_matched_documents_batch_actions_add_post(opts = {})
      objects_edl_matched_documents_batch_actions_add_post_with_http_info(opts)
      nil
    end

    # Add EDL Matched Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_edl_matched_documents_batch_actions_add_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_edl_matched_documents_batch_actions_add_post ...'
      end
      # resource path
      local_var_path = '/objects/edl_matched_documents/batch/actions/add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_edl_matched_documents_batch_actions_add_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_edl_matched_documents_batch_actions_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove EDL Matched Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_edl_matched_documents_batch_actions_remove_post(opts = {})
      objects_edl_matched_documents_batch_actions_remove_post_with_http_info(opts)
      nil
    end

    # Remove EDL Matched Documents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_edl_matched_documents_batch_actions_remove_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_edl_matched_documents_batch_actions_remove_post ...'
      end
      # resource path
      local_var_path = '/objects/edl_matched_documents/batch/actions/remove'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_edl_matched_documents_batch_actions_remove_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_edl_matched_documents_batch_actions_remove_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Auto Managed Groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_groups_auto_get(opts = {})
      objects_groups_auto_get_with_http_info(opts)
      nil
    end

    # Retrieve Auto Managed Groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_auto_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_groups_auto_get ...'
      end
      # resource path
      local_var_path = '/objects/groups/auto'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_groups_auto_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_groups_auto_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include_implied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_groups_get(opts = {})
      objects_groups_get_with_http_info(opts)
      nil
    end

    # Retrieve All Groups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include_implied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_groups_get ...'
      end
      # resource path
      local_var_path = '/objects/groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeImplied'] = opts[:'include_implied'] if !opts[:'include_implied'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Group
    # @param group_id [String] The group id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_groups_group_id_delete(group_id, opts = {})
      objects_groups_group_id_delete_with_http_info(group_id, opts)
      nil
    end

    # Delete Group
    # @param group_id [String] The group id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_group_id_delete_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_groups_group_id_delete ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling DefaultApi.objects_groups_group_id_delete"
      end
      # resource path
      local_var_path = '/objects/groups/{group_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_groups_group_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_groups_group_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Group
    # @param group_id [String] The group id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_implied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_groups_group_id_get(group_id, opts = {})
      objects_groups_group_id_get_with_http_info(group_id, opts)
      nil
    end

    # Retrieve Group
    # @param group_id [String] The group id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_implied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_group_id_get_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_groups_group_id_get ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling DefaultApi.objects_groups_group_id_get"
      end
      # resource path
      local_var_path = '/objects/groups/{group_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeImplied'] = opts[:'include_implied'] if !opts[:'include_implied'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_groups_group_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_groups_group_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Group
    # @param group_id [String] The group id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_groups_group_id_put(group_id, opts = {})
      objects_groups_group_id_put_with_http_info(group_id, opts)
      nil
    end

    # Update Group
    # @param group_id [String] The group id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_group_id_put_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_groups_group_id_put ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling DefaultApi.objects_groups_group_id_put"
      end
      # resource path
      local_var_path = '/objects/groups/{group_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_groups_group_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_groups_group_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Group 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_groups_post(opts = {})
      objects_groups_post_with_http_info(opts)
      nil
    end

    # Create Group 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_groups_post ...'
      end
      # resource path
      local_var_path = '/objects/groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_groups_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Application License Usage
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_licenses_get(opts = {})
      objects_licenses_get_with_http_info(opts)
      nil
    end

    # Retrieve Application License Usage
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_licenses_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_licenses_get ...'
      end
      # resource path
      local_var_path = '/objects/licenses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_licenses_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_licenses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Multi-Record Workflows
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_actions_get(opts = {})
      objects_objectworkflows_actions_get_with_http_info(opts)
      nil
    end

    # Retrieve All Multi-Record Workflows
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_actions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_actions_get ...'
      end
      # resource path
      local_var_path = '/objects/objectworkflows/actions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Multi-Record Workflow Details
    # @param workflow_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_actions_workflow_name_get(workflow_name, opts = {})
      objects_objectworkflows_actions_workflow_name_get_with_http_info(workflow_name, opts)
      nil
    end

    # Retrieve Multi-Record Workflow Details
    # @param workflow_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_actions_workflow_name_get_with_http_info(workflow_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_actions_workflow_name_get ...'
      end
      # verify the required parameter 'workflow_name' is set
      if @api_client.config.client_side_validation && workflow_name.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_name' when calling DefaultApi.objects_objectworkflows_actions_workflow_name_get"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/actions/{workflow_name}'.sub('{' + 'workflow_name' + '}', CGI.escape(workflow_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_actions_workflow_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_actions_workflow_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Multi-Record Workflow
    # @param workflow_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_actions_workflow_name_post(workflow_name, opts = {})
      objects_objectworkflows_actions_workflow_name_post_with_http_info(workflow_name, opts)
      nil
    end

    # Initiate Multi-Record Workflow
    # @param workflow_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_actions_workflow_name_post_with_http_info(workflow_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_actions_workflow_name_post ...'
      end
      # verify the required parameter 'workflow_name' is set
      if @api_client.config.client_side_validation && workflow_name.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_name' when calling DefaultApi.objects_objectworkflows_actions_workflow_name_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/actions/{workflow_name}'.sub('{' + 'workflow_name' + '}', CGI.escape(workflow_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_actions_workflow_name_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_actions_workflow_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Workflows
    # @param [Hash] opts the optional parameters
    # @option opts [String] :object__v To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
    # @option opts [String] :record_id__v To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
    # @option opts [String] :participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
    # @option opts [String] :status__v To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
    # @option opts [String] :offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
    # @option opts [String] :page_size This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_get(opts = {})
      objects_objectworkflows_get_with_http_info(opts)
      nil
    end

    # Retrieve Workflows
    # @param [Hash] opts the optional parameters
    # @option opts [String] :object__v To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
    # @option opts [String] :record_id__v To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
    # @option opts [String] :participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
    # @option opts [String] :status__v To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
    # @option opts [String] :offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
    # @option opts [String] :page_size This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_get ...'
      end
      # resource path
      local_var_path = '/objects/objectworkflows'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'object__v'] = opts[:'object__v'] if !opts[:'object__v'].nil?
      query_params[:'record_id__v'] = opts[:'record_id__v'] if !opts[:'record_id__v'].nil?
      query_params[:'participant'] = opts[:'participant'] if !opts[:'participant'].nil?
      query_params[:'status__v'] = opts[:'status__v'] if !opts[:'status__v'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Workflow Tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :object__v To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
    # @option opts [String] :record_id__v To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
    # @option opts [String] :assignee__v To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
    # @option opts [String] :status__v To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
    # @option opts [String] :offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
    # @option opts [String] :page_size This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_get(opts = {})
      objects_objectworkflows_tasks_get_with_http_info(opts)
      nil
    end

    # Retrieve Workflow Tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :object__v To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
    # @option opts [String] :record_id__v To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
    # @option opts [String] :assignee__v To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
    # @option opts [String] :status__v To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
    # @option opts [String] :offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
    # @option opts [String] :page_size This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_get ...'
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'object__v'] = opts[:'object__v'] if !opts[:'object__v'].nil?
      query_params[:'record_id__v'] = opts[:'record_id__v'] if !opts[:'record_id__v'].nil?
      query_params[:'assignee__v'] = opts[:'assignee__v'] if !opts[:'assignee__v'].nil?
      query_params[:'status__v'] = opts[:'status__v'] if !opts[:'status__v'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accept Single Record Workflow Task
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_accept_post(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_actions_accept_post_with_http_info(task_id, opts)
      nil
    end

    # Accept Single Record Workflow Task
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_accept_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_accept_post ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_accept_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions/accept'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_accept_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_accept_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel Workflow Task
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_cancel_post(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_actions_cancel_post_with_http_info(task_id, opts)
      nil
    end

    # Cancel Workflow Task
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_cancel_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_cancel_post ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_cancel_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions/cancel'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_cancel_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_cancel_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Complete Single Record Workflow Task
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_complete_post(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_actions_complete_post_with_http_info(task_id, opts)
      nil
    end

    # Complete Single Record Workflow Task
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_complete_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_complete_post ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_complete_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions/complete'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_complete_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_complete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Workflow Task Actions
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_get(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_actions_get_with_http_info(task_id, opts)
      nil
    end

    # Retrieve Workflow Task Actions
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_get_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_get ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_get"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accept Multi-item Workflow Task
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_mdwaccept_post(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_actions_mdwaccept_post_with_http_info(task_id, opts)
      nil
    end

    # Accept Multi-item Workflow Task
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_mdwaccept_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwaccept_post ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwaccept_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwaccept_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_mdwaccept_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Complete Multi-item Workflow Task
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post_with_http_info(task_id, opts)
      nil
    end

    # Complete Multi-item Workflow Task
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manage Multi-Item Workflow Content
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post_with_http_info(task_id, opts)
      nil
    end

    # Manage Multi-Item Workflow Content
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reassign Multi-item Workflow Task
    # @param task_id [String] The id of the task to reassign.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_mdwreassign_post(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_actions_mdwreassign_post_with_http_info(task_id, opts)
      nil
    end

    # Reassign Multi-item Workflow Task
    # @param task_id [String] The id of the task to reassign.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_mdwreassign_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwreassign_post ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwreassign_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwreassign_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_mdwreassign_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reassign Single Record Workflow Task
    # @param task_id [String] The id of the task to reassign.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_reassign_post(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_actions_reassign_post_with_http_info(task_id, opts)
      nil
    end

    # Reassign Single Record Workflow Task
    # @param task_id [String] The id of the task to reassign.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_reassign_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_reassign_post ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_reassign_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions/reassign'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_reassign_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_reassign_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Workflow Task Action Details
    # @param task_id [String] The task id field value.
    # @param task_action [String] The name of the task action retrieved from Retrieve Workflow Task Actions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_task_action_get(task_id, task_action, opts = {})
      objects_objectworkflows_tasks_task_id_actions_task_action_get_with_http_info(task_id, task_action, opts)
      nil
    end

    # Retrieve Workflow Task Action Details
    # @param task_id [String] The task id field value.
    # @param task_action [String] The name of the task action retrieved from Retrieve Workflow Task Actions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_task_action_get_with_http_info(task_id, task_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_task_action_get ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_task_action_get"
      end
      # verify the required parameter 'task_action' is set
      if @api_client.config.client_side_validation && task_action.nil?
        fail ArgumentError, "Missing the required parameter 'task_action' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_task_action_get"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions/{task_action}'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s)).sub('{' + 'task_action' + '}', CGI.escape(task_action.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_task_action_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_task_action_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Undo Workflow Task Acceptance
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_undoaccept_post(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_actions_undoaccept_post_with_http_info(task_id, opts)
      nil
    end

    # Undo Workflow Task Acceptance
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_undoaccept_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_undoaccept_post ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_undoaccept_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions/undoaccept'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_undoaccept_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_undoaccept_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Workflow Task Due Date
    # @param task_id [String] The id of the task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_updateduedate_post(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_actions_updateduedate_post_with_http_info(task_id, opts)
      nil
    end

    # Update Workflow Task Due Date
    # @param task_id [String] The id of the task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_updateduedate_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_updateduedate_post ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_updateduedate_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}/actions/updateduedate'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_updateduedate_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_updateduedate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Workflow Task Details
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_get(task_id, opts = {})
      objects_objectworkflows_tasks_task_id_get_with_http_info(task_id, opts)
      nil
    end

    # Retrieve Workflow Task Details
    # @param task_id [String] The task id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_get_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_get ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_get"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/tasks/{task_id}'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_tasks_task_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_tasks_task_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Workflow Actions
    # @param workflow_id [String] The workflow id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_workflow_id_actions_get(workflow_id, opts = {})
      objects_objectworkflows_workflow_id_actions_get_with_http_info(workflow_id, opts)
      nil
    end

    # Retrieve Workflow Actions
    # @param workflow_id [String] The workflow id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_workflow_id_actions_get_with_http_info(workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_workflow_id_actions_get ...'
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling DefaultApi.objects_objectworkflows_workflow_id_actions_get"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/{workflow_id}/actions'.sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_workflow_id_actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_workflow_id_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Workflow Action Details
    # @param workflow_id [String] The workflow id field value.
    # @param workflow_action [String] The workflow action name retrieved from Retrieve Workflow Actions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_workflow_id_actions_workflow_action_get(workflow_id, workflow_action, opts = {})
      objects_objectworkflows_workflow_id_actions_workflow_action_get_with_http_info(workflow_id, workflow_action, opts)
      nil
    end

    # Retrieve Workflow Action Details
    # @param workflow_id [String] The workflow id field value.
    # @param workflow_action [String] The workflow action name retrieved from Retrieve Workflow Actions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_workflow_id_actions_workflow_action_get_with_http_info(workflow_id, workflow_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_get ...'
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_get"
      end
      # verify the required parameter 'workflow_action' is set
      if @api_client.config.client_side_validation && workflow_action.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_action' when calling DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_get"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'.sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s)).sub('{' + 'workflow_action' + '}', CGI.escape(workflow_action.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_workflow_id_actions_workflow_action_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Workflow Action
    # @param workflow_id [String] The workflow id field value.
    # @param workflow_action [String] The workflow action name retrieved from Retrieve Workflow Actions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :documents__sys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_workflow_id_actions_workflow_action_post(workflow_id, workflow_action, opts = {})
      objects_objectworkflows_workflow_id_actions_workflow_action_post_with_http_info(workflow_id, workflow_action, opts)
      nil
    end

    # Initiate Workflow Action
    # @param workflow_id [String] The workflow id field value.
    # @param workflow_action [String] The workflow action name retrieved from Retrieve Workflow Actions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :documents__sys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_workflow_id_actions_workflow_action_post_with_http_info(workflow_id, workflow_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_post ...'
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_post"
      end
      # verify the required parameter 'workflow_action' is set
      if @api_client.config.client_side_validation && workflow_action.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_action' when calling DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_post"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'.sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s)).sub('{' + 'workflow_action' + '}', CGI.escape(workflow_action.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'documents__sys'] = opts[:'documents__sys'] if !opts[:'documents__sys'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_workflow_id_actions_workflow_action_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Workflow Details
    # @param workflow_id [String] The workflow id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_objectworkflows_workflow_id_get(workflow_id, opts = {})
      objects_objectworkflows_workflow_id_get_with_http_info(workflow_id, opts)
      nil
    end

    # Retrieve Workflow Details
    # @param workflow_id [String] The workflow id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_workflow_id_get_with_http_info(workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_objectworkflows_workflow_id_get ...'
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling DefaultApi.objects_objectworkflows_workflow_id_get"
      end
      # resource path
      local_var_path = '/objects/objectworkflows/{workflow_id}'.sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_objectworkflows_workflow_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_objectworkflows_workflow_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Picklists
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_picklists_get(opts = {})
      objects_picklists_get_with_http_info(opts)
      nil
    end

    # Retrieve All Picklists
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_picklists_get ...'
      end
      # resource path
      local_var_path = '/objects/picklists'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_picklists_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_picklists_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Picklist Values
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_picklists_picklist_name_get(picklist_name, opts = {})
      objects_picklists_picklist_name_get_with_http_info(picklist_name, opts)
      nil
    end

    # Retrieve Picklist Values
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_picklist_name_get_with_http_info(picklist_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_picklists_picklist_name_get ...'
      end
      # verify the required parameter 'picklist_name' is set
      if @api_client.config.client_side_validation && picklist_name.nil?
        fail ArgumentError, "Missing the required parameter 'picklist_name' when calling DefaultApi.objects_picklists_picklist_name_get"
      end
      # resource path
      local_var_path = '/objects/picklists/{picklist_name}'.sub('{' + 'picklist_name' + '}', CGI.escape(picklist_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_picklists_picklist_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_picklists_picklist_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inactivate Picklist Value
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param picklist_value_name [String] The picklist value name field value (north_america__c, south_america__c, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_picklists_picklist_name_picklist_value_name_delete(picklist_name, picklist_value_name, opts = {})
      objects_picklists_picklist_name_picklist_value_name_delete_with_http_info(picklist_name, picklist_value_name, opts)
      nil
    end

    # Inactivate Picklist Value
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param picklist_value_name [String] The picklist value name field value (north_america__c, south_america__c, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_picklist_name_picklist_value_name_delete_with_http_info(picklist_name, picklist_value_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_picklists_picklist_name_picklist_value_name_delete ...'
      end
      # verify the required parameter 'picklist_name' is set
      if @api_client.config.client_side_validation && picklist_name.nil?
        fail ArgumentError, "Missing the required parameter 'picklist_name' when calling DefaultApi.objects_picklists_picklist_name_picklist_value_name_delete"
      end
      # verify the required parameter 'picklist_value_name' is set
      if @api_client.config.client_side_validation && picklist_value_name.nil?
        fail ArgumentError, "Missing the required parameter 'picklist_value_name' when calling DefaultApi.objects_picklists_picklist_name_picklist_value_name_delete"
      end
      # resource path
      local_var_path = '/objects/picklists/{picklist_name}/{picklist_value_name}'.sub('{' + 'picklist_name' + '}', CGI.escape(picklist_name.to_s)).sub('{' + 'picklist_value_name' + '}', CGI.escape(picklist_value_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_picklists_picklist_name_picklist_value_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_picklists_picklist_name_picklist_value_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Picklist Value
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param picklist_value_name [String] The picklist value name field value (north_america__c, south_america__c, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_picklists_picklist_name_picklist_value_name_put(picklist_name, picklist_value_name, opts = {})
      objects_picklists_picklist_name_picklist_value_name_put_with_http_info(picklist_name, picklist_value_name, opts)
      nil
    end

    # Update Picklist Value
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param picklist_value_name [String] The picklist value name field value (north_america__c, south_america__c, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_picklist_name_picklist_value_name_put_with_http_info(picklist_name, picklist_value_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_picklists_picklist_name_picklist_value_name_put ...'
      end
      # verify the required parameter 'picklist_name' is set
      if @api_client.config.client_side_validation && picklist_name.nil?
        fail ArgumentError, "Missing the required parameter 'picklist_name' when calling DefaultApi.objects_picklists_picklist_name_picklist_value_name_put"
      end
      # verify the required parameter 'picklist_value_name' is set
      if @api_client.config.client_side_validation && picklist_value_name.nil?
        fail ArgumentError, "Missing the required parameter 'picklist_value_name' when calling DefaultApi.objects_picklists_picklist_name_picklist_value_name_put"
      end
      # resource path
      local_var_path = '/objects/picklists/{picklist_name}/{picklist_value_name}'.sub('{' + 'picklist_name' + '}', CGI.escape(picklist_name.to_s)).sub('{' + 'picklist_value_name' + '}', CGI.escape(picklist_value_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_picklists_picklist_name_picklist_value_name_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_picklists_picklist_name_picklist_value_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Picklist Values
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_picklists_picklist_name_post(picklist_name, opts = {})
      objects_picklists_picklist_name_post_with_http_info(picklist_name, opts)
      nil
    end

    # Create Picklist Values
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_picklist_name_post_with_http_info(picklist_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_picklists_picklist_name_post ...'
      end
      # verify the required parameter 'picklist_name' is set
      if @api_client.config.client_side_validation && picklist_name.nil?
        fail ArgumentError, "Missing the required parameter 'picklist_name' when calling DefaultApi.objects_picklists_picklist_name_post"
      end
      # resource path
      local_var_path = '/objects/picklists/{picklist_name}'.sub('{' + 'picklist_name' + '}', CGI.escape(picklist_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_picklists_picklist_name_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_picklists_picklist_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Picklist Value Label
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_picklists_picklist_name_put(picklist_name, opts = {})
      objects_picklists_picklist_name_put_with_http_info(picklist_name, opts)
      nil
    end

    # Update Picklist Value Label
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_picklist_name_put_with_http_info(picklist_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_picklists_picklist_name_put ...'
      end
      # verify the required parameter 'picklist_name' is set
      if @api_client.config.client_side_validation && picklist_name.nil?
        fail ArgumentError, "Missing the required parameter 'picklist_name' when calling DefaultApi.objects_picklists_picklist_name_put"
      end
      # resource path
      local_var_path = '/objects/picklists/{picklist_name}'.sub('{' + 'picklist_name' + '}', CGI.escape(picklist_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_picklists_picklist_name_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_picklists_picklist_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Build Production Vault
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_actions_buildproduction_post(opts = {})
      objects_sandbox_actions_buildproduction_post_with_http_info(opts)
      nil
    end

    # Build Production Vault
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_actions_buildproduction_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_actions_buildproduction_post ...'
      end
      # resource path
      local_var_path = '/objects/sandbox/actions/buildproduction'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_actions_buildproduction_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_actions_buildproduction_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Promote to Production
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_actions_promoteproduction_post(opts = {})
      objects_sandbox_actions_promoteproduction_post_with_http_info(opts)
      nil
    end

    # Promote to Production
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_actions_promoteproduction_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_actions_promoteproduction_post ...'
      end
      # resource path
      local_var_path = '/objects/sandbox/actions/promoteproduction'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_actions_promoteproduction_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_actions_promoteproduction_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recheck Sandbox Usage Limit
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_actions_recheckusage_post(opts = {})
      objects_sandbox_actions_recheckusage_post_with_http_info(opts)
      nil
    end

    # Recheck Sandbox Usage Limit
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_actions_recheckusage_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_actions_recheckusage_post ...'
      end
      # resource path
      local_var_path = '/objects/sandbox/actions/recheckusage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_actions_recheckusage_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_actions_recheckusage_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change Sandbox Size
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_batch_changesize_post(opts = {})
      objects_sandbox_batch_changesize_post_with_http_info(opts)
      nil
    end

    # Change Sandbox Size
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_batch_changesize_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_batch_changesize_post ...'
      end
      # resource path
      local_var_path = '/objects/sandbox/batch/changesize'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_batch_changesize_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_batch_changesize_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set Sandbox Entitlements
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_entitlements_set_post(opts = {})
      objects_sandbox_entitlements_set_post_with_http_info(opts)
      nil
    end

    # Set Sandbox Entitlements
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_entitlements_set_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_entitlements_set_post ...'
      end
      # resource path
      local_var_path = '/objects/sandbox/entitlements/set'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_entitlements_set_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_entitlements_set_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Sandboxes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_get(opts = {})
      objects_sandbox_get_with_http_info(opts)
      nil
    end

    # Retrieve Sandboxes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_get ...'
      end
      # resource path
      local_var_path = '/objects/sandbox'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Sandbox
    # @param name [String] The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_name_delete(name, opts = {})
      objects_sandbox_name_delete_with_http_info(name, opts)
      nil
    end

    # Delete Sandbox
    # @param name [String] The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_name_delete_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_name_delete ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.objects_sandbox_name_delete"
      end
      # resource path
      local_var_path = '/objects/sandbox/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Refresh Sandbox
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_post(opts = {})
      objects_sandbox_post_with_http_info(opts)
      nil
    end

    # Create or Refresh Sandbox
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_post ...'
      end
      # resource path
      local_var_path = '/objects/sandbox'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_snapshot_api_name_actions_update_post(api_name, opts = {})
      objects_sandbox_snapshot_api_name_actions_update_post_with_http_info(api_name, opts)
      nil
    end

    # Update Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_snapshot_api_name_actions_update_post_with_http_info(api_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_snapshot_api_name_actions_update_post ...'
      end
      # verify the required parameter 'api_name' is set
      if @api_client.config.client_side_validation && api_name.nil?
        fail ArgumentError, "Missing the required parameter 'api_name' when calling DefaultApi.objects_sandbox_snapshot_api_name_actions_update_post"
      end
      # resource path
      local_var_path = '/objects/sandbox/snapshot/{api_name}/actions/update'.sub('{' + 'api_name' + '}', CGI.escape(api_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_snapshot_api_name_actions_update_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_snapshot_api_name_actions_update_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upgrade Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_snapshot_api_name_actions_upgrade_post(api_name, opts = {})
      objects_sandbox_snapshot_api_name_actions_upgrade_post_with_http_info(api_name, opts)
      nil
    end

    # Upgrade Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_snapshot_api_name_actions_upgrade_post_with_http_info(api_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_snapshot_api_name_actions_upgrade_post ...'
      end
      # verify the required parameter 'api_name' is set
      if @api_client.config.client_side_validation && api_name.nil?
        fail ArgumentError, "Missing the required parameter 'api_name' when calling DefaultApi.objects_sandbox_snapshot_api_name_actions_upgrade_post"
      end
      # resource path
      local_var_path = '/objects/sandbox/snapshot/{api_name}/actions/upgrade'.sub('{' + 'api_name' + '}', CGI.escape(api_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_snapshot_api_name_actions_upgrade_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_snapshot_api_name_actions_upgrade_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_snapshot_api_name_delete(api_name, opts = {})
      objects_sandbox_snapshot_api_name_delete_with_http_info(api_name, opts)
      nil
    end

    # Delete Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_snapshot_api_name_delete_with_http_info(api_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_snapshot_api_name_delete ...'
      end
      # verify the required parameter 'api_name' is set
      if @api_client.config.client_side_validation && api_name.nil?
        fail ArgumentError, "Missing the required parameter 'api_name' when calling DefaultApi.objects_sandbox_snapshot_api_name_delete"
      end
      # resource path
      local_var_path = '/objects/sandbox/snapshot/{api_name}'.sub('{' + 'api_name' + '}', CGI.escape(api_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_snapshot_api_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_snapshot_api_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Sandbox Snapshots
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_snapshot_get(opts = {})
      objects_sandbox_snapshot_get_with_http_info(opts)
      nil
    end

    # Retrieve Sandbox Snapshots
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_snapshot_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_snapshot_get ...'
      end
      # resource path
      local_var_path = '/objects/sandbox/snapshot'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_snapshot_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_snapshot_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Sandbox Snapshot
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_snapshot_post(opts = {})
      objects_sandbox_snapshot_post_with_http_info(opts)
      nil
    end

    # Create Sandbox Snapshot
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_snapshot_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_snapshot_post ...'
      end
      # resource path
      local_var_path = '/objects/sandbox/snapshot'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_snapshot_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh Sandbox from Snapshot
    # @param vault_id [String] The Vault ID of the sandbox to be refreshed.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_vault_id_actions_refresh_post(vault_id, opts = {})
      objects_sandbox_vault_id_actions_refresh_post_with_http_info(vault_id, opts)
      nil
    end

    # Refresh Sandbox from Snapshot
    # @param vault_id [String] The Vault ID of the sandbox to be refreshed.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_vault_id_actions_refresh_post_with_http_info(vault_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_vault_id_actions_refresh_post ...'
      end
      # verify the required parameter 'vault_id' is set
      if @api_client.config.client_side_validation && vault_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_id' when calling DefaultApi.objects_sandbox_vault_id_actions_refresh_post"
      end
      # resource path
      local_var_path = '/objects/sandbox/{vault_id}/actions/refresh'.sub('{' + 'vault_id' + '}', CGI.escape(vault_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_vault_id_actions_refresh_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_vault_id_actions_refresh_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Sandbox Details by ID
    # @param vault_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_sandbox_vault_id_get(vault_id, opts = {})
      objects_sandbox_vault_id_get_with_http_info(vault_id, opts)
      nil
    end

    # Retrieve Sandbox Details by ID
    # @param vault_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_vault_id_get_with_http_info(vault_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_sandbox_vault_id_get ...'
      end
      # verify the required parameter 'vault_id' is set
      if @api_client.config.client_side_validation && vault_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_id' when calling DefaultApi.objects_sandbox_vault_id_get"
      end
      # resource path
      local_var_path = '/objects/sandbox/{vault_id}'.sub('{' + 'vault_id' + '}', CGI.escape(vault_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_sandbox_vault_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_sandbox_vault_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Security Policies
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_securitypolicies_get(opts = {})
      objects_securitypolicies_get_with_http_info(opts)
      nil
    end

    # Retrieve All Security Policies
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_securitypolicies_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_securitypolicies_get ...'
      end
      # resource path
      local_var_path = '/objects/securitypolicies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_securitypolicies_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_securitypolicies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Security Policy
    # @param security_policy_name [String] Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_securitypolicies_security_policy_name_get(security_policy_name, opts = {})
      objects_securitypolicies_security_policy_name_get_with_http_info(security_policy_name, opts)
      nil
    end

    # Retrieve Security Policy
    # @param security_policy_name [String] Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_securitypolicies_security_policy_name_get_with_http_info(security_policy_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_securitypolicies_security_policy_name_get ...'
      end
      # verify the required parameter 'security_policy_name' is set
      if @api_client.config.client_side_validation && security_policy_name.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_name' when calling DefaultApi.objects_securitypolicies_security_policy_name_get"
      end
      # resource path
      local_var_path = '/objects/securitypolicies/{security_policy_name}'.sub('{' + 'security_policy_name' + '}', CGI.escape(security_policy_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_securitypolicies_security_policy_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_securitypolicies_security_policy_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vaults Retrieve all users assigned to all Vaults in your domain.
    # @option opts [String] :exclude_vault_membership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
    # @option opts [String] :exclude_app_licensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_get(opts = {})
      objects_users_get_with_http_info(opts)
      nil
    end

    # Retrieve All Users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vaults Retrieve all users assigned to all Vaults in your domain.
    # @option opts [String] :exclude_vault_membership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
    # @option opts [String] :exclude_app_licensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_get ...'
      end
      # resource path
      local_var_path = '/objects/users/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'vaults'] = opts[:'vaults'] if !opts[:'vaults'].nil?
      query_params[:'exclude_vault_membership'] = opts[:'exclude_vault_membership'] if !opts[:'exclude_vault_membership'].nil?
      query_params[:'exclude_app_licensing'] = opts[:'exclude_app_licensing'] if !opts[:'exclude_app_licensing'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve User
    # @param id [String] The user id field value. Use the value me to get information for the currently authenticated user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :exclude_vault_membership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
    # @option opts [String] :exclude_app_licensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_id_get(id, opts = {})
      objects_users_id_get_with_http_info(id, opts)
      nil
    end

    # Retrieve User
    # @param id [String] The user id field value. Use the value me to get information for the currently authenticated user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :exclude_vault_membership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
    # @option opts [String] :exclude_app_licensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_users_id_get"
      end
      # resource path
      local_var_path = '/objects/users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exclude_vault_membership'] = opts[:'exclude_vault_membership'] if !opts[:'exclude_vault_membership'].nil?
      query_params[:'exclude_app_licensing'] = opts[:'exclude_app_licensing'] if !opts[:'exclude_app_licensing'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve User Permissions
    # @param id [String] The ID of the user. Use the value me to retrieve information for the currently authenticated user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_id_permissions_get(id, opts = {})
      objects_users_id_permissions_get_with_http_info(id, opts)
      nil
    end

    # Retrieve User Permissions
    # @param id [String] The ID of the user. Use the value me to retrieve information for the currently authenticated user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_id_permissions_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_id_permissions_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_users_id_permissions_get"
      end
      # resource path
      local_var_path = '/objects/users/{id}/permissions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_id_permissions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_id_permissions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Single User
    # @param id [String] The user id field value. Use the value me to get information for the currently authenticated user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_id_put(id, opts = {})
      objects_users_id_put_with_http_info(id, opts)
      nil
    end

    # Update Single User
    # @param id [String] The user id field value. Use the value me to get information for the currently authenticated user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_users_id_put"
      end
      # resource path
      local_var_path = '/objects/users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate Session User
    # @param [Hash] opts the optional parameters
    # @option opts [String] :exclude_vault_membership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
    # @option opts [String] :exclude_app_licensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_me_get(opts = {})
      objects_users_me_get_with_http_info(opts)
      nil
    end

    # Validate Session User
    # @param [Hash] opts the optional parameters
    # @option opts [String] :exclude_vault_membership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
    # @option opts [String] :exclude_app_licensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_me_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_me_get ...'
      end
      # resource path
      local_var_path = '/objects/users/me'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exclude_vault_membership'] = opts[:'exclude_vault_membership'] if !opts[:'exclude_vault_membership'].nil?
      query_params[:'exclude_app_licensing'] = opts[:'exclude_app_licensing'] if !opts[:'exclude_app_licensing'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_me_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_me_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change My Password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_me_password_post(opts = {})
      objects_users_me_password_post_with_http_info(opts)
      nil
    end

    # Change My Password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_me_password_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_me_password_post ...'
      end
      # resource path
      local_var_path = '/objects/users/me/password'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_me_password_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_me_password_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve My User Permissions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_me_permissions_get(opts = {})
      objects_users_me_permissions_get_with_http_info(opts)
      nil
    end

    # Retrieve My User Permissions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_me_permissions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_me_permissions_get ...'
      end
      # resource path
      local_var_path = '/objects/users/me/permissions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_me_permissions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_me_permissions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update My User
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_me_put(opts = {})
      objects_users_me_put_with_http_info(opts)
      nil
    end

    # Update My User
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_me_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_me_put ...'
      end
      # resource path
      local_var_path = '/objects/users/me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_me_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_me_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Single User
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_post(opts = {})
      objects_users_post_with_http_info(opts)
      nil
    end

    # Create Single User
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_post ...'
      end
      # resource path
      local_var_path = '/objects/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Multiple Users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_put(opts = {})
      objects_users_put_with_http_info(opts)
      nil
    end

    # Update Multiple Users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_put ...'
      end
      # resource path
      local_var_path = '/objects/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable User
    # @param user_id [String] The user id field value. 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :domain When true, this disables the user account in all vaults in the domain.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_user_id_delete(user_id, opts = {})
      objects_users_user_id_delete_with_http_info(user_id, opts)
      nil
    end

    # Disable User
    # @param user_id [String] The user id field value. 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :domain When true, this disables the user account in all vaults in the domain.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_user_id_delete_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_user_id_delete ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.objects_users_user_id_delete"
      end
      # resource path
      local_var_path = '/objects/users/{user_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain'] = opts[:'domain'] if !opts[:'domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_user_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_user_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Vault Membership
    # @param user_id [String] The user id field value.
    # @param vault_id [String] The system-managed id field value assigned to each vault in the domain.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_users_user_id_vault_membership_vault_id_put(user_id, vault_id, opts = {})
      objects_users_user_id_vault_membership_vault_id_put_with_http_info(user_id, vault_id, opts)
      nil
    end

    # Update Vault Membership
    # @param user_id [String] The user id field value.
    # @param vault_id [String] The system-managed id field value assigned to each vault in the domain.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_user_id_vault_membership_vault_id_put_with_http_info(user_id, vault_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_users_user_id_vault_membership_vault_id_put ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.objects_users_user_id_vault_membership_vault_id_put"
      end
      # verify the required parameter 'vault_id' is set
      if @api_client.config.client_side_validation && vault_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_id' when calling DefaultApi.objects_users_user_id_vault_membership_vault_id_put"
      end
      # resource path
      local_var_path = '/objects/users/{user_id}/vault_membership/{vault_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'vault_id' + '}', CGI.escape(vault_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_users_user_id_vault_membership_vault_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_users_user_id_vault_membership_vault_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Vault Compare
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_vault_actions_compare_post(opts = {})
      objects_vault_actions_compare_post_with_http_info(opts)
      nil
    end

    # Vault Compare
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_vault_actions_compare_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_vault_actions_compare_post ...'
      end
      # resource path
      local_var_path = '/objects/vault/actions/compare'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_vault_actions_compare_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_vault_actions_compare_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Vault Configuration Report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_vault_actions_configreport_post(opts = {})
      objects_vault_actions_configreport_post_with_http_info(opts)
      nil
    end

    # Vault Configuration Report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_vault_actions_configreport_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.objects_vault_actions_configreport_post ...'
      end
      # resource path
      local_var_path = '/objects/vault/actions/configreport'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.objects_vault_actions_configreport_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_vault_actions_configreport_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Component Definition Query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def query_components_post(opts = {})
      query_components_post_with_http_info(opts)
      nil
    end

    # Component Definition Query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def query_components_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.query_components_post ...'
      end
      # resource path
      local_var_path = '/query/components'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.query_components_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#query_components_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Next Page URL
    # @param next_page [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_describe_query 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def query_next_page_post(next_page, opts = {})
      query_next_page_post_with_http_info(next_page, opts)
      nil
    end

    # Next Page URL
    # @param next_page [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_describe_query 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def query_next_page_post_with_http_info(next_page, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.query_next_page_post ...'
      end
      # verify the required parameter 'next_page' is set
      if @api_client.config.client_side_validation && next_page.nil?
        fail ArgumentError, "Missing the required parameter 'next_page' when calling DefaultApi.query_next_page_post"
      end
      # resource path
      local_var_path = '/query/{next_page}'.sub('{' + 'next_page' + '}', CGI.escape(next_page.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-DescribeQuery'] = opts[:'x_vault_api_describe_query'] if !opts[:'x_vault_api_describe_query'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.query_next_page_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#query_next_page_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Submitting a Query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_describe_query 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def query_post(opts = {})
      query_post_with_http_info(opts)
      nil
    end

    # Submitting a Query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_describe_query 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def query_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.query_post ...'
      end
      # resource path
      local_var_path = '/query'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-DescribeQuery'] = opts[:'x_vault_api_describe_query'] if !opts[:'x_vault_api_describe_query'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.query_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#query_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Previous Page URL
    # @param previous_page [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_describe_query 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def query_previous_page_post(previous_page, opts = {})
      query_previous_page_post_with_http_info(previous_page, opts)
      nil
    end

    # Previous Page URL
    # @param previous_page [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [Boolean] :x_vault_api_describe_query 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def query_previous_page_post_with_http_info(previous_page, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.query_previous_page_post ...'
      end
      # verify the required parameter 'previous_page' is set
      if @api_client.config.client_side_validation && previous_page.nil?
        fail ArgumentError, "Missing the required parameter 'previous_page' when calling DefaultApi.query_previous_page_post"
      end
      # resource path
      local_var_path = '/query/{previous_page}'.sub('{' + 'previous_page' + '}', CGI.escape(previous_page.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-DescribeQuery'] = opts[:'x_vault_api_describe_query'] if !opts[:'x_vault_api_describe_query'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.query_previous_page_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#query_previous_page_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Current User with SCIM
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_me_get(opts = {})
      scim_v2_me_get_with_http_info(opts)
      nil
    end

    # Retrieve Current User with SCIM
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_me_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_me_get ...'
      end
      # resource path
      local_var_path = '/scim/v2/Me'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'attributes'] = opts[:'attributes'] if !opts[:'attributes'].nil?
      query_params[:'excludedAttributes'] = opts[:'excluded_attributes'] if !opts[:'excluded_attributes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_me_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_me_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Current User with SCIM
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_me_put(opts = {})
      scim_v2_me_put_with_http_info(opts)
      nil
    end

    # Update Current User with SCIM
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_me_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_me_put ...'
      end
      # resource path
      local_var_path = '/scim/v2/Me'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'attributes'] = opts[:'attributes'] if !opts[:'attributes'].nil?
      query_params[:'excludedAttributes'] = opts[:'excluded_attributes'] if !opts[:'excluded_attributes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_me_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_me_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All SCIM Resource Types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_resource_types_get(opts = {})
      scim_v2_resource_types_get_with_http_info(opts)
      nil
    end

    # Retrieve All SCIM Resource Types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_resource_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_resource_types_get ...'
      end
      # resource path
      local_var_path = '/scim/v2/ResourceTypes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_resource_types_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_resource_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Single SCIM Resource Type
    # @param type [String] A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_resource_types_type_get(type, opts = {})
      scim_v2_resource_types_type_get_with_http_info(type, opts)
      nil
    end

    # Retrieve Single SCIM Resource Type
    # @param type [String] A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_resource_types_type_get_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_resource_types_type_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.scim_v2_resource_types_type_get"
      end
      # resource path
      local_var_path = '/scim/v2/ResourceTypes/{type}'.sub('{' + 'type' + '}', CGI.escape(type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_resource_types_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_resource_types_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All SCIM Schema Information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_schemas_get(opts = {})
      scim_v2_schemas_get_with_http_info(opts)
      nil
    end

    # Retrieve All SCIM Schema Information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_schemas_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_schemas_get ...'
      end
      # resource path
      local_var_path = '/scim/v2/Schemas'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_schemas_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_schemas_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Single SCIM Schema Information
    # @param id [String] The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_schemas_id_get(id, opts = {})
      scim_v2_schemas_id_get_with_http_info(id, opts)
      nil
    end

    # Retrieve Single SCIM Schema Information
    # @param id [String] The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_schemas_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_schemas_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.scim_v2_schemas_id_get"
      end
      # resource path
      local_var_path = '/scim/v2/Schemas/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_schemas_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_schemas_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve SCIM Provider
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_service_provider_config_get(opts = {})
      scim_v2_service_provider_config_get_with_http_info(opts)
      nil
    end

    # Retrieve SCIM Provider
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_service_provider_config_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_service_provider_config_get ...'
      end
      # resource path
      local_var_path = '/scim/v2/ServiceProviderConfig'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_service_provider_config_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_service_provider_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve SCIM Resources
    # @param type [String] The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :sort_by Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
    # @option opts [String] :sort_order Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
    # @option opts [String] :start_index Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_type_get(type, opts = {})
      scim_v2_type_get_with_http_info(type, opts)
      nil
    end

    # Retrieve SCIM Resources
    # @param type [String] The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :sort_by Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
    # @option opts [String] :sort_order Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
    # @option opts [String] :start_index Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_type_get_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_type_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.scim_v2_type_get"
      end
      # resource path
      local_var_path = '/scim/v2/{type}'.sub('{' + 'type' + '}', CGI.escape(type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'attributes'] = opts[:'attributes'] if !opts[:'attributes'].nil?
      query_params[:'excludedAttributes'] = opts[:'excluded_attributes'] if !opts[:'excluded_attributes'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'startIndex'] = opts[:'start_index'] if !opts[:'start_index'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Single SCIM Resource
    # @param type [String] The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
    # @param id [String] The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_type_id_get(type, id, opts = {})
      scim_v2_type_id_get_with_http_info(type, id, opts)
      nil
    end

    # Retrieve Single SCIM Resource
    # @param type [String] The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
    # @param id [String] The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_type_id_get_with_http_info(type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_type_id_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.scim_v2_type_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.scim_v2_type_id_get"
      end
      # resource path
      local_var_path = '/scim/v2/{type}/{id}'.sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'attributes'] = opts[:'attributes'] if !opts[:'attributes'].nil?
      query_params[:'excludedAttributes'] = opts[:'excluded_attributes'] if !opts[:'excluded_attributes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_type_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_type_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Users with SCIM
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :sort_by Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
    # @option opts [String] :sort_order Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
    # @option opts [String] :count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
    # @option opts [String] :start_index Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_users_get(opts = {})
      scim_v2_users_get_with_http_info(opts)
      nil
    end

    # Retrieve All Users with SCIM
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :sort_by Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
    # @option opts [String] :sort_order Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
    # @option opts [String] :count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
    # @option opts [String] :start_index Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_users_get ...'
      end
      # resource path
      local_var_path = '/scim/v2/Users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'attributes'] = opts[:'attributes'] if !opts[:'attributes'].nil?
      query_params[:'excludedAttributes'] = opts[:'excluded_attributes'] if !opts[:'excluded_attributes'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'startIndex'] = opts[:'start_index'] if !opts[:'start_index'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_users_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Single User with SCIM
    # @param id [String] The id of the user you wish to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_users_id_get(id, opts = {})
      scim_v2_users_id_get_with_http_info(id, opts)
      nil
    end

    # Retrieve Single User with SCIM
    # @param id [String] The id of the user you wish to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
    # @option opts [String] :attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
    # @option opts [String] :excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_users_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_users_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.scim_v2_users_id_get"
      end
      # resource path
      local_var_path = '/scim/v2/Users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'attributes'] = opts[:'attributes'] if !opts[:'attributes'].nil?
      query_params[:'excludedAttributes'] = opts[:'excluded_attributes'] if !opts[:'excluded_attributes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_users_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_users_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update User with SCIM
    # @param id [String] The id of the user you wish to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_users_id_put(id, opts = {})
      scim_v2_users_id_put_with_http_info(id, opts)
      nil
    end

    # Update User with SCIM
    # @param id [String] The id of the user you wish to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_users_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_users_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.scim_v2_users_id_put"
      end
      # resource path
      local_var_path = '/scim/v2/Users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_users_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_users_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create User with SCIM
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def scim_v2_users_post(opts = {})
      scim_v2_users_post_with_http_info(opts)
      nil
    end

    # Create User with SCIM
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_users_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scim_v2_users_post ...'
      end
      # resource path
      local_var_path = '/scim/v2/Users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.scim_v2_users_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scim_v2_users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Signing Certificate
    # @param cert_id [String] The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_certificate_cert_id_get(cert_id, opts = {})
      services_certificate_cert_id_get_with_http_info(cert_id, opts)
      nil
    end

    # Retrieve Signing Certificate
    # @param cert_id [String] The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_certificate_cert_id_get_with_http_info(cert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_certificate_cert_id_get ...'
      end
      # verify the required parameter 'cert_id' is set
      if @api_client.config.client_side_validation && cert_id.nil?
        fail ArgumentError, "Missing the required parameter 'cert_id' when calling DefaultApi.services_certificate_cert_id_get"
      end
      # resource path
      local_var_path = '/services/certificate/{cert_id}'.sub('{' + 'cert_id' + '}', CGI.escape(cert_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_certificate_cert_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_certificate_cert_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable Configuration Mode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_configuration_mode_actions_disable_post(opts = {})
      services_configuration_mode_actions_disable_post_with_http_info(opts)
      nil
    end

    # Disable Configuration Mode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_configuration_mode_actions_disable_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_configuration_mode_actions_disable_post ...'
      end
      # resource path
      local_var_path = '/services/configuration_mode/actions/disable'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_configuration_mode_actions_disable_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_configuration_mode_actions_disable_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Configuration Mode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_configuration_mode_actions_enable_post(opts = {})
      services_configuration_mode_actions_enable_post_with_http_info(opts)
      nil
    end

    # Enable Configuration Mode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_configuration_mode_actions_enable_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_configuration_mode_actions_enable_post ...'
      end
      # resource path
      local_var_path = '/services/configuration_mode/actions/enable'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_configuration_mode_actions_enable_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_configuration_mode_actions_enable_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Available Direct Data Files
    # @param [Hash] opts the optional parameters
    # @option opts [String] :extract_type The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
    # @option opts [Integer] :start_time Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
    # @option opts [Integer] :stop_time Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_directdata_files_get(opts = {})
      services_directdata_files_get_with_http_info(opts)
      nil
    end

    # Retrieve Available Direct Data Files
    # @param [Hash] opts the optional parameters
    # @option opts [String] :extract_type The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
    # @option opts [Integer] :start_time Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
    # @option opts [Integer] :stop_time Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_directdata_files_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_directdata_files_get ...'
      end
      # resource path
      local_var_path = '/services/directdata/files'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'extract_type'] = opts[:'extract_type'] if !opts[:'extract_type'].nil?
      query_params[:'start_time'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'stop_time'] = opts[:'stop_time'] if !opts[:'stop_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_directdata_files_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_directdata_files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Direct Data File
    # @param name [String] The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_directdata_files_name_get(name, opts = {})
      services_directdata_files_name_get_with_http_info(name, opts)
      nil
    end

    # Download Direct Data File
    # @param name [String] The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_directdata_files_name_get_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_directdata_files_name_get ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling DefaultApi.services_directdata_files_name_get"
      end
      # resource path
      local_var_path = '/services/directdata/files/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_directdata_files_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_directdata_files_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Item Content
    # @param item [String] The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_items_content_item_get(item, opts = {})
      services_file_staging_items_content_item_get_with_http_info(item, opts)
      nil
    end

    # Download Item Content
    # @param item [String] The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_items_content_item_get_with_http_info(item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_items_content_item_get ...'
      end
      # verify the required parameter 'item' is set
      if @api_client.config.client_side_validation && item.nil?
        fail ArgumentError, "Missing the required parameter 'item' when calling DefaultApi.services_file_staging_items_content_item_get"
      end
      # resource path
      local_var_path = '/services/file_staging/items/content/{item}'.sub('{' + 'item' + '}', CGI.escape(item.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Range'] = opts[:'range'] if !opts[:'range'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_items_content_item_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_items_content_item_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete File or Folder
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_items_item_delete(item, opts = {})
      services_file_staging_items_item_delete_with_http_info(item, opts)
      nil
    end

    # Delete File or Folder
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_items_item_delete_with_http_info(item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_items_item_delete ...'
      end
      # verify the required parameter 'item' is set
      if @api_client.config.client_side_validation && item.nil?
        fail ArgumentError, "Missing the required parameter 'item' when calling DefaultApi.services_file_staging_items_item_delete"
      end
      # resource path
      local_var_path = '/services/file_staging/items/{item}'.sub('{' + 'item' + '}', CGI.escape(item.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'recursive'] = opts[:'recursive'] if !opts[:'recursive'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_items_item_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_items_item_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Items at a Path
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
    # @option opts [String] :limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
    # @option opts [String] :format_result If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_items_item_get(item, opts = {})
      services_file_staging_items_item_get_with_http_info(item, opts)
      nil
    end

    # List Items at a Path
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
    # @option opts [String] :limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
    # @option opts [String] :format_result If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_items_item_get_with_http_info(item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_items_item_get ...'
      end
      # verify the required parameter 'item' is set
      if @api_client.config.client_side_validation && item.nil?
        fail ArgumentError, "Missing the required parameter 'item' when calling DefaultApi.services_file_staging_items_item_get"
      end
      # resource path
      local_var_path = '/services/file_staging/items/{item}'.sub('{' + 'item' + '}', CGI.escape(item.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'recursive'] = opts[:'recursive'] if !opts[:'recursive'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'format_result'] = opts[:'format_result'] if !opts[:'format_result'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_items_item_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_items_item_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Folder or File
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_items_item_put(item, opts = {})
      services_file_staging_items_item_put_with_http_info(item, opts)
      nil
    end

    # Update Folder or File
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_items_item_put_with_http_info(item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_items_item_put ...'
      end
      # verify the required parameter 'item' is set
      if @api_client.config.client_side_validation && item.nil?
        fail ArgumentError, "Missing the required parameter 'item' when calling DefaultApi.services_file_staging_items_item_put"
      end
      # resource path
      local_var_path = '/services/file_staging/items/{item}'.sub('{' + 'item' + '}', CGI.escape(item.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_items_item_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_items_item_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Folder or File
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_md5 Optional: The MD5 checksum of the file being uploaded.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_items_post(opts = {})
      services_file_staging_items_post_with_http_info(opts)
      nil
    end

    # Create Folder or File
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_md5 Optional: The MD5 checksum of the file being uploaded.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_items_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_items_post ...'
      end
      # resource path
      local_var_path = '/services/file_staging/items'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-MD5'] = opts[:'content_md5'] if !opts[:'content_md5'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_items_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_items_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Upload Sessions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_upload_get(opts = {})
      services_file_staging_upload_get_with_http_info(opts)
      nil
    end

    # List Upload Sessions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_upload_get ...'
      end
      # resource path
      local_var_path = '/services/file_staging/upload/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_upload_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_upload_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Resumable Upload Session
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_upload_post(opts = {})
      services_file_staging_upload_post_with_http_info(opts)
      nil
    end

    # Create Resumable Upload Session
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_upload_post ...'
      end
      # resource path
      local_var_path = '/services/file_staging/upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_upload_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Abort Upload Session
    # @param upload_session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_upload_upload_session_id_delete(upload_session_id, opts = {})
      services_file_staging_upload_upload_session_id_delete_with_http_info(upload_session_id, opts)
      nil
    end

    # Abort Upload Session
    # @param upload_session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_upload_session_id_delete_with_http_info(upload_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_upload_upload_session_id_delete ...'
      end
      # verify the required parameter 'upload_session_id' is set
      if @api_client.config.client_side_validation && upload_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'upload_session_id' when calling DefaultApi.services_file_staging_upload_upload_session_id_delete"
      end
      # resource path
      local_var_path = '/services/file_staging/upload/{upload_session_id}'.sub('{' + 'upload_session_id' + '}', CGI.escape(upload_session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_upload_upload_session_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_upload_upload_session_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Upload Session Details
    # @param upload_session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_upload_upload_session_id_get(upload_session_id, opts = {})
      services_file_staging_upload_upload_session_id_get_with_http_info(upload_session_id, opts)
      nil
    end

    # Get Upload Session Details
    # @param upload_session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_upload_session_id_get_with_http_info(upload_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_upload_upload_session_id_get ...'
      end
      # verify the required parameter 'upload_session_id' is set
      if @api_client.config.client_side_validation && upload_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'upload_session_id' when calling DefaultApi.services_file_staging_upload_upload_session_id_get"
      end
      # resource path
      local_var_path = '/services/file_staging/upload/{upload_session_id}'.sub('{' + 'upload_session_id' + '}', CGI.escape(upload_session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_upload_upload_session_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_upload_upload_session_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List File Parts Uploaded to Session
    # @param upload_session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_upload_upload_session_id_parts_get(upload_session_id, opts = {})
      services_file_staging_upload_upload_session_id_parts_get_with_http_info(upload_session_id, opts)
      nil
    end

    # List File Parts Uploaded to Session
    # @param upload_session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_upload_session_id_parts_get_with_http_info(upload_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_upload_upload_session_id_parts_get ...'
      end
      # verify the required parameter 'upload_session_id' is set
      if @api_client.config.client_side_validation && upload_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'upload_session_id' when calling DefaultApi.services_file_staging_upload_upload_session_id_parts_get"
      end
      # resource path
      local_var_path = '/services/file_staging/upload/{upload_session_id}/parts'.sub('{' + 'upload_session_id' + '}', CGI.escape(upload_session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_upload_upload_session_id_parts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_upload_upload_session_id_parts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Commit Upload Session
    # @param upload_session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_upload_upload_session_id_post(upload_session_id, opts = {})
      services_file_staging_upload_upload_session_id_post_with_http_info(upload_session_id, opts)
      nil
    end

    # Commit Upload Session
    # @param upload_session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_upload_session_id_post_with_http_info(upload_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_upload_upload_session_id_post ...'
      end
      # verify the required parameter 'upload_session_id' is set
      if @api_client.config.client_side_validation && upload_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'upload_session_id' when calling DefaultApi.services_file_staging_upload_upload_session_id_post"
      end
      # resource path
      local_var_path = '/services/file_staging/upload/{upload_session_id}'.sub('{' + 'upload_session_id' + '}', CGI.escape(upload_session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_upload_upload_session_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_upload_upload_session_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload to a Session
    # @param upload_session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_file_part_number The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
    # @option opts [String] :content_md5 Optional: The MD5 checksum of the file part being uploaded.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_file_staging_upload_upload_session_id_put(upload_session_id, opts = {})
      services_file_staging_upload_upload_session_id_put_with_http_info(upload_session_id, opts)
      nil
    end

    # Upload to a Session
    # @param upload_session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_file_part_number The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
    # @option opts [String] :content_md5 Optional: The MD5 checksum of the file part being uploaded.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_upload_session_id_put_with_http_info(upload_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_file_staging_upload_upload_session_id_put ...'
      end
      # verify the required parameter 'upload_session_id' is set
      if @api_client.config.client_side_validation && upload_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'upload_session_id' when calling DefaultApi.services_file_staging_upload_upload_session_id_put"
      end
      # resource path
      local_var_path = '/services/file_staging/upload/{upload_session_id}'.sub('{' + 'upload_session_id' + '}', CGI.escape(upload_session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-FilePartNumber'] = opts[:'x_vault_api_file_part_number'] if !opts[:'x_vault_api_file_part_number'].nil?
      header_params[:'Content-MD5'] = opts[:'content_md5'] if !opts[:'content_md5'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_file_staging_upload_upload_session_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_file_staging_upload_upload_session_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Job Histories
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
    # @option opts [String] :end_date Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
    # @option opts [String] :status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
    # @option opts [String] :limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_jobs_histories_get(opts = {})
      services_jobs_histories_get_with_http_info(opts)
      nil
    end

    # Retrieve Job Histories
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
    # @option opts [String] :end_date Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
    # @option opts [String] :status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
    # @option opts [String] :limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_histories_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_jobs_histories_get ...'
      end
      # resource path
      local_var_path = '/services/jobs/histories'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_jobs_histories_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_jobs_histories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Import Bulk Translation File Job Errors
    # @param job_id [String] The id value of the requested import job. This was returned from the Import Bulk Translation File request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_jobs_job_id_errors_get(job_id, opts = {})
      services_jobs_job_id_errors_get_with_http_info(job_id, opts)
      nil
    end

    # Retrieve Import Bulk Translation File Job Errors
    # @param job_id [String] The id value of the requested import job. This was returned from the Import Bulk Translation File request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_job_id_errors_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_jobs_job_id_errors_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.services_jobs_job_id_errors_get"
      end
      # resource path
      local_var_path = '/services/jobs/{job_id}/errors'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_jobs_job_id_errors_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_jobs_job_id_errors_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Job Status
    # @param job_id [String] The ID of the job, returned from the original job request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_jobs_job_id_get(job_id, opts = {})
      services_jobs_job_id_get_with_http_info(job_id, opts)
      nil
    end

    # Retrieve Job Status
    # @param job_id [String] The ID of the job, returned from the original job request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_job_id_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_jobs_job_id_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.services_jobs_job_id_get"
      end
      # resource path
      local_var_path = '/services/jobs/{job_id}'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_jobs_job_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_jobs_job_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Import Bulk Translation File Job Summary
    # @param job_id [String] The id value of the requested import job. This was returned from the Import Bulk Translation File request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_jobs_job_id_summary_get(job_id, opts = {})
      services_jobs_job_id_summary_get_with_http_info(job_id, opts)
      nil
    end

    # Retrieve Import Bulk Translation File Job Summary
    # @param job_id [String] The id value of the requested import job. This was returned from the Import Bulk Translation File request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_job_id_summary_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_jobs_job_id_summary_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.services_jobs_job_id_summary_get"
      end
      # resource path
      local_var_path = '/services/jobs/{job_id}/summary'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_jobs_job_id_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_jobs_job_id_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve SDK Job Tasks
    # @param job_id [String] The ID of the SDK job, returned from the original job request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_jobs_job_id_tasks_get(job_id, opts = {})
      services_jobs_job_id_tasks_get_with_http_info(job_id, opts)
      nil
    end

    # Retrieve SDK Job Tasks
    # @param job_id [String] The ID of the SDK job, returned from the original job request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_job_id_tasks_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_jobs_job_id_tasks_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.services_jobs_job_id_tasks_get"
      end
      # resource path
      local_var_path = '/services/jobs/{job_id}/tasks'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_jobs_job_id_tasks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_jobs_job_id_tasks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Job Monitors
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
    # @option opts [String] :end_date Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
    # @option opts [String] :status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
    # @option opts [String] :limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_jobs_monitors_get(opts = {})
      services_jobs_monitors_get_with_http_info(opts)
      nil
    end

    # Retrieve Job Monitors
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
    # @option opts [String] :end_date Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
    # @option opts [String] :status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
    # @option opts [String] :limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_monitors_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_jobs_monitors_get ...'
      end
      # resource path
      local_var_path = '/services/jobs/monitors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_jobs_monitors_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_jobs_monitors_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start Job
    # @param job_id [String] The ID of the scheduled job instance to start.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_jobs_start_now_job_id_post(job_id, opts = {})
      services_jobs_start_now_job_id_post_with_http_info(job_id, opts)
      nil
    end

    # Start Job
    # @param job_id [String] The ID of the scheduled job instance to start.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_start_now_job_id_post_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_jobs_start_now_job_id_post ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.services_jobs_start_now_job_id_post"
      end
      # resource path
      local_var_path = '/services/jobs/start_now/{job_id}'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_jobs_start_now_job_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_jobs_start_now_job_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract Data Files
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_loader_extract_post(opts = {})
      services_loader_extract_post_with_http_info(opts)
      nil
    end

    # Extract Data Files
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_extract_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_loader_extract_post ...'
      end
      # resource path
      local_var_path = '/services/loader/extract'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_loader_extract_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_loader_extract_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Load Failure Log Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_loader_job_id_tasks_task_id_failurelog_get(job_id, task_id, opts = {})
      services_loader_job_id_tasks_task_id_failurelog_get_with_http_info(job_id, task_id, opts)
      nil
    end

    # Retrieve Load Failure Log Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_job_id_tasks_task_id_failurelog_get_with_http_info(job_id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_loader_job_id_tasks_task_id_failurelog_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_failurelog_get"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_failurelog_get"
      end
      # resource path
      local_var_path = '/services/loader/{job_id}/tasks/{task_id}/failurelog'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s)).sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_loader_job_id_tasks_task_id_failurelog_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_loader_job_id_tasks_task_id_failurelog_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Loader Extract Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_loader_job_id_tasks_task_id_results_get(job_id, task_id, opts = {})
      services_loader_job_id_tasks_task_id_results_get_with_http_info(job_id, task_id, opts)
      nil
    end

    # Retrieve Loader Extract Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_job_id_tasks_task_id_results_get_with_http_info(job_id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_loader_job_id_tasks_task_id_results_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_results_get"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_results_get"
      end
      # resource path
      local_var_path = '/services/loader/{job_id}/tasks/{task_id}/results'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s)).sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_loader_job_id_tasks_task_id_results_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_loader_job_id_tasks_task_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Loader Extract Renditions Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_loader_job_id_tasks_task_id_results_renditions_get(job_id, task_id, opts = {})
      services_loader_job_id_tasks_task_id_results_renditions_get_with_http_info(job_id, task_id, opts)
      nil
    end

    # Retrieve Loader Extract Renditions Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_job_id_tasks_task_id_results_renditions_get_with_http_info(job_id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_loader_job_id_tasks_task_id_results_renditions_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_results_renditions_get"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_results_renditions_get"
      end
      # resource path
      local_var_path = '/services/loader/{job_id}/tasks/{task_id}/results/renditions'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s)).sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_loader_job_id_tasks_task_id_results_renditions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_loader_job_id_tasks_task_id_results_renditions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Load Success Log Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_loader_job_id_tasks_task_id_successlog_get(job_id, task_id, opts = {})
      services_loader_job_id_tasks_task_id_successlog_get_with_http_info(job_id, task_id, opts)
      nil
    end

    # Retrieve Load Success Log Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_job_id_tasks_task_id_successlog_get_with_http_info(job_id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_loader_job_id_tasks_task_id_successlog_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_successlog_get"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_successlog_get"
      end
      # resource path
      local_var_path = '/services/loader/{job_id}/tasks/{task_id}/successlog'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s)).sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_loader_job_id_tasks_task_id_successlog_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_loader_job_id_tasks_task_id_successlog_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Load Data Objects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_loader_load_post(opts = {})
      services_loader_load_post_with_http_info(opts)
      nil
    end

    # Load Data Objects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_load_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_loader_load_post ...'
      end
      # resource path
      local_var_path = '/services/loader/load'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_loader_load_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_loader_load_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate Package
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_package_actions_validate_post(opts = {})
      services_package_actions_validate_post_with_http_info(opts)
      nil
    end

    # Validate Package
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_package_actions_validate_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_package_actions_validate_post ...'
      end
      # resource path
      local_var_path = '/services/package/actions/validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_package_actions_validate_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_package_actions_validate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export Package
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_package_post(opts = {})
      services_package_post_with_http_info(opts)
      nil
    end

    # Export Package
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_package_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_package_post ...'
      end
      # resource path
      local_var_path = '/services/package'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_package_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_package_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import Package
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_package_put(opts = {})
      services_package_put_with_http_info(opts)
      nil
    end

    # Import Package
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_package_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_package_put ...'
      end
      # resource path
      local_var_path = '/services/package'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_package_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_package_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Queues
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_queues_get(opts = {})
      services_queues_get_with_http_info(opts)
      nil
    end

    # Retrieve All Queues
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_queues_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_queues_get ...'
      end
      # resource path
      local_var_path = '/services/queues'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_queues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_queues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable Delivery
    # @param queue_name [String] The name of a specific Queue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_queues_queue_name_actions_disable_delivery_put(queue_name, opts = {})
      services_queues_queue_name_actions_disable_delivery_put_with_http_info(queue_name, opts)
      nil
    end

    # Disable Delivery
    # @param queue_name [String] The name of a specific Queue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_queues_queue_name_actions_disable_delivery_put_with_http_info(queue_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_queues_queue_name_actions_disable_delivery_put ...'
      end
      # verify the required parameter 'queue_name' is set
      if @api_client.config.client_side_validation && queue_name.nil?
        fail ArgumentError, "Missing the required parameter 'queue_name' when calling DefaultApi.services_queues_queue_name_actions_disable_delivery_put"
      end
      # resource path
      local_var_path = '/services/queues/{queue_name}/actions/disable_delivery'.sub('{' + 'queue_name' + '}', CGI.escape(queue_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_queues_queue_name_actions_disable_delivery_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_queues_queue_name_actions_disable_delivery_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Delivery
    # @param queue_name [String] The name of a specific Queue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_queues_queue_name_actions_enable_delivery_put(queue_name, opts = {})
      services_queues_queue_name_actions_enable_delivery_put_with_http_info(queue_name, opts)
      nil
    end

    # Enable Delivery
    # @param queue_name [String] The name of a specific Queue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_queues_queue_name_actions_enable_delivery_put_with_http_info(queue_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_queues_queue_name_actions_enable_delivery_put ...'
      end
      # verify the required parameter 'queue_name' is set
      if @api_client.config.client_side_validation && queue_name.nil?
        fail ArgumentError, "Missing the required parameter 'queue_name' when calling DefaultApi.services_queues_queue_name_actions_enable_delivery_put"
      end
      # resource path
      local_var_path = '/services/queues/{queue_name}/actions/enable_delivery'.sub('{' + 'queue_name' + '}', CGI.escape(queue_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_queues_queue_name_actions_enable_delivery_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_queues_queue_name_actions_enable_delivery_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset Queue
    # @param queue_name [String] The name of a specific Queue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_queues_queue_name_actions_reset_put(queue_name, opts = {})
      services_queues_queue_name_actions_reset_put_with_http_info(queue_name, opts)
      nil
    end

    # Reset Queue
    # @param queue_name [String] The name of a specific Queue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_queues_queue_name_actions_reset_put_with_http_info(queue_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_queues_queue_name_actions_reset_put ...'
      end
      # verify the required parameter 'queue_name' is set
      if @api_client.config.client_side_validation && queue_name.nil?
        fail ArgumentError, "Missing the required parameter 'queue_name' when calling DefaultApi.services_queues_queue_name_actions_reset_put"
      end
      # resource path
      local_var_path = '/services/queues/{queue_name}/actions/reset'.sub('{' + 'queue_name' + '}', CGI.escape(queue_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_queues_queue_name_actions_reset_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_queues_queue_name_actions_reset_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Queue Status
    # @param queue_name [String] The name of a specific queue. For example, queue__c.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_queues_queue_name_get(queue_name, opts = {})
      services_queues_queue_name_get_with_http_info(queue_name, opts)
      nil
    end

    # Retrieve Queue Status
    # @param queue_name [String] The name of a specific queue. For example, queue__c.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_queues_queue_name_get_with_http_info(queue_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_queues_queue_name_get ...'
      end
      # verify the required parameter 'queue_name' is set
      if @api_client.config.client_side_validation && queue_name.nil?
        fail ArgumentError, "Missing the required parameter 'queue_name' when calling DefaultApi.services_queues_queue_name_get"
      end
      # resource path
      local_var_path = '/services/queues/{queue_name}'.sub('{' + 'queue_name' + '}', CGI.escape(queue_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_queues_queue_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_queues_queue_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate Imported Package
    # @param package_id [String] The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def services_vobject_vault_package_v_package_id_actions_validate_post(package_id, opts = {})
      services_vobject_vault_package_v_package_id_actions_validate_post_with_http_info(package_id, opts)
      nil
    end

    # Validate Imported Package
    # @param package_id [String] The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_vobject_vault_package_v_package_id_actions_validate_post_with_http_info(package_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.services_vobject_vault_package_v_package_id_actions_validate_post ...'
      end
      # verify the required parameter 'package_id' is set
      if @api_client.config.client_side_validation && package_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_id' when calling DefaultApi.services_vobject_vault_package_v_package_id_actions_validate_post"
      end
      # resource path
      local_var_path = '/services/vobject/vault_package__v/{package_id}/actions/validate'.sub('{' + 'package_id' + '}', CGI.escape(package_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.services_vobject_vault_package_v_package_id_actions_validate_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_vobject_vault_package_v_package_id_actions_validate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # End Session
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization The Vault sessionId to end.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def session_delete(opts = {})
      session_delete_with_http_info(opts)
      nil
    end

    # End Session
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization The Vault sessionId to end.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def session_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.session_delete ...'
      end
      # resource path
      local_var_path = '/session'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.session_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#session_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Single Client Code Distribution
    # @param distribution_name [String] The name attribute of the client code distribution to download.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def uicode_distributions_distribution_name_code_get(distribution_name, opts = {})
      uicode_distributions_distribution_name_code_get_with_http_info(distribution_name, opts)
      nil
    end

    # Download Single Client Code Distribution
    # @param distribution_name [String] The name attribute of the client code distribution to download.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def uicode_distributions_distribution_name_code_get_with_http_info(distribution_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.uicode_distributions_distribution_name_code_get ...'
      end
      # verify the required parameter 'distribution_name' is set
      if @api_client.config.client_side_validation && distribution_name.nil?
        fail ArgumentError, "Missing the required parameter 'distribution_name' when calling DefaultApi.uicode_distributions_distribution_name_code_get"
      end
      # resource path
      local_var_path = '/uicode/distributions/{distribution_name}/code'.sub('{' + 'distribution_name' + '}', CGI.escape(distribution_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.uicode_distributions_distribution_name_code_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#uicode_distributions_distribution_name_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Single Client Code Distribution
    # @param distribution_name [String] The name attribute of the client code distribution to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def uicode_distributions_distribution_name_delete(distribution_name, opts = {})
      uicode_distributions_distribution_name_delete_with_http_info(distribution_name, opts)
      nil
    end

    # Delete Single Client Code Distribution
    # @param distribution_name [String] The name attribute of the client code distribution to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def uicode_distributions_distribution_name_delete_with_http_info(distribution_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.uicode_distributions_distribution_name_delete ...'
      end
      # verify the required parameter 'distribution_name' is set
      if @api_client.config.client_side_validation && distribution_name.nil?
        fail ArgumentError, "Missing the required parameter 'distribution_name' when calling DefaultApi.uicode_distributions_distribution_name_delete"
      end
      # resource path
      local_var_path = '/uicode/distributions/{distribution_name}'.sub('{' + 'distribution_name' + '}', CGI.escape(distribution_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.uicode_distributions_distribution_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#uicode_distributions_distribution_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Single Client Code Distribution Metadata
    # @param distribution_name [String] The name attribute of the client code distribution to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def uicode_distributions_distribution_name_get(distribution_name, opts = {})
      uicode_distributions_distribution_name_get_with_http_info(distribution_name, opts)
      nil
    end

    # Retrieve Single Client Code Distribution Metadata
    # @param distribution_name [String] The name attribute of the client code distribution to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def uicode_distributions_distribution_name_get_with_http_info(distribution_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.uicode_distributions_distribution_name_get ...'
      end
      # verify the required parameter 'distribution_name' is set
      if @api_client.config.client_side_validation && distribution_name.nil?
        fail ArgumentError, "Missing the required parameter 'distribution_name' when calling DefaultApi.uicode_distributions_distribution_name_get"
      end
      # resource path
      local_var_path = '/uicode/distributions/{distribution_name}'.sub('{' + 'distribution_name' + '}', CGI.escape(distribution_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.uicode_distributions_distribution_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#uicode_distributions_distribution_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Client Code Distribution Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def uicode_distributions_get(opts = {})
      uicode_distributions_get_with_http_info(opts)
      nil
    end

    # Retrieve All Client Code Distribution Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def uicode_distributions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.uicode_distributions_get ...'
      end
      # resource path
      local_var_path = '/uicode/distributions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.uicode_distributions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#uicode_distributions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or Replace Single Client Code Distribution
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def uicode_distributions_post(opts = {})
      uicode_distributions_post_with_http_info(opts)
      nil
    end

    # Add or Replace Single Client Code Distribution
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def uicode_distributions_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.uicode_distributions_post ...'
      end
      # resource path
      local_var_path = '/uicode/distributions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.uicode_distributions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#uicode_distributions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deploy Package
    # @param package_id [String] The id field value of the vault_package__v object record used for deployment. See Import Package.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobject_vault_package_v_package_id_actions_deploy_post(package_id, opts = {})
      vobject_vault_package_v_package_id_actions_deploy_post_with_http_info(package_id, opts)
      nil
    end

    # Deploy Package
    # @param package_id [String] The id field value of the vault_package__v object record used for deployment. See Import Package.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobject_vault_package_v_package_id_actions_deploy_post_with_http_info(package_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobject_vault_package_v_package_id_actions_deploy_post ...'
      end
      # verify the required parameter 'package_id' is set
      if @api_client.config.client_side_validation && package_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_id' when calling DefaultApi.vobject_vault_package_v_package_id_actions_deploy_post"
      end
      # resource path
      local_var_path = '/vobject/vault_package__v/{package_id}/actions/deploy'.sub('{' + 'package_id' + '}', CGI.escape(package_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobject_vault_package_v_package_id_actions_deploy_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobject_vault_package_v_package_id_actions_deploy_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Package Deploy Results
    # @param package_id [String] The id field value of the vault_package__v object record used for deployment. See Deploy Package.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobject_vault_package_v_package_id_actions_deploy_results_get(package_id, opts = {})
      vobject_vault_package_v_package_id_actions_deploy_results_get_with_http_info(package_id, opts)
      nil
    end

    # Retrieve Package Deploy Results
    # @param package_id [String] The id field value of the vault_package__v object record used for deployment. See Deploy Package.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobject_vault_package_v_package_id_actions_deploy_results_get_with_http_info(package_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobject_vault_package_v_package_id_actions_deploy_results_get ...'
      end
      # verify the required parameter 'package_id' is set
      if @api_client.config.client_side_validation && package_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_id' when calling DefaultApi.vobject_vault_package_v_package_id_actions_deploy_results_get"
      end
      # resource path
      local_var_path = '/vobject/vault_package__v/{package_id}/actions/deploy/results'.sub('{' + 'package_id' + '}', CGI.escape(package_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobject_vault_package_v_package_id_actions_deploy_results_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobject_vault_package_v_package_id_actions_deploy_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Results of Cascade Delete Job
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param job_status [String] 
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_cascadedelete_results_object_name_job_status_job_id_get(object_name, job_status, job_id, opts = {})
      vobjects_cascadedelete_results_object_name_job_status_job_id_get_with_http_info(object_name, job_status, job_id, opts)
      nil
    end

    # Retrieve Results of Cascade Delete Job
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param job_status [String] 
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_cascadedelete_results_object_name_job_status_job_id_get_with_http_info(object_name, job_status, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_cascadedelete_results_object_name_job_status_job_id_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_cascadedelete_results_object_name_job_status_job_id_get"
      end
      # verify the required parameter 'job_status' is set
      if @api_client.config.client_side_validation && job_status.nil?
        fail ArgumentError, "Missing the required parameter 'job_status' when calling DefaultApi.vobjects_cascadedelete_results_object_name_job_status_job_id_get"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.vobjects_cascadedelete_results_object_name_job_status_job_id_get"
      end
      # resource path
      local_var_path = '/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'job_status' + '}', CGI.escape(job_status.to_s)).sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_cascadedelete_results_object_name_job_status_job_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_cascadedelete_results_object_name_job_status_job_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Results of Deep Copy Job
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param job_status [String] The ID of the job, retrieved from the response of the job request.
    # @param job_id [String] Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_deepcopy_results_object_name_job_status_job_id_get(object_name, job_status, job_id, opts = {})
      vobjects_deepcopy_results_object_name_job_status_job_id_get_with_http_info(object_name, job_status, job_id, opts)
      nil
    end

    # Retrieve Results of Deep Copy Job
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param job_status [String] The ID of the job, retrieved from the response of the job request.
    # @param job_id [String] Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_deepcopy_results_object_name_job_status_job_id_get_with_http_info(object_name, job_status, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_deepcopy_results_object_name_job_status_job_id_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_deepcopy_results_object_name_job_status_job_id_get"
      end
      # verify the required parameter 'job_status' is set
      if @api_client.config.client_side_validation && job_status.nil?
        fail ArgumentError, "Missing the required parameter 'job_status' when calling DefaultApi.vobjects_deepcopy_results_object_name_job_status_job_id_get"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.vobjects_deepcopy_results_object_name_job_status_job_id_get"
      end
      # resource path
      local_var_path = '/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'job_status' + '}', CGI.escape(job_status.to_s)).sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_deepcopy_results_object_name_job_status_job_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_deepcopy_results_object_name_job_status_job_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Placeholder from an EDL Item
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_edl_item_v_actions_createplaceholder_post(opts = {})
      vobjects_edl_item_v_actions_createplaceholder_post_with_http_info(opts)
      nil
    end

    # Create a Placeholder from an EDL Item
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_edl_item_v_actions_createplaceholder_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_edl_item_v_actions_createplaceholder_post ...'
      end
      # resource path
      local_var_path = '/vobjects/edl_item__v/actions/createplaceholder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_edl_item_v_actions_createplaceholder_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_edl_item_v_actions_createplaceholder_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Merge Records Job Log
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_merges_job_id_log_get(job_id, opts = {})
      vobjects_merges_job_id_log_get_with_http_info(job_id, opts)
      nil
    end

    # Download Merge Records Job Log
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_merges_job_id_log_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_merges_job_id_log_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.vobjects_merges_job_id_log_get"
      end
      # resource path
      local_var_path = '/vobjects/merges/{job_id}/log'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_merges_job_id_log_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_merges_job_id_log_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Record Merge Results
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_merges_job_id_results_get(job_id, opts = {})
      vobjects_merges_job_id_results_get_with_http_info(job_id, opts)
      nil
    end

    # Retrieve Record Merge Results
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_merges_job_id_results_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_merges_job_id_results_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.vobjects_merges_job_id_results_get"
      end
      # resource path
      local_var_path = '/vobjects/merges/{job_id}/results'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_merges_job_id_results_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_merges_job_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Record Merge Status
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_merges_job_id_status_get(job_id, opts = {})
      vobjects_merges_job_id_status_get_with_http_info(job_id, opts)
      nil
    end

    # Retrieve Record Merge Status
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_merges_job_id_status_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_merges_job_id_status_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.vobjects_merges_job_id_status_get"
      end
      # resource path
      local_var_path = '/vobjects/merges/{job_id}/status'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_merges_job_id_status_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_merges_job_id_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Object Action on Multiple Records
    # @param object_name [String] The object name__v field value.
    # @param action_name [String] Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_actions_action_name_post(object_name, action_name, opts = {})
      vobjects_object_name_actions_action_name_post_with_http_info(object_name, action_name, opts)
      nil
    end

    # Initiate Object Action on Multiple Records
    # @param object_name [String] The object name__v field value.
    # @param action_name [String] Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_action_name_post_with_http_info(object_name, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_actions_action_name_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_action_name_post"
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling DefaultApi.vobjects_object_name_actions_action_name_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/actions/{action_name}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'action_name' + '}', CGI.escape(action_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_actions_action_name_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_actions_action_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change Object Type
    # @param object_name [String] The name of the object.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_actions_changetype_post(object_name, opts = {})
      vobjects_object_name_actions_changetype_post_with_http_info(object_name, opts)
      nil
    end

    # Change Object Type
    # @param object_name [String] The name of the object.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_changetype_post_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_actions_changetype_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_changetype_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/actions/changetype'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_actions_changetype_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_actions_changetype_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Record Merge
    # @param object_name [String] The object name__v field value. For example, account__v. This object must have Enable Merges configured.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @option opts [Array<VobjectsObjectNameActionsMergePostRequestInner>] :vobjects_object_name_actions_merge_post_request_inner 
    # @return [nil]
    def vobjects_object_name_actions_merge_post(object_name, opts = {})
      vobjects_object_name_actions_merge_post_with_http_info(object_name, opts)
      nil
    end

    # Initiate Record Merge
    # @param object_name [String] The object name__v field value. For example, account__v. This object must have Enable Merges configured.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @option opts [Array<VobjectsObjectNameActionsMergePostRequestInner>] :vobjects_object_name_actions_merge_post_request_inner 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_merge_post_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_actions_merge_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_merge_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/actions/merge'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'vobjects_object_name_actions_merge_post_request_inner'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_actions_merge_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_actions_merge_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Roll-up Field Recalculation Status
    # @param object_name [String] The name of the object for which to check the status of a Roll-up field recalculation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_actions_recalculaterollups_get(object_name, opts = {})
      vobjects_object_name_actions_recalculaterollups_get_with_http_info(object_name, opts)
      nil
    end

    # Retrieve Roll-up Field Recalculation Status
    # @param object_name [String] The name of the object for which to check the status of a Roll-up field recalculation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_recalculaterollups_get_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_actions_recalculaterollups_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_recalculaterollups_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/actions/recalculaterollups'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_actions_recalculaterollups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_actions_recalculaterollups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recalculate Roll-up Fields
    # @param object_name [String] The name of the object for which to check the status of a Roll-up field recalculation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_actions_recalculaterollups_post(object_name, opts = {})
      vobjects_object_name_actions_recalculaterollups_post_with_http_info(object_name, opts)
      nil
    end

    # Recalculate Roll-up Fields
    # @param object_name [String] The name of the object for which to check the status of a Roll-up field recalculation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_recalculaterollups_post_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_actions_recalculaterollups_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_recalculaterollups_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/actions/recalculaterollups'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_actions_recalculaterollups_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_actions_recalculaterollups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Corporate Currency Fields
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_actions_updatecorporatecurrency_put(object_name, opts = {})
      vobjects_object_name_actions_updatecorporatecurrency_put_with_http_info(object_name, opts)
      nil
    end

    # Update Corporate Currency Fields
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_updatecorporatecurrency_put_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_actions_updatecorporatecurrency_put ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_updatecorporatecurrency_put"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/actions/updatecorporatecurrency'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_actions_updatecorporatecurrency_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_actions_updatecorporatecurrency_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Multiple Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_attachments_batch_delete(object_name, opts = {})
      vobjects_object_name_attachments_batch_delete_with_http_info(object_name, opts)
      nil
    end

    # Delete Multiple Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_attachments_batch_delete_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_attachments_batch_delete ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_attachments_batch_delete"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/attachments/batch'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'idParam'] = opts[:'id_param'] if !opts[:'id_param'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_attachments_batch_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_attachments_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Multiple Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_attachments_batch_post(object_name, opts = {})
      vobjects_object_name_attachments_batch_post_with_http_info(object_name, opts)
      nil
    end

    # Create Multiple Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_attachments_batch_post_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_attachments_batch_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_attachments_batch_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/attachments/batch'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_attachments_batch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_attachments_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Multiple Object Record Attachment Descriptions
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_attachments_batch_put(object_name, opts = {})
      vobjects_object_name_attachments_batch_put_with_http_info(object_name, opts)
      nil
    end

    # Update Multiple Object Record Attachment Descriptions
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_attachments_batch_put_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_attachments_batch_put ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_attachments_batch_put"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/attachments/batch'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_attachments_batch_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_attachments_batch_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type Can be text/csv or application/json
    # @option opts [String] :accept Can be text/csv or application/json
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_delete(object_name, opts = {})
      vobjects_object_name_delete_with_http_info(object_name, opts)
      nil
    end

    # Delete Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type Can be text/csv or application/json
    # @option opts [String] :accept Can be text/csv or application/json
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_delete_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_delete ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_delete"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Object Record Roles
    # @param object_name [String] The object name.
    # @param id [String] The id of the document, binder, or object record.
    # @param role_name [String] Optional: Include a role name to filter for a specific role. For example, owner__v.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_id_roles_role_name_get(object_name, id, role_name, opts = {})
      vobjects_object_name_id_roles_role_name_get_with_http_info(object_name, id, role_name, opts)
      nil
    end

    # Retrieve Object Record Roles
    # @param object_name [String] The object name.
    # @param id [String] The id of the document, binder, or object record.
    # @param role_name [String] Optional: Include a role name to filter for a specific role. For example, owner__v.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_id_roles_role_name_get_with_http_info(object_name, id, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_id_roles_role_name_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_id_roles_role_name_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.vobjects_object_name_id_roles_role_name_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling DefaultApi.vobjects_object_name_id_roles_role_name_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{id}/roles/{role_name}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role_name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_id_roles_role_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_id_roles_role_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Object User Actions Details
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @param action_name [String] The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_actions_action_name_get(object_name, object_record_id, action_name, opts = {})
      vobjects_object_name_object_record_id_actions_action_name_get_with_http_info(object_name, object_record_id, action_name, opts)
      nil
    end

    # Retrieve Object User Actions Details
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @param action_name [String] The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_actions_action_name_get_with_http_info(object_name, object_record_id, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_actions_action_name_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_get"
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/actions/{action_name}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'action_name' + '}', CGI.escape(action_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_actions_action_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_actions_action_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Object Action on a Single Record
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @param action_name [String] The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_actions_action_name_post(object_name, object_record_id, action_name, opts = {})
      vobjects_object_name_object_record_id_actions_action_name_post_with_http_info(object_name, object_record_id, action_name, opts)
      nil
    end

    # Initiate Object Action on a Single Record
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @param action_name [String] The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_actions_action_name_post_with_http_info(object_name, object_record_id, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_actions_action_name_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_post"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_post"
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/actions/{action_name}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'action_name' + '}', CGI.escape(action_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_actions_action_name_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_actions_action_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cascade Delete Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_actions_cascadedelete_post(object_name, object_record_id, opts = {})
      vobjects_object_name_object_record_id_actions_cascadedelete_post_with_http_info(object_name, object_record_id, opts)
      nil
    end

    # Cascade Delete Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_actions_cascadedelete_post_with_http_info(object_name, object_record_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_actions_cascadedelete_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_cascadedelete_post"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_actions_cascadedelete_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/actions/cascadedelete'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_actions_cascadedelete_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_actions_cascadedelete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deep Copy Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_actions_deepcopy_post(object_name, object_record_id, opts = {})
      vobjects_object_name_object_record_id_actions_deepcopy_post_with_http_info(object_name, object_record_id, opts)
      nil
    end

    # Deep Copy Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_actions_deepcopy_post_with_http_info(object_name, object_record_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_actions_deepcopy_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_deepcopy_post"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_actions_deepcopy_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/actions/deepcopy'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_actions_deepcopy_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_actions_deepcopy_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Object Record User Actions
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc Optional: When true, retrieves localized (translated) strings for the label. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_actions_get(object_name, object_record_id, opts = {})
      vobjects_object_name_object_record_id_actions_get_with_http_info(object_name, object_record_id, opts)
      nil
    end

    # Retrieve Object Record User Actions
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :loc Optional: When true, retrieves localized (translated) strings for the label. 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_actions_get_with_http_info(object_name, object_record_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_actions_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_actions_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/actions'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'loc'] = opts[:'loc'] if !opts[:'loc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Attachment Field File
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @param attachment_field_name [String] The name of the Attachment field to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get(object_name, object_record_id, attachment_field_name, opts = {})
      vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get_with_http_info(object_name, object_record_id, attachment_field_name, opts)
      nil
    end

    # Download Attachment Field File
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @param attachment_field_name [String] The name of the Attachment field to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get_with_http_info(object_name, object_record_id, attachment_field_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get"
      end
      # verify the required parameter 'attachment_field_name' is set
      if @api_client.config.client_side_validation && attachment_field_name.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_field_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'attachment_field_name' + '}', CGI.escape(attachment_field_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Attachment Field File
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @param attachment_field_name [String] The name of the Attachment field to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post(object_name, object_record_id, attachment_field_name, opts = {})
      vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post_with_http_info(object_name, object_record_id, attachment_field_name, opts)
      nil
    end

    # Update Attachment Field File
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @param attachment_field_name [String] The name of the Attachment field to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post_with_http_info(object_name, object_record_id, attachment_field_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post"
      end
      # verify the required parameter 'attachment_field_name' is set
      if @api_client.config.client_side_validation && attachment_field_name.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_field_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'attachment_field_name' + '}', CGI.escape(attachment_field_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download All Attachment Field Files
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachment_fields_file_get(object_name, object_record_id, opts = {})
      vobjects_object_name_object_record_id_attachment_fields_file_get_with_http_info(object_name, object_record_id, opts)
      nil
    end

    # Download All Attachment Field Files
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachment_fields_file_get_with_http_info(object_name, object_record_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachment_fields_file_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_file_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_file_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachment_fields/file'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachment_fields_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachment_fields_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Object Record Attachment
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_delete(object_name, object_record_id, attachment_id, opts = {})
      vobjects_object_name_object_record_id_attachments_attachment_id_delete_with_http_info(object_name, object_record_id, attachment_id, opts)
      nil
    end

    # Delete Object Record Attachment
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_delete_with_http_info(object_name, object_record_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_delete ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_delete"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_delete"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_delete"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Object Record Attachment Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_get(object_name, object_record_id, attachment_id, opts = {})
      vobjects_object_name_object_record_id_attachments_attachment_id_get_with_http_info(object_name, object_record_id, attachment_id, opts)
      nil
    end

    # Retrieve Object Record Attachment Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_get_with_http_info(object_name, object_record_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_get"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Object Record Attachment Description
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_put(object_name, object_record_id, attachment_id, opts = {})
      vobjects_object_name_object_record_id_attachments_attachment_id_put_with_http_info(object_name, object_record_id, attachment_id, opts)
      nil
    end

    # Update Object Record Attachment Description
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_put_with_http_info(object_name, object_record_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_put ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_put"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_put"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_put"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Object Record Attachment Version
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete(object_name, object_record_id, attachment_id, attachment_version, opts = {})
      vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(object_name, object_record_id, attachment_id, attachment_version, opts)
      nil
    end

    # Delete Object Record Attachment Version
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(object_name, object_record_id, attachment_id, attachment_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete"
      end
      # verify the required parameter 'attachment_version' is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_version' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s)).sub('{' + 'attachment_version' + '}', CGI.escape(attachment_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Object Record Attachment File
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get(object_name, object_record_id, attachment_id, attachment_version, opts = {})
      vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(object_name, object_record_id, attachment_id, attachment_version, opts)
      nil
    end

    # Download Object Record Attachment File
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(object_name, object_record_id, attachment_id, attachment_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # verify the required parameter 'attachment_version' is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_version' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s)).sub('{' + 'attachment_version' + '}', CGI.escape(attachment_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Object Record Attachment Version Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get(object_name, object_record_id, attachment_id, attachment_version, opts = {})
      vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(object_name, object_record_id, attachment_id, attachment_version, opts)
      nil
    end

    # Retrieve Object Record Attachment Version Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(object_name, object_record_id, attachment_id, attachment_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get"
      end
      # verify the required parameter 'attachment_version' is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_version' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s)).sub('{' + 'attachment_version' + '}', CGI.escape(attachment_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore Object Record Attachment Version
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :restore 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post(object_name, object_record_id, attachment_id, attachment_version, opts = {})
      vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(object_name, object_record_id, attachment_id, attachment_version, opts)
      nil
    end

    # Restore Object Record Attachment Version
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :restore 
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(object_name, object_record_id, attachment_id, attachment_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post"
      end
      # verify the required parameter 'attachment_version' is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_version' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s)).sub('{' + 'attachment_version' + '}', CGI.escape(attachment_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'restore'] = opts[:'restore'] if !opts[:'restore'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Object Record Attachment Versions
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_get(object_name, object_record_id, attachment_id, opts = {})
      vobjects_object_name_object_record_id_attachments_attachment_id_versions_get_with_http_info(object_name, object_record_id, attachment_id, opts)
      nil
    end

    # Retrieve Object Record Attachment Versions
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_get_with_http_info(object_name, object_record_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download All Object Record Attachment Files
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_file_get(object_name, object_record_id, opts = {})
      vobjects_object_name_object_record_id_attachments_file_get_with_http_info(object_name, object_record_id, opts)
      nil
    end

    # Download All Object Record Attachment Files
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_file_get_with_http_info(object_name, object_record_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_file_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_file_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_file_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachments/file'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachments_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachments_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_get(object_name, object_record_id, opts = {})
      vobjects_object_name_object_record_id_attachments_get_with_http_info(object_name, object_record_id, opts)
      nil
    end

    # Retrieve Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_get_with_http_info(object_name, object_record_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachments'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachments_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Object Record Attachment
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_post(object_name, object_record_id, opts = {})
      vobjects_object_name_object_record_id_attachments_post_with_http_info(object_name, object_record_id, opts)
      nil
    end

    # Create Object Record Attachment
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_post_with_http_info(object_name, object_record_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_post"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/attachments'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_attachments_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_attachments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Complete Audit History for a Single Object Record
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
    # @option opts [String] :end_date Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
    # @option opts [String] :format_result To request a CSV file of your audit history, use csv. 
    # @option opts [String] :limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
    # @option opts [String] :events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_audittrail_get(object_name, object_record_id, opts = {})
      vobjects_object_name_object_record_id_audittrail_get_with_http_info(object_name, object_record_id, opts)
      nil
    end

    # Retrieve Complete Audit History for a Single Object Record
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
    # @option opts [String] :end_date Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
    # @option opts [String] :format_result To request a CSV file of your audit history, use csv. 
    # @option opts [String] :limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    # @option opts [String] :offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
    # @option opts [String] :events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_audittrail_get_with_http_info(object_name, object_record_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_audittrail_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_audittrail_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_audittrail_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}/audittrail'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'format_result'] = opts[:'format_result'] if !opts[:'format_result'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'events'] = opts[:'events'] if !opts[:'events'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_audittrail_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_audittrail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_object_record_id_get(object_name, object_record_id, opts = {})
      vobjects_object_name_object_record_id_get_with_http_info(object_name, object_record_id, opts)
      nil
    end

    # Retrieve Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_get_with_http_info(object_name, object_record_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_object_record_id_get ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_get"
      end
      # verify the required parameter 'object_record_id' is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_get"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/{object_record_id}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s)).sub('{' + 'object_record_id' + '}', CGI.escape(object_record_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_object_record_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_object_record_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create & Upsert Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
    # @option opts [String] :authorization 
    # @option opts [String] :content_type Can be text/csv or application/json
    # @option opts [String] :accept Can be text/csv or application/json
    # @option opts [Boolean] :x_vault_api_migration_mode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
    # @option opts [Boolean] :x_vault_api_no_triggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_post(object_name, opts = {})
      vobjects_object_name_post_with_http_info(object_name, opts)
      nil
    end

    # Create &amp; Upsert Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id_param To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
    # @option opts [String] :authorization 
    # @option opts [String] :content_type Can be text/csv or application/json
    # @option opts [String] :accept Can be text/csv or application/json
    # @option opts [Boolean] :x_vault_api_migration_mode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
    # @option opts [Boolean] :x_vault_api_no_triggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_post_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'idParam'] = opts[:'id_param'] if !opts[:'id_param'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-MigrationMode'] = opts[:'x_vault_api_migration_mode'] if !opts[:'x_vault_api_migration_mode'].nil?
      header_params[:'X-VaultAPI-NoTriggers'] = opts[:'x_vault_api_no_triggers'] if !opts[:'x_vault_api_no_triggers'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type Can be text/csv or application/json
    # @option opts [String] :accept Can be text/csv or application/json
    # @option opts [Boolean] :x_vault_api_migration_mode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
    # @option opts [Boolean] :x_vault_api_no_triggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_put(object_name, opts = {})
      vobjects_object_name_put_with_http_info(object_name, opts)
      nil
    end

    # Update Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :content_type Can be text/csv or application/json
    # @option opts [String] :accept Can be text/csv or application/json
    # @option opts [Boolean] :x_vault_api_migration_mode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
    # @option opts [Boolean] :x_vault_api_no_triggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_put_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_put ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_put"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-MigrationMode'] = opts[:'x_vault_api_migration_mode'] if !opts[:'x_vault_api_migration_mode'].nil?
      header_params[:'X-VaultAPI-NoTriggers'] = opts[:'x_vault_api_no_triggers'] if !opts[:'x_vault_api_no_triggers'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Users & Groups from Roles on Object Records
    # @param object_name [String] The name of the object where you want to remove roles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_roles_delete(object_name, opts = {})
      vobjects_object_name_roles_delete_with_http_info(object_name, opts)
      nil
    end

    # Remove Users &amp; Groups from Roles on Object Records
    # @param object_name [String] The name of the object where you want to remove roles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_roles_delete_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_roles_delete ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_roles_delete"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/roles'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_roles_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_roles_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign Users & Groups to Roles on Object Records
    # @param object_name [String] The name of the object where you want to remove roles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_object_name_roles_post(object_name, opts = {})
      vobjects_object_name_roles_post_with_http_info(object_name, opts)
      nil
    end

    # Assign Users &amp; Groups to Roles on Object Records
    # @param object_name [String] The name of the object where you want to remove roles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :content_type 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_roles_post_with_http_info(object_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_object_name_roles_post ...'
      end
      # verify the required parameter 'object_name' is set
      if @api_client.config.client_side_validation && object_name.nil?
        fail ArgumentError, "Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_roles_post"
      end
      # resource path
      local_var_path = '/vobjects/{object_name}/roles'.sub('{' + 'object_name' + '}', CGI.escape(object_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Content-Type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_object_name_roles_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_object_name_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Outbound Package Dependencies
    # @param package_id [String] The ID of the outbound_package__v record from which to retrieve dependencies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def vobjects_outbound_package_v_package_id_dependencies_get(package_id, opts = {})
      vobjects_outbound_package_v_package_id_dependencies_get_with_http_info(package_id, opts)
      nil
    end

    # Retrieve Outbound Package Dependencies
    # @param package_id [String] The ID of the outbound_package__v record from which to retrieve dependencies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [String] :accept 
    # @option opts [String] :x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_outbound_package_v_package_id_dependencies_get_with_http_info(package_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vobjects_outbound_package_v_package_id_dependencies_get ...'
      end
      # verify the required parameter 'package_id' is set
      if @api_client.config.client_side_validation && package_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_id' when calling DefaultApi.vobjects_outbound_package_v_package_id_dependencies_get"
      end
      # resource path
      local_var_path = '/vobjects/outbound_package__v/{package_id}/dependencies'.sub('{' + 'package_id' + '}', CGI.escape(package_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'X-VaultAPI-ClientID'] = opts[:'x_vault_api_client_id'] if !opts[:'x_vault_api_client_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.vobjects_outbound_package_v_package_id_dependencies_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vobjects_outbound_package_v_package_id_dependencies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
