/** Veeva Vault API v25.1
  * The latest GA version of the Vault REST API.
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.apis

import cats.effect.Concurrent
import io.circe.Encoder
import org.http4s.Uri
import org.http4s.client.Client as Http4sClient
import scala.collection.immutable.Seq
import org.openapitools.client.models.VobjectsObjectNameActionsMergePostRequestInner
import org.openapitools.client.models.*

trait DefaultApiEndpoints[F[*]] {

  def apiGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def apiMdlExecuteAsyncJobIdResultsGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def apiMdlExecuteAsyncPost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def apiMdlExecutePost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def apiMdlFilesPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def audittrailAuditTrailTypeGet(auditTrailType: String, startDate: Option[String] = None, endDate: Option[String] = None, allDates: Option[String] = None, formatResult: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, objects: Option[String] = None, events: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def authDiscoveryPost(accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def authPost(contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def codeClassNameDelete(className: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def codeClassNameDisablePut(className: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def codeClassNameEnablePut(className: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def codeClassNameGet(className: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def codeProfilerGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def codeProfilerPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def codeProfilerSessionNameActionsEndPost(sessionName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def codeProfilerSessionNameDelete(sessionName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def codeProfilerSessionNameGet(sessionName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def codeProfilerSessionNameResultsGet(sessionName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def codePut(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: String, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def configurationComponentTypeGet(componentType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: String, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def configurationObjecttypeGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def configurationRoleAssignmentRuleDelete(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def configurationRoleAssignmentRuleGet(lifecycleV: Option[String] = None, roleV: Option[String] = None, productV: Option[String] = None, countryV: Option[String] = None, studyV: Option[String] = None, studyCountryV: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def configurationRoleAssignmentRulePost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def configurationRoleAssignmentRulePut(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def delegationLoginPost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def delegationVaultsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def keepAlivePost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def limitsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def logsApiUsageGet(date: Option[String] = None, logFormat: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def logsCodeDebugGet(userId: Option[String] = None, includeInactive: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def logsCodeDebugIdActionsResetDelete(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def logsCodeDebugIdActionsResetPost(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def logsCodeDebugIdFilesGet(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def logsCodeDebugIdGet(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def logsCodeDebugPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def logsCodeRuntimeGet(date: Option[String] = None, logFormat: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def messagesMessageTypeActionsImportPost(messageType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def messagesMessageTypeLanguageLangActionsExportPost(messageType: String, lang: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataAudittrailAuditTrailTypeGet(auditTrailType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataAudittrailGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataComponentsComponentTypeGet(componentType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataComponentsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsBindersTemplatesBindernodesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsBindersTemplatesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: String, eventSubtype: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsEventsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsLockGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsPropertiesFindCommonPost(contentType: Option[String] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsPropertiesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsTemplatesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsTypesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsTypesTypeGet(`type`: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsTypesTypeRelationshipsGet(`type`: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(`type`: String, subtype: String, classification: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(`type`: String, subtype: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsGroupsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsSecuritypoliciesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataObjectsUsersGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataVobjectsGet(loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: String, objectFieldName: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataVobjectsObjectNameGet(objectName: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataVobjectsObjectNamePageLayoutsGet(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: String, layoutName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def notificationsHistoriesGet(startDate: Option[String] = None, endDate: Option[String] = None, allDates: Option[Boolean] = None, formatResult: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectWorkflowActionsActionGet(action: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectWorkflowActionsActionPost(action: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectWorkflowActionsCanceltasksPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectWorkflowActionsCancelworkflowsPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectWorkflowActionsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectWorkflowActionsReassigntasksPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectWorkflowActionsReplaceworkflowownerPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersActionsExportJobIdResultsGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdActionsExportPost(binderId: String, source: Option[Boolean] = None, renditiontype: Option[String] = None, docversion: Option[String] = None, attachments: Option[String] = None, export: Option[String] = None, docfield: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdActionsPost(binderId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdBindingRulePut(binderId: String, contentType: Option[String] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdDelete(binderId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: String, nodeId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdDocumentsPost(binderId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdDocumentsSectionIdDelete(binderId: String, sectionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdDocumentsSectionIdPut(binderId: String, sectionId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdGet(binderId: String, depth: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdPost(binderId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdPut(binderId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: String, roleNameAndUserOrGroup: String, id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: String, nodeId: String, contentType: Option[String] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdSectionsNodeIdPut(binderId: String, nodeId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdSectionsPost(binderId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdSectionsSectionIdDelete(binderId: String, sectionId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdSectionsSectionIdGet(binderId: String, sectionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdVersionsGet(binderId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: String, majorVersion: String, minorVersion: String, source: Option[Boolean] = None, renditiontype: Option[String] = None, docversion: Option[String] = None, attachments: Option[String] = None, export: Option[String] = None, docfield: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: String, majorVersion: String, minorVersion: String, sectionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersIdRolesGet(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersIdRolesPost(id: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersIdRolesRoleNameGet(id: String, roleName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersLifecycleActionsPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersLifecycleActionsUserActionNamePut(userActionName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersPost(async: Option[Boolean] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersTemplatesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersTemplatesPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersTemplatesPut(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersTemplatesTemplateNameBindernodesGet(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersTemplatesTemplateNameBindernodesPost(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersTemplatesTemplateNameBindernodesPut(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersTemplatesTemplateNameDelete(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsBindersTemplatesTemplateNameGet(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDeletionsDocumentsGet(startDate: Option[String] = None, endDate: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDeletionsVobjectsObjectNameGet(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsActionsGet(loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: String, jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsActionsWorkflowNameGet(workflowName: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsActionsWorkflowNamePost(workflowName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsAnnotationsBatchDelete(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsAnnotationsBatchPost(authorization: String, contentType: String, accept: String, xVaultAPIClientID: String): F[Unit]
  def objectsDocumentsAnnotationsBatchPut(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsAnnotationsRepliesBatchPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsAttachmentsBatchDelete(accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsAttachmentsBatchPost(accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsAttachmentsBatchPut(accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsBatchActionsFileextractPost(source: Option[Boolean] = None, renditions: Option[Boolean] = None, allversions: Option[Boolean] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsBatchActionsReclassifyPut(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsBatchActionsRerenderPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsBatchDelete(idParam: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsBatchLockDelete(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsBatchPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsBatchPut(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAnchorsGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAnnotationsFileGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAnnotationsFilePost(docId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: String, attachmentId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: String, attachmentId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: String, attachmentId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: String, attachmentId: String, accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: String, attachmentId: String, attachmentVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: String, attachmentId: String, attachmentVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: String, attachmentId: String, attachmentVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: String, attachmentId: String, attachmentVersion: String, restore: Option[Boolean] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: String, attachmentId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsFileGet(docId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsGet(docId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAttachmentsPost(docId: String, accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdAudittrailGet(docId: String, startDate: Option[String] = None, endDate: Option[String] = None, formatResult: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, events: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdDelete(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdEventsGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdFileGet(docId: String, lockDocument: Option[Boolean] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdLockDelete(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdLockGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdLockPost(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: String, majorVersion: String, minorVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdPost(docId: String, suppressRendition: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdPut(docId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdRenditionsGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: String, renditionType: String, steadyState: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdRenditionsRenditionTypePost(docId: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdRenditionsRenditionTypePut(docId: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: String, roleNameAndUserOrGroup: String, id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: String, majorVersion: String, minorVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: String, majorVersion: String, minorVersion: String, annotationId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: String, majorVersion: String, minorVersion: String, annotationId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: String, majorVersion: String, minorVersion: String, limit: Option[String] = None, offset: Option[String] = None, annotationTypes: Option[String] = None, paginationId: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: String, majorVersion: String, minorVersion: String, attachmentId: String, attachmentVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: String, majorVersion: String, minorVersion: String, attachmentId: String, attachmentVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: String, majorVersion: String, minorVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: String, majorVersion: String, minorVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsGet(namedFilter: Option[String] = None, scope: Option[String] = None, versionscope: Option[String] = None, search: Option[String] = None, limit: Option[String] = None, sort: Option[String] = None, start: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsIdRolesGet(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsIdRolesPost(id: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsIdRolesRoleNameGet(id: String, roleName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsLifecycleActionsPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsPost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsRelationshipsBatchDelete(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsRelationshipsBatchPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsRenditionsBatchDelete(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsRenditionsBatchPost(idParam: Option[String] = None, largeSizeAsset: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsRolesBatchDelete(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsRolesBatchPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsTemplatesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsTemplatesPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsTemplatesPut(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsTemplatesTemplateNameDelete(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsTemplatesTemplateNameFileGet(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsTemplatesTemplateNameGet(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsTemplatesTemplateNamePut(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsTokensPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsVersionsBatchActionsFileextractPost(source: Option[Boolean] = None, renditions: Option[Boolean] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsVersionsBatchDelete(idParam: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDocumentsVersionsBatchPost(idParam: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIMigrationMode: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDomainGet(includeApplication: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsDomainsGet(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsEdlMatchedDocumentsBatchActionsAddPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsGroupsAutoGet(limit: Option[String] = None, offset: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsGroupsGet(includeImplied: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsGroupsGroupIdDelete(groupId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsGroupsGroupIdGet(groupId: String, includeImplied: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsGroupsGroupIdPut(groupId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsGroupsPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsLicensesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsActionsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsActionsWorkflowNameGet(workflowName: String, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsActionsWorkflowNamePost(workflowName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsGet(objectV: Option[String] = None, recordIdV: Option[String] = None, participant: Option[String] = None, statusV: Option[String] = None, offset: Option[String] = None, pageSize: Option[String] = None, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksGet(objectV: Option[String] = None, recordIdV: Option[String] = None, assigneeV: Option[String] = None, statusV: Option[String] = None, offset: Option[String] = None, pageSize: Option[String] = None, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsGet(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: String, taskAction: String, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsTasksTaskIdGet(taskId: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsWorkflowIdActionsGet(workflowId: String, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: String, workflowAction: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: String, workflowAction: String, documentsSys: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsObjectworkflowsWorkflowIdGet(workflowId: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsPicklistsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsPicklistsPicklistNameGet(picklistName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: String, picklistValueName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: String, picklistValueName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsPicklistsPicklistNamePost(picklistName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsPicklistsPicklistNamePut(picklistName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxActionsBuildproductionPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxActionsPromoteproductionPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxActionsRecheckusagePost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxBatchChangesizePost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxEntitlementsSetPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxNameDelete(name: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxSnapshotApiNameDelete(apiName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxSnapshotGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxSnapshotPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxVaultIdActionsRefreshPost(vaultId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSandboxVaultIdGet(vaultId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSecuritypoliciesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersGet(vaults: Option[String] = None, excludeVaultMembership: Option[String] = None, excludeAppLicensing: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersIdGet(id: String, excludeVaultMembership: Option[String] = None, excludeAppLicensing: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersIdPermissionsGet(id: String, filter: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersIdPut(id: String, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersMeGet(excludeVaultMembership: Option[String] = None, excludeAppLicensing: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersMePasswordPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersMePermissionsGet(filter: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersMePut(authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersPut(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersUserIdDelete(userId: String, domain: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsUsersUserIdVaultMembershipVaultIdPut(userId: String, vaultId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsVaultActionsComparePost(authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def objectsVaultActionsConfigreportPost(authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def queryComponentsPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def queryNextPagePost(nextPage: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIDescribeQuery: Option[Boolean] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def queryPost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIDescribeQuery: Option[Boolean] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def queryPreviousPagePost(previousPage: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIDescribeQuery: Option[Boolean] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2MeGet(attributes: Option[String] = None, excludedAttributes: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2MePut(attributes: Option[String] = None, excludedAttributes: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2ResourceTypesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2ResourceTypesTypeGet(`type`: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2SchemasGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2SchemasIdGet(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2ServiceProviderConfigGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2TypeGet(`type`: String, filter: Option[String] = None, attributes: Option[String] = None, excludedAttributes: Option[String] = None, sortBy: Option[String] = None, sortOrder: Option[String] = None, startIndex: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2TypeIdGet(`type`: String, id: String, attributes: Option[String] = None, excludedAttributes: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2UsersGet(filter: Option[String] = None, attributes: Option[String] = None, excludedAttributes: Option[String] = None, sortBy: Option[String] = None, sortOrder: Option[String] = None, count: Option[String] = None, startIndex: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2UsersIdGet(id: String, filter: Option[String] = None, attributes: Option[String] = None, excludedAttributes: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2UsersIdPut(id: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def scimV2UsersPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesCertificateCertIdGet(certId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesConfigurationModeActionsDisablePost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesConfigurationModeActionsEnablePost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesDirectdataFilesGet(extractType: Option[String] = None, startTime: Option[Int] = None, stopTime: Option[Int] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesDirectdataFilesNameGet(name: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingItemsContentItemGet(item: String, authorization: Option[String] = None, accept: Option[String] = None, range: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingItemsItemDelete(item: String, recursive: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingItemsItemGet(item: String, recursive: Option[String] = None, limit: Option[String] = None, formatResult: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingItemsItemPut(item: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingItemsPost(authorization: Option[String] = None, accept: Option[String] = None, contentMD5: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingUploadGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingUploadPost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: String, limit: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIFilePartNumber: Option[String] = None, contentMD5: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesJobsHistoriesGet(startDate: Option[String] = None, endDate: Option[String] = None, status: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesJobsJobIdErrorsGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesJobsJobIdGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesJobsJobIdSummaryGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesJobsJobIdTasksGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesJobsMonitorsGet(startDate: Option[String] = None, endDate: Option[String] = None, status: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesJobsStartNowJobIdPost(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesLoaderExtractPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: String, taskId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesLoaderJobIdTasksTaskIdResultsGet(jobId: String, taskId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: String, taskId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: String, taskId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesLoaderLoadPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesPackageActionsValidatePost(authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesPackagePost(authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesPackagePut(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesQueuesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesQueuesQueueNameActionsResetPut(queueName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesQueuesQueueNameGet(queueName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def sessionDelete(accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def uicodeDistributionsDistributionNameCodeGet(distributionName: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def uicodeDistributionsDistributionNameDelete(distributionName: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def uicodeDistributionsDistributionNameGet(distributionName: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def uicodeDistributionsGet(accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def uicodeDistributionsPost(accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectVaultPackageVPackageIdActionsDeployPost(packageId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: String, jobStatus: String, jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: String, jobStatus: String, jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsEdlItemVActionsCreateplaceholderPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsMergesJobIdLogGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsMergesJobIdResultsGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsMergesJobIdStatusGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameActionsActionNamePost(objectName: String, actionName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameActionsChangetypePost(objectName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameActionsMergePost(objectName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None, vobjectsObjectNameActionsMergePostRequestInner: Option[Seq[VobjectsObjectNameActionsMergePostRequestInner]] = None): F[Unit]
  def vobjectsObjectNameActionsRecalculaterollupsGet(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameActionsRecalculaterollupsPost(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameAttachmentsBatchDelete(objectName: String, idParam: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameAttachmentsBatchPost(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameAttachmentsBatchPut(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameDelete(objectName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameIdRolesRoleNameGet(objectName: String, id: String, roleName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: String, objectRecordId: String, actionName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: String, objectRecordId: String, actionName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdActionsGet(objectName: String, objectRecordId: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: String, objectRecordId: String, attachmentFieldName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: String, objectRecordId: String, attachmentFieldName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: String, objectRecordId: String, attachmentId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: String, objectRecordId: String, attachmentId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: String, objectRecordId: String, attachmentId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, restore: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: String, objectRecordId: String, attachmentId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: String, objectRecordId: String, startDate: Option[String] = None, endDate: Option[String] = None, formatResult: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, events: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameObjectRecordIdGet(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNamePost(objectName: String, idParam: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPINoTriggers: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNamePut(objectName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPINoTriggers: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameRolesDelete(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsObjectNameRolesPost(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]
  def vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit]

}

class DefaultApiEndpointsImpl[F[*]: Concurrent](
  override val baseUrl: Uri,
  defaultHeaders: Seq[(String, String)] = Nil,
  httpClient: Http4sClient[F]
) extends BaseClient[F](baseUrl, defaultHeaders, httpClient) with DefaultApiEndpoints[F] {
  
  import JsonSupports.*
  import io.circe.syntax.EncoderOps
  import cats.implicits.toFlatMapOps

  override def apiGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/api/",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/api/mdl/components/${componentTypeAndRecordName}/files",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/api/mdl/components/${componentTypeAndRecordName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def apiMdlExecuteAsyncJobIdResultsGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/api/mdl/execute_async/${jobId}/results",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def apiMdlExecuteAsyncPost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/api/mdl/execute_async",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def apiMdlExecutePost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/api/mdl/execute",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def apiMdlFilesPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/api/mdl/files",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def audittrailAuditTrailTypeGet(auditTrailType: String, startDate: Option[String] = None, endDate: Option[String] = None, allDates: Option[String] = None, formatResult: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, objects: Option[String] = None, events: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      startDate.map("start_date" -> _).map(Seq(_)) ++ 
      endDate.map("end_date" -> _).map(Seq(_)) ++ 
      allDates.map("all_dates" -> _).map(Seq(_)) ++ 
      formatResult.map("format_result" -> _).map(Seq(_)) ++ 
      limit.map("limit" -> _).map(Seq(_)) ++ 
      offset.map("offset" -> _).map(Seq(_)) ++ 
      objects.map("objects" -> _).map(Seq(_)) ++ 
      events.map("events" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/audittrail/${auditTrailType}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def authDiscoveryPost(accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/auth/discovery",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/auth/oauth/session/${oathOidcProfileId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def authPost(contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/auth",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def codeClassNameDelete(className: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/code/${className}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def codeClassNameDisablePut(className: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/code/${className}/disable",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def codeClassNameEnablePut(className: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/code/${className}/enable",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def codeClassNameGet(className: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/code/${className}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def codeProfilerGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/code/profiler",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def codeProfilerPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/code/profiler",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def codeProfilerSessionNameActionsEndPost(sessionName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/code/profiler/${sessionName}/actions/end",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def codeProfilerSessionNameDelete(sessionName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/code/profiler/${sessionName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def codeProfilerSessionNameGet(sessionName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/code/profiler/${sessionName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def codeProfilerSessionNameResultsGet(sessionName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/code/profiler/${sessionName}/results",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def codePut(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/code",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/composites/trees/${edlHierarchyOrTemplate}/actions/listnodes",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/composites/trees/${edlHierarchyOrTemplate}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/composites/trees/edl_hierarchy__v/${parentNodeId}/children",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/composites/trees/edl_hierarchy__v/${parentNodeId}/children",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: String, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/configuration/${componentTypeAndRecordName}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def configurationComponentTypeGet(componentType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/configuration/${componentType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: String, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/configuration/${objectNameAndObjectType}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def configurationObjecttypeGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/configuration/Objecttype",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def configurationRoleAssignmentRuleDelete(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/configuration/role_assignment_rule",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def configurationRoleAssignmentRuleGet(lifecycleV: Option[String] = None, roleV: Option[String] = None, productV: Option[String] = None, countryV: Option[String] = None, studyV: Option[String] = None, studyCountryV: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      lifecycleV.map("lifecycle__v" -> _).map(Seq(_)) ++ 
      roleV.map("role__v" -> _).map(Seq(_)) ++ 
      productV.map("product__v" -> _).map(Seq(_)) ++ 
      countryV.map("country__v" -> _).map(Seq(_)) ++ 
      studyV.map("study__v" -> _).map(Seq(_)) ++ 
      studyCountryV.map("study_country__v" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/configuration/role_assignment_rule",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def configurationRoleAssignmentRulePost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/configuration/role_assignment_rule",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def configurationRoleAssignmentRulePut(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/configuration/role_assignment_rule",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def delegationLoginPost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/delegation/login",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def delegationVaultsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/delegation/vaults",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def keepAlivePost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/keep-alive",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def limitsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/limits",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def logsApiUsageGet(date: Option[String] = None, logFormat: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      date.map("date" -> _).map(Seq(_)) ++ 
      logFormat.map("log_format" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/logs/api_usage",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def logsCodeDebugGet(userId: Option[String] = None, includeInactive: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      userId.map("user_id" -> _).map(Seq(_)) ++ 
      includeInactive.map("include_inactive" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/logs/code/debug",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def logsCodeDebugIdActionsResetDelete(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/logs/code/debug/${id}/actions/reset",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def logsCodeDebugIdActionsResetPost(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/logs/code/debug/${id}/actions/reset",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def logsCodeDebugIdFilesGet(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/logs/code/debug/${id}/files",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def logsCodeDebugIdGet(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/logs/code/debug/${id}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def logsCodeDebugPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/logs/code/debug",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def logsCodeRuntimeGet(date: Option[String] = None, logFormat: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      date.map("date" -> _).map(Seq(_)) ++ 
      logFormat.map("log_format" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/logs/code/runtime",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def messagesMessageTypeActionsImportPost(messageType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/messages/${messageType}/actions/import",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def messagesMessageTypeLanguageLangActionsExportPost(messageType: String, lang: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/messages/${messageType}/language/${lang}/actions/export",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataAudittrailAuditTrailTypeGet(auditTrailType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/audittrail/${auditTrailType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataAudittrailGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/audittrail",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataComponentsComponentTypeGet(componentType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/components/${componentType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataComponentsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/components",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsBindersTemplatesBindernodesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/binders/templates/bindernodes",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsBindersTemplatesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/binders/templates",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/annotations/placemarks/types/${placemarkType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/annotations/references/types/${referenceType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/annotations/types/${annotationType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: String, eventSubtype: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/events/${eventType}/types/${eventSubtype}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsEventsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/events",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsLockGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/lock",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsPropertiesFindCommonPost(contentType: Option[String] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/metadata/objects/documents/properties/find_common",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsPropertiesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/properties",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsTemplatesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/templates",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsTypesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/types",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsTypesTypeGet(`type`: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/types/${`type`}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsTypesTypeRelationshipsGet(`type`: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/types/${`type`}/relationships",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(`type`: String, subtype: String, classification: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/types/${`type`}/subtypes/${subtype}/classifications/${classification}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(`type`: String, subtype: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/documents/types/${`type`}/subtypes/${subtype}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsGroupsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/groups",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsSecuritypoliciesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/securitypolicies",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataObjectsUsersGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/objects/users",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/query/archived_documents/relationships/document_signature__sysr",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/query/documents/relationships/document_signature__sysr",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataVobjectsGet(loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/vobjects",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/metadata/vobjects/${objectName}/actions/canceldeployment",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: String, objectFieldName: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/vobjects/${objectName}/fields/${objectFieldName}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataVobjectsObjectNameGet(objectName: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/vobjects/${objectName}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataVobjectsObjectNamePageLayoutsGet(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/vobjects/${objectName}/page_layouts",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: String, layoutName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/metadata/vobjects/${objectName}/page_layouts/${layoutName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def notificationsHistoriesGet(startDate: Option[String] = None, endDate: Option[String] = None, allDates: Option[Boolean] = None, formatResult: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      startDate.map("start_date" -> _).map(Seq(_)) ++ 
      endDate.map("end_date" -> _).map(Seq(_)) ++ 
      allDates.map("all_dates" -> _).map(Seq(_)) ++ 
      formatResult.map("format_result" -> _).map(Seq(_)) ++ 
      limit.map("limit" -> _).map(Seq(_)) ++ 
      offset.map("offset" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/notifications/histories",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectWorkflowActionsActionGet(action: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/object/workflow/actions/${action}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectWorkflowActionsActionPost(action: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/object/workflow/actions/${action}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectWorkflowActionsCanceltasksPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/object/workflow/actions/canceltasks",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectWorkflowActionsCancelworkflowsPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/object/workflow/actions/cancelworkflows",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectWorkflowActionsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/object/workflow/actions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectWorkflowActionsReassigntasksPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/object/workflow/actions/reassigntasks",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectWorkflowActionsReplaceworkflowownerPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/object/workflow/actions/replaceworkflowowner",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersActionsExportJobIdResultsGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/actions/export/${jobId}/results",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdActionsExportPost(binderId: String, source: Option[Boolean] = None, renditiontype: Option[String] = None, docversion: Option[String] = None, attachments: Option[String] = None, export: Option[String] = None, docfield: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      source.map("source" -> _).map(Seq(_)) ++ 
      renditiontype.map("renditiontype" -> _).map(Seq(_)) ++ 
      docversion.map("docversion" -> _).map(Seq(_)) ++ 
      attachments.map("attachments" -> _).map(Seq(_)) ++ 
      export.map("export" -> _).map(Seq(_)) ++ 
      docfield.map("docfield" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders/${binderId}/actions/export",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdActionsPost(binderId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders/${binderId}/actions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdBindingRulePut(binderId: String, contentType: Option[String] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/binders/${binderId}/binding_rule",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdDelete(binderId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/binders/${binderId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: String, nodeId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/binders/${binderId}/documents/${nodeId}/binding_rule",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdDocumentsPost(binderId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders/${binderId}/documents",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdDocumentsSectionIdDelete(binderId: String, sectionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/binders/${binderId}/documents/${sectionId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdDocumentsSectionIdPut(binderId: String, sectionId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/binders/${binderId}/documents/${sectionId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdGet(binderId: String, depth: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      depth.map("depth" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/${binderId}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdPost(binderId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders/${binderId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdPut(binderId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/binders/${binderId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: String, roleNameAndUserOrGroup: String, id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/binders/${binderId}/roles/${roleNameAndUserOrGroup}/${id}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: String, nodeId: String, contentType: Option[String] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/binders/${binderId}/sections/${nodeId}/binding_rule",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdSectionsNodeIdPut(binderId: String, nodeId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/binders/${binderId}/sections/${nodeId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdSectionsPost(binderId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders/${binderId}/sections",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdSectionsSectionIdDelete(binderId: String, sectionId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/binders/${binderId}/sections/${sectionId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdSectionsSectionIdGet(binderId: String, sectionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/${binderId}/sections/${sectionId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdVersionsGet(binderId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/${binderId}/versions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: String, majorVersion: String, minorVersion: String, source: Option[Boolean] = None, renditiontype: Option[String] = None, docversion: Option[String] = None, attachments: Option[String] = None, export: Option[String] = None, docfield: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      source.map("source" -> _).map(Seq(_)) ++ 
      renditiontype.map("renditiontype" -> _).map(Seq(_)) ++ 
      docversion.map("docversion" -> _).map(Seq(_)) ++ 
      attachments.map("attachments" -> _).map(Seq(_)) ++ 
      export.map("export" -> _).map(Seq(_)) ++ 
      docfield.map("docfield" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders/${binderId}/versions/${majorVersion}/${minorVersion}/actions/export",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/binders/${binderId}/versions/${majorVersion}/${minorVersion}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/${binderId}/versions/${majorVersion}/${minorVersion}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/binders/${binderId}/versions/${majorVersion}/${minorVersion}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders/${binderId}/versions/${majorVersion}/${minorVersion}/relationships",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/binders/${binderId}/versions/${majorVersion}/${minorVersion}/relationships/${relationshipId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/${binderId}/versions/${majorVersion}/${minorVersion}/relationships/${relationshipId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: String, majorVersion: String, minorVersion: String, sectionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/${binderId}/versions/${majorVersion}/${minorVersion}/sections/${sectionId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersIdRolesGet(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/${id}/roles",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersIdRolesPost(id: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders/${id}/roles",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersIdRolesRoleNameGet(id: String, roleName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/${id}/roles/${roleName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/${id}/versions/${majorVersion}/${minorVersion}/lifecycle_actions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/${id}/versions/${majorVersion}/${minorVersion}/lifecycle_actions/${nameV}/entry_requirements",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/binders/${id}/versions/${majorVersion}/${minorVersion}/lifecycle_actions/${nameV}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersLifecycleActionsPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders/lifecycle_actions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersLifecycleActionsUserActionNamePut(userActionName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/binders/lifecycle_actions/${userActionName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersPost(async: Option[Boolean] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      async.map("async" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersTemplatesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/templates",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersTemplatesPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders/templates",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersTemplatesPut(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/binders/templates",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersTemplatesTemplateNameBindernodesGet(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/templates/${templateName}/bindernodes",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersTemplatesTemplateNameBindernodesPost(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/binders/templates/${templateName}/bindernodes",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersTemplatesTemplateNameBindernodesPut(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/binders/templates/${templateName}/bindernodes",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersTemplatesTemplateNameDelete(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/binders/templates/${templateName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsBindersTemplatesTemplateNameGet(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/binders/templates/${templateName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDeletionsDocumentsGet(startDate: Option[String] = None, endDate: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      startDate.map("start_date" -> _).map(Seq(_)) ++ 
      endDate.map("end_date" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/deletions/documents",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDeletionsVobjectsObjectNameGet(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/deletions/vobjects/${objectName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsActionsGet(loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/actions",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: String, jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/actions/${lifecycleAndStateAndAction}/${jobId}/results",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsActionsWorkflowNameGet(workflowName: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/actions/${workflowName}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsActionsWorkflowNamePost(workflowName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/actions/${workflowName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsAnnotationsBatchDelete(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/annotations/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsAnnotationsBatchPost(authorization: String, contentType: String, accept: String, xVaultAPIClientID: String): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      Some("Authorization" -> authorization), Some("Content-Type" -> contentType), Some("Accept" -> accept), Some("X-VaultAPI-ClientID" -> xVaultAPIClientID)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/annotations/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsAnnotationsBatchPut(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/annotations/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsAnnotationsRepliesBatchPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/annotations/replies/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsAttachmentsBatchDelete(accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/attachments/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsAttachmentsBatchPost(accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/attachments/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsAttachmentsBatchPut(accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/attachments/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/batch/actions/fileextract/${jobId}/results",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsBatchActionsFileextractPost(source: Option[Boolean] = None, renditions: Option[Boolean] = None, allversions: Option[Boolean] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      source.map("source" -> _).map(Seq(_)) ++ 
      renditions.map("renditions" -> _).map(Seq(_)) ++ 
      allversions.map("allversions" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/batch/actions/fileextract",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsBatchActionsReclassifyPut(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIMigrationMode.map(x => "X-VaultAPI-MigrationMode" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/batch/actions/reclassify",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsBatchActionsRerenderPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/batch/actions/rerender",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsBatchDelete(idParam: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      idParam.map("idParam" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/batch",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsBatchLockDelete(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/batch/lock",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsBatchPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIMigrationMode.map(x => "X-VaultAPI-MigrationMode" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsBatchPut(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIMigrationMode.map(x => "X-VaultAPI-MigrationMode" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAnchorsGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/anchors",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAnnotationsFileGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/annotations/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAnnotationsFilePost(docId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/${docId}/annotations/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: String, attachmentId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/${docId}/attachments/${attachmentId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: String, attachmentId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/attachments/${attachmentId}/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: String, attachmentId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/attachments/${attachmentId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: String, attachmentId: String, accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/${docId}/attachments/${attachmentId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: String, attachmentId: String, attachmentVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/${docId}/attachments/${attachmentId}/versions/${attachmentVersion}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: String, attachmentId: String, attachmentVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/attachments/${attachmentId}/versions/${attachmentVersion}/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: String, attachmentId: String, attachmentVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/attachments/${attachmentId}/versions/${attachmentVersion}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: String, attachmentId: String, attachmentVersion: String, restore: Option[Boolean] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      restore.map("restore" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/${docId}/attachments/${attachmentId}/versions/${attachmentVersion}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: String, attachmentId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/attachments/${attachmentId}/versions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsFileGet(docId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/attachments/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsGet(docId: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/attachments",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAttachmentsPost(docId: String, accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/${docId}/attachments",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdAudittrailGet(docId: String, startDate: Option[String] = None, endDate: Option[String] = None, formatResult: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, events: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      startDate.map("start_date" -> _).map(Seq(_)) ++ 
      endDate.map("end_date" -> _).map(Seq(_)) ++ 
      formatResult.map("format_result" -> _).map(Seq(_)) ++ 
      limit.map("limit" -> _).map(Seq(_)) ++ 
      offset.map("offset" -> _).map(Seq(_)) ++ 
      events.map("events" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/audittrail",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdDelete(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/${docId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdEventsGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/events",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdFileGet(docId: String, lockDocument: Option[Boolean] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      lockDocument.map("lockDocument" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/file",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdLockDelete(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/${docId}/lock",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdLockGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/lock",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdLockPost(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/${docId}/lock",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: String, majorVersion: String, minorVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/${majorVersion}/${minorVersion}/attachments/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdPost(docId: String, suppressRendition: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      suppressRendition.map("suppressRendition" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/${docId}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdPut(docId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIMigrationMode.map(x => "X-VaultAPI-MigrationMode" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/${docId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdRenditionsGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/renditions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/${docId}/renditions/${renditionType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: String, renditionType: String, steadyState: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      steadyState.map("steadyState" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/renditions/${renditionType}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdRenditionsRenditionTypePost(docId: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/${docId}/renditions/${renditionType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdRenditionsRenditionTypePut(docId: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/${docId}/renditions/${renditionType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: String, roleNameAndUserOrGroup: String, id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/${docId}/roles/${roleNameAndUserOrGroup}/${id}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: String, majorVersion: String, minorVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/version/${majorVersion}/${minorVersion}/attachments",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsGet(docId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: String, majorVersion: String, minorVersion: String, annotationId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/annotations/${annotationId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: String, majorVersion: String, minorVersion: String, annotationId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/annotations/${annotationId}/replies",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/annotations/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/annotations/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: String, majorVersion: String, minorVersion: String, limit: Option[String] = None, offset: Option[String] = None, annotationTypes: Option[String] = None, paginationId: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      limit.map("limit" -> _).map(Seq(_)) ++ 
      offset.map("offset" -> _).map(Seq(_)) ++ 
      annotationTypes.map("annotation_types" -> _).map(Seq(_)) ++ 
      paginationId.map("pagination_id" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/annotations",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: String, majorVersion: String, minorVersion: String, attachmentId: String, attachmentVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/attachments/${attachmentId}/versions/${attachmentVersion}/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: String, majorVersion: String, minorVersion: String, attachmentId: String, attachmentVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/attachments/${attachmentId}/versions/${attachmentVersion}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/doc-export-annotations-to-csv",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/events",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/export-video-annotations",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: String, majorVersion: String, minorVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIMigrationMode.map(x => "X-VaultAPI-MigrationMode" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/relationships",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/relationships",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/relationships/${relationshipId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/relationships/${relationshipId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/renditions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/renditions/${renditionType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/renditions/${renditionType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/renditions/${renditionType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/renditions/${renditionType}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: String, majorVersion: String, minorVersion: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${docId}/versions/${majorVersion}/${minorVersion}/thumbnail",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsGet(namedFilter: Option[String] = None, scope: Option[String] = None, versionscope: Option[String] = None, search: Option[String] = None, limit: Option[String] = None, sort: Option[String] = None, start: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      namedFilter.map("named_filter" -> _).map(Seq(_)) ++ 
      scope.map("scope" -> _).map(Seq(_)) ++ 
      versionscope.map("versionscope" -> _).map(Seq(_)) ++ 
      search.map("search" -> _).map(Seq(_)) ++ 
      limit.map("limit" -> _).map(Seq(_)) ++ 
      sort.map("sort" -> _).map(Seq(_)) ++ 
      start.map("start" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsIdRolesGet(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${id}/roles",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsIdRolesPost(id: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/${id}/roles",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsIdRolesRoleNameGet(id: String, roleName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${id}/roles/${roleName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: String, majorVersion: String, minorVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${id}/versions/${majorVersion}/${minorVersion}/lifecycle_actions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/${id}/versions/${majorVersion}/${minorVersion}/lifecycle_actions/${nameV}/entry_requirements",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/${id}/versions/${majorVersion}/${minorVersion}/lifecycle_actions/${nameV}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsLifecycleActionsPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/lifecycle_actions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/lifecycle_actions/${userActionName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsPost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIMigrationMode.map(x => "X-VaultAPI-MigrationMode" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsRelationshipsBatchDelete(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/relationships/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsRelationshipsBatchPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/relationships/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsRenditionsBatchDelete(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/renditions/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsRenditionsBatchPost(idParam: Option[String] = None, largeSizeAsset: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIMigrationMode.map(x => "X-VaultAPI-MigrationMode" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      idParam.map("idParam" -> _).map(Seq(_)) ++ 
      largeSizeAsset.map("largeSizeAsset" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/renditions/batch",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsRolesBatchDelete(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/roles/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsRolesBatchPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/roles/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsTemplatesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/templates",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsTemplatesPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/templates",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsTemplatesPut(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/templates",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsTemplatesTemplateNameDelete(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/templates/${templateName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsTemplatesTemplateNameFileGet(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/templates/${templateName}/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsTemplatesTemplateNameGet(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/documents/templates/${templateName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsTemplatesTemplateNamePut(templateName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/documents/templates/${templateName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsTokensPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/tokens",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsVersionsBatchActionsFileextractPost(source: Option[Boolean] = None, renditions: Option[Boolean] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      source.map("source" -> _).map(Seq(_)) ++ 
      renditions.map("renditions" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/versions/batch/actions/fileextract",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsVersionsBatchDelete(idParam: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      idParam.map("idParam" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/documents/versions/batch",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDocumentsVersionsBatchPost(idParam: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIMigrationMode: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIMigrationMode.map(x => "X-VaultAPI-MigrationMode" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      idParam.map("idParam" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/documents/versions/batch",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDomainGet(includeApplication: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      includeApplication.map("include_application" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/domain",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsDomainsGet(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/domains",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsEdlMatchedDocumentsBatchActionsAddPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/edl_matched_documents/batch/actions/add",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/edl_matched_documents/batch/actions/remove",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsGroupsAutoGet(limit: Option[String] = None, offset: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      limit.map("limit" -> _).map(Seq(_)) ++ 
      offset.map("offset" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/groups/auto",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsGroupsGet(includeImplied: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      includeImplied.map("includeImplied" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/groups",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsGroupsGroupIdDelete(groupId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/groups/${groupId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsGroupsGroupIdGet(groupId: String, includeImplied: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      includeImplied.map("includeImplied" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/groups/${groupId}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsGroupsGroupIdPut(groupId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/groups/${groupId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsGroupsPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/groups",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsLicensesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/licenses",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsActionsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/objectworkflows/actions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsActionsWorkflowNameGet(workflowName: String, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/objectworkflows/actions/${workflowName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsActionsWorkflowNamePost(workflowName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/actions/${workflowName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsGet(objectV: Option[String] = None, recordIdV: Option[String] = None, participant: Option[String] = None, statusV: Option[String] = None, offset: Option[String] = None, pageSize: Option[String] = None, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      objectV.map("object__v" -> _).map(Seq(_)) ++ 
      recordIdV.map("record_id__v" -> _).map(Seq(_)) ++ 
      participant.map("participant" -> _).map(Seq(_)) ++ 
      statusV.map("status__v" -> _).map(Seq(_)) ++ 
      offset.map("offset" -> _).map(Seq(_)) ++ 
      pageSize.map("page_size" -> _).map(Seq(_)) ++ 
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/objectworkflows",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksGet(objectV: Option[String] = None, recordIdV: Option[String] = None, assigneeV: Option[String] = None, statusV: Option[String] = None, offset: Option[String] = None, pageSize: Option[String] = None, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      objectV.map("object__v" -> _).map(Seq(_)) ++ 
      recordIdV.map("record_id__v" -> _).map(Seq(_)) ++ 
      assigneeV.map("assignee__v" -> _).map(Seq(_)) ++ 
      statusV.map("status__v" -> _).map(Seq(_)) ++ 
      offset.map("offset" -> _).map(Seq(_)) ++ 
      pageSize.map("page_size" -> _).map(Seq(_)) ++ 
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/objectworkflows/tasks",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions/accept",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions/cancel",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions/complete",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsGet(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions/mdwaccept",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions/mdwcomplete",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions/mdwmanagecontent",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions/mdwreassign",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions/reassign",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: String, taskAction: String, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions/${taskAction}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions/undoaccept",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/tasks/${taskId}/actions/updateduedate",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsTasksTaskIdGet(taskId: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/objectworkflows/tasks/${taskId}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsWorkflowIdActionsGet(workflowId: String, loc: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/objectworkflows/${workflowId}/actions",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: String, workflowAction: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/objectworkflows/${workflowId}/actions/${workflowAction}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: String, workflowAction: String, documentsSys: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      documentsSys.map("documents__sys" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/objectworkflows/${workflowId}/actions/${workflowAction}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsObjectworkflowsWorkflowIdGet(workflowId: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/objectworkflows/${workflowId}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsPicklistsGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/picklists",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsPicklistsPicklistNameGet(picklistName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/picklists/${picklistName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: String, picklistValueName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/picklists/${picklistName}/${picklistValueName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: String, picklistValueName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/picklists/${picklistName}/${picklistValueName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsPicklistsPicklistNamePost(picklistName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/picklists/${picklistName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsPicklistsPicklistNamePut(picklistName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/picklists/${picklistName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxActionsBuildproductionPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/sandbox/actions/buildproduction",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxActionsPromoteproductionPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/sandbox/actions/promoteproduction",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxActionsRecheckusagePost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/sandbox/actions/recheckusage",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxBatchChangesizePost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/sandbox/batch/changesize",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxEntitlementsSetPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/sandbox/entitlements/set",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/sandbox",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxNameDelete(name: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/sandbox/${name}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/sandbox",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/sandbox/snapshot/${apiName}/actions/update",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/sandbox/snapshot/${apiName}/actions/upgrade",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxSnapshotApiNameDelete(apiName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/sandbox/snapshot/${apiName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxSnapshotGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/sandbox/snapshot",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxSnapshotPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/sandbox/snapshot",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxVaultIdActionsRefreshPost(vaultId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/sandbox/${vaultId}/actions/refresh",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSandboxVaultIdGet(vaultId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/sandbox/${vaultId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSecuritypoliciesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/securitypolicies",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/securitypolicies/${securityPolicyName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersGet(vaults: Option[String] = None, excludeVaultMembership: Option[String] = None, excludeAppLicensing: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      vaults.map("vaults" -> _).map(Seq(_)) ++ 
      excludeVaultMembership.map("exclude_vault_membership" -> _).map(Seq(_)) ++ 
      excludeAppLicensing.map("exclude_app_licensing" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/users/",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersIdGet(id: String, excludeVaultMembership: Option[String] = None, excludeAppLicensing: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      excludeVaultMembership.map("exclude_vault_membership" -> _).map(Seq(_)) ++ 
      excludeAppLicensing.map("exclude_app_licensing" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/users/${id}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersIdPermissionsGet(id: String, filter: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      filter.map("filter" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/users/${id}/permissions",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersIdPut(id: String, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/users/${id}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersMeGet(excludeVaultMembership: Option[String] = None, excludeAppLicensing: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      excludeVaultMembership.map("exclude_vault_membership" -> _).map(Seq(_)) ++ 
      excludeAppLicensing.map("exclude_app_licensing" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/users/me",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersMePasswordPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/users/me/password",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersMePermissionsGet(filter: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      filter.map("filter" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/objects/users/me/permissions",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersMePut(authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/users/me",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/users",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersPut(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/users",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersUserIdDelete(userId: String, domain: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      domain.map("domain" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/objects/users/${userId}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsUsersUserIdVaultMembershipVaultIdPut(userId: String, vaultId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/objects/users/${userId}/vault_membership/${vaultId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsVaultActionsComparePost(authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/vault/actions/compare",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def objectsVaultActionsConfigreportPost(authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/objects/vault/actions/configreport",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def queryComponentsPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/query/components",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def queryNextPagePost(nextPage: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIDescribeQuery: Option[Boolean] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIDescribeQuery.map(x => "X-VaultAPI-DescribeQuery" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/query/${nextPage}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def queryPost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIDescribeQuery: Option[Boolean] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIDescribeQuery.map(x => "X-VaultAPI-DescribeQuery" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/query",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def queryPreviousPagePost(previousPage: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIDescribeQuery: Option[Boolean] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIDescribeQuery.map(x => "X-VaultAPI-DescribeQuery" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/query/${previousPage}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2MeGet(attributes: Option[String] = None, excludedAttributes: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      attributes.map("attributes" -> _).map(Seq(_)) ++ 
      excludedAttributes.map("excludedAttributes" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/scim/v2/Me",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2MePut(attributes: Option[String] = None, excludedAttributes: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      attributes.map("attributes" -> _).map(Seq(_)) ++ 
      excludedAttributes.map("excludedAttributes" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/scim/v2/Me",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2ResourceTypesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/scim/v2/ResourceTypes",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2ResourceTypesTypeGet(`type`: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/scim/v2/ResourceTypes/${`type`}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2SchemasGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/scim/v2/Schemas",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2SchemasIdGet(id: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/scim/v2/Schemas/${id}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2ServiceProviderConfigGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/scim/v2/ServiceProviderConfig",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2TypeGet(`type`: String, filter: Option[String] = None, attributes: Option[String] = None, excludedAttributes: Option[String] = None, sortBy: Option[String] = None, sortOrder: Option[String] = None, startIndex: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      filter.map("filter" -> _).map(Seq(_)) ++ 
      attributes.map("attributes" -> _).map(Seq(_)) ++ 
      excludedAttributes.map("excludedAttributes" -> _).map(Seq(_)) ++ 
      sortBy.map("sortBy" -> _).map(Seq(_)) ++ 
      sortOrder.map("sortOrder" -> _).map(Seq(_)) ++ 
      startIndex.map("startIndex" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/scim/v2/${`type`}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2TypeIdGet(`type`: String, id: String, attributes: Option[String] = None, excludedAttributes: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      attributes.map("attributes" -> _).map(Seq(_)) ++ 
      excludedAttributes.map("excludedAttributes" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/scim/v2/${`type`}/${id}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2UsersGet(filter: Option[String] = None, attributes: Option[String] = None, excludedAttributes: Option[String] = None, sortBy: Option[String] = None, sortOrder: Option[String] = None, count: Option[String] = None, startIndex: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      filter.map("filter" -> _).map(Seq(_)) ++ 
      attributes.map("attributes" -> _).map(Seq(_)) ++ 
      excludedAttributes.map("excludedAttributes" -> _).map(Seq(_)) ++ 
      sortBy.map("sortBy" -> _).map(Seq(_)) ++ 
      sortOrder.map("sortOrder" -> _).map(Seq(_)) ++ 
      count.map("count" -> _).map(Seq(_)) ++ 
      startIndex.map("startIndex" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/scim/v2/Users",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2UsersIdGet(id: String, filter: Option[String] = None, attributes: Option[String] = None, excludedAttributes: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      filter.map("filter" -> _).map(Seq(_)) ++ 
      attributes.map("attributes" -> _).map(Seq(_)) ++ 
      excludedAttributes.map("excludedAttributes" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/scim/v2/Users/${id}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2UsersIdPut(id: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/scim/v2/Users/${id}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def scimV2UsersPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/scim/v2/Users",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesCertificateCertIdGet(certId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/certificate/${certId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesConfigurationModeActionsDisablePost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/services/configuration_mode/actions/disable",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesConfigurationModeActionsEnablePost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/services/configuration_mode/actions/enable",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesDirectdataFilesGet(extractType: Option[String] = None, startTime: Option[Int] = None, stopTime: Option[Int] = None, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      extractType.map("extract_type" -> _).map(Seq(_)) ++ 
      startTime.map("start_time" -> _).map(Seq(_)) ++ 
      stopTime.map("stop_time" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/directdata/files",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesDirectdataFilesNameGet(name: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/directdata/files/${name}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingItemsContentItemGet(item: String, authorization: Option[String] = None, accept: Option[String] = None, range: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), range.map(x => "Range" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/file_staging/items/content/${item}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingItemsItemDelete(item: String, recursive: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      recursive.map("recursive" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/services/file_staging/items/${item}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingItemsItemGet(item: String, recursive: Option[String] = None, limit: Option[String] = None, formatResult: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      recursive.map("recursive" -> _).map(Seq(_)) ++ 
      limit.map("limit" -> _).map(Seq(_)) ++ 
      formatResult.map("format_result" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/file_staging/items/${item}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingItemsItemPut(item: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/services/file_staging/items/${item}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingItemsPost(authorization: Option[String] = None, accept: Option[String] = None, contentMD5: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentMD5.map(x => "Content-MD5" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/services/file_staging/items",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingUploadGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/file_staging/upload/",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingUploadPost(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/services/file_staging/upload",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/services/file_staging/upload/${uploadSessionId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/file_staging/upload/${uploadSessionId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: String, limit: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      limit.map("limit" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/file_staging/upload/${uploadSessionId}/parts",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/services/file_staging/upload/${uploadSessionId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIFilePartNumber: Option[String] = None, contentMD5: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIFilePartNumber.map(x => "X-VaultAPI-FilePartNumber" -> x), contentMD5.map(x => "Content-MD5" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/services/file_staging/upload/${uploadSessionId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesJobsHistoriesGet(startDate: Option[String] = None, endDate: Option[String] = None, status: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      startDate.map("start_date" -> _).map(Seq(_)) ++ 
      endDate.map("end_date" -> _).map(Seq(_)) ++ 
      status.map("status" -> _).map(Seq(_)) ++ 
      limit.map("limit" -> _).map(Seq(_)) ++ 
      offset.map("offset" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/jobs/histories",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesJobsJobIdErrorsGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/jobs/${jobId}/errors",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesJobsJobIdGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/jobs/${jobId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesJobsJobIdSummaryGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/jobs/${jobId}/summary",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesJobsJobIdTasksGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/jobs/${jobId}/tasks",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesJobsMonitorsGet(startDate: Option[String] = None, endDate: Option[String] = None, status: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      startDate.map("start_date" -> _).map(Seq(_)) ++ 
      endDate.map("end_date" -> _).map(Seq(_)) ++ 
      status.map("status" -> _).map(Seq(_)) ++ 
      limit.map("limit" -> _).map(Seq(_)) ++ 
      offset.map("offset" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/jobs/monitors",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesJobsStartNowJobIdPost(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/services/jobs/start_now/${jobId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesLoaderExtractPost(authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/services/loader/extract",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: String, taskId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/loader/${jobId}/tasks/${taskId}/failurelog",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesLoaderJobIdTasksTaskIdResultsGet(jobId: String, taskId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/loader/${jobId}/tasks/${taskId}/results",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: String, taskId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/loader/${jobId}/tasks/${taskId}/results/renditions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: String, taskId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/loader/${jobId}/tasks/${taskId}/successlog",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesLoaderLoadPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/services/loader/load",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesPackageActionsValidatePost(authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/services/package/actions/validate",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesPackagePost(authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/services/package",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesPackagePut(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/services/package",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesQueuesGet(authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/queues",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/services/queues/${queueName}/actions/disable_delivery",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/services/queues/${queueName}/actions/enable_delivery",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesQueuesQueueNameActionsResetPut(queueName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/services/queues/${queueName}/actions/reset",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesQueuesQueueNameGet(queueName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/services/queues/${queueName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/services/vobject/vault_package__v/${packageId}/actions/validate",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def sessionDelete(accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/session",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def uicodeDistributionsDistributionNameCodeGet(distributionName: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/uicode/distributions/${distributionName}/code",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def uicodeDistributionsDistributionNameDelete(distributionName: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/uicode/distributions/${distributionName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def uicodeDistributionsDistributionNameGet(distributionName: String, accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/uicode/distributions/${distributionName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def uicodeDistributionsGet(accept: Option[String] = None, authorization: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/uicode/distributions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def uicodeDistributionsPost(accept: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/uicode/distributions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectVaultPackageVPackageIdActionsDeployPost(packageId: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobject/vault_package__v/${packageId}/actions/deploy",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobject/vault_package__v/${packageId}/actions/deploy/results",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: String, jobStatus: String, jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/cascadedelete/results/${objectName}/${jobStatus}/${jobId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: String, jobStatus: String, jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/deepcopy/results/${objectName}/${jobStatus}/${jobId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsEdlItemVActionsCreateplaceholderPost(authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/edl_item__v/actions/createplaceholder",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsMergesJobIdLogGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/merges/${jobId}/log",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsMergesJobIdResultsGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/merges/${jobId}/results",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsMergesJobIdStatusGet(jobId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/merges/${jobId}/status",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameActionsActionNamePost(objectName: String, actionName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/actions/${actionName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameActionsChangetypePost(objectName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/actions/changetype",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameActionsMergePost(objectName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None, vobjectsObjectNameActionsMergePostRequestInner: Option[Seq[VobjectsObjectNameActionsMergePostRequestInner]] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Seq[VobjectsObjectNameActionsMergePostRequestInner], Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/actions/merge",
      body = vobjectsObjectNameActionsMergePostRequestInner,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameActionsRecalculaterollupsGet(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/actions/recalculaterollups",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameActionsRecalculaterollupsPost(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/actions/recalculaterollups",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/vobjects/${objectName}/actions/updatecorporatecurrency",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameAttachmentsBatchDelete(objectName: String, idParam: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      idParam.map("idParam" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/vobjects/${objectName}/attachments/batch",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameAttachmentsBatchPost(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/attachments/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameAttachmentsBatchPut(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/vobjects/${objectName}/attachments/batch",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameDelete(objectName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/vobjects/${objectName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameIdRolesRoleNameGet(objectName: String, id: String, roleName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${id}/roles/${roleName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: String, objectRecordId: String, actionName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}/actions/${actionName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: String, objectRecordId: String, actionName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/${objectRecordId}/actions/${actionName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/${objectRecordId}/actions/cascadedelete",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/${objectRecordId}/actions/deepcopy",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdActionsGet(objectName: String, objectRecordId: String, loc: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      loc.map("loc" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}/actions",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: String, objectRecordId: String, attachmentFieldName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachment_fields/${attachmentFieldName}/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: String, objectRecordId: String, attachmentFieldName: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachment_fields/${attachmentFieldName}/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachment_fields/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: String, objectRecordId: String, attachmentId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachments/${attachmentId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: String, objectRecordId: String, attachmentId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachments/${attachmentId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: String, objectRecordId: String, attachmentId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachments/${attachmentId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachments/${attachmentId}/versions/${attachmentVersion}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachments/${attachmentId}/versions/${attachmentVersion}/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachments/${attachmentId}/versions/${attachmentVersion}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, restore: Option[Boolean] = None, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      restore.map("restore" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachments/${attachmentId}/versions/${attachmentVersion}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: String, objectRecordId: String, attachmentId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachments/${attachmentId}/versions",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachments/file",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachments",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/${objectRecordId}/attachments",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: String, objectRecordId: String, startDate: Option[String] = None, endDate: Option[String] = None, formatResult: Option[String] = None, limit: Option[String] = None, offset: Option[String] = None, events: Option[String] = None, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      startDate.map("start_date" -> _).map(Seq(_)) ++ 
      endDate.map("end_date" -> _).map(Seq(_)) ++ 
      formatResult.map("format_result" -> _).map(Seq(_)) ++ 
      limit.map("limit" -> _).map(Seq(_)) ++ 
      offset.map("offset" -> _).map(Seq(_)) ++ 
      events.map("events" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}/audittrail",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameObjectRecordIdGet(objectName: String, objectRecordId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/${objectName}/${objectRecordId}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNamePost(objectName: String, idParam: Option[String] = None, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPINoTriggers: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIMigrationMode.map(x => "X-VaultAPI-MigrationMode" -> x), xVaultAPINoTriggers.map(x => "X-VaultAPI-NoTriggers" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten
    val queryParameters = (
      idParam.map("idParam" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNamePut(objectName: String, authorization: Option[String] = None, contentType: Option[String] = None, accept: Option[String] = None, xVaultAPIMigrationMode: Option[Boolean] = None, xVaultAPINoTriggers: Option[Boolean] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), contentType.map(x => "Content-Type" -> x), accept.map(x => "Accept" -> x), xVaultAPIMigrationMode.map(x => "X-VaultAPI-MigrationMode" -> x), xVaultAPINoTriggers.map(x => "X-VaultAPI-NoTriggers" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "PUT",
      path = s"/vobjects/${objectName}",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameRolesDelete(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "DELETE",
      path = s"/vobjects/${objectName}/roles",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsObjectNameRolesPost(objectName: String, authorization: Option[String] = None, accept: Option[String] = None, contentType: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), contentType.map(x => "Content-Type" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "POST",
      path = s"/vobjects/${objectName}/roles",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

  override def vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: String, authorization: Option[String] = None, accept: Option[String] = None, xVaultAPIClientID: Option[String] = None): F[Unit] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      authorization.map(x => "Authorization" -> x), accept.map(x => "Accept" -> x), xVaultAPIClientID.map(x => "X-VaultAPI-ClientID" -> x)
    ).flatten

    _executeRequest[Unit, Unit](
      method = "GET",
      path = s"/vobjects/outbound_package__v/${packageId}/dependencies",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => Concurrent[F].pure(())
    }
  }

}


