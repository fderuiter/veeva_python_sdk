/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.VobjectsObjectNameActionsMergePostRequestInner

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://}/api/v25.1")
        }
    }

    /**
     * GET /api/
     * Retrieve API Versions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = apiGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/
     * Retrieve API Versions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun apiGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/mdl/components/{component_type_and_record_name}/files
     * Retrieve Content File
     * 
     * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = apiMdlComponentsComponentTypeAndRecordNameFilesGetWithHttpInfo(componentTypeAndRecordName = componentTypeAndRecordName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/mdl/components/{component_type_and_record_name}/files
     * Retrieve Content File
     * 
     * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiMdlComponentsComponentTypeAndRecordNameFilesGetWithHttpInfo(componentTypeAndRecordName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiMdlComponentsComponentTypeAndRecordNameFilesGetRequestConfig(componentTypeAndRecordName = componentTypeAndRecordName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiMdlComponentsComponentTypeAndRecordNameFilesGet
     *
     * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun apiMdlComponentsComponentTypeAndRecordNameFilesGetRequestConfig(componentTypeAndRecordName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/mdl/components/{component_type_and_record_name}/files".replace("{"+"component_type_and_record_name"+"}", encodeURIComponent(componentTypeAndRecordName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/mdl/components/{component_type_and_record_name}
     * Retrieve Component Record (MDL)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = apiMdlComponentsComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName = componentTypeAndRecordName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/mdl/components/{component_type_and_record_name}
     * Retrieve Component Record (MDL)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiMdlComponentsComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiMdlComponentsComponentTypeAndRecordNameGetRequestConfig(componentTypeAndRecordName = componentTypeAndRecordName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiMdlComponentsComponentTypeAndRecordNameGet
     *
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun apiMdlComponentsComponentTypeAndRecordNameGetRequestConfig(componentTypeAndRecordName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/mdl/components/{component_type_and_record_name}".replace("{"+"component_type_and_record_name"+"}", encodeURIComponent(componentTypeAndRecordName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/mdl/execute_async/{job_id}/results
     * Retrieve Asynchronous MDL Script Results
     * 
     * @param jobId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiMdlExecuteAsyncJobIdResultsGet(jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = apiMdlExecuteAsyncJobIdResultsGetWithHttpInfo(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/mdl/execute_async/{job_id}/results
     * Retrieve Asynchronous MDL Script Results
     * 
     * @param jobId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiMdlExecuteAsyncJobIdResultsGetWithHttpInfo(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiMdlExecuteAsyncJobIdResultsGetRequestConfig(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiMdlExecuteAsyncJobIdResultsGet
     *
     * @param jobId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun apiMdlExecuteAsyncJobIdResultsGetRequestConfig(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/mdl/execute_async/{job_id}/results".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/mdl/execute_async
     * Execute MDL Script Asynchronously
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiMdlExecuteAsyncPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = apiMdlExecuteAsyncPostWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/mdl/execute_async
     * Execute MDL Script Asynchronously
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiMdlExecuteAsyncPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiMdlExecuteAsyncPostRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiMdlExecuteAsyncPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun apiMdlExecuteAsyncPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/mdl/execute_async",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/mdl/execute
     * Execute MDL Script
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiMdlExecutePost(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = apiMdlExecutePostWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/mdl/execute
     * Execute MDL Script
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiMdlExecutePostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiMdlExecutePostRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiMdlExecutePost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun apiMdlExecutePostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/mdl/execute",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/mdl/files
     * Upload Content File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiMdlFilesPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = apiMdlFilesPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/mdl/files
     * Upload Content File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiMdlFilesPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiMdlFilesPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiMdlFilesPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun apiMdlFilesPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/mdl/files",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /audittrail/{audit_trail_type}
     * Retrieve Audit Details
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
     * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail. (optional)
     * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects. (optional)
     * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun audittrailAuditTrailTypeGet(auditTrailType: kotlin.String, startDate: kotlin.String? = null, endDate: kotlin.String? = null, allDates: kotlin.String? = null, formatResult: kotlin.String? = null, limit: kotlin.String? = null, offset: kotlin.String? = null, objects: kotlin.String? = null, events: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = audittrailAuditTrailTypeGetWithHttpInfo(auditTrailType = auditTrailType, startDate = startDate, endDate = endDate, allDates = allDates, formatResult = formatResult, limit = limit, offset = offset, objects = objects, events = events, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /audittrail/{audit_trail_type}
     * Retrieve Audit Details
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
     * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail. (optional)
     * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects. (optional)
     * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun audittrailAuditTrailTypeGetWithHttpInfo(auditTrailType: kotlin.String, startDate: kotlin.String?, endDate: kotlin.String?, allDates: kotlin.String?, formatResult: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, objects: kotlin.String?, events: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = audittrailAuditTrailTypeGetRequestConfig(auditTrailType = auditTrailType, startDate = startDate, endDate = endDate, allDates = allDates, formatResult = formatResult, limit = limit, offset = offset, objects = objects, events = events, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation audittrailAuditTrailTypeGet
     *
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
     * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail. (optional)
     * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects. (optional)
     * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun audittrailAuditTrailTypeGetRequestConfig(auditTrailType: kotlin.String, startDate: kotlin.String?, endDate: kotlin.String?, allDates: kotlin.String?, formatResult: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, objects: kotlin.String?, events: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (allDates != null) {
                    put("all_dates", listOf(allDates.toString()))
                }
                if (formatResult != null) {
                    put("format_result", listOf(formatResult.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (objects != null) {
                    put("objects", listOf(objects.toString()))
                }
                if (events != null) {
                    put("events", listOf(events.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/audittrail/{audit_trail_type}".replace("{"+"audit_trail_type"+"}", encodeURIComponent(auditTrailType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /auth/discovery
     * Authentication Type Discovery
     * 
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authDiscoveryPost(accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = authDiscoveryPostWithHttpInfo(accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /auth/discovery
     * Authentication Type Discovery
     * 
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun authDiscoveryPostWithHttpInfo(accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = authDiscoveryPostRequestConfig(accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authDiscoveryPost
     *
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun authDiscoveryPostRequestConfig(accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/discovery",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /auth/oauth/session/{oath_oidc_profile_id}
     * OAuth 2.0 / OpenID Connect
     * 
     * @param oathOidcProfileId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = authOauthSessionOathOidcProfileIdPostWithHttpInfo(oathOidcProfileId = oathOidcProfileId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /auth/oauth/session/{oath_oidc_profile_id}
     * OAuth 2.0 / OpenID Connect
     * 
     * @param oathOidcProfileId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun authOauthSessionOathOidcProfileIdPostWithHttpInfo(oathOidcProfileId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = authOauthSessionOathOidcProfileIdPostRequestConfig(oathOidcProfileId = oathOidcProfileId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authOauthSessionOathOidcProfileIdPost
     *
     * @param oathOidcProfileId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun authOauthSessionOathOidcProfileIdPostRequestConfig(oathOidcProfileId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/oauth/session/{oath_oidc_profile_id}".replace("{"+"oath_oidc_profile_id"+"}", encodeURIComponent(oathOidcProfileId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /auth
     * User Name and Password
     * 
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authPost(contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = authPostWithHttpInfo(contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /auth
     * User Name and Password
     * 
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun authPostWithHttpInfo(contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = authPostRequestConfig(contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authPost
     *
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun authPostRequestConfig(contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /code/{class_name}
     * Delete Single Source Code File
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun codeClassNameDelete(className: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = codeClassNameDeleteWithHttpInfo(className = className, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /code/{class_name}
     * Delete Single Source Code File
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun codeClassNameDeleteWithHttpInfo(className: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = codeClassNameDeleteRequestConfig(className = className, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation codeClassNameDelete
     *
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun codeClassNameDeleteRequestConfig(className: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/code/{class_name}".replace("{"+"class_name"+"}", encodeURIComponent(className.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /code/{class_name}/disable
     * Disable Vault Extension
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun codeClassNameDisablePut(className: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = codeClassNameDisablePutWithHttpInfo(className = className, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /code/{class_name}/disable
     * Disable Vault Extension
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun codeClassNameDisablePutWithHttpInfo(className: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = codeClassNameDisablePutRequestConfig(className = className, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation codeClassNameDisablePut
     *
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun codeClassNameDisablePutRequestConfig(className: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/code/{class_name}/disable".replace("{"+"class_name"+"}", encodeURIComponent(className.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /code/{class_name}/enable
     * Enable Vault Extension
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun codeClassNameEnablePut(className: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = codeClassNameEnablePutWithHttpInfo(className = className, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /code/{class_name}/enable
     * Enable Vault Extension
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun codeClassNameEnablePutWithHttpInfo(className: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = codeClassNameEnablePutRequestConfig(className = className, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation codeClassNameEnablePut
     *
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun codeClassNameEnablePutRequestConfig(className: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/code/{class_name}/enable".replace("{"+"class_name"+"}", encodeURIComponent(className.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /code/{class_name}
     * Retrieve Single Source Code File
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun codeClassNameGet(className: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = codeClassNameGetWithHttpInfo(className = className, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /code/{class_name}
     * Retrieve Single Source Code File
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun codeClassNameGetWithHttpInfo(className: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = codeClassNameGetRequestConfig(className = className, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation codeClassNameGet
     *
     * @param className The fully qualified class name of your file.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun codeClassNameGetRequestConfig(className: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/code/{class_name}".replace("{"+"class_name"+"}", encodeURIComponent(className.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /code/profiler
     * Retrieve All Profiling Sessions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun codeProfilerGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = codeProfilerGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /code/profiler
     * Retrieve All Profiling Sessions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun codeProfilerGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = codeProfilerGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation codeProfilerGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun codeProfilerGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/code/profiler",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /code/profiler
     * Create Profiling Session
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun codeProfilerPost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = codeProfilerPostWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /code/profiler
     * Create Profiling Session
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun codeProfilerPostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = codeProfilerPostRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation codeProfilerPost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun codeProfilerPostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/code/profiler",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /code/profiler/{session_name}/actions/end
     * End Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun codeProfilerSessionNameActionsEndPost(sessionName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = codeProfilerSessionNameActionsEndPostWithHttpInfo(sessionName = sessionName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /code/profiler/{session_name}/actions/end
     * End Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun codeProfilerSessionNameActionsEndPostWithHttpInfo(sessionName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = codeProfilerSessionNameActionsEndPostRequestConfig(sessionName = sessionName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation codeProfilerSessionNameActionsEndPost
     *
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun codeProfilerSessionNameActionsEndPostRequestConfig(sessionName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/code/profiler/{session_name}/actions/end".replace("{"+"session_name"+"}", encodeURIComponent(sessionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /code/profiler/{session_name}
     * Delete Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun codeProfilerSessionNameDelete(sessionName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = codeProfilerSessionNameDeleteWithHttpInfo(sessionName = sessionName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /code/profiler/{session_name}
     * Delete Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun codeProfilerSessionNameDeleteWithHttpInfo(sessionName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = codeProfilerSessionNameDeleteRequestConfig(sessionName = sessionName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation codeProfilerSessionNameDelete
     *
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun codeProfilerSessionNameDeleteRequestConfig(sessionName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/code/profiler/{session_name}".replace("{"+"session_name"+"}", encodeURIComponent(sessionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /code/profiler/{session_name}
     * Retrieve Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun codeProfilerSessionNameGet(sessionName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = codeProfilerSessionNameGetWithHttpInfo(sessionName = sessionName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /code/profiler/{session_name}
     * Retrieve Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun codeProfilerSessionNameGetWithHttpInfo(sessionName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = codeProfilerSessionNameGetRequestConfig(sessionName = sessionName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation codeProfilerSessionNameGet
     *
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun codeProfilerSessionNameGetRequestConfig(sessionName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/code/profiler/{session_name}".replace("{"+"session_name"+"}", encodeURIComponent(sessionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /code/profiler/{session_name}/results
     * Download Profiling Session Results
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun codeProfilerSessionNameResultsGet(sessionName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = codeProfilerSessionNameResultsGetWithHttpInfo(sessionName = sessionName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /code/profiler/{session_name}/results
     * Download Profiling Session Results
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun codeProfilerSessionNameResultsGetWithHttpInfo(sessionName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = codeProfilerSessionNameResultsGetRequestConfig(sessionName = sessionName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation codeProfilerSessionNameResultsGet
     *
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun codeProfilerSessionNameResultsGetRequestConfig(sessionName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/code/profiler/{session_name}/results".replace("{"+"session_name"+"}", encodeURIComponent(sessionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /code
     * Add or Replace Single Source Code File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun codePut(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = codePutWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /code
     * Add or Replace Single Source Code File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun codePutWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = codePutRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation codePut
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun codePutRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/code",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /composites/trees/{edl_hierarchy_or_template}/actions/listnodes
     * Retrieve Specific Root Nodes
     * 
     * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = compositesTreesEdlHierarchyOrTemplateActionsListnodesPostWithHttpInfo(edlHierarchyOrTemplate = edlHierarchyOrTemplate, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /composites/trees/{edl_hierarchy_or_template}/actions/listnodes
     * Retrieve Specific Root Nodes
     * 
     * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun compositesTreesEdlHierarchyOrTemplateActionsListnodesPostWithHttpInfo(edlHierarchyOrTemplate: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = compositesTreesEdlHierarchyOrTemplateActionsListnodesPostRequestConfig(edlHierarchyOrTemplate = edlHierarchyOrTemplate, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation compositesTreesEdlHierarchyOrTemplateActionsListnodesPost
     *
     * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun compositesTreesEdlHierarchyOrTemplateActionsListnodesPostRequestConfig(edlHierarchyOrTemplate: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/composites/trees/{edl_hierarchy_or_template}/actions/listnodes".replace("{"+"edl_hierarchy_or_template"+"}", encodeURIComponent(edlHierarchyOrTemplate.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /composites/trees/{edl_hierarchy_or_template}
     * Retrieve All Root Nodes
     * 
     * @param edlHierarchyOrTemplate 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = compositesTreesEdlHierarchyOrTemplateGetWithHttpInfo(edlHierarchyOrTemplate = edlHierarchyOrTemplate, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /composites/trees/{edl_hierarchy_or_template}
     * Retrieve All Root Nodes
     * 
     * @param edlHierarchyOrTemplate 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun compositesTreesEdlHierarchyOrTemplateGetWithHttpInfo(edlHierarchyOrTemplate: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = compositesTreesEdlHierarchyOrTemplateGetRequestConfig(edlHierarchyOrTemplate = edlHierarchyOrTemplate, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation compositesTreesEdlHierarchyOrTemplateGet
     *
     * @param edlHierarchyOrTemplate 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun compositesTreesEdlHierarchyOrTemplateGetRequestConfig(edlHierarchyOrTemplate: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/composites/trees/{edl_hierarchy_or_template}".replace("{"+"edl_hierarchy_or_template"+"}", encodeURIComponent(edlHierarchyOrTemplate.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /composites/trees/edl_hierarchy__v/{parent_node_id}/children
     * Retrieve a Node&#39;s Children
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = compositesTreesEdlHierarchyVParentNodeIdChildrenGetWithHttpInfo(parentNodeId = parentNodeId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /composites/trees/edl_hierarchy__v/{parent_node_id}/children
     * Retrieve a Node&#39;s Children
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun compositesTreesEdlHierarchyVParentNodeIdChildrenGetWithHttpInfo(parentNodeId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = compositesTreesEdlHierarchyVParentNodeIdChildrenGetRequestConfig(parentNodeId = parentNodeId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation compositesTreesEdlHierarchyVParentNodeIdChildrenGet
     *
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun compositesTreesEdlHierarchyVParentNodeIdChildrenGetRequestConfig(parentNodeId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children".replace("{"+"parent_node_id"+"}", encodeURIComponent(parentNodeId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /composites/trees/edl_hierarchy__v/{parent_node_id}/children
     * Update Node Order
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = compositesTreesEdlHierarchyVParentNodeIdChildrenPutWithHttpInfo(parentNodeId = parentNodeId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /composites/trees/edl_hierarchy__v/{parent_node_id}/children
     * Update Node Order
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun compositesTreesEdlHierarchyVParentNodeIdChildrenPutWithHttpInfo(parentNodeId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = compositesTreesEdlHierarchyVParentNodeIdChildrenPutRequestConfig(parentNodeId = parentNodeId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation compositesTreesEdlHierarchyVParentNodeIdChildrenPut
     *
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun compositesTreesEdlHierarchyVParentNodeIdChildrenPutRequestConfig(parentNodeId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children".replace("{"+"parent_node_id"+"}", encodeURIComponent(parentNodeId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /configuration/{component_type_and_record_name}
     * Retrieve Component Record (XML/JSON)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: kotlin.String, loc: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = configurationComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName = componentTypeAndRecordName, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /configuration/{component_type_and_record_name}
     * Retrieve Component Record (XML/JSON)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun configurationComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName: kotlin.String, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = configurationComponentTypeAndRecordNameGetRequestConfig(componentTypeAndRecordName = componentTypeAndRecordName, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation configurationComponentTypeAndRecordNameGet
     *
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun configurationComponentTypeAndRecordNameGetRequestConfig(componentTypeAndRecordName: kotlin.String, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/configuration/{component_type_and_record_name}".replace("{"+"component_type_and_record_name"+"}", encodeURIComponent(componentTypeAndRecordName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /configuration/{component_type}
     * Retrieve Component Record Collection
     * 
     * @param componentType 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationComponentTypeGet(componentType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = configurationComponentTypeGetWithHttpInfo(componentType = componentType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /configuration/{component_type}
     * Retrieve Component Record Collection
     * 
     * @param componentType 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun configurationComponentTypeGetWithHttpInfo(componentType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = configurationComponentTypeGetRequestConfig(componentType = componentType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation configurationComponentTypeGet
     *
     * @param componentType 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun configurationComponentTypeGetRequestConfig(componentType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/configuration/{component_type}".replace("{"+"component_type"+"}", encodeURIComponent(componentType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /configuration/{object_name_and_object_type}
     * Retrieve Details from a Specific Object
     * 
     * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: kotlin.String, loc: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = configurationObjectNameAndObjectTypeGetWithHttpInfo(objectNameAndObjectType = objectNameAndObjectType, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /configuration/{object_name_and_object_type}
     * Retrieve Details from a Specific Object
     * 
     * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun configurationObjectNameAndObjectTypeGetWithHttpInfo(objectNameAndObjectType: kotlin.String, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = configurationObjectNameAndObjectTypeGetRequestConfig(objectNameAndObjectType = objectNameAndObjectType, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation configurationObjectNameAndObjectTypeGet
     *
     * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun configurationObjectNameAndObjectTypeGetRequestConfig(objectNameAndObjectType: kotlin.String, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/configuration/{object_name_and_object_type}".replace("{"+"object_name_and_object_type"+"}", encodeURIComponent(objectNameAndObjectType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /configuration/Objecttype
     * Retrieve Details from All Object Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationObjecttypeGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = configurationObjecttypeGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /configuration/Objecttype
     * Retrieve Details from All Object Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun configurationObjecttypeGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = configurationObjecttypeGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation configurationObjecttypeGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun configurationObjecttypeGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/configuration/Objecttype",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /configuration/role_assignment_rule
     * Delete Lifecycle Role Assignment Override Rules
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationRoleAssignmentRuleDelete(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = configurationRoleAssignmentRuleDeleteWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /configuration/role_assignment_rule
     * Delete Lifecycle Role Assignment Override Rules
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun configurationRoleAssignmentRuleDeleteWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = configurationRoleAssignmentRuleDeleteRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation configurationRoleAssignmentRuleDelete
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun configurationRoleAssignmentRuleDeleteRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/configuration/role_assignment_rule",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /configuration/role_assignment_rule
     * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
     * 
     * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c (optional)
     * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c (optional)
     * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap (optional)
     * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States (optional)
     * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study (optional)
     * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationRoleAssignmentRuleGet(lifecycleV: kotlin.String? = null, roleV: kotlin.String? = null, productV: kotlin.String? = null, countryV: kotlin.String? = null, studyV: kotlin.String? = null, studyCountryV: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = configurationRoleAssignmentRuleGetWithHttpInfo(lifecycleV = lifecycleV, roleV = roleV, productV = productV, countryV = countryV, studyV = studyV, studyCountryV = studyCountryV, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /configuration/role_assignment_rule
     * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
     * 
     * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c (optional)
     * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c (optional)
     * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap (optional)
     * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States (optional)
     * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study (optional)
     * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun configurationRoleAssignmentRuleGetWithHttpInfo(lifecycleV: kotlin.String?, roleV: kotlin.String?, productV: kotlin.String?, countryV: kotlin.String?, studyV: kotlin.String?, studyCountryV: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = configurationRoleAssignmentRuleGetRequestConfig(lifecycleV = lifecycleV, roleV = roleV, productV = productV, countryV = countryV, studyV = studyV, studyCountryV = studyCountryV, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation configurationRoleAssignmentRuleGet
     *
     * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c (optional)
     * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c (optional)
     * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap (optional)
     * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States (optional)
     * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study (optional)
     * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun configurationRoleAssignmentRuleGetRequestConfig(lifecycleV: kotlin.String?, roleV: kotlin.String?, productV: kotlin.String?, countryV: kotlin.String?, studyV: kotlin.String?, studyCountryV: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (lifecycleV != null) {
                    put("lifecycle__v", listOf(lifecycleV.toString()))
                }
                if (roleV != null) {
                    put("role__v", listOf(roleV.toString()))
                }
                if (productV != null) {
                    put("product__v", listOf(productV.toString()))
                }
                if (countryV != null) {
                    put("country__v", listOf(countryV.toString()))
                }
                if (studyV != null) {
                    put("study__v", listOf(studyV.toString()))
                }
                if (studyCountryV != null) {
                    put("study_country__v", listOf(studyCountryV.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/configuration/role_assignment_rule",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /configuration/role_assignment_rule
     * Create Lifecycle Role Assignment Override Rules
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationRoleAssignmentRulePost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = configurationRoleAssignmentRulePostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /configuration/role_assignment_rule
     * Create Lifecycle Role Assignment Override Rules
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun configurationRoleAssignmentRulePostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = configurationRoleAssignmentRulePostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation configurationRoleAssignmentRulePost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun configurationRoleAssignmentRulePostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/configuration/role_assignment_rule",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /configuration/role_assignment_rule
     * Update Lifecycle Role Assignment Rules (Default &amp; Override)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationRoleAssignmentRulePut(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = configurationRoleAssignmentRulePutWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /configuration/role_assignment_rule
     * Update Lifecycle Role Assignment Rules (Default &amp; Override)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun configurationRoleAssignmentRulePutWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = configurationRoleAssignmentRulePutRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation configurationRoleAssignmentRulePut
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun configurationRoleAssignmentRulePutRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/configuration/role_assignment_rule",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /delegation/login
     * Initiate Delegated Session
     * 
     * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid. (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun delegationLoginPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = delegationLoginPostWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /delegation/login
     * Initiate Delegated Session
     * 
     * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid. (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun delegationLoginPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = delegationLoginPostRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation delegationLoginPost
     *
     * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid. (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun delegationLoginPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/delegation/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /delegation/vaults
     * Retrieve Delegations
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun delegationVaultsGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = delegationVaultsGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /delegation/vaults
     * Retrieve Delegations
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun delegationVaultsGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = delegationVaultsGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation delegationVaultsGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun delegationVaultsGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/delegation/vaults",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /keep-alive
     * Session Keep Alive
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun keepAlivePost(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = keepAlivePostWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /keep-alive
     * Session Keep Alive
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun keepAlivePostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = keepAlivePostRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation keepAlivePost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun keepAlivePostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/keep-alive",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /limits
     * Retrieve Limits on Objects
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun limitsGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = limitsGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /limits
     * Retrieve Limits on Objects
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun limitsGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = limitsGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation limitsGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun limitsGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/limits",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /logs/api_usage
     * Download Daily API Usage
     * 
     * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past. (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun logsApiUsageGet(date: kotlin.String? = null, logFormat: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = logsApiUsageGetWithHttpInfo(date = date, logFormat = logFormat, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /logs/api_usage
     * Download Daily API Usage
     * 
     * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past. (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun logsApiUsageGetWithHttpInfo(date: kotlin.String?, logFormat: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = logsApiUsageGetRequestConfig(date = date, logFormat = logFormat, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation logsApiUsageGet
     *
     * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past. (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun logsApiUsageGetRequestConfig(date: kotlin.String?, logFormat: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (date != null) {
                    put("date", listOf(date.toString()))
                }
                if (logFormat != null) {
                    put("log_format", listOf(logFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/logs/api_usage",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /logs/code/debug
     * Retrieve All Debug Logs
     * 
     * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault. (optional)
     * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun logsCodeDebugGet(userId: kotlin.String? = null, includeInactive: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = logsCodeDebugGetWithHttpInfo(userId = userId, includeInactive = includeInactive, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /logs/code/debug
     * Retrieve All Debug Logs
     * 
     * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault. (optional)
     * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun logsCodeDebugGetWithHttpInfo(userId: kotlin.String?, includeInactive: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = logsCodeDebugGetRequestConfig(userId = userId, includeInactive = includeInactive, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation logsCodeDebugGet
     *
     * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault. (optional)
     * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun logsCodeDebugGetRequestConfig(userId: kotlin.String?, includeInactive: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (userId != null) {
                    put("user_id", listOf(userId.toString()))
                }
                if (includeInactive != null) {
                    put("include_inactive", listOf(includeInactive.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/logs/code/debug",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /logs/code/debug/{id}/actions/reset
     * Delete Debug Log
     * 
     * @param id The ID of the debug log to delete.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun logsCodeDebugIdActionsResetDelete(id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = logsCodeDebugIdActionsResetDeleteWithHttpInfo(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /logs/code/debug/{id}/actions/reset
     * Delete Debug Log
     * 
     * @param id The ID of the debug log to delete.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun logsCodeDebugIdActionsResetDeleteWithHttpInfo(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = logsCodeDebugIdActionsResetDeleteRequestConfig(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation logsCodeDebugIdActionsResetDelete
     *
     * @param id The ID of the debug log to delete.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun logsCodeDebugIdActionsResetDeleteRequestConfig(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/logs/code/debug/{id}/actions/reset".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /logs/code/debug/{id}/actions/reset
     * Reset Debug Log
     * 
     * @param id The ID of the debug log to delete.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun logsCodeDebugIdActionsResetPost(id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = logsCodeDebugIdActionsResetPostWithHttpInfo(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /logs/code/debug/{id}/actions/reset
     * Reset Debug Log
     * 
     * @param id The ID of the debug log to delete.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun logsCodeDebugIdActionsResetPostWithHttpInfo(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = logsCodeDebugIdActionsResetPostRequestConfig(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation logsCodeDebugIdActionsResetPost
     *
     * @param id The ID of the debug log to delete.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun logsCodeDebugIdActionsResetPostRequestConfig(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/logs/code/debug/{id}/actions/reset".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /logs/code/debug/{id}/files
     * Download Debug Log Files
     * 
     * @param id The ID of the debug log to download.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun logsCodeDebugIdFilesGet(id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = logsCodeDebugIdFilesGetWithHttpInfo(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /logs/code/debug/{id}/files
     * Download Debug Log Files
     * 
     * @param id The ID of the debug log to download.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun logsCodeDebugIdFilesGetWithHttpInfo(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = logsCodeDebugIdFilesGetRequestConfig(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation logsCodeDebugIdFilesGet
     *
     * @param id The ID of the debug log to download.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun logsCodeDebugIdFilesGetRequestConfig(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/logs/code/debug/{id}/files".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /logs/code/debug/{id}
     * Retrieve Single Debug Log
     * 
     * @param id The ID of the debug log to retrieve.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun logsCodeDebugIdGet(id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = logsCodeDebugIdGetWithHttpInfo(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /logs/code/debug/{id}
     * Retrieve Single Debug Log
     * 
     * @param id The ID of the debug log to retrieve.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun logsCodeDebugIdGetWithHttpInfo(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = logsCodeDebugIdGetRequestConfig(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation logsCodeDebugIdGet
     *
     * @param id The ID of the debug log to retrieve.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun logsCodeDebugIdGetRequestConfig(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/logs/code/debug/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /logs/code/debug
     * Create Debug Log
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun logsCodeDebugPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = logsCodeDebugPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /logs/code/debug
     * Create Debug Log
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun logsCodeDebugPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = logsCodeDebugPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation logsCodeDebugPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun logsCodeDebugPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/logs/code/debug",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /logs/code/runtime
     * Download SDK Runtime Log
     * 
     * @param date  (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun logsCodeRuntimeGet(date: kotlin.String? = null, logFormat: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = logsCodeRuntimeGetWithHttpInfo(date = date, logFormat = logFormat, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /logs/code/runtime
     * Download SDK Runtime Log
     * 
     * @param date  (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun logsCodeRuntimeGetWithHttpInfo(date: kotlin.String?, logFormat: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = logsCodeRuntimeGetRequestConfig(date = date, logFormat = logFormat, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation logsCodeRuntimeGet
     *
     * @param date  (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun logsCodeRuntimeGetRequestConfig(date: kotlin.String?, logFormat: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (date != null) {
                    put("date", listOf(date.toString()))
                }
                if (logFormat != null) {
                    put("log_format", listOf(logFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/logs/code/runtime",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /messages/{message_type}/actions/import
     * Import Bulk Translation File
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun messagesMessageTypeActionsImportPost(messageType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = messagesMessageTypeActionsImportPostWithHttpInfo(messageType = messageType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /messages/{message_type}/actions/import
     * Import Bulk Translation File
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun messagesMessageTypeActionsImportPostWithHttpInfo(messageType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = messagesMessageTypeActionsImportPostRequestConfig(messageType = messageType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation messagesMessageTypeActionsImportPost
     *
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun messagesMessageTypeActionsImportPostRequestConfig(messageType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/messages/{message_type}/actions/import".replace("{"+"message_type"+"}", encodeURIComponent(messageType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /messages/{message_type}/language/{lang}/actions/export
     * Export Bulk Translation File
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun messagesMessageTypeLanguageLangActionsExportPost(messageType: kotlin.String, lang: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = messagesMessageTypeLanguageLangActionsExportPostWithHttpInfo(messageType = messageType, lang = lang, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /messages/{message_type}/language/{lang}/actions/export
     * Export Bulk Translation File
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun messagesMessageTypeLanguageLangActionsExportPostWithHttpInfo(messageType: kotlin.String, lang: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = messagesMessageTypeLanguageLangActionsExportPostRequestConfig(messageType = messageType, lang = lang, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation messagesMessageTypeLanguageLangActionsExportPost
     *
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun messagesMessageTypeLanguageLangActionsExportPostRequestConfig(messageType: kotlin.String, lang: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/messages/{message_type}/language/{lang}/actions/export".replace("{"+"message_type"+"}", encodeURIComponent(messageType.toString())).replace("{"+"lang"+"}", encodeURIComponent(lang.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/audittrail/{audit_trail_type}
     * Retrieve Audit Metadata
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataAudittrailAuditTrailTypeGet(auditTrailType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataAudittrailAuditTrailTypeGetWithHttpInfo(auditTrailType = auditTrailType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/audittrail/{audit_trail_type}
     * Retrieve Audit Metadata
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataAudittrailAuditTrailTypeGetWithHttpInfo(auditTrailType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataAudittrailAuditTrailTypeGetRequestConfig(auditTrailType = auditTrailType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataAudittrailAuditTrailTypeGet
     *
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataAudittrailAuditTrailTypeGetRequestConfig(auditTrailType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/audittrail/{audit_trail_type}".replace("{"+"audit_trail_type"+"}", encodeURIComponent(auditTrailType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/audittrail
     * Retrieve Audit Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataAudittrailGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataAudittrailGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/audittrail
     * Retrieve Audit Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataAudittrailGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataAudittrailGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataAudittrailGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataAudittrailGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/audittrail",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/components/{component_type}
     * Retrieve Component Type Metadata
     * 
     * @param componentType The component type name (Picklist, Docfield, Doctype, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataComponentsComponentTypeGet(componentType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataComponentsComponentTypeGetWithHttpInfo(componentType = componentType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/components/{component_type}
     * Retrieve Component Type Metadata
     * 
     * @param componentType The component type name (Picklist, Docfield, Doctype, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataComponentsComponentTypeGetWithHttpInfo(componentType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataComponentsComponentTypeGetRequestConfig(componentType = componentType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataComponentsComponentTypeGet
     *
     * @param componentType The component type name (Picklist, Docfield, Doctype, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataComponentsComponentTypeGetRequestConfig(componentType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/components/{component_type}".replace("{"+"component_type"+"}", encodeURIComponent(componentType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/components
     * Retrieve All Component Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataComponentsGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataComponentsGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/components
     * Retrieve All Component Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataComponentsGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataComponentsGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataComponentsGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataComponentsGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/components",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/binders/templates/bindernodes
     * Retrieve Binder Template Node Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsBindersTemplatesBindernodesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsBindersTemplatesBindernodesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/binders/templates/bindernodes
     * Retrieve Binder Template Node Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsBindersTemplatesBindernodesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsBindersTemplatesBindernodesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsBindersTemplatesBindernodesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsBindersTemplatesBindernodesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/binders/templates/bindernodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/binders/templates
     * Retrieve Binder Template Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsBindersTemplatesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsBindersTemplatesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/binders/templates
     * Retrieve Binder Template Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsBindersTemplatesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsBindersTemplatesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsBindersTemplatesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsBindersTemplatesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/binders/templates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/annotations/placemarks/types/{placemark_type}
     * Retrieve Annotation Placemark Type Metadata
     * 
     * @param placemarkType The name of the placemark type. For example, sticky__sys.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetWithHttpInfo(placemarkType = placemarkType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/annotations/placemarks/types/{placemark_type}
     * Retrieve Annotation Placemark Type Metadata
     * 
     * @param placemarkType The name of the placemark type. For example, sticky__sys.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetWithHttpInfo(placemarkType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRequestConfig(placemarkType = placemarkType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet
     *
     * @param placemarkType The name of the placemark type. For example, sticky__sys.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRequestConfig(placemarkType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/annotations/placemarks/types/{placemark_type}".replace("{"+"placemark_type"+"}", encodeURIComponent(placemarkType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/annotations/references/types/{reference_type}
     * Retrieve Annotation Reference Type Metadata
     * 
     * @param referenceType 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetWithHttpInfo(referenceType = referenceType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/annotations/references/types/{reference_type}
     * Retrieve Annotation Reference Type Metadata
     * 
     * @param referenceType 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetWithHttpInfo(referenceType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRequestConfig(referenceType = referenceType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet
     *
     * @param referenceType 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRequestConfig(referenceType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/annotations/references/types/{reference_type}".replace("{"+"reference_type"+"}", encodeURIComponent(referenceType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/annotations/types/{annotation_type}
     * Retrieve Annotation Type Metadata
     * 
     * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetWithHttpInfo(annotationType = annotationType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/annotations/types/{annotation_type}
     * Retrieve Annotation Type Metadata
     * 
     * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetWithHttpInfo(annotationType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRequestConfig(annotationType = annotationType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet
     *
     * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRequestConfig(annotationType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/annotations/types/{annotation_type}".replace("{"+"annotation_type"+"}", encodeURIComponent(annotationType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/events/{event_type}/types/{event_subtype}
     * Retrieve Document Event SubType Metadata
     * 
     * @param eventType The event type. For example, distribution__v.
     * @param eventSubtype The event subtype. For example, approved_email__v.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: kotlin.String, eventSubtype: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetWithHttpInfo(eventType = eventType, eventSubtype = eventSubtype, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/events/{event_type}/types/{event_subtype}
     * Retrieve Document Event SubType Metadata
     * 
     * @param eventType The event type. For example, distribution__v.
     * @param eventSubtype The event subtype. For example, approved_email__v.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetWithHttpInfo(eventType: kotlin.String, eventSubtype: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRequestConfig(eventType = eventType, eventSubtype = eventSubtype, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet
     *
     * @param eventType The event type. For example, distribution__v.
     * @param eventSubtype The event subtype. For example, approved_email__v.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRequestConfig(eventType: kotlin.String, eventSubtype: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/events/{event_type}/types/{event_subtype}".replace("{"+"event_type"+"}", encodeURIComponent(eventType.toString())).replace("{"+"event_subtype"+"}", encodeURIComponent(eventSubtype.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/events
     * Retrieve Document Event Types and Subtypes
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsEventsGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsEventsGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/events
     * Retrieve Document Event Types and Subtypes
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsEventsGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsEventsGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsEventsGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsEventsGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/events",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/lock
     * Retrieve Document Lock Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsLockGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsLockGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/lock
     * Retrieve Document Lock Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsLockGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsLockGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsLockGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsLockGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/lock",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /metadata/objects/documents/properties/find_common
     * Retrieve Common Document Fields
     * 
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsPropertiesFindCommonPost(contentType: kotlin.String? = null, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsPropertiesFindCommonPostWithHttpInfo(contentType = contentType, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /metadata/objects/documents/properties/find_common
     * Retrieve Common Document Fields
     * 
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsPropertiesFindCommonPostWithHttpInfo(contentType: kotlin.String?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsPropertiesFindCommonPostRequestConfig(contentType = contentType, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsPropertiesFindCommonPost
     *
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsPropertiesFindCommonPostRequestConfig(contentType: kotlin.String?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/metadata/objects/documents/properties/find_common",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/properties
     * Retrieve All Document Fields
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsPropertiesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsPropertiesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/properties
     * Retrieve All Document Fields
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsPropertiesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsPropertiesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsPropertiesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsPropertiesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/properties",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/templates
     * Retrieve Document Template Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsTemplatesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsTemplatesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/templates
     * Retrieve Document Template Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsTemplatesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsTemplatesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsTemplatesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsTemplatesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/templates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/types
     * Retrieve All Document Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsTypesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsTypesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/types
     * Retrieve All Document Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsTypesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsTypesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsTypesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsTypesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/types",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/types/{type}
     * Retrieve Document Type
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsTypesTypeGet(type: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsTypesTypeGetWithHttpInfo(type = type, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/types/{type}
     * Retrieve Document Type
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsTypesTypeGetWithHttpInfo(type: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsTypesTypeGetRequestConfig(type = type, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsTypesTypeGet
     *
     * @param type The document type. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsTypesTypeGetRequestConfig(type: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/types/{type}".replace("{"+"type"+"}", encodeURIComponent(type.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/types/{type}/relationships
     * Retrieve Document Type Relationships
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsTypesTypeRelationshipsGet(type: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsTypesTypeRelationshipsGetWithHttpInfo(type = type, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/types/{type}/relationships
     * Retrieve Document Type Relationships
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsTypesTypeRelationshipsGetWithHttpInfo(type: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsTypesTypeRelationshipsGetRequestConfig(type = type, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsTypesTypeRelationshipsGet
     *
     * @param type The document type. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsTypesTypeRelationshipsGetRequestConfig(type: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/types/{type}/relationships".replace("{"+"type"+"}", encodeURIComponent(type.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}
     * Retrieve Document Classification
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param classification The document classification. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type: kotlin.String, subtype: kotlin.String, classification: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetWithHttpInfo(type = type, subtype = subtype, classification = classification, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}
     * Retrieve Document Classification
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param classification The document classification. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetWithHttpInfo(type: kotlin.String, subtype: kotlin.String, classification: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRequestConfig(type = type, subtype = subtype, classification = classification, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet
     *
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param classification The document classification. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRequestConfig(type: kotlin.String, subtype: kotlin.String, classification: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}".replace("{"+"type"+"}", encodeURIComponent(type.toString())).replace("{"+"subtype"+"}", encodeURIComponent(subtype.toString())).replace("{"+"classification"+"}", encodeURIComponent(classification.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/documents/types/{type}/subtypes/{subtype}
     * Retrieve Document Subtype
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type: kotlin.String, subtype: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetWithHttpInfo(type = type, subtype = subtype, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/documents/types/{type}/subtypes/{subtype}
     * Retrieve Document Subtype
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetWithHttpInfo(type: kotlin.String, subtype: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRequestConfig(type = type, subtype = subtype, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet
     *
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRequestConfig(type: kotlin.String, subtype: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/documents/types/{type}/subtypes/{subtype}".replace("{"+"type"+"}", encodeURIComponent(type.toString())).replace("{"+"subtype"+"}", encodeURIComponent(subtype.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/groups
     * Retrieve Group Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsGroupsGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsGroupsGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/groups
     * Retrieve Group Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsGroupsGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsGroupsGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsGroupsGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsGroupsGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/groups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/securitypolicies
     * Retrieve Security Policy Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsSecuritypoliciesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsSecuritypoliciesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/securitypolicies
     * Retrieve Security Policy Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsSecuritypoliciesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsSecuritypoliciesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsSecuritypoliciesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsSecuritypoliciesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/securitypolicies",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/objects/users
     * Retrieve User Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataObjectsUsersGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataObjectsUsersGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/objects/users
     * Retrieve User Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataObjectsUsersGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataObjectsUsersGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataObjectsUsersGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataObjectsUsersGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/objects/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/query/archived_documents/relationships/document_signature__sysr
     * Retrieve Archived Document Signature Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/query/archived_documents/relationships/document_signature__sysr
     * Retrieve Archived Document Signature Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/query/archived_documents/relationships/document_signature__sysr",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/query/documents/relationships/document_signature__sysr
     * Retrieve Document Signature Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/query/documents/relationships/document_signature__sysr
     * Retrieve Document Signature Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/query/documents/relationships/document_signature__sysr",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/vobjects
     * Retrieve Object Collection
     * 
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataVobjectsGet(loc: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataVobjectsGetWithHttpInfo(loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/vobjects
     * Retrieve Object Collection
     * 
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataVobjectsGetWithHttpInfo(loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataVobjectsGetRequestConfig(loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataVobjectsGet
     *
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataVobjectsGetRequestConfig(loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/vobjects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /metadata/vobjects/{object_name}/actions/canceldeployment
     * Cancel Raw Object Deployment
     * 
     * @param objectName 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataVobjectsObjectNameActionsCanceldeploymentPostWithHttpInfo(objectName = objectName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /metadata/vobjects/{object_name}/actions/canceldeployment
     * Cancel Raw Object Deployment
     * 
     * @param objectName 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataVobjectsObjectNameActionsCanceldeploymentPostWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataVobjectsObjectNameActionsCanceldeploymentPostRequestConfig(objectName = objectName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataVobjectsObjectNameActionsCanceldeploymentPost
     *
     * @param objectName 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataVobjectsObjectNameActionsCanceldeploymentPostRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/metadata/vobjects/{object_name}/actions/canceldeployment".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/vobjects/{object_name}/fields/{object_field_name}
     * Retrieve Object Field Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.).
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: kotlin.String, objectFieldName: kotlin.String, loc: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataVobjectsObjectNameFieldsObjectFieldNameGetWithHttpInfo(objectName = objectName, objectFieldName = objectFieldName, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/vobjects/{object_name}/fields/{object_field_name}
     * Retrieve Object Field Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.).
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataVobjectsObjectNameFieldsObjectFieldNameGetWithHttpInfo(objectName: kotlin.String, objectFieldName: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataVobjectsObjectNameFieldsObjectFieldNameGetRequestConfig(objectName = objectName, objectFieldName = objectFieldName, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataVobjectsObjectNameFieldsObjectFieldNameGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.).
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataVobjectsObjectNameFieldsObjectFieldNameGetRequestConfig(objectName: kotlin.String, objectFieldName: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/vobjects/{object_name}/fields/{object_field_name}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_field_name"+"}", encodeURIComponent(objectFieldName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/vobjects/{object_name}
     * Retrieve Object Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataVobjectsObjectNameGet(objectName: kotlin.String, loc: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataVobjectsObjectNameGetWithHttpInfo(objectName = objectName, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/vobjects/{object_name}
     * Retrieve Object Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataVobjectsObjectNameGetWithHttpInfo(objectName: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataVobjectsObjectNameGetRequestConfig(objectName = objectName, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataVobjectsObjectNameGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataVobjectsObjectNameGetRequestConfig(objectName: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/vobjects/{object_name}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/vobjects/{object_name}/page_layouts
     * Retrieve Page Layouts
     * 
     * @param objectName 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataVobjectsObjectNamePageLayoutsGet(objectName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataVobjectsObjectNamePageLayoutsGetWithHttpInfo(objectName = objectName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/vobjects/{object_name}/page_layouts
     * Retrieve Page Layouts
     * 
     * @param objectName 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataVobjectsObjectNamePageLayoutsGetWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataVobjectsObjectNamePageLayoutsGetRequestConfig(objectName = objectName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataVobjectsObjectNamePageLayoutsGet
     *
     * @param objectName 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataVobjectsObjectNamePageLayoutsGetRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/vobjects/{object_name}/page_layouts".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /metadata/vobjects/{object_name}/page_layouts/{layout_name}
     * Retrieve Page Layout Metadata
     * 
     * @param objectName The name of the object from which to retrieve page layout metadata.
     * @param layoutName The name of the page layout from which to retrieve metadata.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: kotlin.String, layoutName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = metadataVobjectsObjectNamePageLayoutsLayoutNameGetWithHttpInfo(objectName = objectName, layoutName = layoutName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /metadata/vobjects/{object_name}/page_layouts/{layout_name}
     * Retrieve Page Layout Metadata
     * 
     * @param objectName The name of the object from which to retrieve page layout metadata.
     * @param layoutName The name of the page layout from which to retrieve metadata.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun metadataVobjectsObjectNamePageLayoutsLayoutNameGetWithHttpInfo(objectName: kotlin.String, layoutName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = metadataVobjectsObjectNamePageLayoutsLayoutNameGetRequestConfig(objectName = objectName, layoutName = layoutName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation metadataVobjectsObjectNamePageLayoutsLayoutNameGet
     *
     * @param objectName The name of the object from which to retrieve page layout metadata.
     * @param layoutName The name of the page layout from which to retrieve metadata.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun metadataVobjectsObjectNamePageLayoutsLayoutNameGetRequestConfig(objectName: kotlin.String, layoutName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/metadata/vobjects/{object_name}/page_layouts/{layout_name}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"layout_name"+"}", encodeURIComponent(layoutName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /notifications/histories
     * Retrieve Email Notification Histories
     * 
     * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date. (optional)
     * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date. (optional)
     * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours. (optional)
     * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun notificationsHistoriesGet(startDate: kotlin.String? = null, endDate: kotlin.String? = null, allDates: kotlin.Boolean? = null, formatResult: kotlin.String? = null, limit: kotlin.String? = null, offset: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = notificationsHistoriesGetWithHttpInfo(startDate = startDate, endDate = endDate, allDates = allDates, formatResult = formatResult, limit = limit, offset = offset, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /notifications/histories
     * Retrieve Email Notification Histories
     * 
     * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date. (optional)
     * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date. (optional)
     * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours. (optional)
     * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun notificationsHistoriesGetWithHttpInfo(startDate: kotlin.String?, endDate: kotlin.String?, allDates: kotlin.Boolean?, formatResult: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = notificationsHistoriesGetRequestConfig(startDate = startDate, endDate = endDate, allDates = allDates, formatResult = formatResult, limit = limit, offset = offset, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation notificationsHistoriesGet
     *
     * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date. (optional)
     * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date. (optional)
     * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours. (optional)
     * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun notificationsHistoriesGetRequestConfig(startDate: kotlin.String?, endDate: kotlin.String?, allDates: kotlin.Boolean?, formatResult: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (allDates != null) {
                    put("all_dates", listOf(allDates.toString()))
                }
                if (formatResult != null) {
                    put("format_result", listOf(formatResult.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/notifications/histories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /object/workflow/actions/{action}
     * Retrieve Bulk Workflow Action Details
     * 
     * @param action 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectWorkflowActionsActionGet(action: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectWorkflowActionsActionGetWithHttpInfo(action = action, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /object/workflow/actions/{action}
     * Retrieve Bulk Workflow Action Details
     * 
     * @param action 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectWorkflowActionsActionGetWithHttpInfo(action: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectWorkflowActionsActionGetRequestConfig(action = action, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectWorkflowActionsActionGet
     *
     * @param action 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectWorkflowActionsActionGetRequestConfig(action: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/object/workflow/actions/{action}".replace("{"+"action"+"}", encodeURIComponent(action.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /object/workflow/actions/{action}
     * Initiate Workflow Actions on Multiple Workflows
     * 
     * @param action 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectWorkflowActionsActionPost(action: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectWorkflowActionsActionPostWithHttpInfo(action = action, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /object/workflow/actions/{action}
     * Initiate Workflow Actions on Multiple Workflows
     * 
     * @param action 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectWorkflowActionsActionPostWithHttpInfo(action: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectWorkflowActionsActionPostRequestConfig(action = action, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectWorkflowActionsActionPost
     *
     * @param action 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectWorkflowActionsActionPostRequestConfig(action: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/object/workflow/actions/{action}".replace("{"+"action"+"}", encodeURIComponent(action.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /object/workflow/actions/canceltasks
     * Cancel Workflow Tasks
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectWorkflowActionsCanceltasksPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectWorkflowActionsCanceltasksPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /object/workflow/actions/canceltasks
     * Cancel Workflow Tasks
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectWorkflowActionsCanceltasksPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectWorkflowActionsCanceltasksPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectWorkflowActionsCanceltasksPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectWorkflowActionsCanceltasksPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/object/workflow/actions/canceltasks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /object/workflow/actions/cancelworkflows
     * Cancel Workflows
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectWorkflowActionsCancelworkflowsPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectWorkflowActionsCancelworkflowsPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /object/workflow/actions/cancelworkflows
     * Cancel Workflows
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectWorkflowActionsCancelworkflowsPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectWorkflowActionsCancelworkflowsPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectWorkflowActionsCancelworkflowsPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectWorkflowActionsCancelworkflowsPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/object/workflow/actions/cancelworkflows",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /object/workflow/actions
     * Retrieve Bulk Workflow Actions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectWorkflowActionsGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectWorkflowActionsGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /object/workflow/actions
     * Retrieve Bulk Workflow Actions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectWorkflowActionsGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectWorkflowActionsGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectWorkflowActionsGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectWorkflowActionsGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/object/workflow/actions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /object/workflow/actions/reassigntasks
     * Reassign Workflow Tasks
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectWorkflowActionsReassigntasksPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectWorkflowActionsReassigntasksPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /object/workflow/actions/reassigntasks
     * Reassign Workflow Tasks
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectWorkflowActionsReassigntasksPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectWorkflowActionsReassigntasksPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectWorkflowActionsReassigntasksPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectWorkflowActionsReassigntasksPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/object/workflow/actions/reassigntasks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /object/workflow/actions/replaceworkflowowner
     * Replace Workflow Owner
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectWorkflowActionsReplaceworkflowownerPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectWorkflowActionsReplaceworkflowownerPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /object/workflow/actions/replaceworkflowowner
     * Replace Workflow Owner
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectWorkflowActionsReplaceworkflowownerPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectWorkflowActionsReplaceworkflowownerPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectWorkflowActionsReplaceworkflowownerPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectWorkflowActionsReplaceworkflowownerPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/object/workflow/actions/replaceworkflowowner",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/actions/export/{job_id}/results
     * Retrieve Binder Export Results
     * 
     * @param jobId The id value of the requested export job. This is returned with the export binder requests above.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersActionsExportJobIdResultsGet(jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersActionsExportJobIdResultsGetWithHttpInfo(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/actions/export/{job_id}/results
     * Retrieve Binder Export Results
     * 
     * @param jobId The id value of the requested export job. This is returned with the export binder requests above.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersActionsExportJobIdResultsGetWithHttpInfo(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersActionsExportJobIdResultsGetRequestConfig(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersActionsExportJobIdResultsGet
     *
     * @param jobId The id value of the requested export job. This is returned with the export binder requests above.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersActionsExportJobIdResultsGetRequestConfig(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/actions/export/{job_id}/results".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders/{binder_id}/actions/export
     * Export Binder (Latest Version)
     * 
     * @param binderId The binder id field value.
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdActionsExportPost(binderId: kotlin.String, source: kotlin.Boolean? = null, renditiontype: kotlin.String? = null, docversion: kotlin.String? = null, attachments: kotlin.String? = null, export: kotlin.String? = null, docfield: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdActionsExportPostWithHttpInfo(binderId = binderId, source = source, renditiontype = renditiontype, docversion = docversion, attachments = attachments, export = export, docfield = docfield, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders/{binder_id}/actions/export
     * Export Binder (Latest Version)
     * 
     * @param binderId The binder id field value.
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdActionsExportPostWithHttpInfo(binderId: kotlin.String, source: kotlin.Boolean?, renditiontype: kotlin.String?, docversion: kotlin.String?, attachments: kotlin.String?, export: kotlin.String?, docfield: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdActionsExportPostRequestConfig(binderId = binderId, source = source, renditiontype = renditiontype, docversion = docversion, attachments = attachments, export = export, docfield = docfield, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdActionsExportPost
     *
     * @param binderId The binder id field value.
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdActionsExportPostRequestConfig(binderId: kotlin.String, source: kotlin.Boolean?, renditiontype: kotlin.String?, docversion: kotlin.String?, attachments: kotlin.String?, export: kotlin.String?, docfield: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (source != null) {
                    put("source", listOf(source.toString()))
                }
                if (renditiontype != null) {
                    put("renditiontype", listOf(renditiontype.toString()))
                }
                if (docversion != null) {
                    put("docversion", listOf(docversion.toString()))
                }
                if (attachments != null) {
                    put("attachments", listOf(attachments.toString()))
                }
                if (export != null) {
                    put("export", listOf(export.toString()))
                }
                if (docfield != null) {
                    put("docfield", listOf(docfield.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders/{binder_id}/actions/export".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders/{binder_id}/actions
     * Refresh Binder Auto-Filing
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdActionsPost(binderId: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdActionsPostWithHttpInfo(binderId = binderId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders/{binder_id}/actions
     * Refresh Binder Auto-Filing
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdActionsPostWithHttpInfo(binderId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdActionsPostRequestConfig(binderId = binderId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdActionsPost
     *
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdActionsPostRequestConfig(binderId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders/{binder_id}/actions".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/binders/{binder_id}/binding_rule
     * Update Binding Rule
     * 
     * @param binderId The binder id field value.
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdBindingRulePut(binderId: kotlin.String, contentType: kotlin.String? = null, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdBindingRulePutWithHttpInfo(binderId = binderId, contentType = contentType, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/binders/{binder_id}/binding_rule
     * Update Binding Rule
     * 
     * @param binderId The binder id field value.
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdBindingRulePutWithHttpInfo(binderId: kotlin.String, contentType: kotlin.String?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdBindingRulePutRequestConfig(binderId = binderId, contentType = contentType, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdBindingRulePut
     *
     * @param binderId The binder id field value.
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdBindingRulePutRequestConfig(binderId: kotlin.String, contentType: kotlin.String?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/binders/{binder_id}/binding_rule".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/binders/{binder_id}
     * Delete Binder
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdDelete(binderId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdDeleteWithHttpInfo(binderId = binderId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/binders/{binder_id}
     * Delete Binder
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdDeleteWithHttpInfo(binderId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdDeleteRequestConfig(binderId = binderId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdDelete
     *
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdDeleteRequestConfig(binderId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/binders/{binder_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/binders/{binder_id}/documents/{node_id}/binding_rule
     * Update Binder Document Binding Rule
     * 
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: kotlin.String, nodeId: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdDocumentsNodeIdBindingRulePutWithHttpInfo(binderId = binderId, nodeId = nodeId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/binders/{binder_id}/documents/{node_id}/binding_rule
     * Update Binder Document Binding Rule
     * 
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdDocumentsNodeIdBindingRulePutWithHttpInfo(binderId: kotlin.String, nodeId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdDocumentsNodeIdBindingRulePutRequestConfig(binderId = binderId, nodeId = nodeId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdDocumentsNodeIdBindingRulePut
     *
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdDocumentsNodeIdBindingRulePutRequestConfig(binderId: kotlin.String, nodeId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/binders/{binder_id}/documents/{node_id}/binding_rule".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"node_id"+"}", encodeURIComponent(nodeId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders/{binder_id}/documents
     * Add Document to Binder
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdDocumentsPost(binderId: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdDocumentsPostWithHttpInfo(binderId = binderId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders/{binder_id}/documents
     * Add Document to Binder
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdDocumentsPostWithHttpInfo(binderId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdDocumentsPostRequestConfig(binderId = binderId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdDocumentsPost
     *
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdDocumentsPostRequestConfig(binderId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders/{binder_id}/documents".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/binders/{binder_id}/documents/{section_id}
     * Remove Document from Binder
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdDocumentsSectionIdDelete(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdDocumentsSectionIdDeleteWithHttpInfo(binderId = binderId, sectionId = sectionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/binders/{binder_id}/documents/{section_id}
     * Remove Document from Binder
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdDocumentsSectionIdDeleteWithHttpInfo(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdDocumentsSectionIdDeleteRequestConfig(binderId = binderId, sectionId = sectionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdDocumentsSectionIdDelete
     *
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdDocumentsSectionIdDeleteRequestConfig(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/binders/{binder_id}/documents/{section_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"section_id"+"}", encodeURIComponent(sectionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/binders/{binder_id}/documents/{section_id}
     * Move Document in Binder
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdDocumentsSectionIdPut(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdDocumentsSectionIdPutWithHttpInfo(binderId = binderId, sectionId = sectionId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/binders/{binder_id}/documents/{section_id}
     * Move Document in Binder
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdDocumentsSectionIdPutWithHttpInfo(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdDocumentsSectionIdPutRequestConfig(binderId = binderId, sectionId = sectionId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdDocumentsSectionIdPut
     *
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdDocumentsSectionIdPutRequestConfig(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/binders/{binder_id}/documents/{section_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"section_id"+"}", encodeURIComponent(sectionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/{binder_id}
     * Retrieve Binder
     * 
     * @param binderId The binder id field value.
     * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdGet(binderId: kotlin.String, depth: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdGetWithHttpInfo(binderId = binderId, depth = depth, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/{binder_id}
     * Retrieve Binder
     * 
     * @param binderId The binder id field value.
     * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdGetWithHttpInfo(binderId: kotlin.String, depth: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdGetRequestConfig(binderId = binderId, depth = depth, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdGet
     *
     * @param binderId The binder id field value.
     * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdGetRequestConfig(binderId: kotlin.String, depth: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (depth != null) {
                    put("depth", listOf(depth.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/{binder_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders/{binder_id}
     * Create Binder Version
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdPost(binderId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdPostWithHttpInfo(binderId = binderId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders/{binder_id}
     * Create Binder Version
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdPostWithHttpInfo(binderId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdPostRequestConfig(binderId = binderId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdPost
     *
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdPostRequestConfig(binderId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders/{binder_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/binders/{binder_id}
     * Update Binder
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdPut(binderId: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdPutWithHttpInfo(binderId = binderId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/binders/{binder_id}
     * Update Binder
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdPutWithHttpInfo(binderId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdPutRequestConfig(binderId = binderId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdPut
     *
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdPutRequestConfig(binderId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/binders/{binder_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}
     * Remove Users &amp; Groups from Roles on a Single Binder
     * 
     * @param binderId The id value of the binder from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: kotlin.String, roleNameAndUserOrGroup: kotlin.String, id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(binderId = binderId, roleNameAndUserOrGroup = roleNameAndUserOrGroup, id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}
     * Remove Users &amp; Groups from Roles on a Single Binder
     * 
     * @param binderId The id value of the binder from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(binderId: kotlin.String, roleNameAndUserOrGroup: kotlin.String, id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRequestConfig(binderId = binderId, roleNameAndUserOrGroup = roleNameAndUserOrGroup, id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete
     *
     * @param binderId The id value of the binder from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRequestConfig(binderId: kotlin.String, roleNameAndUserOrGroup: kotlin.String, id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"role_name_and_user_or_group"+"}", encodeURIComponent(roleNameAndUserOrGroup.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/binders/{binder_id}/sections/{node_id}/binding_rule
     * Update Binder Section Binding Rule
     * 
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: kotlin.String, nodeId: kotlin.String, contentType: kotlin.String? = null, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdSectionsNodeIdBindingRulePutWithHttpInfo(binderId = binderId, nodeId = nodeId, contentType = contentType, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/binders/{binder_id}/sections/{node_id}/binding_rule
     * Update Binder Section Binding Rule
     * 
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdSectionsNodeIdBindingRulePutWithHttpInfo(binderId: kotlin.String, nodeId: kotlin.String, contentType: kotlin.String?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdSectionsNodeIdBindingRulePutRequestConfig(binderId = binderId, nodeId = nodeId, contentType = contentType, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdSectionsNodeIdBindingRulePut
     *
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdSectionsNodeIdBindingRulePutRequestConfig(binderId: kotlin.String, nodeId: kotlin.String, contentType: kotlin.String?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/binders/{binder_id}/sections/{node_id}/binding_rule".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"node_id"+"}", encodeURIComponent(nodeId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/binders/{binder_id}/sections/{node_id}
     * Update Binder Section
     * 
     * @param binderId The binder id field value.
     * @param nodeId The binder node id of the section.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdSectionsNodeIdPut(binderId: kotlin.String, nodeId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdSectionsNodeIdPutWithHttpInfo(binderId = binderId, nodeId = nodeId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/binders/{binder_id}/sections/{node_id}
     * Update Binder Section
     * 
     * @param binderId The binder id field value.
     * @param nodeId The binder node id of the section.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdSectionsNodeIdPutWithHttpInfo(binderId: kotlin.String, nodeId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdSectionsNodeIdPutRequestConfig(binderId = binderId, nodeId = nodeId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdSectionsNodeIdPut
     *
     * @param binderId The binder id field value.
     * @param nodeId The binder node id of the section.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdSectionsNodeIdPutRequestConfig(binderId: kotlin.String, nodeId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/binders/{binder_id}/sections/{node_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"node_id"+"}", encodeURIComponent(nodeId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders/{binder_id}/sections
     * Create Binder Section
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdSectionsPost(binderId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdSectionsPostWithHttpInfo(binderId = binderId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders/{binder_id}/sections
     * Create Binder Section
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdSectionsPostWithHttpInfo(binderId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdSectionsPostRequestConfig(binderId = binderId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdSectionsPost
     *
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdSectionsPostRequestConfig(binderId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders/{binder_id}/sections".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/binders/{binder_id}/sections/{section_id}
     * Delete Binder Section
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdSectionsSectionIdDelete(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdSectionsSectionIdDeleteWithHttpInfo(binderId = binderId, sectionId = sectionId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/binders/{binder_id}/sections/{section_id}
     * Delete Binder Section
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdSectionsSectionIdDeleteWithHttpInfo(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdSectionsSectionIdDeleteRequestConfig(binderId = binderId, sectionId = sectionId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdSectionsSectionIdDelete
     *
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdSectionsSectionIdDeleteRequestConfig(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/binders/{binder_id}/sections/{section_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"section_id"+"}", encodeURIComponent(sectionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/{binder_id}/sections/{section_id}
     * Retrieve Binder Sections
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdSectionsSectionIdGet(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdSectionsSectionIdGetWithHttpInfo(binderId = binderId, sectionId = sectionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/{binder_id}/sections/{section_id}
     * Retrieve Binder Sections
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdSectionsSectionIdGetWithHttpInfo(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdSectionsSectionIdGetRequestConfig(binderId = binderId, sectionId = sectionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdSectionsSectionIdGet
     *
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdSectionsSectionIdGetRequestConfig(binderId: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/{binder_id}/sections/{section_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"section_id"+"}", encodeURIComponent(sectionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/{binder_id}/versions
     * Retrieve All Binder Versions
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdVersionsGet(binderId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdVersionsGetWithHttpInfo(binderId = binderId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/{binder_id}/versions
     * Retrieve All Binder Versions
     * 
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdVersionsGetWithHttpInfo(binderId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdVersionsGetRequestConfig(binderId = binderId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdVersionsGet
     *
     * @param binderId The binder id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdVersionsGetRequestConfig(binderId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/{binder_id}/versions".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export
     * Export Binder (Specific Version)
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, source: kotlin.Boolean? = null, renditiontype: kotlin.String? = null, docversion: kotlin.String? = null, attachments: kotlin.String? = null, export: kotlin.String? = null, docfield: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostWithHttpInfo(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, source = source, renditiontype = renditiontype, docversion = docversion, attachments = attachments, export = export, docfield = docfield, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export
     * Export Binder (Specific Version)
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostWithHttpInfo(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, source: kotlin.Boolean?, renditiontype: kotlin.String?, docversion: kotlin.String?, attachments: kotlin.String?, export: kotlin.String?, docfield: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRequestConfig(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, source = source, renditiontype = renditiontype, docversion = docversion, attachments = attachments, export = export, docfield = docfield, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost
     *
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRequestConfig(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, source: kotlin.Boolean?, renditiontype: kotlin.String?, docversion: kotlin.String?, attachments: kotlin.String?, export: kotlin.String?, docfield: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (source != null) {
                    put("source", listOf(source.toString()))
                }
                if (renditiontype != null) {
                    put("renditiontype", listOf(renditiontype.toString()))
                }
                if (docversion != null) {
                    put("docversion", listOf(docversion.toString()))
                }
                if (attachments != null) {
                    put("attachments", listOf(attachments.toString()))
                }
                if (export != null) {
                    put("export", listOf(export.toString()))
                }
                if (docfield != null) {
                    put("docfield", listOf(docfield.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
     * Delete Binder Version
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
     * Delete Binder Version
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRequestConfig(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete
     *
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRequestConfig(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
     * Retrieve Binder Version
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdVersionsMajorVersionMinorVersionGetWithHttpInfo(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
     * Retrieve Binder Version
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionGetWithHttpInfo(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdVersionsMajorVersionMinorVersionGetRequestConfig(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdVersionsMajorVersionMinorVersionGet
     *
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionGetRequestConfig(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
     * Update Binder Version
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdVersionsMajorVersionMinorVersionPutWithHttpInfo(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
     * Update Binder Version
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionPutWithHttpInfo(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdVersionsMajorVersionMinorVersionPutRequestConfig(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdVersionsMajorVersionMinorVersionPut
     *
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionPutRequestConfig(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships
     * Create Binder Relationship
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships
     * Create Binder Relationship
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRequestConfig(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost
     *
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRequestConfig(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
     * Delete Binder Relationship
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, relationshipId = relationshipId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
     * Delete Binder Relationship
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequestConfig(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, relationshipId = relationshipId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete
     *
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequestConfig(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"relationship_id"+"}", encodeURIComponent(relationshipId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
     * Retrieve Binder Relationship
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, relationshipId = relationshipId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
     * Retrieve Binder Relationship
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequestConfig(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, relationshipId = relationshipId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet
     *
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequestConfig(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"relationship_id"+"}", encodeURIComponent(relationshipId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}
     * Retrieve Binder Version Section
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetWithHttpInfo(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, sectionId = sectionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}
     * Retrieve Binder Version Section
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetWithHttpInfo(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRequestConfig(binderId = binderId, majorVersion = majorVersion, minorVersion = minorVersion, sectionId = sectionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet
     *
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRequestConfig(binderId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, sectionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}".replace("{"+"binder_id"+"}", encodeURIComponent(binderId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"section_id"+"}", encodeURIComponent(sectionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/{id}/roles
     * Retrieve All Binder Roles
     * 
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersIdRolesGet(id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersIdRolesGetWithHttpInfo(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/{id}/roles
     * Retrieve All Binder Roles
     * 
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersIdRolesGetWithHttpInfo(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersIdRolesGetRequestConfig(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersIdRolesGet
     *
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersIdRolesGetRequestConfig(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/{id}/roles".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders/{id}/roles
     * Assign Users &amp; Groups to Roles on a Single Binder
     * 
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersIdRolesPost(id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersIdRolesPostWithHttpInfo(id = id, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders/{id}/roles
     * Assign Users &amp; Groups to Roles on a Single Binder
     * 
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersIdRolesPostWithHttpInfo(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersIdRolesPostRequestConfig(id = id, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersIdRolesPost
     *
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersIdRolesPostRequestConfig(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders/{id}/roles".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/{id}/roles/{role_name}
     * Retrieve Document Role
     * 
     * @param id The binder &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersIdRolesRoleNameGet(id: kotlin.String, roleName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersIdRolesRoleNameGetWithHttpInfo(id = id, roleName = roleName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/{id}/roles/{role_name}
     * Retrieve Document Role
     * 
     * @param id The binder &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersIdRolesRoleNameGetWithHttpInfo(id: kotlin.String, roleName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersIdRolesRoleNameGetRequestConfig(id = id, roleName = roleName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersIdRolesRoleNameGet
     *
     * @param id The binder &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersIdRolesRoleNameGetRequestConfig(id: kotlin.String, roleName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/{id}/roles/{role_name}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"role_name"+"}", encodeURIComponent(roleName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions
     * Retrieve Binder User Actions
     * 
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id = id, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions
     * Retrieve Binder User Actions
     * 
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequestConfig(id = id, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet
     *
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequestConfig(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements
     * Retrieve Binder Entry Criteria
     * 
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id = id, majorVersion = majorVersion, minorVersion = minorVersion, nameV = nameV, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements
     * Retrieve Binder Entry Criteria
     * 
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequestConfig(id = id, majorVersion = majorVersion, minorVersion = minorVersion, nameV = nameV, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet
     *
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequestConfig(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"name__v"+"}", encodeURIComponent(nameV.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}
     * Initiate Binder User Action
     * 
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id = id, majorVersion = majorVersion, minorVersion = minorVersion, nameV = nameV, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}
     * Initiate Binder User Action
     * 
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequestConfig(id = id, majorVersion = majorVersion, minorVersion = minorVersion, nameV = nameV, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut
     *
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequestConfig(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"name__v"+"}", encodeURIComponent(nameV.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders/lifecycle_actions
     * Retrieve User Actions on Multiple Binders
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersLifecycleActionsPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersLifecycleActionsPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders/lifecycle_actions
     * Retrieve User Actions on Multiple Binders
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersLifecycleActionsPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersLifecycleActionsPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersLifecycleActionsPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersLifecycleActionsPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders/lifecycle_actions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/binders/lifecycle_actions/{user_action_name}
     * Initiate Bulk Binder User Actions
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersLifecycleActionsUserActionNamePut(userActionName: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersLifecycleActionsUserActionNamePutWithHttpInfo(userActionName = userActionName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/binders/lifecycle_actions/{user_action_name}
     * Initiate Bulk Binder User Actions
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersLifecycleActionsUserActionNamePutWithHttpInfo(userActionName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersLifecycleActionsUserActionNamePutRequestConfig(userActionName = userActionName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersLifecycleActionsUserActionNamePut
     *
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersLifecycleActionsUserActionNamePutRequestConfig(userActionName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/binders/lifecycle_actions/{user_action_name}".replace("{"+"user_action_name"+"}", encodeURIComponent(userActionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders
     * Create Binder
     * 
     * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data.  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersPost(async: kotlin.Boolean? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersPostWithHttpInfo(async = async, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders
     * Create Binder
     * 
     * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data.  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersPostWithHttpInfo(async: kotlin.Boolean?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersPostRequestConfig(async = async, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersPost
     *
     * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data.  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersPostRequestConfig(async: kotlin.Boolean?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (async != null) {
                    put("async", listOf(async.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/templates
     * Retrieve Binder Template Collection
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersTemplatesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersTemplatesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/templates
     * Retrieve Binder Template Collection
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersTemplatesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersTemplatesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersTemplatesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersTemplatesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/templates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders/templates
     * Create Binder Template
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersTemplatesPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersTemplatesPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders/templates
     * Create Binder Template
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersTemplatesPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersTemplatesPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersTemplatesPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersTemplatesPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders/templates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/binders/templates
     * Update Binder Template
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersTemplatesPut(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersTemplatesPutWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/binders/templates
     * Update Binder Template
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersTemplatesPutWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersTemplatesPutRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersTemplatesPut
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersTemplatesPutRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/binders/templates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/templates/{template_name}/bindernodes
     * Retrieve Binder Template Node Attributes
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersTemplatesTemplateNameBindernodesGet(templateName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersTemplatesTemplateNameBindernodesGetWithHttpInfo(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/templates/{template_name}/bindernodes
     * Retrieve Binder Template Node Attributes
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersTemplatesTemplateNameBindernodesGetWithHttpInfo(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersTemplatesTemplateNameBindernodesGetRequestConfig(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersTemplatesTemplateNameBindernodesGet
     *
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersTemplatesTemplateNameBindernodesGetRequestConfig(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/templates/{template_name}/bindernodes".replace("{"+"template_name"+"}", encodeURIComponent(templateName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/binders/templates/{template_name}/bindernodes
     * Create Binder Template Node
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersTemplatesTemplateNameBindernodesPost(templateName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersTemplatesTemplateNameBindernodesPostWithHttpInfo(templateName = templateName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/binders/templates/{template_name}/bindernodes
     * Create Binder Template Node
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersTemplatesTemplateNameBindernodesPostWithHttpInfo(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersTemplatesTemplateNameBindernodesPostRequestConfig(templateName = templateName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersTemplatesTemplateNameBindernodesPost
     *
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersTemplatesTemplateNameBindernodesPostRequestConfig(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/binders/templates/{template_name}/bindernodes".replace("{"+"template_name"+"}", encodeURIComponent(templateName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/binders/templates/{template_name}/bindernodes
     * Replace Binder Template Nodes
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersTemplatesTemplateNameBindernodesPut(templateName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersTemplatesTemplateNameBindernodesPutWithHttpInfo(templateName = templateName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/binders/templates/{template_name}/bindernodes
     * Replace Binder Template Nodes
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersTemplatesTemplateNameBindernodesPutWithHttpInfo(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersTemplatesTemplateNameBindernodesPutRequestConfig(templateName = templateName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersTemplatesTemplateNameBindernodesPut
     *
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersTemplatesTemplateNameBindernodesPutRequestConfig(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/binders/templates/{template_name}/bindernodes".replace("{"+"template_name"+"}", encodeURIComponent(templateName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/binders/templates/{template_name}
     * Delete Binder Template
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersTemplatesTemplateNameDelete(templateName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersTemplatesTemplateNameDeleteWithHttpInfo(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/binders/templates/{template_name}
     * Delete Binder Template
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersTemplatesTemplateNameDeleteWithHttpInfo(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersTemplatesTemplateNameDeleteRequestConfig(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersTemplatesTemplateNameDelete
     *
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersTemplatesTemplateNameDeleteRequestConfig(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/binders/templates/{template_name}".replace("{"+"template_name"+"}", encodeURIComponent(templateName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/binders/templates/{template_name}
     * Retrieve Binder Template Attributes
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsBindersTemplatesTemplateNameGet(templateName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsBindersTemplatesTemplateNameGetWithHttpInfo(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/binders/templates/{template_name}
     * Retrieve Binder Template Attributes
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsBindersTemplatesTemplateNameGetWithHttpInfo(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsBindersTemplatesTemplateNameGetRequestConfig(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsBindersTemplatesTemplateNameGet
     *
     * @param templateName The binder template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsBindersTemplatesTemplateNameGetRequestConfig(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/binders/templates/{template_name}".replace("{"+"template_name"+"}", encodeURIComponent(templateName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/deletions/documents
     * Retrieve Deleted Document IDs
     * 
     * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z (optional)
     * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDeletionsDocumentsGet(startDate: kotlin.String? = null, endDate: kotlin.String? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDeletionsDocumentsGetWithHttpInfo(startDate = startDate, endDate = endDate, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/deletions/documents
     * Retrieve Deleted Document IDs
     * 
     * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z (optional)
     * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDeletionsDocumentsGetWithHttpInfo(startDate: kotlin.String?, endDate: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDeletionsDocumentsGetRequestConfig(startDate = startDate, endDate = endDate, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDeletionsDocumentsGet
     *
     * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z (optional)
     * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDeletionsDocumentsGetRequestConfig(startDate: kotlin.String?, endDate: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/deletions/documents",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/deletions/vobjects/{object_name}
     * Retrieve Deleted Object Record ID
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDeletionsVobjectsObjectNameGet(objectName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDeletionsVobjectsObjectNameGetWithHttpInfo(objectName = objectName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/deletions/vobjects/{object_name}
     * Retrieve Deleted Object Record ID
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDeletionsVobjectsObjectNameGetWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDeletionsVobjectsObjectNameGetRequestConfig(objectName = objectName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDeletionsVobjectsObjectNameGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDeletionsVobjectsObjectNameGetRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/deletions/vobjects/{object_name}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/actions
     * Retrieve All Document Workflows
     * 
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsActionsGet(loc: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsActionsGetWithHttpInfo(loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/actions
     * Retrieve All Document Workflows
     * 
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsActionsGetWithHttpInfo(loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsActionsGetRequestConfig(loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsActionsGet
     *
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsActionsGetRequestConfig(loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/actions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results
     * Download Controlled Copy Job Results
     * 
     * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
     * @param jobId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: kotlin.String, jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetWithHttpInfo(lifecycleAndStateAndAction = lifecycleAndStateAndAction, jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results
     * Download Controlled Copy Job Results
     * 
     * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
     * @param jobId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetWithHttpInfo(lifecycleAndStateAndAction: kotlin.String, jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRequestConfig(lifecycleAndStateAndAction = lifecycleAndStateAndAction, jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet
     *
     * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
     * @param jobId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRequestConfig(lifecycleAndStateAndAction: kotlin.String, jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results".replace("{"+"lifecycle_and_state_and_action"+"}", encodeURIComponent(lifecycleAndStateAndAction.toString())).replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/actions/{workflow_name}
     * Retrieve Document Workflow Details
     * 
     * @param workflowName The document workflow name value.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsActionsWorkflowNameGet(workflowName: kotlin.String, loc: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsActionsWorkflowNameGetWithHttpInfo(workflowName = workflowName, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/actions/{workflow_name}
     * Retrieve Document Workflow Details
     * 
     * @param workflowName The document workflow name value.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsActionsWorkflowNameGetWithHttpInfo(workflowName: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsActionsWorkflowNameGetRequestConfig(workflowName = workflowName, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsActionsWorkflowNameGet
     *
     * @param workflowName The document workflow name value.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsActionsWorkflowNameGetRequestConfig(workflowName: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/actions/{workflow_name}".replace("{"+"workflow_name"+"}", encodeURIComponent(workflowName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/actions/{workflow_name}
     * Initiate Document Workflow
     * 
     * @param workflowName The document workflow name value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsActionsWorkflowNamePost(workflowName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsActionsWorkflowNamePostWithHttpInfo(workflowName = workflowName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/actions/{workflow_name}
     * Initiate Document Workflow
     * 
     * @param workflowName The document workflow name value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsActionsWorkflowNamePostWithHttpInfo(workflowName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsActionsWorkflowNamePostRequestConfig(workflowName = workflowName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsActionsWorkflowNamePost
     *
     * @param workflowName The document workflow name value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsActionsWorkflowNamePostRequestConfig(workflowName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/actions/{workflow_name}".replace("{"+"workflow_name"+"}", encodeURIComponent(workflowName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/annotations/batch
     * Delete Annotations
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsAnnotationsBatchDelete(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsAnnotationsBatchDeleteWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/annotations/batch
     * Delete Annotations
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsAnnotationsBatchDeleteWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsAnnotationsBatchDeleteRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsAnnotationsBatchDelete
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsAnnotationsBatchDeleteRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/annotations/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/annotations/batch
     * Create Multiple Annotations
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsAnnotationsBatchPost(authorization: kotlin.String, contentType: kotlin.String, accept: kotlin.String, xVaultAPIClientID: kotlin.String) : Unit {
        val localVarResponse = objectsDocumentsAnnotationsBatchPostWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/annotations/batch
     * Create Multiple Annotations
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsAnnotationsBatchPostWithHttpInfo(authorization: kotlin.String, contentType: kotlin.String, accept: kotlin.String, xVaultAPIClientID: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsAnnotationsBatchPostRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsAnnotationsBatchPost
     *
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @return RequestConfig
     */
    fun objectsDocumentsAnnotationsBatchPostRequestConfig(authorization: kotlin.String, contentType: kotlin.String, accept: kotlin.String, xVaultAPIClientID: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/annotations/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/annotations/batch
     * Update Annotations
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsAnnotationsBatchPut(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsAnnotationsBatchPutWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/annotations/batch
     * Update Annotations
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsAnnotationsBatchPutWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsAnnotationsBatchPutRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsAnnotationsBatchPut
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsAnnotationsBatchPutRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/annotations/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/annotations/replies/batch
     * Add Annotation Replies
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsAnnotationsRepliesBatchPost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsAnnotationsRepliesBatchPostWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/annotations/replies/batch
     * Add Annotation Replies
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsAnnotationsRepliesBatchPostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsAnnotationsRepliesBatchPostRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsAnnotationsRepliesBatchPost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsAnnotationsRepliesBatchPostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/annotations/replies/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/attachments/batch
     * Delete Multiple Document Attachments
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsAttachmentsBatchDelete(accept: kotlin.String? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsAttachmentsBatchDeleteWithHttpInfo(accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/attachments/batch
     * Delete Multiple Document Attachments
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsAttachmentsBatchDeleteWithHttpInfo(accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsAttachmentsBatchDeleteRequestConfig(accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsAttachmentsBatchDelete
     *
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsAttachmentsBatchDeleteRequestConfig(accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/attachments/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/attachments/batch
     * Create Multiple Document Attachments
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsAttachmentsBatchPost(accept: kotlin.String? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsAttachmentsBatchPostWithHttpInfo(accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/attachments/batch
     * Create Multiple Document Attachments
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsAttachmentsBatchPostWithHttpInfo(accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsAttachmentsBatchPostRequestConfig(accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsAttachmentsBatchPost
     *
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsAttachmentsBatchPostRequestConfig(accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/attachments/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/attachments/batch
     * Update Multiple Document Attachment Descriptions
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsAttachmentsBatchPut(accept: kotlin.String? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsAttachmentsBatchPutWithHttpInfo(accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/attachments/batch
     * Update Multiple Document Attachment Descriptions
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsAttachmentsBatchPutWithHttpInfo(accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsAttachmentsBatchPutRequestConfig(accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsAttachmentsBatchPut
     *
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsAttachmentsBatchPutRequestConfig(accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/attachments/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/batch/actions/fileextract/{job_id}/results
     * Retrieve Document Export Results
     * 
     * @param jobId The id value of the requested export job. This is returned with the export document requests.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsBatchActionsFileextractJobIdResultsGetWithHttpInfo(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/batch/actions/fileextract/{job_id}/results
     * Retrieve Document Export Results
     * 
     * @param jobId The id value of the requested export job. This is returned with the export document requests.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsBatchActionsFileextractJobIdResultsGetWithHttpInfo(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsBatchActionsFileextractJobIdResultsGetRequestConfig(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsBatchActionsFileextractJobIdResultsGet
     *
     * @param jobId The id value of the requested export job. This is returned with the export document requests.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsBatchActionsFileextractJobIdResultsGetRequestConfig(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/batch/actions/fileextract/{job_id}/results".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/batch/actions/fileextract
     * Export Documents
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsBatchActionsFileextractPost(source: kotlin.Boolean? = null, renditions: kotlin.Boolean? = null, allversions: kotlin.Boolean? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsBatchActionsFileextractPostWithHttpInfo(source = source, renditions = renditions, allversions = allversions, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/batch/actions/fileextract
     * Export Documents
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsBatchActionsFileextractPostWithHttpInfo(source: kotlin.Boolean?, renditions: kotlin.Boolean?, allversions: kotlin.Boolean?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsBatchActionsFileextractPostRequestConfig(source = source, renditions = renditions, allversions = allversions, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsBatchActionsFileextractPost
     *
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsBatchActionsFileextractPostRequestConfig(source: kotlin.Boolean?, renditions: kotlin.Boolean?, allversions: kotlin.Boolean?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (source != null) {
                    put("source", listOf(source.toString()))
                }
                if (renditions != null) {
                    put("renditions", listOf(renditions.toString()))
                }
                if (allversions != null) {
                    put("allversions", listOf(allversions.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/batch/actions/fileextract",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/batch/actions/reclassify
     * Reclassify Multiple Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsBatchActionsReclassifyPut(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIMigrationMode: kotlin.Boolean? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsBatchActionsReclassifyPutWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/batch/actions/reclassify
     * Reclassify Multiple Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsBatchActionsReclassifyPutWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsBatchActionsReclassifyPutRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsBatchActionsReclassifyPut
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsBatchActionsReclassifyPutRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIMigrationMode?.apply { localVariableHeaders["X-VaultAPI-MigrationMode"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/batch/actions/reclassify",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/batch/actions/rerender
     * Update Multiple Document Renditions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsBatchActionsRerenderPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsBatchActionsRerenderPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/batch/actions/rerender
     * Update Multiple Document Renditions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsBatchActionsRerenderPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsBatchActionsRerenderPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsBatchActionsRerenderPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsBatchActionsRerenderPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/batch/actions/rerender",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/batch
     * Delete Multiple Documents
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsBatchDelete(idParam: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsBatchDeleteWithHttpInfo(idParam = idParam, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/batch
     * Delete Multiple Documents
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsBatchDeleteWithHttpInfo(idParam: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsBatchDeleteRequestConfig(idParam = idParam, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsBatchDelete
     *
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsBatchDeleteRequestConfig(idParam: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (idParam != null) {
                    put("idParam", listOf(idParam.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/batch/lock
     * Undo Collaborative Authoring Checkout
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsBatchLockDelete(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsBatchLockDeleteWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/batch/lock
     * Undo Collaborative Authoring Checkout
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsBatchLockDeleteWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsBatchLockDeleteRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsBatchLockDelete
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsBatchLockDeleteRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/batch/lock",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/batch
     * Create Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsBatchPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIMigrationMode: kotlin.Boolean? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsBatchPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/batch
     * Create Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsBatchPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsBatchPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsBatchPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsBatchPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIMigrationMode?.apply { localVariableHeaders["X-VaultAPI-MigrationMode"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/batch
     * Update Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsBatchPut(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIMigrationMode: kotlin.Boolean? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsBatchPutWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/batch
     * Update Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsBatchPutWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsBatchPutRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsBatchPut
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsBatchPutRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIMigrationMode?.apply { localVariableHeaders["X-VaultAPI-MigrationMode"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/anchors
     * Retrieve Anchor IDs
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAnchorsGet(docId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAnchorsGetWithHttpInfo(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/anchors
     * Retrieve Anchor IDs
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAnchorsGetWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAnchorsGetRequestConfig(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAnchorsGet
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAnchorsGetRequestConfig(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/anchors".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/annotations/file
     * Export Document Annotations to PDF
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAnnotationsFileGet(docId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAnnotationsFileGetWithHttpInfo(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/annotations/file
     * Export Document Annotations to PDF
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAnnotationsFileGetWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAnnotationsFileGetRequestConfig(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAnnotationsFileGet
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAnnotationsFileGetRequestConfig(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/annotations/file".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/{doc_id}/annotations/file
     * Import Document Annotations from PDF
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAnnotationsFilePost(docId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAnnotationsFilePostWithHttpInfo(docId = docId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/{doc_id}/annotations/file
     * Import Document Annotations from PDF
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAnnotationsFilePostWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAnnotationsFilePostRequestConfig(docId = docId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAnnotationsFilePost
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAnnotationsFilePostRequestConfig(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/{doc_id}/annotations/file".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/{doc_id}/attachments/{attachment_id}
     * Delete Single Document Attachment
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsAttachmentIdDeleteWithHttpInfo(docId = docId, attachmentId = attachmentId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/{doc_id}/attachments/{attachment_id}
     * Delete Single Document Attachment
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdDeleteWithHttpInfo(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsAttachmentIdDeleteRequestConfig(docId = docId, attachmentId = attachmentId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsAttachmentIdDelete
     *
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsAttachmentIdDeleteRequestConfig(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/{doc_id}/attachments/{attachment_id}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/{attachment_id}/file
     * Download Document Attachment
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsAttachmentIdFileGetWithHttpInfo(docId = docId, attachmentId = attachmentId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/{attachment_id}/file
     * Download Document Attachment
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdFileGetWithHttpInfo(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsAttachmentIdFileGetRequestConfig(docId = docId, attachmentId = attachmentId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsAttachmentIdFileGet
     *
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsAttachmentIdFileGetRequestConfig(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/attachments/{attachment_id}/file".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/{attachment_id}
     * Retrieve Document Attachment Metadata
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsAttachmentIdGetWithHttpInfo(docId = docId, attachmentId = attachmentId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/{attachment_id}
     * Retrieve Document Attachment Metadata
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdGetWithHttpInfo(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsAttachmentIdGetRequestConfig(docId = docId, attachmentId = attachmentId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsAttachmentIdGet
     *
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsAttachmentIdGetRequestConfig(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/attachments/{attachment_id}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/{doc_id}/attachments/{attachment_id}
     * Update Document Attachment Description
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsAttachmentIdPutWithHttpInfo(docId = docId, attachmentId = attachmentId, accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/{doc_id}/attachments/{attachment_id}
     * Update Document Attachment Description
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdPutWithHttpInfo(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsAttachmentIdPutRequestConfig(docId = docId, attachmentId = attachmentId, accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsAttachmentIdPut
     *
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsAttachmentIdPutRequestConfig(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/{doc_id}/attachments/{attachment_id}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Delete Single Document Attachment Version
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(docId = docId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Delete Single Document Attachment Version
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequestConfig(docId = docId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete
     *
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequestConfig(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())).replace("{"+"attachment_version"+"}", encodeURIComponent(attachmentVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file
     * Download Document Attachment Version
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId = docId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file
     * Download Document Attachment Version
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequestConfig(docId = docId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     *
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequestConfig(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())).replace("{"+"attachment_version"+"}", encodeURIComponent(attachmentVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Retrieve Document Attachment Version Metadata
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId = docId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Retrieve Document Attachment Version Metadata
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequestConfig(docId = docId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet
     *
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequestConfig(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())).replace("{"+"attachment_version"+"}", encodeURIComponent(attachmentVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Restore Document Attachment Version
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param restore The parameter restore must be set to true.  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, restore: kotlin.Boolean? = null, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(docId = docId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, restore = restore, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Restore Document Attachment Version
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param restore The parameter restore must be set to true.  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, restore: kotlin.Boolean?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequestConfig(docId = docId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, restore = restore, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost
     *
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param restore The parameter restore must be set to true.  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequestConfig(docId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, restore: kotlin.Boolean?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (restore != null) {
                    put("restore", listOf(restore.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())).replace("{"+"attachment_version"+"}", encodeURIComponent(attachmentVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions
     * Retrieve Document Attachment Versions
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(docId = docId, attachmentId = attachmentId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions
     * Retrieve Document Attachment Versions
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRequestConfig(docId = docId, attachmentId = attachmentId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet
     *
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRequestConfig(docId: kotlin.String, attachmentId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/file
     * Download All Document Attachments
     * 
     * @param docId The document id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsFileGet(docId: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsFileGetWithHttpInfo(docId = docId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/attachments/file
     * Download All Document Attachments
     * 
     * @param docId The document id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsFileGetWithHttpInfo(docId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsFileGetRequestConfig(docId = docId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsFileGet
     *
     * @param docId The document id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsFileGetRequestConfig(docId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/attachments/file".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/attachments
     * Retrieve Document Attachments
     * 
     * @param docId The document id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsGet(docId: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsGetWithHttpInfo(docId = docId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/attachments
     * Retrieve Document Attachments
     * 
     * @param docId The document id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsGetWithHttpInfo(docId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsGetRequestConfig(docId = docId, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsGet
     *
     * @param docId The document id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsGetRequestConfig(docId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/attachments".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/{doc_id}/attachments
     * Create Document Attachment
     * 
     * @param docId The document id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAttachmentsPost(docId: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAttachmentsPostWithHttpInfo(docId = docId, accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/{doc_id}/attachments
     * Create Document Attachment
     * 
     * @param docId The document id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAttachmentsPostWithHttpInfo(docId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAttachmentsPostRequestConfig(docId = docId, accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAttachmentsPost
     *
     * @param docId The document id field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAttachmentsPostRequestConfig(docId: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/{doc_id}/attachments".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/audittrail
     * Retrieve Complete Audit History for a Single Document
     * 
     * @param docId The document ID for which to retrieve audit history.
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdAudittrailGet(docId: kotlin.String, startDate: kotlin.String? = null, endDate: kotlin.String? = null, formatResult: kotlin.String? = null, limit: kotlin.String? = null, offset: kotlin.String? = null, events: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdAudittrailGetWithHttpInfo(docId = docId, startDate = startDate, endDate = endDate, formatResult = formatResult, limit = limit, offset = offset, events = events, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/audittrail
     * Retrieve Complete Audit History for a Single Document
     * 
     * @param docId The document ID for which to retrieve audit history.
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdAudittrailGetWithHttpInfo(docId: kotlin.String, startDate: kotlin.String?, endDate: kotlin.String?, formatResult: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, events: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdAudittrailGetRequestConfig(docId = docId, startDate = startDate, endDate = endDate, formatResult = formatResult, limit = limit, offset = offset, events = events, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdAudittrailGet
     *
     * @param docId The document ID for which to retrieve audit history.
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdAudittrailGetRequestConfig(docId: kotlin.String, startDate: kotlin.String?, endDate: kotlin.String?, formatResult: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, events: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (formatResult != null) {
                    put("format_result", listOf(formatResult.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (events != null) {
                    put("events", listOf(events.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/audittrail".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/{doc_id}
     * Delete Single Document
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdDelete(docId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdDeleteWithHttpInfo(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/{doc_id}
     * Delete Single Document
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdDeleteWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdDeleteRequestConfig(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdDelete
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdDeleteRequestConfig(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/{doc_id}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/events
     * Retrieve Document Events
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdEventsGet(docId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdEventsGetWithHttpInfo(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/events
     * Retrieve Document Events
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdEventsGetWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdEventsGetRequestConfig(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdEventsGet
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdEventsGetRequestConfig(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/events".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/file
     * Download Document File
     * 
     * @param docId The document id field value.
     * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdFileGet(docId: kotlin.String, lockDocument: kotlin.Boolean? = null, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdFileGetWithHttpInfo(docId = docId, lockDocument = lockDocument, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/file
     * Download Document File
     * 
     * @param docId The document id field value.
     * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdFileGetWithHttpInfo(docId: kotlin.String, lockDocument: kotlin.Boolean?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdFileGetRequestConfig(docId = docId, lockDocument = lockDocument, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdFileGet
     *
     * @param docId The document id field value.
     * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdFileGetRequestConfig(docId: kotlin.String, lockDocument: kotlin.Boolean?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (lockDocument != null) {
                    put("lockDocument", listOf(lockDocument.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/file".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}
     * Retrieve Document
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdGet(docId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdGetWithHttpInfo(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}
     * Retrieve Document
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdGetWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdGetRequestConfig(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdGet
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdGetRequestConfig(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/{doc_id}/lock
     * Delete Document Lock
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdLockDelete(docId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdLockDeleteWithHttpInfo(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/{doc_id}/lock
     * Delete Document Lock
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdLockDeleteWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdLockDeleteRequestConfig(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdLockDelete
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdLockDeleteRequestConfig(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/{doc_id}/lock".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/lock
     * Retrieve Document Lock
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdLockGet(docId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdLockGetWithHttpInfo(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/lock
     * Retrieve Document Lock
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdLockGetWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdLockGetRequestConfig(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdLockGet
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdLockGetRequestConfig(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/lock".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/{doc_id}/lock
     * Create Document Lock
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdLockPost(docId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdLockPostWithHttpInfo(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/{doc_id}/lock
     * Create Document Lock
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdLockPostWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdLockPostRequestConfig(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdLockPost
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdLockPostRequestConfig(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/{doc_id}/lock".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file
     * Download All Document Version Attachments
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file
     * Download All Document Version Attachments
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/{doc_id}
     * Create Single Document Version
     * 
     * @param docId The document id field value.
     * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdPost(docId: kotlin.String, suppressRendition: kotlin.String? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdPostWithHttpInfo(docId = docId, suppressRendition = suppressRendition, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/{doc_id}
     * Create Single Document Version
     * 
     * @param docId The document id field value.
     * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdPostWithHttpInfo(docId: kotlin.String, suppressRendition: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdPostRequestConfig(docId = docId, suppressRendition = suppressRendition, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdPost
     *
     * @param docId The document id field value.
     * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdPostRequestConfig(docId: kotlin.String, suppressRendition: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (suppressRendition != null) {
                    put("suppressRendition", listOf(suppressRendition.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/{doc_id}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/{doc_id}
     * Update Single Document
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdPut(docId: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIMigrationMode: kotlin.Boolean? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdPutWithHttpInfo(docId = docId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/{doc_id}
     * Update Single Document
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdPutWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdPutRequestConfig(docId = docId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdPut
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdPutRequestConfig(docId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIMigrationMode?.apply { localVariableHeaders["X-VaultAPI-MigrationMode"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/{doc_id}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/renditions
     * Retrieve Document Renditions
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdRenditionsGet(docId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdRenditionsGetWithHttpInfo(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/renditions
     * Retrieve Document Renditions
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdRenditionsGetWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdRenditionsGetRequestConfig(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdRenditionsGet
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdRenditionsGetRequestConfig(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/renditions".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/{doc_id}/renditions/{rendition_type}
     * Delete Single Document Rendition
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdRenditionsRenditionTypeDeleteWithHttpInfo(docId = docId, renditionType = renditionType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/{doc_id}/renditions/{rendition_type}
     * Delete Single Document Rendition
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdRenditionsRenditionTypeDeleteWithHttpInfo(docId: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdRenditionsRenditionTypeDeleteRequestConfig(docId = docId, renditionType = renditionType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdRenditionsRenditionTypeDelete
     *
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdRenditionsRenditionTypeDeleteRequestConfig(docId: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"rendition_type"+"}", encodeURIComponent(renditionType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/renditions/{rendition_type}
     * Download Document Rendition File
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: kotlin.String, renditionType: kotlin.String, steadyState: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdRenditionsRenditionTypeGetWithHttpInfo(docId = docId, renditionType = renditionType, steadyState = steadyState, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/renditions/{rendition_type}
     * Download Document Rendition File
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdRenditionsRenditionTypeGetWithHttpInfo(docId: kotlin.String, renditionType: kotlin.String, steadyState: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdRenditionsRenditionTypeGetRequestConfig(docId = docId, renditionType = renditionType, steadyState = steadyState, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdRenditionsRenditionTypeGet
     *
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdRenditionsRenditionTypeGetRequestConfig(docId: kotlin.String, renditionType: kotlin.String, steadyState: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (steadyState != null) {
                    put("steadyState", listOf(steadyState.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"rendition_type"+"}", encodeURIComponent(renditionType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/{doc_id}/renditions/{rendition_type}
     * Add Single Document Rendition
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdRenditionsRenditionTypePost(docId: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdRenditionsRenditionTypePostWithHttpInfo(docId = docId, renditionType = renditionType, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/{doc_id}/renditions/{rendition_type}
     * Add Single Document Rendition
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdRenditionsRenditionTypePostWithHttpInfo(docId: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdRenditionsRenditionTypePostRequestConfig(docId = docId, renditionType = renditionType, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdRenditionsRenditionTypePost
     *
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdRenditionsRenditionTypePostRequestConfig(docId: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"rendition_type"+"}", encodeURIComponent(renditionType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/{doc_id}/renditions/{rendition_type}
     * Replace Document Rendition
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdRenditionsRenditionTypePut(docId: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdRenditionsRenditionTypePutWithHttpInfo(docId = docId, renditionType = renditionType, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/{doc_id}/renditions/{rendition_type}
     * Replace Document Rendition
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdRenditionsRenditionTypePutWithHttpInfo(docId: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdRenditionsRenditionTypePutRequestConfig(docId = docId, renditionType = renditionType, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdRenditionsRenditionTypePut
     *
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdRenditionsRenditionTypePutRequestConfig(docId: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"rendition_type"+"}", encodeURIComponent(renditionType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}
     * Remove Users &amp; Groups from Roles on a Single Document
     * 
     * @param docId The id value of the document from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: kotlin.String, roleNameAndUserOrGroup: kotlin.String, id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(docId = docId, roleNameAndUserOrGroup = roleNameAndUserOrGroup, id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}
     * Remove Users &amp; Groups from Roles on a Single Document
     * 
     * @param docId The id value of the document from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(docId: kotlin.String, roleNameAndUserOrGroup: kotlin.String, id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRequestConfig(docId = docId, roleNameAndUserOrGroup = roleNameAndUserOrGroup, id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete
     *
     * @param docId The id value of the document from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRequestConfig(docId: kotlin.String, roleNameAndUserOrGroup: kotlin.String, id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"role_name_and_user_or_group"+"}", encodeURIComponent(roleNameAndUserOrGroup.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments
     * Retrieve Document Version Attachments
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments
     * Retrieve Document Version Attachments
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions
     * Retrieve Document Versions
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsGet(docId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsGetWithHttpInfo(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions
     * Retrieve Document Versions
     * 
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsGetWithHttpInfo(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsGetRequestConfig(docId = docId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsGet
     *
     * @param docId The document id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsGetRequestConfig(docId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}
     * Read Annotations by ID
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, annotationId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, annotationId = annotationId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}
     * Read Annotations by ID
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, annotationId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, annotationId = annotationId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, annotationId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"annotation_id"+"}", encodeURIComponent(annotationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies
     * Read Replies of Parent Annotation
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, annotationId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, annotationId = annotationId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies
     * Read Replies of Parent Annotation
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, annotationId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, annotationId = annotationId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, annotationId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"annotation_id"+"}", encodeURIComponent(annotationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file
     * Export Document Version Annotations to PDF
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file
     * Export Document Version Annotations to PDF
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file
     * Import Document Version Annotations from PDF
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file
     * Import Document Version Annotations from PDF
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations
     * Read Annotations by Document Version and Type
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored. (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201. (optional)
     * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;  (optional)
     * @param paginationId A unique identifier used to load requests with paginated results. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, limit: kotlin.String? = null, offset: kotlin.String? = null, annotationTypes: kotlin.String? = null, paginationId: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, limit = limit, offset = offset, annotationTypes = annotationTypes, paginationId = paginationId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations
     * Read Annotations by Document Version and Type
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored. (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201. (optional)
     * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;  (optional)
     * @param paginationId A unique identifier used to load requests with paginated results. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, limit: kotlin.String?, offset: kotlin.String?, annotationTypes: kotlin.String?, paginationId: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, limit = limit, offset = offset, annotationTypes = annotationTypes, paginationId = paginationId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored. (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201. (optional)
     * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;  (optional)
     * @param paginationId A unique identifier used to load requests with paginated results. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, limit: kotlin.String?, offset: kotlin.String?, annotationTypes: kotlin.String?, paginationId: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (annotationTypes != null) {
                    put("annotation_types", listOf(annotationTypes.toString()))
                }
                if (paginationId != null) {
                    put("pagination_id", listOf(paginationId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file
     * Download Document Version Attachment Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id field value of the attachment.
     * @param attachmentVersion The version of the attachment.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, attachmentId = attachmentId, attachmentVersion = attachmentVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file
     * Download Document Version Attachment Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id field value of the attachment.
     * @param attachmentVersion The version of the attachment.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, attachmentId = attachmentId, attachmentVersion = attachmentVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id field value of the attachment.
     * @param attachmentVersion The version of the attachment.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())).replace("{"+"attachment_version"+"}", encodeURIComponent(attachmentVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}
     * Retrieve Document Version Attachment Versions
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id of the document attachment to retrieve.
     * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, attachmentId = attachmentId, attachmentVersion = attachmentVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}
     * Retrieve Document Version Attachment Versions
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id of the document attachment to retrieve.
     * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, attachmentId = attachmentId, attachmentVersion = attachmentVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id of the document attachment to retrieve.
     * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())).replace("{"+"attachment_version"+"}", encodeURIComponent(attachmentVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
     * Delete Single Document Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
     * Delete Single Document Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv
     * Retrieve Document Version Notes as CSV
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv
     * Retrieve Document Version Notes as CSV
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events
     * Create Document Event
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events
     * Create Document Event
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations
     * Retrieve Video Annotations
     * 
     * @param docId The video document id field value.
     * @param majorVersion The video document major_version_number__v field value.
     * @param minorVersion The video document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations
     * Retrieve Video Annotations
     * 
     * @param docId The video document id field value.
     * @param majorVersion The video document major_version_number__v field value.
     * @param minorVersion The video document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet
     *
     * @param docId The video document id field value.
     * @param majorVersion The video document major_version_number__v field value.
     * @param minorVersion The video document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file
     * Download Document Version File
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file
     * Download Document Version File
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
     * Retrieve Document Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
     * Retrieve Document Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
     * Update Document Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIMigrationMode: kotlin.Boolean? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
     * Update Document Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIMigrationMode?.apply { localVariableHeaders["X-VaultAPI-MigrationMode"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships
     * Retrieve Document Relationships
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships
     * Retrieve Document Relationships
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships
     * Create Single Document Relationship
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships
     * Create Single Document Relationship
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
     * Delete Single Document Relationship
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, relationshipId = relationshipId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
     * Delete Single Document Relationship
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, relationshipId = relationshipId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"relationship_id"+"}", encodeURIComponent(relationshipId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
     * Retrieve Document Relationship
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, relationshipId = relationshipId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
     * Retrieve Document Relationship
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, relationshipId = relationshipId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, relationshipId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"relationship_id"+"}", encodeURIComponent(relationshipId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions
     * Retrieve Document Version Renditions
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions
     * Retrieve Document Version Renditions
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
     * Delete Document Version Rendition
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, renditionType = renditionType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
     * Delete Document Version Rendition
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, renditionType = renditionType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"rendition_type"+"}", encodeURIComponent(renditionType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
     * Download Document Version Rendition File
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, renditionType = renditionType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
     * Download Document Version Rendition File
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, renditionType = renditionType, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"rendition_type"+"}", encodeURIComponent(renditionType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
     * Upload Document Version Rendition
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, renditionType = renditionType, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
     * Upload Document Version Rendition
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, renditionType = renditionType, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"rendition_type"+"}", encodeURIComponent(renditionType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
     * Replace Document Version Rendition
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, renditionType = renditionType, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
     * Replace Document Version Rendition
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, renditionType = renditionType, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, renditionType: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"rendition_type"+"}", encodeURIComponent(renditionType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail
     * Download Document Version Thumbnail File
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetWithHttpInfo(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail
     * Download Document Version Thumbnail File
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetWithHttpInfo(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRequestConfig(docId = docId, majorVersion = majorVersion, minorVersion = minorVersion, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet
     *
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRequestConfig(docId: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail".replace("{"+"doc_id"+"}", encodeURIComponent(docId.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents
     * Retrieve All Documents
     * 
     * @param namedFilter Retrieves only documents which you have created. (optional)
     * @param scope Searches only within the document content. (optional)
     * @param versionscope Retrieves all document versions, rather than only the latest version. (optional)
     * @param search Search for documents based on a {keyword} in searchable document fields. (optional)
     * @param limit See VQL documentation for more information. (optional)
     * @param sort See VQL documentation for more information. (optional)
     * @param start See VQL documentation for more information. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsGet(namedFilter: kotlin.String? = null, scope: kotlin.String? = null, versionscope: kotlin.String? = null, search: kotlin.String? = null, limit: kotlin.String? = null, sort: kotlin.String? = null, start: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsGetWithHttpInfo(namedFilter = namedFilter, scope = scope, versionscope = versionscope, search = search, limit = limit, sort = sort, start = start, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents
     * Retrieve All Documents
     * 
     * @param namedFilter Retrieves only documents which you have created. (optional)
     * @param scope Searches only within the document content. (optional)
     * @param versionscope Retrieves all document versions, rather than only the latest version. (optional)
     * @param search Search for documents based on a {keyword} in searchable document fields. (optional)
     * @param limit See VQL documentation for more information. (optional)
     * @param sort See VQL documentation for more information. (optional)
     * @param start See VQL documentation for more information. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsGetWithHttpInfo(namedFilter: kotlin.String?, scope: kotlin.String?, versionscope: kotlin.String?, search: kotlin.String?, limit: kotlin.String?, sort: kotlin.String?, start: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsGetRequestConfig(namedFilter = namedFilter, scope = scope, versionscope = versionscope, search = search, limit = limit, sort = sort, start = start, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsGet
     *
     * @param namedFilter Retrieves only documents which you have created. (optional)
     * @param scope Searches only within the document content. (optional)
     * @param versionscope Retrieves all document versions, rather than only the latest version. (optional)
     * @param search Search for documents based on a {keyword} in searchable document fields. (optional)
     * @param limit See VQL documentation for more information. (optional)
     * @param sort See VQL documentation for more information. (optional)
     * @param start See VQL documentation for more information. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsGetRequestConfig(namedFilter: kotlin.String?, scope: kotlin.String?, versionscope: kotlin.String?, search: kotlin.String?, limit: kotlin.String?, sort: kotlin.String?, start: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (namedFilter != null) {
                    put("named_filter", listOf(namedFilter.toString()))
                }
                if (scope != null) {
                    put("scope", listOf(scope.toString()))
                }
                if (versionscope != null) {
                    put("versionscope", listOf(versionscope.toString()))
                }
                if (search != null) {
                    put("search", listOf(search.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{id}/roles
     * Retrieve All Document Roles
     * 
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsIdRolesGet(id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsIdRolesGetWithHttpInfo(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{id}/roles
     * Retrieve All Document Roles
     * 
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsIdRolesGetWithHttpInfo(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsIdRolesGetRequestConfig(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsIdRolesGet
     *
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsIdRolesGetRequestConfig(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{id}/roles".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/{id}/roles
     * Assign Users &amp; Groups to Roles on a Single Document
     * 
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsIdRolesPost(id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsIdRolesPostWithHttpInfo(id = id, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/{id}/roles
     * Assign Users &amp; Groups to Roles on a Single Document
     * 
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsIdRolesPostWithHttpInfo(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsIdRolesPostRequestConfig(id = id, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsIdRolesPost
     *
     * @param id 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsIdRolesPostRequestConfig(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/{id}/roles".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{id}/roles/{role_name}
     * Retrieve Document Role
     * 
     * @param id The document &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsIdRolesRoleNameGet(id: kotlin.String, roleName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsIdRolesRoleNameGetWithHttpInfo(id = id, roleName = roleName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{id}/roles/{role_name}
     * Retrieve Document Role
     * 
     * @param id The document &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsIdRolesRoleNameGetWithHttpInfo(id: kotlin.String, roleName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsIdRolesRoleNameGetRequestConfig(id = id, roleName = roleName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsIdRolesRoleNameGet
     *
     * @param id The document &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsIdRolesRoleNameGetRequestConfig(id: kotlin.String, roleName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{id}/roles/{role_name}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"role_name"+"}", encodeURIComponent(roleName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions
     * Retrieve Document User Actions
     * 
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id = id, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions
     * Retrieve Document User Actions
     * 
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequestConfig(id = id, majorVersion = majorVersion, minorVersion = minorVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet
     *
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequestConfig(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements
     * Retrieve Document Entry Criteria
     * 
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id = id, majorVersion = majorVersion, minorVersion = minorVersion, nameV = nameV, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements
     * Retrieve Document Entry Criteria
     * 
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequestConfig(id = id, majorVersion = majorVersion, minorVersion = minorVersion, nameV = nameV, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet
     *
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequestConfig(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"name__v"+"}", encodeURIComponent(nameV.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}
     * Initiate Document User Action
     * 
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id = id, majorVersion = majorVersion, minorVersion = minorVersion, nameV = nameV, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}
     * Initiate Document User Action
     * 
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequestConfig(id = id, majorVersion = majorVersion, minorVersion = minorVersion, nameV = nameV, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut
     *
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequestConfig(id: kotlin.String, majorVersion: kotlin.String, minorVersion: kotlin.String, nameV: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"major_version"+"}", encodeURIComponent(majorVersion.toString())).replace("{"+"minor_version"+"}", encodeURIComponent(minorVersion.toString())).replace("{"+"name__v"+"}", encodeURIComponent(nameV.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/lifecycle_actions
     * Retrieve User Actions on Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsLifecycleActionsPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsLifecycleActionsPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/lifecycle_actions
     * Retrieve User Actions on Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsLifecycleActionsPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsLifecycleActionsPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsLifecycleActionsPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsLifecycleActionsPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/lifecycle_actions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/lifecycle_actions/{user_action_name}
     * Initiate Bulk Document User Actions
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsLifecycleActionsUserActionNamePutWithHttpInfo(userActionName = userActionName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/lifecycle_actions/{user_action_name}
     * Initiate Bulk Document User Actions
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsLifecycleActionsUserActionNamePutWithHttpInfo(userActionName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsLifecycleActionsUserActionNamePutRequestConfig(userActionName = userActionName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsLifecycleActionsUserActionNamePut
     *
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsLifecycleActionsUserActionNamePutRequestConfig(userActionName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/lifecycle_actions/{user_action_name}".replace("{"+"user_action_name"+"}", encodeURIComponent(userActionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents
     * Create Single Document
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIMigrationMode: kotlin.Boolean? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsPostWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents
     * Create Single Document
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsPostRequestConfig(authorization = authorization, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIMigrationMode?.apply { localVariableHeaders["X-VaultAPI-MigrationMode"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/relationships/batch
     * Delete Multiple Document Relationships
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsRelationshipsBatchDelete(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsRelationshipsBatchDeleteWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/relationships/batch
     * Delete Multiple Document Relationships
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsRelationshipsBatchDeleteWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsRelationshipsBatchDeleteRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsRelationshipsBatchDelete
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsRelationshipsBatchDeleteRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/relationships/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/relationships/batch
     * Create Multiple Document Relationships
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsRelationshipsBatchPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsRelationshipsBatchPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/relationships/batch
     * Create Multiple Document Relationships
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsRelationshipsBatchPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsRelationshipsBatchPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsRelationshipsBatchPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsRelationshipsBatchPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/relationships/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/renditions/batch
     * Delete Multiple Document Renditions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsRenditionsBatchDelete(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsRenditionsBatchDeleteWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/renditions/batch
     * Delete Multiple Document Renditions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsRenditionsBatchDeleteWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsRenditionsBatchDeleteRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsRenditionsBatchDelete
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsRenditionsBatchDeleteRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/renditions/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/renditions/batch
     * Add Multiple Document Renditions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsRenditionsBatchPost(idParam: kotlin.String? = null, largeSizeAsset: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIMigrationMode: kotlin.Boolean? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsRenditionsBatchPostWithHttpInfo(idParam = idParam, largeSizeAsset = largeSizeAsset, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/renditions/batch
     * Add Multiple Document Renditions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsRenditionsBatchPostWithHttpInfo(idParam: kotlin.String?, largeSizeAsset: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsRenditionsBatchPostRequestConfig(idParam = idParam, largeSizeAsset = largeSizeAsset, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsRenditionsBatchPost
     *
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsRenditionsBatchPostRequestConfig(idParam: kotlin.String?, largeSizeAsset: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (idParam != null) {
                    put("idParam", listOf(idParam.toString()))
                }
                if (largeSizeAsset != null) {
                    put("largeSizeAsset", listOf(largeSizeAsset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIMigrationMode?.apply { localVariableHeaders["X-VaultAPI-MigrationMode"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/renditions/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/roles/batch
     * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsRolesBatchDelete(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsRolesBatchDeleteWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/roles/batch
     * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsRolesBatchDeleteWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsRolesBatchDeleteRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsRolesBatchDelete
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsRolesBatchDeleteRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/roles/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/roles/batch
     * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsRolesBatchPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsRolesBatchPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/roles/batch
     * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsRolesBatchPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsRolesBatchPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsRolesBatchPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsRolesBatchPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/roles/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/templates
     * Retrieve Document Template Collection
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsTemplatesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsTemplatesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/templates
     * Retrieve Document Template Collection
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsTemplatesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsTemplatesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsTemplatesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsTemplatesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/templates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/templates
     * Create Single Document Template
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsTemplatesPost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsTemplatesPostWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/templates
     * Create Single Document Template
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsTemplatesPostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsTemplatesPostRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsTemplatesPost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsTemplatesPostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/templates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/templates
     * Update Multiple Document Templates
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsTemplatesPut(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsTemplatesPutWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/templates
     * Update Multiple Document Templates
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsTemplatesPutWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsTemplatesPutRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsTemplatesPut
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsTemplatesPutRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/templates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/templates/{template_name}
     * Delete Basic Document Template
     * 
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsTemplatesTemplateNameDelete(templateName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsTemplatesTemplateNameDeleteWithHttpInfo(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/templates/{template_name}
     * Delete Basic Document Template
     * 
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsTemplatesTemplateNameDeleteWithHttpInfo(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsTemplatesTemplateNameDeleteRequestConfig(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsTemplatesTemplateNameDelete
     *
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsTemplatesTemplateNameDeleteRequestConfig(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/templates/{template_name}".replace("{"+"template_name"+"}", encodeURIComponent(templateName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/templates/{template_name}/file
     * Download Document Template File
     * 
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsTemplatesTemplateNameFileGet(templateName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsTemplatesTemplateNameFileGetWithHttpInfo(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/templates/{template_name}/file
     * Download Document Template File
     * 
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsTemplatesTemplateNameFileGetWithHttpInfo(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsTemplatesTemplateNameFileGetRequestConfig(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsTemplatesTemplateNameFileGet
     *
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsTemplatesTemplateNameFileGetRequestConfig(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/templates/{template_name}/file".replace("{"+"template_name"+"}", encodeURIComponent(templateName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/documents/templates/{template_name}
     * Retrieve Document Template Attributes
     * 
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsTemplatesTemplateNameGet(templateName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsTemplatesTemplateNameGetWithHttpInfo(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/documents/templates/{template_name}
     * Retrieve Document Template Attributes
     * 
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsTemplatesTemplateNameGetWithHttpInfo(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsTemplatesTemplateNameGetRequestConfig(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsTemplatesTemplateNameGet
     *
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsTemplatesTemplateNameGetRequestConfig(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/documents/templates/{template_name}".replace("{"+"template_name"+"}", encodeURIComponent(templateName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/documents/templates/{template_name}
     * Update Single Document Template
     * 
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsTemplatesTemplateNamePut(templateName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsTemplatesTemplateNamePutWithHttpInfo(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/documents/templates/{template_name}
     * Update Single Document Template
     * 
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsTemplatesTemplateNamePutWithHttpInfo(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsTemplatesTemplateNamePutRequestConfig(templateName = templateName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsTemplatesTemplateNamePut
     *
     * @param templateName The document template name__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsTemplatesTemplateNamePutRequestConfig(templateName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/documents/templates/{template_name}".replace("{"+"template_name"+"}", encodeURIComponent(templateName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/tokens
     * Document Tokens
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsTokensPost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsTokensPostWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/tokens
     * Document Tokens
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsTokensPostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsTokensPostRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsTokensPost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsTokensPostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/tokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/versions/batch/actions/fileextract
     * Export Document Versions
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsVersionsBatchActionsFileextractPost(source: kotlin.Boolean? = null, renditions: kotlin.Boolean? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsVersionsBatchActionsFileextractPostWithHttpInfo(source = source, renditions = renditions, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/versions/batch/actions/fileextract
     * Export Document Versions
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsVersionsBatchActionsFileextractPostWithHttpInfo(source: kotlin.Boolean?, renditions: kotlin.Boolean?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsVersionsBatchActionsFileextractPostRequestConfig(source = source, renditions = renditions, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsVersionsBatchActionsFileextractPost
     *
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsVersionsBatchActionsFileextractPostRequestConfig(source: kotlin.Boolean?, renditions: kotlin.Boolean?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (source != null) {
                    put("source", listOf(source.toString()))
                }
                if (renditions != null) {
                    put("renditions", listOf(renditions.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/versions/batch/actions/fileextract",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/documents/versions/batch
     * Delete Multiple Document Versions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsVersionsBatchDelete(idParam: kotlin.String? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsVersionsBatchDeleteWithHttpInfo(idParam = idParam, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/documents/versions/batch
     * Delete Multiple Document Versions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsVersionsBatchDeleteWithHttpInfo(idParam: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsVersionsBatchDeleteRequestConfig(idParam = idParam, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsVersionsBatchDelete
     *
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsVersionsBatchDeleteRequestConfig(idParam: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (idParam != null) {
                    put("idParam", listOf(idParam.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/documents/versions/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/documents/versions/batch
     * Create Multiple Document Versions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDocumentsVersionsBatchPost(idParam: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIMigrationMode: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDocumentsVersionsBatchPostWithHttpInfo(idParam = idParam, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/documents/versions/batch
     * Create Multiple Document Versions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDocumentsVersionsBatchPostWithHttpInfo(idParam: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIMigrationMode: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDocumentsVersionsBatchPostRequestConfig(idParam = idParam, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDocumentsVersionsBatchPost
     *
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDocumentsVersionsBatchPostRequestConfig(idParam: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIMigrationMode: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (idParam != null) {
                    put("idParam", listOf(idParam.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIMigrationMode?.apply { localVariableHeaders["X-VaultAPI-MigrationMode"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/documents/versions/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/domain
     * Retrieve Domain Information
     * 
     * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDomainGet(includeApplication: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDomainGetWithHttpInfo(includeApplication = includeApplication, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/domain
     * Retrieve Domain Information
     * 
     * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDomainGetWithHttpInfo(includeApplication: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDomainGetRequestConfig(includeApplication = includeApplication, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDomainGet
     *
     * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDomainGetRequestConfig(includeApplication: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (includeApplication != null) {
                    put("include_application", listOf(includeApplication.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/domain",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/domains
     * Retrieve Domains
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsDomainsGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsDomainsGetWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/domains
     * Retrieve Domains
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsDomainsGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsDomainsGetRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsDomainsGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsDomainsGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/domains",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/edl_matched_documents/batch/actions/add
     * Add EDL Matched Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsEdlMatchedDocumentsBatchActionsAddPost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsEdlMatchedDocumentsBatchActionsAddPostWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/edl_matched_documents/batch/actions/add
     * Add EDL Matched Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsEdlMatchedDocumentsBatchActionsAddPostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsEdlMatchedDocumentsBatchActionsAddPostRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsEdlMatchedDocumentsBatchActionsAddPost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsEdlMatchedDocumentsBatchActionsAddPostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/edl_matched_documents/batch/actions/add",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/edl_matched_documents/batch/actions/remove
     * Remove EDL Matched Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsEdlMatchedDocumentsBatchActionsRemovePostWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/edl_matched_documents/batch/actions/remove
     * Remove EDL Matched Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsEdlMatchedDocumentsBatchActionsRemovePostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsEdlMatchedDocumentsBatchActionsRemovePostRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsEdlMatchedDocumentsBatchActionsRemovePost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsEdlMatchedDocumentsBatchActionsRemovePostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/edl_matched_documents/batch/actions/remove",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/groups/auto
     * Retrieve Auto Managed Groups
     * 
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000.  (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsGroupsAutoGet(limit: kotlin.String? = null, offset: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsGroupsAutoGetWithHttpInfo(limit = limit, offset = offset, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/groups/auto
     * Retrieve Auto Managed Groups
     * 
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000.  (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsGroupsAutoGetWithHttpInfo(limit: kotlin.String?, offset: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsGroupsAutoGetRequestConfig(limit = limit, offset = offset, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsGroupsAutoGet
     *
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000.  (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsGroupsAutoGetRequestConfig(limit: kotlin.String?, offset: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/groups/auto",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/groups
     * Retrieve All Groups
     * 
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsGroupsGet(includeImplied: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsGroupsGetWithHttpInfo(includeImplied = includeImplied, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/groups
     * Retrieve All Groups
     * 
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsGroupsGetWithHttpInfo(includeImplied: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsGroupsGetRequestConfig(includeImplied = includeImplied, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsGroupsGet
     *
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsGroupsGetRequestConfig(includeImplied: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (includeImplied != null) {
                    put("includeImplied", listOf(includeImplied.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/groups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/groups/{group_id}
     * Delete Group
     * 
     * @param groupId The group id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsGroupsGroupIdDelete(groupId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsGroupsGroupIdDeleteWithHttpInfo(groupId = groupId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/groups/{group_id}
     * Delete Group
     * 
     * @param groupId The group id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsGroupsGroupIdDeleteWithHttpInfo(groupId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsGroupsGroupIdDeleteRequestConfig(groupId = groupId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsGroupsGroupIdDelete
     *
     * @param groupId The group id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsGroupsGroupIdDeleteRequestConfig(groupId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/groups/{group_id}".replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/groups/{group_id}
     * Retrieve Group
     * 
     * @param groupId The group id field value.
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsGroupsGroupIdGet(groupId: kotlin.String, includeImplied: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsGroupsGroupIdGetWithHttpInfo(groupId = groupId, includeImplied = includeImplied, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/groups/{group_id}
     * Retrieve Group
     * 
     * @param groupId The group id field value.
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsGroupsGroupIdGetWithHttpInfo(groupId: kotlin.String, includeImplied: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsGroupsGroupIdGetRequestConfig(groupId = groupId, includeImplied = includeImplied, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsGroupsGroupIdGet
     *
     * @param groupId The group id field value.
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsGroupsGroupIdGetRequestConfig(groupId: kotlin.String, includeImplied: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (includeImplied != null) {
                    put("includeImplied", listOf(includeImplied.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/groups/{group_id}".replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/groups/{group_id}
     * Update Group
     * 
     * @param groupId The group id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsGroupsGroupIdPut(groupId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsGroupsGroupIdPutWithHttpInfo(groupId = groupId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/groups/{group_id}
     * Update Group
     * 
     * @param groupId The group id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsGroupsGroupIdPutWithHttpInfo(groupId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsGroupsGroupIdPutRequestConfig(groupId = groupId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsGroupsGroupIdPut
     *
     * @param groupId The group id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsGroupsGroupIdPutRequestConfig(groupId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/groups/{group_id}".replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/groups
     * Create Group 
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsGroupsPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsGroupsPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/groups
     * Create Group 
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsGroupsPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsGroupsPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsGroupsPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsGroupsPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/groups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/licenses
     * Retrieve Application License Usage
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsLicensesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsLicensesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/licenses
     * Retrieve Application License Usage
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsLicensesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsLicensesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsLicensesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsLicensesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/licenses",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/objectworkflows/actions
     * Retrieve All Multi-Record Workflows
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsActionsGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsActionsGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/objectworkflows/actions
     * Retrieve All Multi-Record Workflows
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsActionsGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsActionsGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsActionsGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsActionsGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/objectworkflows/actions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/objectworkflows/actions/{workflow_name}
     * Retrieve Multi-Record Workflow Details
     * 
     * @param workflowName 
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsActionsWorkflowNameGet(workflowName: kotlin.String, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsActionsWorkflowNameGetWithHttpInfo(workflowName = workflowName, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/objectworkflows/actions/{workflow_name}
     * Retrieve Multi-Record Workflow Details
     * 
     * @param workflowName 
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsActionsWorkflowNameGetWithHttpInfo(workflowName: kotlin.String, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsActionsWorkflowNameGetRequestConfig(workflowName = workflowName, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsActionsWorkflowNameGet
     *
     * @param workflowName 
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsActionsWorkflowNameGetRequestConfig(workflowName: kotlin.String, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/objectworkflows/actions/{workflow_name}".replace("{"+"workflow_name"+"}", encodeURIComponent(workflowName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/actions/{workflow_name}
     * Initiate Multi-Record Workflow
     * 
     * @param workflowName 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsActionsWorkflowNamePost(workflowName: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsActionsWorkflowNamePostWithHttpInfo(workflowName = workflowName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/actions/{workflow_name}
     * Initiate Multi-Record Workflow
     * 
     * @param workflowName 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsActionsWorkflowNamePostWithHttpInfo(workflowName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsActionsWorkflowNamePostRequestConfig(workflowName = workflowName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsActionsWorkflowNamePost
     *
     * @param workflowName 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsActionsWorkflowNamePostRequestConfig(workflowName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/actions/{workflow_name}".replace("{"+"workflow_name"+"}", encodeURIComponent(workflowName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/objectworkflows
     * Retrieve Workflows
     * 
     * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsGet(objectV: kotlin.String? = null, recordIdV: kotlin.String? = null, participant: kotlin.String? = null, statusV: kotlin.String? = null, offset: kotlin.String? = null, pageSize: kotlin.String? = null, loc: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsGetWithHttpInfo(objectV = objectV, recordIdV = recordIdV, participant = participant, statusV = statusV, offset = offset, pageSize = pageSize, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/objectworkflows
     * Retrieve Workflows
     * 
     * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsGetWithHttpInfo(objectV: kotlin.String?, recordIdV: kotlin.String?, participant: kotlin.String?, statusV: kotlin.String?, offset: kotlin.String?, pageSize: kotlin.String?, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsGetRequestConfig(objectV = objectV, recordIdV = recordIdV, participant = participant, statusV = statusV, offset = offset, pageSize = pageSize, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsGet
     *
     * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsGetRequestConfig(objectV: kotlin.String?, recordIdV: kotlin.String?, participant: kotlin.String?, statusV: kotlin.String?, offset: kotlin.String?, pageSize: kotlin.String?, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (objectV != null) {
                    put("object__v", listOf(objectV.toString()))
                }
                if (recordIdV != null) {
                    put("record_id__v", listOf(recordIdV.toString()))
                }
                if (participant != null) {
                    put("participant", listOf(participant.toString()))
                }
                if (statusV != null) {
                    put("status__v", listOf(statusV.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/objectworkflows",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/objectworkflows/tasks
     * Retrieve Workflow Tasks
     * 
     * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v.  (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksGet(objectV: kotlin.String? = null, recordIdV: kotlin.String? = null, assigneeV: kotlin.String? = null, statusV: kotlin.String? = null, offset: kotlin.String? = null, pageSize: kotlin.String? = null, loc: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksGetWithHttpInfo(objectV = objectV, recordIdV = recordIdV, assigneeV = assigneeV, statusV = statusV, offset = offset, pageSize = pageSize, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/objectworkflows/tasks
     * Retrieve Workflow Tasks
     * 
     * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v.  (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksGetWithHttpInfo(objectV: kotlin.String?, recordIdV: kotlin.String?, assigneeV: kotlin.String?, statusV: kotlin.String?, offset: kotlin.String?, pageSize: kotlin.String?, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksGetRequestConfig(objectV = objectV, recordIdV = recordIdV, assigneeV = assigneeV, statusV = statusV, offset = offset, pageSize = pageSize, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksGet
     *
     * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v.  (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksGetRequestConfig(objectV: kotlin.String?, recordIdV: kotlin.String?, assigneeV: kotlin.String?, statusV: kotlin.String?, offset: kotlin.String?, pageSize: kotlin.String?, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (objectV != null) {
                    put("object__v", listOf(objectV.toString()))
                }
                if (recordIdV != null) {
                    put("record_id__v", listOf(recordIdV.toString()))
                }
                if (assigneeV != null) {
                    put("assignee__v", listOf(assigneeV.toString()))
                }
                if (statusV != null) {
                    put("status__v", listOf(statusV.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/objectworkflows/tasks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/accept
     * Accept Single Record Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsAcceptPostWithHttpInfo(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/accept
     * Accept Single Record Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsAcceptPostWithHttpInfo(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsAcceptPostRequestConfig(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsAcceptPost
     *
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsAcceptPostRequestConfig(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/tasks/{task_id}/actions/accept".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/cancel
     * Cancel Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsCancelPostWithHttpInfo(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/cancel
     * Cancel Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsCancelPostWithHttpInfo(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsCancelPostRequestConfig(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsCancelPost
     *
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsCancelPostRequestConfig(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/tasks/{task_id}/actions/cancel".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/complete
     * Complete Single Record Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsCompletePostWithHttpInfo(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/complete
     * Complete Single Record Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsCompletePostWithHttpInfo(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsCompletePostRequestConfig(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsCompletePost
     *
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsCompletePostRequestConfig(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/tasks/{task_id}/actions/complete".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/objectworkflows/tasks/{task_id}/actions
     * Retrieve Workflow Task Actions
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsGet(taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsGetWithHttpInfo(taskId = taskId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/objectworkflows/tasks/{task_id}/actions
     * Retrieve Workflow Task Actions
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsGetWithHttpInfo(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsGetRequestConfig(taskId = taskId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsGet
     *
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsGetRequestConfig(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/objectworkflows/tasks/{task_id}/actions".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/mdwaccept
     * Accept Multi-item Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostWithHttpInfo(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/mdwaccept
     * Accept Multi-item Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostWithHttpInfo(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRequestConfig(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost
     *
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRequestConfig(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete
     * Complete Multi-item Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostWithHttpInfo(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete
     * Complete Multi-item Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostWithHttpInfo(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRequestConfig(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost
     *
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRequestConfig(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent
     * Manage Multi-Item Workflow Content
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostWithHttpInfo(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent
     * Manage Multi-Item Workflow Content
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostWithHttpInfo(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRequestConfig(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost
     *
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRequestConfig(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/mdwreassign
     * Reassign Multi-item Workflow Task
     * 
     * @param taskId The id of the task to reassign.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostWithHttpInfo(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/mdwreassign
     * Reassign Multi-item Workflow Task
     * 
     * @param taskId The id of the task to reassign.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostWithHttpInfo(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRequestConfig(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost
     *
     * @param taskId The id of the task to reassign.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRequestConfig(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/reassign
     * Reassign Single Record Workflow Task
     * 
     * @param taskId The id of the task to reassign.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsReassignPostWithHttpInfo(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/reassign
     * Reassign Single Record Workflow Task
     * 
     * @param taskId The id of the task to reassign.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsReassignPostWithHttpInfo(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsReassignPostRequestConfig(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsReassignPost
     *
     * @param taskId The id of the task to reassign.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsReassignPostRequestConfig(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/tasks/{task_id}/actions/reassign".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/objectworkflows/tasks/{task_id}/actions/{task_action}
     * Retrieve Workflow Task Action Details
     * 
     * @param taskId The task id field value.
     * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: kotlin.String, taskAction: kotlin.String, loc: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsTaskActionGetWithHttpInfo(taskId = taskId, taskAction = taskAction, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/objectworkflows/tasks/{task_id}/actions/{task_action}
     * Retrieve Workflow Task Action Details
     * 
     * @param taskId The task id field value.
     * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsTaskActionGetWithHttpInfo(taskId: kotlin.String, taskAction: kotlin.String, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsTaskActionGetRequestConfig(taskId = taskId, taskAction = taskAction, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsTaskActionGet
     *
     * @param taskId The task id field value.
     * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsTaskActionGetRequestConfig(taskId: kotlin.String, taskAction: kotlin.String, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/objectworkflows/tasks/{task_id}/actions/{task_action}".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())).replace("{"+"task_action"+"}", encodeURIComponent(taskAction.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/undoaccept
     * Undo Workflow Task Acceptance
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostWithHttpInfo(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/undoaccept
     * Undo Workflow Task Acceptance
     * 
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostWithHttpInfo(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRequestConfig(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost
     *
     * @param taskId The task id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRequestConfig(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/tasks/{task_id}/actions/undoaccept".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/updateduedate
     * Update Workflow Task Due Date
     * 
     * @param taskId The id of the task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostWithHttpInfo(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/tasks/{task_id}/actions/updateduedate
     * Update Workflow Task Due Date
     * 
     * @param taskId The id of the task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostWithHttpInfo(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRequestConfig(taskId = taskId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost
     *
     * @param taskId The id of the task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRequestConfig(taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/tasks/{task_id}/actions/updateduedate".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/objectworkflows/tasks/{task_id}
     * Retrieve Workflow Task Details
     * 
     * @param taskId The task id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsTasksTaskIdGet(taskId: kotlin.String, loc: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsTasksTaskIdGetWithHttpInfo(taskId = taskId, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/objectworkflows/tasks/{task_id}
     * Retrieve Workflow Task Details
     * 
     * @param taskId The task id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsTasksTaskIdGetWithHttpInfo(taskId: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsTasksTaskIdGetRequestConfig(taskId = taskId, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsTasksTaskIdGet
     *
     * @param taskId The task id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsTasksTaskIdGetRequestConfig(taskId: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/objectworkflows/tasks/{task_id}".replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/objectworkflows/{workflow_id}/actions
     * Retrieve Workflow Actions
     * 
     * @param workflowId The workflow id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsWorkflowIdActionsGet(workflowId: kotlin.String, loc: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsWorkflowIdActionsGetWithHttpInfo(workflowId = workflowId, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/objectworkflows/{workflow_id}/actions
     * Retrieve Workflow Actions
     * 
     * @param workflowId The workflow id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsWorkflowIdActionsGetWithHttpInfo(workflowId: kotlin.String, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsWorkflowIdActionsGetRequestConfig(workflowId = workflowId, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsWorkflowIdActionsGet
     *
     * @param workflowId The workflow id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsWorkflowIdActionsGetRequestConfig(workflowId: kotlin.String, loc: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/objectworkflows/{workflow_id}/actions".replace("{"+"workflow_id"+"}", encodeURIComponent(workflowId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/objectworkflows/{workflow_id}/actions/{workflow_action}
     * Retrieve Workflow Action Details
     * 
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: kotlin.String, workflowAction: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetWithHttpInfo(workflowId = workflowId, workflowAction = workflowAction, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/objectworkflows/{workflow_id}/actions/{workflow_action}
     * Retrieve Workflow Action Details
     * 
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetWithHttpInfo(workflowId: kotlin.String, workflowAction: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRequestConfig(workflowId = workflowId, workflowAction = workflowAction, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet
     *
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRequestConfig(workflowId: kotlin.String, workflowAction: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}".replace("{"+"workflow_id"+"}", encodeURIComponent(workflowId.toString())).replace("{"+"workflow_action"+"}", encodeURIComponent(workflowAction.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/objectworkflows/{workflow_id}/actions/{workflow_action}
     * Initiate Workflow Action
     * 
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: kotlin.String, workflowAction: kotlin.String, documentsSys: kotlin.String? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostWithHttpInfo(workflowId = workflowId, workflowAction = workflowAction, documentsSys = documentsSys, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/objectworkflows/{workflow_id}/actions/{workflow_action}
     * Initiate Workflow Action
     * 
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostWithHttpInfo(workflowId: kotlin.String, workflowAction: kotlin.String, documentsSys: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRequestConfig(workflowId = workflowId, workflowAction = workflowAction, documentsSys = documentsSys, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost
     *
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRequestConfig(workflowId: kotlin.String, workflowAction: kotlin.String, documentsSys: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (documentsSys != null) {
                    put("documents__sys", listOf(documentsSys.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}".replace("{"+"workflow_id"+"}", encodeURIComponent(workflowId.toString())).replace("{"+"workflow_action"+"}", encodeURIComponent(workflowAction.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/objectworkflows/{workflow_id}
     * Retrieve Workflow Details
     * 
     * @param workflowId The workflow id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsObjectworkflowsWorkflowIdGet(workflowId: kotlin.String, loc: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsObjectworkflowsWorkflowIdGetWithHttpInfo(workflowId = workflowId, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/objectworkflows/{workflow_id}
     * Retrieve Workflow Details
     * 
     * @param workflowId The workflow id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsObjectworkflowsWorkflowIdGetWithHttpInfo(workflowId: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsObjectworkflowsWorkflowIdGetRequestConfig(workflowId = workflowId, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsObjectworkflowsWorkflowIdGet
     *
     * @param workflowId The workflow id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsObjectworkflowsWorkflowIdGetRequestConfig(workflowId: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/objectworkflows/{workflow_id}".replace("{"+"workflow_id"+"}", encodeURIComponent(workflowId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/picklists
     * Retrieve All Picklists
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsPicklistsGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsPicklistsGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/picklists
     * Retrieve All Picklists
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsPicklistsGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsPicklistsGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsPicklistsGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsPicklistsGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/picklists",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/picklists/{picklist_name}
     * Retrieve Picklist Values
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsPicklistsPicklistNameGet(picklistName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsPicklistsPicklistNameGetWithHttpInfo(picklistName = picklistName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/picklists/{picklist_name}
     * Retrieve Picklist Values
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsPicklistsPicklistNameGetWithHttpInfo(picklistName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsPicklistsPicklistNameGetRequestConfig(picklistName = picklistName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsPicklistsPicklistNameGet
     *
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsPicklistsPicklistNameGetRequestConfig(picklistName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/picklists/{picklist_name}".replace("{"+"picklist_name"+"}", encodeURIComponent(picklistName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/picklists/{picklist_name}/{picklist_value_name}
     * Inactivate Picklist Value
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: kotlin.String, picklistValueName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsPicklistsPicklistNamePicklistValueNameDeleteWithHttpInfo(picklistName = picklistName, picklistValueName = picklistValueName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/picklists/{picklist_name}/{picklist_value_name}
     * Inactivate Picklist Value
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsPicklistsPicklistNamePicklistValueNameDeleteWithHttpInfo(picklistName: kotlin.String, picklistValueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsPicklistsPicklistNamePicklistValueNameDeleteRequestConfig(picklistName = picklistName, picklistValueName = picklistValueName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsPicklistsPicklistNamePicklistValueNameDelete
     *
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsPicklistsPicklistNamePicklistValueNameDeleteRequestConfig(picklistName: kotlin.String, picklistValueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/picklists/{picklist_name}/{picklist_value_name}".replace("{"+"picklist_name"+"}", encodeURIComponent(picklistName.toString())).replace("{"+"picklist_value_name"+"}", encodeURIComponent(picklistValueName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/picklists/{picklist_name}/{picklist_value_name}
     * Update Picklist Value
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: kotlin.String, picklistValueName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsPicklistsPicklistNamePicklistValueNamePutWithHttpInfo(picklistName = picklistName, picklistValueName = picklistValueName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/picklists/{picklist_name}/{picklist_value_name}
     * Update Picklist Value
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsPicklistsPicklistNamePicklistValueNamePutWithHttpInfo(picklistName: kotlin.String, picklistValueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsPicklistsPicklistNamePicklistValueNamePutRequestConfig(picklistName = picklistName, picklistValueName = picklistValueName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsPicklistsPicklistNamePicklistValueNamePut
     *
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsPicklistsPicklistNamePicklistValueNamePutRequestConfig(picklistName: kotlin.String, picklistValueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/picklists/{picklist_name}/{picklist_value_name}".replace("{"+"picklist_name"+"}", encodeURIComponent(picklistName.toString())).replace("{"+"picklist_value_name"+"}", encodeURIComponent(picklistValueName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/picklists/{picklist_name}
     * Create Picklist Values
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsPicklistsPicklistNamePost(picklistName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsPicklistsPicklistNamePostWithHttpInfo(picklistName = picklistName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/picklists/{picklist_name}
     * Create Picklist Values
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsPicklistsPicklistNamePostWithHttpInfo(picklistName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsPicklistsPicklistNamePostRequestConfig(picklistName = picklistName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsPicklistsPicklistNamePost
     *
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsPicklistsPicklistNamePostRequestConfig(picklistName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/picklists/{picklist_name}".replace("{"+"picklist_name"+"}", encodeURIComponent(picklistName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/picklists/{picklist_name}
     * Update Picklist Value Label
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsPicklistsPicklistNamePut(picklistName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsPicklistsPicklistNamePutWithHttpInfo(picklistName = picklistName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/picklists/{picklist_name}
     * Update Picklist Value Label
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsPicklistsPicklistNamePutWithHttpInfo(picklistName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsPicklistsPicklistNamePutRequestConfig(picklistName = picklistName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsPicklistsPicklistNamePut
     *
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsPicklistsPicklistNamePutRequestConfig(picklistName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/picklists/{picklist_name}".replace("{"+"picklist_name"+"}", encodeURIComponent(picklistName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/sandbox/actions/buildproduction
     * Build Production Vault
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxActionsBuildproductionPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxActionsBuildproductionPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/sandbox/actions/buildproduction
     * Build Production Vault
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxActionsBuildproductionPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxActionsBuildproductionPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxActionsBuildproductionPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxActionsBuildproductionPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/sandbox/actions/buildproduction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/sandbox/actions/promoteproduction
     * Promote to Production
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxActionsPromoteproductionPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxActionsPromoteproductionPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/sandbox/actions/promoteproduction
     * Promote to Production
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxActionsPromoteproductionPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxActionsPromoteproductionPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxActionsPromoteproductionPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxActionsPromoteproductionPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/sandbox/actions/promoteproduction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/sandbox/actions/recheckusage
     * Recheck Sandbox Usage Limit
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxActionsRecheckusagePost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxActionsRecheckusagePostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/sandbox/actions/recheckusage
     * Recheck Sandbox Usage Limit
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxActionsRecheckusagePostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxActionsRecheckusagePostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxActionsRecheckusagePost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxActionsRecheckusagePostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/sandbox/actions/recheckusage",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/sandbox/batch/changesize
     * Change Sandbox Size
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxBatchChangesizePost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxBatchChangesizePostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/sandbox/batch/changesize
     * Change Sandbox Size
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxBatchChangesizePostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxBatchChangesizePostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxBatchChangesizePost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxBatchChangesizePostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/sandbox/batch/changesize",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/sandbox/entitlements/set
     * Set Sandbox Entitlements
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxEntitlementsSetPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxEntitlementsSetPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/sandbox/entitlements/set
     * Set Sandbox Entitlements
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxEntitlementsSetPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxEntitlementsSetPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxEntitlementsSetPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxEntitlementsSetPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/sandbox/entitlements/set",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/sandbox
     * Retrieve Sandboxes
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/sandbox
     * Retrieve Sandboxes
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/sandbox",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/sandbox/{name}
     * Delete Sandbox
     * 
     * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxNameDelete(name: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxNameDeleteWithHttpInfo(name = name, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/sandbox/{name}
     * Delete Sandbox
     * 
     * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxNameDeleteWithHttpInfo(name: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxNameDeleteRequestConfig(name = name, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxNameDelete
     *
     * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxNameDeleteRequestConfig(name: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/sandbox/{name}".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/sandbox
     * Create or Refresh Sandbox
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/sandbox
     * Create or Refresh Sandbox
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/sandbox",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/sandbox/snapshot/{api_name}/actions/update
     * Update Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxSnapshotApiNameActionsUpdatePostWithHttpInfo(apiName = apiName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/sandbox/snapshot/{api_name}/actions/update
     * Update Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxSnapshotApiNameActionsUpdatePostWithHttpInfo(apiName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxSnapshotApiNameActionsUpdatePostRequestConfig(apiName = apiName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxSnapshotApiNameActionsUpdatePost
     *
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxSnapshotApiNameActionsUpdatePostRequestConfig(apiName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/sandbox/snapshot/{api_name}/actions/update".replace("{"+"api_name"+"}", encodeURIComponent(apiName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/sandbox/snapshot/{api_name}/actions/upgrade
     * Upgrade Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxSnapshotApiNameActionsUpgradePostWithHttpInfo(apiName = apiName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/sandbox/snapshot/{api_name}/actions/upgrade
     * Upgrade Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxSnapshotApiNameActionsUpgradePostWithHttpInfo(apiName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxSnapshotApiNameActionsUpgradePostRequestConfig(apiName = apiName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxSnapshotApiNameActionsUpgradePost
     *
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxSnapshotApiNameActionsUpgradePostRequestConfig(apiName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/sandbox/snapshot/{api_name}/actions/upgrade".replace("{"+"api_name"+"}", encodeURIComponent(apiName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/sandbox/snapshot/{api_name}
     * Delete Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxSnapshotApiNameDelete(apiName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxSnapshotApiNameDeleteWithHttpInfo(apiName = apiName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/sandbox/snapshot/{api_name}
     * Delete Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxSnapshotApiNameDeleteWithHttpInfo(apiName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxSnapshotApiNameDeleteRequestConfig(apiName = apiName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxSnapshotApiNameDelete
     *
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxSnapshotApiNameDeleteRequestConfig(apiName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/sandbox/snapshot/{api_name}".replace("{"+"api_name"+"}", encodeURIComponent(apiName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/sandbox/snapshot
     * Retrieve Sandbox Snapshots
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxSnapshotGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxSnapshotGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/sandbox/snapshot
     * Retrieve Sandbox Snapshots
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxSnapshotGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxSnapshotGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxSnapshotGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxSnapshotGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/sandbox/snapshot",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/sandbox/snapshot
     * Create Sandbox Snapshot
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxSnapshotPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxSnapshotPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/sandbox/snapshot
     * Create Sandbox Snapshot
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxSnapshotPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxSnapshotPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxSnapshotPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxSnapshotPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/sandbox/snapshot",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/sandbox/{vault_id}/actions/refresh
     * Refresh Sandbox from Snapshot
     * 
     * @param vaultId The Vault ID of the sandbox to be refreshed.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxVaultIdActionsRefreshPost(vaultId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxVaultIdActionsRefreshPostWithHttpInfo(vaultId = vaultId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/sandbox/{vault_id}/actions/refresh
     * Refresh Sandbox from Snapshot
     * 
     * @param vaultId The Vault ID of the sandbox to be refreshed.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxVaultIdActionsRefreshPostWithHttpInfo(vaultId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxVaultIdActionsRefreshPostRequestConfig(vaultId = vaultId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxVaultIdActionsRefreshPost
     *
     * @param vaultId The Vault ID of the sandbox to be refreshed.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxVaultIdActionsRefreshPostRequestConfig(vaultId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/sandbox/{vault_id}/actions/refresh".replace("{"+"vault_id"+"}", encodeURIComponent(vaultId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/sandbox/{vault_id}
     * Retrieve Sandbox Details by ID
     * 
     * @param vaultId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSandboxVaultIdGet(vaultId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSandboxVaultIdGetWithHttpInfo(vaultId = vaultId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/sandbox/{vault_id}
     * Retrieve Sandbox Details by ID
     * 
     * @param vaultId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSandboxVaultIdGetWithHttpInfo(vaultId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSandboxVaultIdGetRequestConfig(vaultId = vaultId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSandboxVaultIdGet
     *
     * @param vaultId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSandboxVaultIdGetRequestConfig(vaultId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/sandbox/{vault_id}".replace("{"+"vault_id"+"}", encodeURIComponent(vaultId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/securitypolicies
     * Retrieve All Security Policies
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSecuritypoliciesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSecuritypoliciesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/securitypolicies
     * Retrieve All Security Policies
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSecuritypoliciesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSecuritypoliciesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSecuritypoliciesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSecuritypoliciesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/securitypolicies",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/securitypolicies/{security_policy_name}
     * Retrieve Security Policy
     * 
     * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsSecuritypoliciesSecurityPolicyNameGetWithHttpInfo(securityPolicyName = securityPolicyName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/securitypolicies/{security_policy_name}
     * Retrieve Security Policy
     * 
     * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsSecuritypoliciesSecurityPolicyNameGetWithHttpInfo(securityPolicyName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsSecuritypoliciesSecurityPolicyNameGetRequestConfig(securityPolicyName = securityPolicyName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsSecuritypoliciesSecurityPolicyNameGet
     *
     * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsSecuritypoliciesSecurityPolicyNameGetRequestConfig(securityPolicyName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/securitypolicies/{security_policy_name}".replace("{"+"security_policy_name"+"}", encodeURIComponent(securityPolicyName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/users/
     * Retrieve All Users
     * 
     * @param vaults Retrieve all users assigned to all Vaults in your domain. (optional)
     * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersGet(vaults: kotlin.String? = null, excludeVaultMembership: kotlin.String? = null, excludeAppLicensing: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersGetWithHttpInfo(vaults = vaults, excludeVaultMembership = excludeVaultMembership, excludeAppLicensing = excludeAppLicensing, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/users/
     * Retrieve All Users
     * 
     * @param vaults Retrieve all users assigned to all Vaults in your domain. (optional)
     * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersGetWithHttpInfo(vaults: kotlin.String?, excludeVaultMembership: kotlin.String?, excludeAppLicensing: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersGetRequestConfig(vaults = vaults, excludeVaultMembership = excludeVaultMembership, excludeAppLicensing = excludeAppLicensing, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersGet
     *
     * @param vaults Retrieve all users assigned to all Vaults in your domain. (optional)
     * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersGetRequestConfig(vaults: kotlin.String?, excludeVaultMembership: kotlin.String?, excludeAppLicensing: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (vaults != null) {
                    put("vaults", listOf(vaults.toString()))
                }
                if (excludeVaultMembership != null) {
                    put("exclude_vault_membership", listOf(excludeVaultMembership.toString()))
                }
                if (excludeAppLicensing != null) {
                    put("exclude_app_licensing", listOf(excludeAppLicensing.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/users/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/users/{id}
     * Retrieve User
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersIdGet(id: kotlin.String, excludeVaultMembership: kotlin.String? = null, excludeAppLicensing: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersIdGetWithHttpInfo(id = id, excludeVaultMembership = excludeVaultMembership, excludeAppLicensing = excludeAppLicensing, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/users/{id}
     * Retrieve User
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersIdGetWithHttpInfo(id: kotlin.String, excludeVaultMembership: kotlin.String?, excludeAppLicensing: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersIdGetRequestConfig(id = id, excludeVaultMembership = excludeVaultMembership, excludeAppLicensing = excludeAppLicensing, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersIdGet
     *
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersIdGetRequestConfig(id: kotlin.String, excludeVaultMembership: kotlin.String?, excludeAppLicensing: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (excludeVaultMembership != null) {
                    put("exclude_vault_membership", listOf(excludeVaultMembership.toString()))
                }
                if (excludeAppLicensing != null) {
                    put("exclude_app_licensing", listOf(excludeAppLicensing.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/users/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/users/{id}/permissions
     * Retrieve User Permissions
     * 
     * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersIdPermissionsGet(id: kotlin.String, filter: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersIdPermissionsGetWithHttpInfo(id = id, filter = filter, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/users/{id}/permissions
     * Retrieve User Permissions
     * 
     * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersIdPermissionsGetWithHttpInfo(id: kotlin.String, filter: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersIdPermissionsGetRequestConfig(id = id, filter = filter, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersIdPermissionsGet
     *
     * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersIdPermissionsGetRequestConfig(id: kotlin.String, filter: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/users/{id}/permissions".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/users/{id}
     * Update Single User
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersIdPut(id: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersIdPutWithHttpInfo(id = id, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/users/{id}
     * Update Single User
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersIdPutWithHttpInfo(id: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersIdPutRequestConfig(id = id, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersIdPut
     *
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersIdPutRequestConfig(id: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/users/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/users/me
     * Validate Session User
     * 
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersMeGet(excludeVaultMembership: kotlin.String? = null, excludeAppLicensing: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersMeGetWithHttpInfo(excludeVaultMembership = excludeVaultMembership, excludeAppLicensing = excludeAppLicensing, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/users/me
     * Validate Session User
     * 
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersMeGetWithHttpInfo(excludeVaultMembership: kotlin.String?, excludeAppLicensing: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersMeGetRequestConfig(excludeVaultMembership = excludeVaultMembership, excludeAppLicensing = excludeAppLicensing, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersMeGet
     *
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersMeGetRequestConfig(excludeVaultMembership: kotlin.String?, excludeAppLicensing: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (excludeVaultMembership != null) {
                    put("exclude_vault_membership", listOf(excludeVaultMembership.toString()))
                }
                if (excludeAppLicensing != null) {
                    put("exclude_app_licensing", listOf(excludeAppLicensing.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/users/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/users/me/password
     * Change My Password
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersMePasswordPost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersMePasswordPostWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/users/me/password
     * Change My Password
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersMePasswordPostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersMePasswordPostRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersMePasswordPost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersMePasswordPostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/users/me/password",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /objects/users/me/permissions
     * Retrieve My User Permissions
     * 
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersMePermissionsGet(filter: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersMePermissionsGetWithHttpInfo(filter = filter, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /objects/users/me/permissions
     * Retrieve My User Permissions
     * 
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersMePermissionsGetWithHttpInfo(filter: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersMePermissionsGetRequestConfig(filter = filter, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersMePermissionsGet
     *
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersMePermissionsGetRequestConfig(filter: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/objects/users/me/permissions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/users/me
     * Update My User
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersMePut(authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersMePutWithHttpInfo(authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/users/me
     * Update My User
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersMePutWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersMePutRequestConfig(authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersMePut
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersMePutRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/users/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/users
     * Create Single User
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/users
     * Create Single User
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/users
     * Update Multiple Users
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersPut(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersPutWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/users
     * Update Multiple Users
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersPutWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersPutRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersPut
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersPutRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /objects/users/{user_id}
     * Disable User
     * 
     * @param userId The user id field value. 
     * @param domain When true, this disables the user account in all vaults in the domain. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersUserIdDelete(userId: kotlin.String, domain: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersUserIdDeleteWithHttpInfo(userId = userId, domain = domain, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /objects/users/{user_id}
     * Disable User
     * 
     * @param userId The user id field value. 
     * @param domain When true, this disables the user account in all vaults in the domain. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersUserIdDeleteWithHttpInfo(userId: kotlin.String, domain: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersUserIdDeleteRequestConfig(userId = userId, domain = domain, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersUserIdDelete
     *
     * @param userId The user id field value. 
     * @param domain When true, this disables the user account in all vaults in the domain. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersUserIdDeleteRequestConfig(userId: kotlin.String, domain: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (domain != null) {
                    put("domain", listOf(domain.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/objects/users/{user_id}".replace("{"+"user_id"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /objects/users/{user_id}/vault_membership/{vault_id}
     * Update Vault Membership
     * 
     * @param userId The user id field value.
     * @param vaultId The system-managed id field value assigned to each vault in the domain.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsUsersUserIdVaultMembershipVaultIdPut(userId: kotlin.String, vaultId: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsUsersUserIdVaultMembershipVaultIdPutWithHttpInfo(userId = userId, vaultId = vaultId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /objects/users/{user_id}/vault_membership/{vault_id}
     * Update Vault Membership
     * 
     * @param userId The user id field value.
     * @param vaultId The system-managed id field value assigned to each vault in the domain.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsUsersUserIdVaultMembershipVaultIdPutWithHttpInfo(userId: kotlin.String, vaultId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsUsersUserIdVaultMembershipVaultIdPutRequestConfig(userId = userId, vaultId = vaultId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsUsersUserIdVaultMembershipVaultIdPut
     *
     * @param userId The user id field value.
     * @param vaultId The system-managed id field value assigned to each vault in the domain.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsUsersUserIdVaultMembershipVaultIdPutRequestConfig(userId: kotlin.String, vaultId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/objects/users/{user_id}/vault_membership/{vault_id}".replace("{"+"user_id"+"}", encodeURIComponent(userId.toString())).replace("{"+"vault_id"+"}", encodeURIComponent(vaultId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/vault/actions/compare
     * Vault Compare
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsVaultActionsComparePost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsVaultActionsComparePostWithHttpInfo(authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/vault/actions/compare
     * Vault Compare
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsVaultActionsComparePostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsVaultActionsComparePostRequestConfig(authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsVaultActionsComparePost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsVaultActionsComparePostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/vault/actions/compare",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /objects/vault/actions/configreport
     * Vault Configuration Report
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun objectsVaultActionsConfigreportPost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = objectsVaultActionsConfigreportPostWithHttpInfo(authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /objects/vault/actions/configreport
     * Vault Configuration Report
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun objectsVaultActionsConfigreportPostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = objectsVaultActionsConfigreportPostRequestConfig(authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation objectsVaultActionsConfigreportPost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun objectsVaultActionsConfigreportPostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/objects/vault/actions/configreport",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /query/components
     * Component Definition Query
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun queryComponentsPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = queryComponentsPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /query/components
     * Component Definition Query
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun queryComponentsPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = queryComponentsPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation queryComponentsPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun queryComponentsPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/query/components",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /query/{next_page}
     * Next Page URL
     * 
     * @param nextPage 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun queryNextPagePost(nextPage: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIDescribeQuery: kotlin.Boolean? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = queryNextPagePostWithHttpInfo(nextPage = nextPage, authorization = authorization, accept = accept, xVaultAPIDescribeQuery = xVaultAPIDescribeQuery, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /query/{next_page}
     * Next Page URL
     * 
     * @param nextPage 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun queryNextPagePostWithHttpInfo(nextPage: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIDescribeQuery: kotlin.Boolean?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = queryNextPagePostRequestConfig(nextPage = nextPage, authorization = authorization, accept = accept, xVaultAPIDescribeQuery = xVaultAPIDescribeQuery, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation queryNextPagePost
     *
     * @param nextPage 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun queryNextPagePostRequestConfig(nextPage: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIDescribeQuery: kotlin.Boolean?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIDescribeQuery?.apply { localVariableHeaders["X-VaultAPI-DescribeQuery"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/query/{next_page}".replace("{"+"next_page"+"}", encodeURIComponent(nextPage.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /query
     * Submitting a Query
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun queryPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIDescribeQuery: kotlin.Boolean? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = queryPostWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIDescribeQuery = xVaultAPIDescribeQuery, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /query
     * Submitting a Query
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun queryPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIDescribeQuery: kotlin.Boolean?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = queryPostRequestConfig(authorization = authorization, accept = accept, xVaultAPIDescribeQuery = xVaultAPIDescribeQuery, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation queryPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun queryPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIDescribeQuery: kotlin.Boolean?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIDescribeQuery?.apply { localVariableHeaders["X-VaultAPI-DescribeQuery"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/query",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /query/{previous_page}
     * Previous Page URL
     * 
     * @param previousPage 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun queryPreviousPagePost(previousPage: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIDescribeQuery: kotlin.Boolean? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = queryPreviousPagePostWithHttpInfo(previousPage = previousPage, authorization = authorization, accept = accept, xVaultAPIDescribeQuery = xVaultAPIDescribeQuery, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /query/{previous_page}
     * Previous Page URL
     * 
     * @param previousPage 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun queryPreviousPagePostWithHttpInfo(previousPage: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIDescribeQuery: kotlin.Boolean?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = queryPreviousPagePostRequestConfig(previousPage = previousPage, authorization = authorization, accept = accept, xVaultAPIDescribeQuery = xVaultAPIDescribeQuery, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation queryPreviousPagePost
     *
     * @param previousPage 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun queryPreviousPagePostRequestConfig(previousPage: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIDescribeQuery: kotlin.Boolean?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIDescribeQuery?.apply { localVariableHeaders["X-VaultAPI-DescribeQuery"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/query/{previous_page}".replace("{"+"previous_page"+"}", encodeURIComponent(previousPage.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /scim/v2/Me
     * Retrieve Current User with SCIM
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2MeGet(attributes: kotlin.String? = null, excludedAttributes: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2MeGetWithHttpInfo(attributes = attributes, excludedAttributes = excludedAttributes, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /scim/v2/Me
     * Retrieve Current User with SCIM
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2MeGetWithHttpInfo(attributes: kotlin.String?, excludedAttributes: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2MeGetRequestConfig(attributes = attributes, excludedAttributes = excludedAttributes, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2MeGet
     *
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2MeGetRequestConfig(attributes: kotlin.String?, excludedAttributes: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (attributes != null) {
                    put("attributes", listOf(attributes.toString()))
                }
                if (excludedAttributes != null) {
                    put("excludedAttributes", listOf(excludedAttributes.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scim/v2/Me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /scim/v2/Me
     * Update Current User with SCIM
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2MePut(attributes: kotlin.String? = null, excludedAttributes: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2MePutWithHttpInfo(attributes = attributes, excludedAttributes = excludedAttributes, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /scim/v2/Me
     * Update Current User with SCIM
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2MePutWithHttpInfo(attributes: kotlin.String?, excludedAttributes: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2MePutRequestConfig(attributes = attributes, excludedAttributes = excludedAttributes, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2MePut
     *
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2MePutRequestConfig(attributes: kotlin.String?, excludedAttributes: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (attributes != null) {
                    put("attributes", listOf(attributes.toString()))
                }
                if (excludedAttributes != null) {
                    put("excludedAttributes", listOf(excludedAttributes.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/scim/v2/Me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /scim/v2/ResourceTypes
     * Retrieve All SCIM Resource Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2ResourceTypesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2ResourceTypesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /scim/v2/ResourceTypes
     * Retrieve All SCIM Resource Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2ResourceTypesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2ResourceTypesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2ResourceTypesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2ResourceTypesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scim/v2/ResourceTypes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /scim/v2/ResourceTypes/{type}
     * Retrieve Single SCIM Resource Type
     * 
     * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2ResourceTypesTypeGet(type: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2ResourceTypesTypeGetWithHttpInfo(type = type, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /scim/v2/ResourceTypes/{type}
     * Retrieve Single SCIM Resource Type
     * 
     * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2ResourceTypesTypeGetWithHttpInfo(type: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2ResourceTypesTypeGetRequestConfig(type = type, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2ResourceTypesTypeGet
     *
     * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2ResourceTypesTypeGetRequestConfig(type: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scim/v2/ResourceTypes/{type}".replace("{"+"type"+"}", encodeURIComponent(type.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /scim/v2/Schemas
     * Retrieve All SCIM Schema Information
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2SchemasGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2SchemasGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /scim/v2/Schemas
     * Retrieve All SCIM Schema Information
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2SchemasGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2SchemasGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2SchemasGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2SchemasGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scim/v2/Schemas",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /scim/v2/Schemas/{id}
     * Retrieve Single SCIM Schema Information
     * 
     * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2SchemasIdGet(id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2SchemasIdGetWithHttpInfo(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /scim/v2/Schemas/{id}
     * Retrieve Single SCIM Schema Information
     * 
     * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2SchemasIdGetWithHttpInfo(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2SchemasIdGetRequestConfig(id = id, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2SchemasIdGet
     *
     * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2SchemasIdGetRequestConfig(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scim/v2/Schemas/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /scim/v2/ServiceProviderConfig
     * Retrieve SCIM Provider
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2ServiceProviderConfigGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2ServiceProviderConfigGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /scim/v2/ServiceProviderConfig
     * Retrieve SCIM Provider
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2ServiceProviderConfigGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2ServiceProviderConfigGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2ServiceProviderConfigGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2ServiceProviderConfigGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scim/v2/ServiceProviderConfig",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /scim/v2/{type}
     * Retrieve SCIM Resources
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2TypeGet(type: kotlin.String, filter: kotlin.String? = null, attributes: kotlin.String? = null, excludedAttributes: kotlin.String? = null, sortBy: kotlin.String? = null, sortOrder: kotlin.String? = null, startIndex: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2TypeGetWithHttpInfo(type = type, filter = filter, attributes = attributes, excludedAttributes = excludedAttributes, sortBy = sortBy, sortOrder = sortOrder, startIndex = startIndex, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /scim/v2/{type}
     * Retrieve SCIM Resources
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2TypeGetWithHttpInfo(type: kotlin.String, filter: kotlin.String?, attributes: kotlin.String?, excludedAttributes: kotlin.String?, sortBy: kotlin.String?, sortOrder: kotlin.String?, startIndex: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2TypeGetRequestConfig(type = type, filter = filter, attributes = attributes, excludedAttributes = excludedAttributes, sortBy = sortBy, sortOrder = sortOrder, startIndex = startIndex, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2TypeGet
     *
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2TypeGetRequestConfig(type: kotlin.String, filter: kotlin.String?, attributes: kotlin.String?, excludedAttributes: kotlin.String?, sortBy: kotlin.String?, sortOrder: kotlin.String?, startIndex: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (attributes != null) {
                    put("attributes", listOf(attributes.toString()))
                }
                if (excludedAttributes != null) {
                    put("excludedAttributes", listOf(excludedAttributes.toString()))
                }
                if (sortBy != null) {
                    put("sortBy", listOf(sortBy.toString()))
                }
                if (sortOrder != null) {
                    put("sortOrder", listOf(sortOrder.toString()))
                }
                if (startIndex != null) {
                    put("startIndex", listOf(startIndex.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scim/v2/{type}".replace("{"+"type"+"}", encodeURIComponent(type.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /scim/v2/{type}/{id}
     * Retrieve Single SCIM Resource
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2TypeIdGet(type: kotlin.String, id: kotlin.String, attributes: kotlin.String? = null, excludedAttributes: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2TypeIdGetWithHttpInfo(type = type, id = id, attributes = attributes, excludedAttributes = excludedAttributes, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /scim/v2/{type}/{id}
     * Retrieve Single SCIM Resource
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2TypeIdGetWithHttpInfo(type: kotlin.String, id: kotlin.String, attributes: kotlin.String?, excludedAttributes: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2TypeIdGetRequestConfig(type = type, id = id, attributes = attributes, excludedAttributes = excludedAttributes, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2TypeIdGet
     *
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2TypeIdGetRequestConfig(type: kotlin.String, id: kotlin.String, attributes: kotlin.String?, excludedAttributes: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (attributes != null) {
                    put("attributes", listOf(attributes.toString()))
                }
                if (excludedAttributes != null) {
                    put("excludedAttributes", listOf(excludedAttributes.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scim/v2/{type}/{id}".replace("{"+"type"+"}", encodeURIComponent(type.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /scim/v2/Users
     * Retrieve All Users with SCIM
     * 
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending. (optional)
     * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2UsersGet(filter: kotlin.String? = null, attributes: kotlin.String? = null, excludedAttributes: kotlin.String? = null, sortBy: kotlin.String? = null, sortOrder: kotlin.String? = null, count: kotlin.String? = null, startIndex: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2UsersGetWithHttpInfo(filter = filter, attributes = attributes, excludedAttributes = excludedAttributes, sortBy = sortBy, sortOrder = sortOrder, count = count, startIndex = startIndex, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /scim/v2/Users
     * Retrieve All Users with SCIM
     * 
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending. (optional)
     * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2UsersGetWithHttpInfo(filter: kotlin.String?, attributes: kotlin.String?, excludedAttributes: kotlin.String?, sortBy: kotlin.String?, sortOrder: kotlin.String?, count: kotlin.String?, startIndex: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2UsersGetRequestConfig(filter = filter, attributes = attributes, excludedAttributes = excludedAttributes, sortBy = sortBy, sortOrder = sortOrder, count = count, startIndex = startIndex, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2UsersGet
     *
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending. (optional)
     * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2UsersGetRequestConfig(filter: kotlin.String?, attributes: kotlin.String?, excludedAttributes: kotlin.String?, sortBy: kotlin.String?, sortOrder: kotlin.String?, count: kotlin.String?, startIndex: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (attributes != null) {
                    put("attributes", listOf(attributes.toString()))
                }
                if (excludedAttributes != null) {
                    put("excludedAttributes", listOf(excludedAttributes.toString()))
                }
                if (sortBy != null) {
                    put("sortBy", listOf(sortBy.toString()))
                }
                if (sortOrder != null) {
                    put("sortOrder", listOf(sortOrder.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (startIndex != null) {
                    put("startIndex", listOf(startIndex.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scim/v2/Users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /scim/v2/Users/{id}
     * Retrieve Single User with SCIM
     * 
     * @param id The id of the user you wish to update.
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2UsersIdGet(id: kotlin.String, filter: kotlin.String? = null, attributes: kotlin.String? = null, excludedAttributes: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2UsersIdGetWithHttpInfo(id = id, filter = filter, attributes = attributes, excludedAttributes = excludedAttributes, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /scim/v2/Users/{id}
     * Retrieve Single User with SCIM
     * 
     * @param id The id of the user you wish to update.
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2UsersIdGetWithHttpInfo(id: kotlin.String, filter: kotlin.String?, attributes: kotlin.String?, excludedAttributes: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2UsersIdGetRequestConfig(id = id, filter = filter, attributes = attributes, excludedAttributes = excludedAttributes, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2UsersIdGet
     *
     * @param id The id of the user you wish to update.
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2UsersIdGetRequestConfig(id: kotlin.String, filter: kotlin.String?, attributes: kotlin.String?, excludedAttributes: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (attributes != null) {
                    put("attributes", listOf(attributes.toString()))
                }
                if (excludedAttributes != null) {
                    put("excludedAttributes", listOf(excludedAttributes.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scim/v2/Users/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /scim/v2/Users/{id}
     * Update User with SCIM
     * 
     * @param id The id of the user you wish to update.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2UsersIdPut(id: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2UsersIdPutWithHttpInfo(id = id, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /scim/v2/Users/{id}
     * Update User with SCIM
     * 
     * @param id The id of the user you wish to update.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2UsersIdPutWithHttpInfo(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2UsersIdPutRequestConfig(id = id, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2UsersIdPut
     *
     * @param id The id of the user you wish to update.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2UsersIdPutRequestConfig(id: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/scim/v2/Users/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /scim/v2/Users
     * Create User with SCIM
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scimV2UsersPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = scimV2UsersPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /scim/v2/Users
     * Create User with SCIM
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scimV2UsersPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = scimV2UsersPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scimV2UsersPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun scimV2UsersPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/scim/v2/Users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/certificate/{cert_id}
     * Retrieve Signing Certificate
     * 
     * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesCertificateCertIdGet(certId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesCertificateCertIdGetWithHttpInfo(certId = certId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/certificate/{cert_id}
     * Retrieve Signing Certificate
     * 
     * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesCertificateCertIdGetWithHttpInfo(certId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesCertificateCertIdGetRequestConfig(certId = certId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesCertificateCertIdGet
     *
     * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesCertificateCertIdGetRequestConfig(certId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/certificate/{cert_id}".replace("{"+"cert_id"+"}", encodeURIComponent(certId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /services/configuration_mode/actions/disable
     * Disable Configuration Mode
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesConfigurationModeActionsDisablePost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesConfigurationModeActionsDisablePostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /services/configuration_mode/actions/disable
     * Disable Configuration Mode
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesConfigurationModeActionsDisablePostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesConfigurationModeActionsDisablePostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesConfigurationModeActionsDisablePost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesConfigurationModeActionsDisablePostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/services/configuration_mode/actions/disable",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /services/configuration_mode/actions/enable
     * Enable Configuration Mode
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesConfigurationModeActionsEnablePost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesConfigurationModeActionsEnablePostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /services/configuration_mode/actions/enable
     * Enable Configuration Mode
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesConfigurationModeActionsEnablePostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesConfigurationModeActionsEnablePostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesConfigurationModeActionsEnablePost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesConfigurationModeActionsEnablePostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/services/configuration_mode/actions/enable",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/directdata/files
     * Retrieve Available Direct Data Files
     * 
     * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files. (optional)
     * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time. (optional)
     * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesDirectdataFilesGet(extractType: kotlin.String? = null, startTime: kotlin.Int? = null, stopTime: kotlin.Int? = null, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesDirectdataFilesGetWithHttpInfo(extractType = extractType, startTime = startTime, stopTime = stopTime, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/directdata/files
     * Retrieve Available Direct Data Files
     * 
     * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files. (optional)
     * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time. (optional)
     * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesDirectdataFilesGetWithHttpInfo(extractType: kotlin.String?, startTime: kotlin.Int?, stopTime: kotlin.Int?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesDirectdataFilesGetRequestConfig(extractType = extractType, startTime = startTime, stopTime = stopTime, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesDirectdataFilesGet
     *
     * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files. (optional)
     * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time. (optional)
     * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesDirectdataFilesGetRequestConfig(extractType: kotlin.String?, startTime: kotlin.Int?, stopTime: kotlin.Int?, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (extractType != null) {
                    put("extract_type", listOf(extractType.toString()))
                }
                if (startTime != null) {
                    put("start_time", listOf(startTime.toString()))
                }
                if (stopTime != null) {
                    put("stop_time", listOf(stopTime.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/directdata/files",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/directdata/files/{name}
     * Download Direct Data File
     * 
     * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesDirectdataFilesNameGet(name: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesDirectdataFilesNameGetWithHttpInfo(name = name, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/directdata/files/{name}
     * Download Direct Data File
     * 
     * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesDirectdataFilesNameGetWithHttpInfo(name: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesDirectdataFilesNameGetRequestConfig(name = name, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesDirectdataFilesNameGet
     *
     * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesDirectdataFilesNameGetRequestConfig(name: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/directdata/files/{name}".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/file_staging/items/content/{item}
     * Download Item Content
     * 
     * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingItemsContentItemGet(item: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, range: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingItemsContentItemGetWithHttpInfo(item = item, authorization = authorization, accept = accept, range = range, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/file_staging/items/content/{item}
     * Download Item Content
     * 
     * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingItemsContentItemGetWithHttpInfo(item: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, range: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingItemsContentItemGetRequestConfig(item = item, authorization = authorization, accept = accept, range = range, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingItemsContentItemGet
     *
     * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingItemsContentItemGetRequestConfig(item: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, range: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        range?.apply { localVariableHeaders["Range"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/file_staging/items/content/{item}".replace("{"+"item"+"}", encodeURIComponent(item.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /services/file_staging/items/{item}
     * Delete File or Folder
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingItemsItemDelete(item: kotlin.String, recursive: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingItemsItemDeleteWithHttpInfo(item = item, recursive = recursive, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /services/file_staging/items/{item}
     * Delete File or Folder
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingItemsItemDeleteWithHttpInfo(item: kotlin.String, recursive: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingItemsItemDeleteRequestConfig(item = item, recursive = recursive, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingItemsItemDelete
     *
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingItemsItemDeleteRequestConfig(item: kotlin.String, recursive: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (recursive != null) {
                    put("recursive", listOf(recursive.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/services/file_staging/items/{item}".replace("{"+"item"+"}", encodeURIComponent(item.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/file_staging/items/{item}
     * List Items at a Path
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false. (optional)
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingItemsItemGet(item: kotlin.String, recursive: kotlin.String? = null, limit: kotlin.String? = null, formatResult: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingItemsItemGetWithHttpInfo(item = item, recursive = recursive, limit = limit, formatResult = formatResult, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/file_staging/items/{item}
     * List Items at a Path
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false. (optional)
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingItemsItemGetWithHttpInfo(item: kotlin.String, recursive: kotlin.String?, limit: kotlin.String?, formatResult: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingItemsItemGetRequestConfig(item = item, recursive = recursive, limit = limit, formatResult = formatResult, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingItemsItemGet
     *
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false. (optional)
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingItemsItemGetRequestConfig(item: kotlin.String, recursive: kotlin.String?, limit: kotlin.String?, formatResult: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (recursive != null) {
                    put("recursive", listOf(recursive.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (formatResult != null) {
                    put("format_result", listOf(formatResult.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/file_staging/items/{item}".replace("{"+"item"+"}", encodeURIComponent(item.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /services/file_staging/items/{item}
     * Update Folder or File
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingItemsItemPut(item: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingItemsItemPutWithHttpInfo(item = item, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /services/file_staging/items/{item}
     * Update Folder or File
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingItemsItemPutWithHttpInfo(item: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingItemsItemPutRequestConfig(item = item, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingItemsItemPut
     *
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingItemsItemPutRequestConfig(item: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/services/file_staging/items/{item}".replace("{"+"item"+"}", encodeURIComponent(item.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /services/file_staging/items
     * Create Folder or File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingItemsPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentMD5: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingItemsPostWithHttpInfo(authorization = authorization, accept = accept, contentMD5 = contentMD5, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /services/file_staging/items
     * Create Folder or File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingItemsPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentMD5: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingItemsPostRequestConfig(authorization = authorization, accept = accept, contentMD5 = contentMD5, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingItemsPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingItemsPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentMD5: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentMD5?.apply { localVariableHeaders["Content-MD5"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/services/file_staging/items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/file_staging/upload/
     * List Upload Sessions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingUploadGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingUploadGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/file_staging/upload/
     * List Upload Sessions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingUploadGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingUploadGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingUploadGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingUploadGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/file_staging/upload/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /services/file_staging/upload
     * Create Resumable Upload Session
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingUploadPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingUploadPostWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /services/file_staging/upload
     * Create Resumable Upload Session
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingUploadPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingUploadPostRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingUploadPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingUploadPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/services/file_staging/upload",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /services/file_staging/upload/{upload_session_id}
     * Abort Upload Session
     * 
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingUploadUploadSessionIdDeleteWithHttpInfo(uploadSessionId = uploadSessionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /services/file_staging/upload/{upload_session_id}
     * Abort Upload Session
     * 
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingUploadUploadSessionIdDeleteWithHttpInfo(uploadSessionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingUploadUploadSessionIdDeleteRequestConfig(uploadSessionId = uploadSessionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingUploadUploadSessionIdDelete
     *
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingUploadUploadSessionIdDeleteRequestConfig(uploadSessionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/services/file_staging/upload/{upload_session_id}".replace("{"+"upload_session_id"+"}", encodeURIComponent(uploadSessionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/file_staging/upload/{upload_session_id}
     * Get Upload Session Details
     * 
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingUploadUploadSessionIdGetWithHttpInfo(uploadSessionId = uploadSessionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/file_staging/upload/{upload_session_id}
     * Get Upload Session Details
     * 
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingUploadUploadSessionIdGetWithHttpInfo(uploadSessionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingUploadUploadSessionIdGetRequestConfig(uploadSessionId = uploadSessionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingUploadUploadSessionIdGet
     *
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingUploadUploadSessionIdGetRequestConfig(uploadSessionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/file_staging/upload/{upload_session_id}".replace("{"+"upload_session_id"+"}", encodeURIComponent(uploadSessionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/file_staging/upload/{upload_session_id}/parts
     * List File Parts Uploaded to Session
     * 
     * @param uploadSessionId 
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: kotlin.String, limit: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingUploadUploadSessionIdPartsGetWithHttpInfo(uploadSessionId = uploadSessionId, limit = limit, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/file_staging/upload/{upload_session_id}/parts
     * List File Parts Uploaded to Session
     * 
     * @param uploadSessionId 
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingUploadUploadSessionIdPartsGetWithHttpInfo(uploadSessionId: kotlin.String, limit: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingUploadUploadSessionIdPartsGetRequestConfig(uploadSessionId = uploadSessionId, limit = limit, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingUploadUploadSessionIdPartsGet
     *
     * @param uploadSessionId 
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingUploadUploadSessionIdPartsGetRequestConfig(uploadSessionId: kotlin.String, limit: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/file_staging/upload/{upload_session_id}/parts".replace("{"+"upload_session_id"+"}", encodeURIComponent(uploadSessionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /services/file_staging/upload/{upload_session_id}
     * Commit Upload Session
     * 
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingUploadUploadSessionIdPostWithHttpInfo(uploadSessionId = uploadSessionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /services/file_staging/upload/{upload_session_id}
     * Commit Upload Session
     * 
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingUploadUploadSessionIdPostWithHttpInfo(uploadSessionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingUploadUploadSessionIdPostRequestConfig(uploadSessionId = uploadSessionId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingUploadUploadSessionIdPost
     *
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingUploadUploadSessionIdPostRequestConfig(uploadSessionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/services/file_staging/upload/{upload_session_id}".replace("{"+"upload_session_id"+"}", encodeURIComponent(uploadSessionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /services/file_staging/upload/{upload_session_id}
     * Upload to a Session
     * 
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2. (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIFilePartNumber: kotlin.String? = null, contentMD5: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesFileStagingUploadUploadSessionIdPutWithHttpInfo(uploadSessionId = uploadSessionId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIFilePartNumber = xVaultAPIFilePartNumber, contentMD5 = contentMD5, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /services/file_staging/upload/{upload_session_id}
     * Upload to a Session
     * 
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2. (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesFileStagingUploadUploadSessionIdPutWithHttpInfo(uploadSessionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIFilePartNumber: kotlin.String?, contentMD5: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesFileStagingUploadUploadSessionIdPutRequestConfig(uploadSessionId = uploadSessionId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIFilePartNumber = xVaultAPIFilePartNumber, contentMD5 = contentMD5, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesFileStagingUploadUploadSessionIdPut
     *
     * @param uploadSessionId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2. (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesFileStagingUploadUploadSessionIdPutRequestConfig(uploadSessionId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIFilePartNumber: kotlin.String?, contentMD5: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIFilePartNumber?.apply { localVariableHeaders["X-VaultAPI-FilePartNumber"] = this.toString() }
        contentMD5?.apply { localVariableHeaders["Content-MD5"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/services/file_staging/upload/{upload_session_id}".replace("{"+"upload_session_id"+"}", encodeURIComponent(uploadSessionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/jobs/histories
     * Retrieve Job Histories
     * 
     * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesJobsHistoriesGet(startDate: kotlin.String? = null, endDate: kotlin.String? = null, status: kotlin.String? = null, limit: kotlin.String? = null, offset: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesJobsHistoriesGetWithHttpInfo(startDate = startDate, endDate = endDate, status = status, limit = limit, offset = offset, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/jobs/histories
     * Retrieve Job Histories
     * 
     * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesJobsHistoriesGetWithHttpInfo(startDate: kotlin.String?, endDate: kotlin.String?, status: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesJobsHistoriesGetRequestConfig(startDate = startDate, endDate = endDate, status = status, limit = limit, offset = offset, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesJobsHistoriesGet
     *
     * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesJobsHistoriesGetRequestConfig(startDate: kotlin.String?, endDate: kotlin.String?, status: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/jobs/histories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/jobs/{job_id}/errors
     * Retrieve Import Bulk Translation File Job Errors
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesJobsJobIdErrorsGet(jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesJobsJobIdErrorsGetWithHttpInfo(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/jobs/{job_id}/errors
     * Retrieve Import Bulk Translation File Job Errors
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesJobsJobIdErrorsGetWithHttpInfo(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesJobsJobIdErrorsGetRequestConfig(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesJobsJobIdErrorsGet
     *
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesJobsJobIdErrorsGetRequestConfig(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/jobs/{job_id}/errors".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/jobs/{job_id}
     * Retrieve Job Status
     * 
     * @param jobId The ID of the job, returned from the original job request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesJobsJobIdGet(jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesJobsJobIdGetWithHttpInfo(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/jobs/{job_id}
     * Retrieve Job Status
     * 
     * @param jobId The ID of the job, returned from the original job request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesJobsJobIdGetWithHttpInfo(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesJobsJobIdGetRequestConfig(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesJobsJobIdGet
     *
     * @param jobId The ID of the job, returned from the original job request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesJobsJobIdGetRequestConfig(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/jobs/{job_id}".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/jobs/{job_id}/summary
     * Retrieve Import Bulk Translation File Job Summary
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesJobsJobIdSummaryGet(jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesJobsJobIdSummaryGetWithHttpInfo(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/jobs/{job_id}/summary
     * Retrieve Import Bulk Translation File Job Summary
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesJobsJobIdSummaryGetWithHttpInfo(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesJobsJobIdSummaryGetRequestConfig(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesJobsJobIdSummaryGet
     *
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesJobsJobIdSummaryGetRequestConfig(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/jobs/{job_id}/summary".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/jobs/{job_id}/tasks
     * Retrieve SDK Job Tasks
     * 
     * @param jobId The ID of the SDK job, returned from the original job request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesJobsJobIdTasksGet(jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesJobsJobIdTasksGetWithHttpInfo(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/jobs/{job_id}/tasks
     * Retrieve SDK Job Tasks
     * 
     * @param jobId The ID of the SDK job, returned from the original job request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesJobsJobIdTasksGetWithHttpInfo(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesJobsJobIdTasksGetRequestConfig(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesJobsJobIdTasksGet
     *
     * @param jobId The ID of the SDK job, returned from the original job request.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesJobsJobIdTasksGetRequestConfig(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/jobs/{job_id}/tasks".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/jobs/monitors
     * Retrieve Job Monitors
     * 
     * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesJobsMonitorsGet(startDate: kotlin.String? = null, endDate: kotlin.String? = null, status: kotlin.String? = null, limit: kotlin.String? = null, offset: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesJobsMonitorsGetWithHttpInfo(startDate = startDate, endDate = endDate, status = status, limit = limit, offset = offset, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/jobs/monitors
     * Retrieve Job Monitors
     * 
     * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesJobsMonitorsGetWithHttpInfo(startDate: kotlin.String?, endDate: kotlin.String?, status: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesJobsMonitorsGetRequestConfig(startDate = startDate, endDate = endDate, status = status, limit = limit, offset = offset, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesJobsMonitorsGet
     *
     * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesJobsMonitorsGetRequestConfig(startDate: kotlin.String?, endDate: kotlin.String?, status: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/jobs/monitors",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /services/jobs/start_now/{job_id}
     * Start Job
     * 
     * @param jobId The ID of the scheduled job instance to start.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesJobsStartNowJobIdPost(jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesJobsStartNowJobIdPostWithHttpInfo(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /services/jobs/start_now/{job_id}
     * Start Job
     * 
     * @param jobId The ID of the scheduled job instance to start.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesJobsStartNowJobIdPostWithHttpInfo(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesJobsStartNowJobIdPostRequestConfig(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesJobsStartNowJobIdPost
     *
     * @param jobId The ID of the scheduled job instance to start.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesJobsStartNowJobIdPostRequestConfig(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/services/jobs/start_now/{job_id}".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /services/loader/extract
     * Extract Data Files
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesLoaderExtractPost(authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesLoaderExtractPostWithHttpInfo(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /services/loader/extract
     * Extract Data Files
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesLoaderExtractPostWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesLoaderExtractPostRequestConfig(authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesLoaderExtractPost
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesLoaderExtractPostRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/services/loader/extract",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/loader/{job_id}/tasks/{task_id}/failurelog
     * Retrieve Load Failure Log Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesLoaderJobIdTasksTaskIdFailurelogGetWithHttpInfo(jobId = jobId, taskId = taskId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/loader/{job_id}/tasks/{task_id}/failurelog
     * Retrieve Load Failure Log Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesLoaderJobIdTasksTaskIdFailurelogGetWithHttpInfo(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesLoaderJobIdTasksTaskIdFailurelogGetRequestConfig(jobId = jobId, taskId = taskId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesLoaderJobIdTasksTaskIdFailurelogGet
     *
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesLoaderJobIdTasksTaskIdFailurelogGetRequestConfig(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/loader/{job_id}/tasks/{task_id}/failurelog".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())).replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/loader/{job_id}/tasks/{task_id}/results
     * Retrieve Loader Extract Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesLoaderJobIdTasksTaskIdResultsGet(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesLoaderJobIdTasksTaskIdResultsGetWithHttpInfo(jobId = jobId, taskId = taskId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/loader/{job_id}/tasks/{task_id}/results
     * Retrieve Loader Extract Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesLoaderJobIdTasksTaskIdResultsGetWithHttpInfo(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesLoaderJobIdTasksTaskIdResultsGetRequestConfig(jobId = jobId, taskId = taskId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesLoaderJobIdTasksTaskIdResultsGet
     *
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesLoaderJobIdTasksTaskIdResultsGetRequestConfig(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/loader/{job_id}/tasks/{task_id}/results".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())).replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/loader/{job_id}/tasks/{task_id}/results/renditions
     * Retrieve Loader Extract Renditions Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesLoaderJobIdTasksTaskIdResultsRenditionsGetWithHttpInfo(jobId = jobId, taskId = taskId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/loader/{job_id}/tasks/{task_id}/results/renditions
     * Retrieve Loader Extract Renditions Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesLoaderJobIdTasksTaskIdResultsRenditionsGetWithHttpInfo(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesLoaderJobIdTasksTaskIdResultsRenditionsGetRequestConfig(jobId = jobId, taskId = taskId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesLoaderJobIdTasksTaskIdResultsRenditionsGet
     *
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesLoaderJobIdTasksTaskIdResultsRenditionsGetRequestConfig(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/loader/{job_id}/tasks/{task_id}/results/renditions".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())).replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/loader/{job_id}/tasks/{task_id}/successlog
     * Retrieve Load Success Log Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesLoaderJobIdTasksTaskIdSuccesslogGetWithHttpInfo(jobId = jobId, taskId = taskId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/loader/{job_id}/tasks/{task_id}/successlog
     * Retrieve Load Success Log Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesLoaderJobIdTasksTaskIdSuccesslogGetWithHttpInfo(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesLoaderJobIdTasksTaskIdSuccesslogGetRequestConfig(jobId = jobId, taskId = taskId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesLoaderJobIdTasksTaskIdSuccesslogGet
     *
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesLoaderJobIdTasksTaskIdSuccesslogGetRequestConfig(jobId: kotlin.String, taskId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/loader/{job_id}/tasks/{task_id}/successlog".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())).replace("{"+"task_id"+"}", encodeURIComponent(taskId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /services/loader/load
     * Load Data Objects
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesLoaderLoadPost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesLoaderLoadPostWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /services/loader/load
     * Load Data Objects
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesLoaderLoadPostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesLoaderLoadPostRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesLoaderLoadPost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesLoaderLoadPostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/services/loader/load",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /services/package/actions/validate
     * Validate Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesPackageActionsValidatePost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesPackageActionsValidatePostWithHttpInfo(authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /services/package/actions/validate
     * Validate Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesPackageActionsValidatePostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesPackageActionsValidatePostRequestConfig(authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesPackageActionsValidatePost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesPackageActionsValidatePostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/services/package/actions/validate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /services/package
     * Export Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesPackagePost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesPackagePostWithHttpInfo(authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /services/package
     * Export Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesPackagePostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesPackagePostRequestConfig(authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesPackagePost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesPackagePostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/services/package",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /services/package
     * Import Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesPackagePut(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesPackagePutWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /services/package
     * Import Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesPackagePutWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesPackagePutRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesPackagePut
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesPackagePutRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/services/package",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/queues
     * Retrieve All Queues
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesQueuesGet(authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesQueuesGetWithHttpInfo(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/queues
     * Retrieve All Queues
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesQueuesGetWithHttpInfo(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesQueuesGetRequestConfig(authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesQueuesGet
     *
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesQueuesGetRequestConfig(authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/queues",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /services/queues/{queue_name}/actions/disable_delivery
     * Disable Delivery
     * 
     * @param queueName The name of a specific Queue.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesQueuesQueueNameActionsDisableDeliveryPutWithHttpInfo(queueName = queueName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /services/queues/{queue_name}/actions/disable_delivery
     * Disable Delivery
     * 
     * @param queueName The name of a specific Queue.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesQueuesQueueNameActionsDisableDeliveryPutWithHttpInfo(queueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesQueuesQueueNameActionsDisableDeliveryPutRequestConfig(queueName = queueName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesQueuesQueueNameActionsDisableDeliveryPut
     *
     * @param queueName The name of a specific Queue.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesQueuesQueueNameActionsDisableDeliveryPutRequestConfig(queueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/services/queues/{queue_name}/actions/disable_delivery".replace("{"+"queue_name"+"}", encodeURIComponent(queueName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /services/queues/{queue_name}/actions/enable_delivery
     * Enable Delivery
     * 
     * @param queueName The name of a specific Queue.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesQueuesQueueNameActionsEnableDeliveryPutWithHttpInfo(queueName = queueName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /services/queues/{queue_name}/actions/enable_delivery
     * Enable Delivery
     * 
     * @param queueName The name of a specific Queue.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesQueuesQueueNameActionsEnableDeliveryPutWithHttpInfo(queueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesQueuesQueueNameActionsEnableDeliveryPutRequestConfig(queueName = queueName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesQueuesQueueNameActionsEnableDeliveryPut
     *
     * @param queueName The name of a specific Queue.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesQueuesQueueNameActionsEnableDeliveryPutRequestConfig(queueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/services/queues/{queue_name}/actions/enable_delivery".replace("{"+"queue_name"+"}", encodeURIComponent(queueName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /services/queues/{queue_name}/actions/reset
     * Reset Queue
     * 
     * @param queueName The name of a specific Queue.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesQueuesQueueNameActionsResetPut(queueName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesQueuesQueueNameActionsResetPutWithHttpInfo(queueName = queueName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /services/queues/{queue_name}/actions/reset
     * Reset Queue
     * 
     * @param queueName The name of a specific Queue.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesQueuesQueueNameActionsResetPutWithHttpInfo(queueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesQueuesQueueNameActionsResetPutRequestConfig(queueName = queueName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesQueuesQueueNameActionsResetPut
     *
     * @param queueName The name of a specific Queue.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesQueuesQueueNameActionsResetPutRequestConfig(queueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/services/queues/{queue_name}/actions/reset".replace("{"+"queue_name"+"}", encodeURIComponent(queueName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /services/queues/{queue_name}
     * Retrieve Queue Status
     * 
     * @param queueName The name of a specific queue. For example, queue__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesQueuesQueueNameGet(queueName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesQueuesQueueNameGetWithHttpInfo(queueName = queueName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /services/queues/{queue_name}
     * Retrieve Queue Status
     * 
     * @param queueName The name of a specific queue. For example, queue__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesQueuesQueueNameGetWithHttpInfo(queueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesQueuesQueueNameGetRequestConfig(queueName = queueName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesQueuesQueueNameGet
     *
     * @param queueName The name of a specific queue. For example, queue__c.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesQueuesQueueNameGetRequestConfig(queueName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/services/queues/{queue_name}".replace("{"+"queue_name"+"}", encodeURIComponent(queueName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /services/vobject/vault_package__v/{package_id}/actions/validate
     * Validate Imported Package
     * 
     * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = servicesVobjectVaultPackageVPackageIdActionsValidatePostWithHttpInfo(packageId = packageId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /services/vobject/vault_package__v/{package_id}/actions/validate
     * Validate Imported Package
     * 
     * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun servicesVobjectVaultPackageVPackageIdActionsValidatePostWithHttpInfo(packageId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = servicesVobjectVaultPackageVPackageIdActionsValidatePostRequestConfig(packageId = packageId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation servicesVobjectVaultPackageVPackageIdActionsValidatePost
     *
     * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun servicesVobjectVaultPackageVPackageIdActionsValidatePostRequestConfig(packageId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/services/vobject/vault_package__v/{package_id}/actions/validate".replace("{"+"package_id"+"}", encodeURIComponent(packageId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /session
     * End Session
     * 
     * @param accept  (optional)
     * @param authorization The Vault sessionId to end. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sessionDelete(accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = sessionDeleteWithHttpInfo(accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /session
     * End Session
     * 
     * @param accept  (optional)
     * @param authorization The Vault sessionId to end. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun sessionDeleteWithHttpInfo(accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = sessionDeleteRequestConfig(accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sessionDelete
     *
     * @param accept  (optional)
     * @param authorization The Vault sessionId to end. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun sessionDeleteRequestConfig(accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/session",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /uicode/distributions/{distribution_name}/code
     * Download Single Client Code Distribution
     * 
     * @param distributionName The name attribute of the client code distribution to download.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uicodeDistributionsDistributionNameCodeGet(distributionName: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = uicodeDistributionsDistributionNameCodeGetWithHttpInfo(distributionName = distributionName, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /uicode/distributions/{distribution_name}/code
     * Download Single Client Code Distribution
     * 
     * @param distributionName The name attribute of the client code distribution to download.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun uicodeDistributionsDistributionNameCodeGetWithHttpInfo(distributionName: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = uicodeDistributionsDistributionNameCodeGetRequestConfig(distributionName = distributionName, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uicodeDistributionsDistributionNameCodeGet
     *
     * @param distributionName The name attribute of the client code distribution to download.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun uicodeDistributionsDistributionNameCodeGetRequestConfig(distributionName: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/uicode/distributions/{distribution_name}/code".replace("{"+"distribution_name"+"}", encodeURIComponent(distributionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /uicode/distributions/{distribution_name}
     * Delete Single Client Code Distribution
     * 
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uicodeDistributionsDistributionNameDelete(distributionName: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = uicodeDistributionsDistributionNameDeleteWithHttpInfo(distributionName = distributionName, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /uicode/distributions/{distribution_name}
     * Delete Single Client Code Distribution
     * 
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun uicodeDistributionsDistributionNameDeleteWithHttpInfo(distributionName: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = uicodeDistributionsDistributionNameDeleteRequestConfig(distributionName = distributionName, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uicodeDistributionsDistributionNameDelete
     *
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun uicodeDistributionsDistributionNameDeleteRequestConfig(distributionName: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/uicode/distributions/{distribution_name}".replace("{"+"distribution_name"+"}", encodeURIComponent(distributionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /uicode/distributions/{distribution_name}
     * Retrieve Single Client Code Distribution Metadata
     * 
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uicodeDistributionsDistributionNameGet(distributionName: kotlin.String, accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = uicodeDistributionsDistributionNameGetWithHttpInfo(distributionName = distributionName, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /uicode/distributions/{distribution_name}
     * Retrieve Single Client Code Distribution Metadata
     * 
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun uicodeDistributionsDistributionNameGetWithHttpInfo(distributionName: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = uicodeDistributionsDistributionNameGetRequestConfig(distributionName = distributionName, accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uicodeDistributionsDistributionNameGet
     *
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun uicodeDistributionsDistributionNameGetRequestConfig(distributionName: kotlin.String, accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/uicode/distributions/{distribution_name}".replace("{"+"distribution_name"+"}", encodeURIComponent(distributionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /uicode/distributions
     * Retrieve All Client Code Distribution Metadata
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uicodeDistributionsGet(accept: kotlin.String? = null, authorization: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = uicodeDistributionsGetWithHttpInfo(accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /uicode/distributions
     * Retrieve All Client Code Distribution Metadata
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun uicodeDistributionsGetWithHttpInfo(accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = uicodeDistributionsGetRequestConfig(accept = accept, authorization = authorization, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uicodeDistributionsGet
     *
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun uicodeDistributionsGetRequestConfig(accept: kotlin.String?, authorization: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/uicode/distributions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /uicode/distributions
     * Add or Replace Single Client Code Distribution
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uicodeDistributionsPost(accept: kotlin.String? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = uicodeDistributionsPostWithHttpInfo(accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /uicode/distributions
     * Add or Replace Single Client Code Distribution
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun uicodeDistributionsPostWithHttpInfo(accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = uicodeDistributionsPostRequestConfig(accept = accept, authorization = authorization, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uicodeDistributionsPost
     *
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun uicodeDistributionsPostRequestConfig(accept: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/uicode/distributions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobject/vault_package__v/{package_id}/actions/deploy
     * Deploy Package
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectVaultPackageVPackageIdActionsDeployPost(packageId: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectVaultPackageVPackageIdActionsDeployPostWithHttpInfo(packageId = packageId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobject/vault_package__v/{package_id}/actions/deploy
     * Deploy Package
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectVaultPackageVPackageIdActionsDeployPostWithHttpInfo(packageId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectVaultPackageVPackageIdActionsDeployPostRequestConfig(packageId = packageId, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectVaultPackageVPackageIdActionsDeployPost
     *
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectVaultPackageVPackageIdActionsDeployPostRequestConfig(packageId: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobject/vault_package__v/{package_id}/actions/deploy".replace("{"+"package_id"+"}", encodeURIComponent(packageId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobject/vault_package__v/{package_id}/actions/deploy/results
     * Retrieve Package Deploy Results
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectVaultPackageVPackageIdActionsDeployResultsGetWithHttpInfo(packageId = packageId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobject/vault_package__v/{package_id}/actions/deploy/results
     * Retrieve Package Deploy Results
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectVaultPackageVPackageIdActionsDeployResultsGetWithHttpInfo(packageId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectVaultPackageVPackageIdActionsDeployResultsGetRequestConfig(packageId = packageId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectVaultPackageVPackageIdActionsDeployResultsGet
     *
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectVaultPackageVPackageIdActionsDeployResultsGetRequestConfig(packageId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobject/vault_package__v/{package_id}/actions/deploy/results".replace("{"+"package_id"+"}", encodeURIComponent(packageId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}
     * Retrieve Results of Cascade Delete Job
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus 
     * @param jobId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: kotlin.String, jobStatus: kotlin.String, jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName = objectName, jobStatus = jobStatus, jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}
     * Retrieve Results of Cascade Delete Job
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus 
     * @param jobId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName: kotlin.String, jobStatus: kotlin.String, jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRequestConfig(objectName = objectName, jobStatus = jobStatus, jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus 
     * @param jobId 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRequestConfig(objectName: kotlin.String, jobStatus: kotlin.String, jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"job_status"+"}", encodeURIComponent(jobStatus.toString())).replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}
     * Retrieve Results of Deep Copy Job
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus The ID of the job, retrieved from the response of the job request.
     * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: kotlin.String, jobStatus: kotlin.String, jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName = objectName, jobStatus = jobStatus, jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}
     * Retrieve Results of Deep Copy Job
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus The ID of the job, retrieved from the response of the job request.
     * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName: kotlin.String, jobStatus: kotlin.String, jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRequestConfig(objectName = objectName, jobStatus = jobStatus, jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus The ID of the job, retrieved from the response of the job request.
     * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRequestConfig(objectName: kotlin.String, jobStatus: kotlin.String, jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"job_status"+"}", encodeURIComponent(jobStatus.toString())).replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/edl_item__v/actions/createplaceholder
     * Create a Placeholder from an EDL Item
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsEdlItemVActionsCreateplaceholderPost(authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsEdlItemVActionsCreateplaceholderPostWithHttpInfo(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/edl_item__v/actions/createplaceholder
     * Create a Placeholder from an EDL Item
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsEdlItemVActionsCreateplaceholderPostWithHttpInfo(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsEdlItemVActionsCreateplaceholderPostRequestConfig(authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsEdlItemVActionsCreateplaceholderPost
     *
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsEdlItemVActionsCreateplaceholderPostRequestConfig(authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/edl_item__v/actions/createplaceholder",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/merges/{job_id}/log
     * Download Merge Records Job Log
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsMergesJobIdLogGet(jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsMergesJobIdLogGetWithHttpInfo(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/merges/{job_id}/log
     * Download Merge Records Job Log
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsMergesJobIdLogGetWithHttpInfo(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsMergesJobIdLogGetRequestConfig(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsMergesJobIdLogGet
     *
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsMergesJobIdLogGetRequestConfig(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/merges/{job_id}/log".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/merges/{job_id}/results
     * Retrieve Record Merge Results
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsMergesJobIdResultsGet(jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsMergesJobIdResultsGetWithHttpInfo(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/merges/{job_id}/results
     * Retrieve Record Merge Results
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsMergesJobIdResultsGetWithHttpInfo(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsMergesJobIdResultsGetRequestConfig(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsMergesJobIdResultsGet
     *
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsMergesJobIdResultsGetRequestConfig(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/merges/{job_id}/results".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/merges/{job_id}/status
     * Retrieve Record Merge Status
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsMergesJobIdStatusGet(jobId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsMergesJobIdStatusGetWithHttpInfo(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/merges/{job_id}/status
     * Retrieve Record Merge Status
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsMergesJobIdStatusGetWithHttpInfo(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsMergesJobIdStatusGetRequestConfig(jobId = jobId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsMergesJobIdStatusGet
     *
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsMergesJobIdStatusGetRequestConfig(jobId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/merges/{job_id}/status".replace("{"+"job_id"+"}", encodeURIComponent(jobId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/actions/{action_name}
     * Initiate Object Action on Multiple Records
     * 
     * @param objectName The object name__v field value.
     * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameActionsActionNamePost(objectName: kotlin.String, actionName: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameActionsActionNamePostWithHttpInfo(objectName = objectName, actionName = actionName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/actions/{action_name}
     * Initiate Object Action on Multiple Records
     * 
     * @param objectName The object name__v field value.
     * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameActionsActionNamePostWithHttpInfo(objectName: kotlin.String, actionName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameActionsActionNamePostRequestConfig(objectName = objectName, actionName = actionName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameActionsActionNamePost
     *
     * @param objectName The object name__v field value.
     * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameActionsActionNamePostRequestConfig(objectName: kotlin.String, actionName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/actions/{action_name}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"action_name"+"}", encodeURIComponent(actionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/actions/changetype
     * Change Object Type
     * 
     * @param objectName The name of the object.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameActionsChangetypePost(objectName: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameActionsChangetypePostWithHttpInfo(objectName = objectName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/actions/changetype
     * Change Object Type
     * 
     * @param objectName The name of the object.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameActionsChangetypePostWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameActionsChangetypePostRequestConfig(objectName = objectName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameActionsChangetypePost
     *
     * @param objectName The name of the object.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameActionsChangetypePostRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/actions/changetype".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/actions/merge
     * Initiate Record Merge
     * 
     * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param vobjectsObjectNameActionsMergePostRequestInner  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameActionsMergePost(objectName: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null, vobjectsObjectNameActionsMergePostRequestInner: kotlin.collections.List<VobjectsObjectNameActionsMergePostRequestInner>? = null) : Unit {
        val localVarResponse = vobjectsObjectNameActionsMergePostWithHttpInfo(objectName = objectName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner = vobjectsObjectNameActionsMergePostRequestInner)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/actions/merge
     * Initiate Record Merge
     * 
     * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param vobjectsObjectNameActionsMergePostRequestInner  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameActionsMergePostWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?, vobjectsObjectNameActionsMergePostRequestInner: kotlin.collections.List<VobjectsObjectNameActionsMergePostRequestInner>?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameActionsMergePostRequestConfig(objectName = objectName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner = vobjectsObjectNameActionsMergePostRequestInner)

        return request<kotlin.collections.List<VobjectsObjectNameActionsMergePostRequestInner>, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameActionsMergePost
     *
     * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param vobjectsObjectNameActionsMergePostRequestInner  (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameActionsMergePostRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?, vobjectsObjectNameActionsMergePostRequestInner: kotlin.collections.List<VobjectsObjectNameActionsMergePostRequestInner>?) : RequestConfig<kotlin.collections.List<VobjectsObjectNameActionsMergePostRequestInner>> {
        val localVariableBody = vobjectsObjectNameActionsMergePostRequestInner
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/actions/merge".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/actions/recalculaterollups
     * Retrieve Roll-up Field Recalculation Status
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameActionsRecalculaterollupsGet(objectName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameActionsRecalculaterollupsGetWithHttpInfo(objectName = objectName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/actions/recalculaterollups
     * Retrieve Roll-up Field Recalculation Status
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameActionsRecalculaterollupsGetWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameActionsRecalculaterollupsGetRequestConfig(objectName = objectName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameActionsRecalculaterollupsGet
     *
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameActionsRecalculaterollupsGetRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/actions/recalculaterollups".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/actions/recalculaterollups
     * Recalculate Roll-up Fields
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameActionsRecalculaterollupsPost(objectName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameActionsRecalculaterollupsPostWithHttpInfo(objectName = objectName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/actions/recalculaterollups
     * Recalculate Roll-up Fields
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameActionsRecalculaterollupsPostWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameActionsRecalculaterollupsPostRequestConfig(objectName = objectName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameActionsRecalculaterollupsPost
     *
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameActionsRecalculaterollupsPostRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/actions/recalculaterollups".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /vobjects/{object_name}/actions/updatecorporatecurrency
     * Update Corporate Currency Fields
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameActionsUpdatecorporatecurrencyPutWithHttpInfo(objectName = objectName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /vobjects/{object_name}/actions/updatecorporatecurrency
     * Update Corporate Currency Fields
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameActionsUpdatecorporatecurrencyPutWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameActionsUpdatecorporatecurrencyPutRequestConfig(objectName = objectName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameActionsUpdatecorporatecurrencyPut
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameActionsUpdatecorporatecurrencyPutRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/vobjects/{object_name}/actions/updatecorporatecurrency".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /vobjects/{object_name}/attachments/batch
     * Delete Multiple Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param idParam  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameAttachmentsBatchDelete(objectName: kotlin.String, idParam: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameAttachmentsBatchDeleteWithHttpInfo(objectName = objectName, idParam = idParam, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /vobjects/{object_name}/attachments/batch
     * Delete Multiple Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param idParam  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameAttachmentsBatchDeleteWithHttpInfo(objectName: kotlin.String, idParam: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameAttachmentsBatchDeleteRequestConfig(objectName = objectName, idParam = idParam, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameAttachmentsBatchDelete
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param idParam  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameAttachmentsBatchDeleteRequestConfig(objectName: kotlin.String, idParam: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (idParam != null) {
                    put("idParam", listOf(idParam.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/vobjects/{object_name}/attachments/batch".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/attachments/batch
     * Create Multiple Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameAttachmentsBatchPost(objectName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameAttachmentsBatchPostWithHttpInfo(objectName = objectName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/attachments/batch
     * Create Multiple Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameAttachmentsBatchPostWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameAttachmentsBatchPostRequestConfig(objectName = objectName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameAttachmentsBatchPost
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameAttachmentsBatchPostRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/attachments/batch".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /vobjects/{object_name}/attachments/batch
     * Update Multiple Object Record Attachment Descriptions
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameAttachmentsBatchPut(objectName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameAttachmentsBatchPutWithHttpInfo(objectName = objectName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /vobjects/{object_name}/attachments/batch
     * Update Multiple Object Record Attachment Descriptions
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameAttachmentsBatchPutWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameAttachmentsBatchPutRequestConfig(objectName = objectName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameAttachmentsBatchPut
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameAttachmentsBatchPutRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/vobjects/{object_name}/attachments/batch".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /vobjects/{object_name}
     * Delete Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameDelete(objectName: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameDeleteWithHttpInfo(objectName = objectName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /vobjects/{object_name}
     * Delete Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameDeleteWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameDeleteRequestConfig(objectName = objectName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameDelete
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameDeleteRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/vobjects/{object_name}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{id}/roles/{role_name}
     * Retrieve Object Record Roles
     * 
     * @param objectName The object name.
     * @param id The id of the document, binder, or object record.
     * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameIdRolesRoleNameGet(objectName: kotlin.String, id: kotlin.String, roleName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameIdRolesRoleNameGetWithHttpInfo(objectName = objectName, id = id, roleName = roleName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{id}/roles/{role_name}
     * Retrieve Object Record Roles
     * 
     * @param objectName The object name.
     * @param id The id of the document, binder, or object record.
     * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameIdRolesRoleNameGetWithHttpInfo(objectName: kotlin.String, id: kotlin.String, roleName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameIdRolesRoleNameGetRequestConfig(objectName = objectName, id = id, roleName = roleName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameIdRolesRoleNameGet
     *
     * @param objectName The object name.
     * @param id The id of the document, binder, or object record.
     * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameIdRolesRoleNameGetRequestConfig(objectName: kotlin.String, id: kotlin.String, roleName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{id}/roles/{role_name}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"role_name"+"}", encodeURIComponent(roleName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/actions/{action_name}
     * Retrieve Object User Actions Details
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: kotlin.String, objectRecordId: kotlin.String, actionName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdActionsActionNameGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, actionName = actionName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/actions/{action_name}
     * Retrieve Object User Actions Details
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdActionsActionNameGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, actionName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdActionsActionNameGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, actionName = actionName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdActionsActionNameGet
     *
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdActionsActionNameGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, actionName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"action_name"+"}", encodeURIComponent(actionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/actions/{action_name}
     * Initiate Object Action on a Single Record
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: kotlin.String, objectRecordId: kotlin.String, actionName: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdActionsActionNamePostWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, actionName = actionName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/actions/{action_name}
     * Initiate Object Action on a Single Record
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdActionsActionNamePostWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, actionName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdActionsActionNamePostRequestConfig(objectName = objectName, objectRecordId = objectRecordId, actionName = actionName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdActionsActionNamePost
     *
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdActionsActionNamePostRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, actionName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"action_name"+"}", encodeURIComponent(actionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/actions/cascadedelete
     * Cascade Delete Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdActionsCascadedeletePostWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/actions/cascadedelete
     * Cascade Delete Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdActionsCascadedeletePostWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdActionsCascadedeletePostRequestConfig(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdActionsCascadedeletePost
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdActionsCascadedeletePostRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/{object_record_id}/actions/cascadedelete".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/actions/deepcopy
     * Deep Copy Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdActionsDeepcopyPostWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/actions/deepcopy
     * Deep Copy Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdActionsDeepcopyPostWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdActionsDeepcopyPostRequestConfig(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdActionsDeepcopyPost
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdActionsDeepcopyPostRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/{object_record_id}/actions/deepcopy".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/actions
     * Retrieve Object Record User Actions
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value.
     * @param loc Optional: When true, retrieves localized (translated) strings for the label.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdActionsGet(objectName: kotlin.String, objectRecordId: kotlin.String, loc: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdActionsGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/actions
     * Retrieve Object Record User Actions
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value.
     * @param loc Optional: When true, retrieves localized (translated) strings for the label.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdActionsGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdActionsGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, loc = loc, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdActionsGet
     *
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value.
     * @param loc Optional: When true, retrieves localized (translated) strings for the label.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdActionsGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, loc: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (loc != null) {
                    put("loc", listOf(loc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}/actions".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file
     * Download Attachment Field File
     * 
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentFieldName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, attachmentFieldName = attachmentFieldName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file
     * Download Attachment Field File
     * 
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentFieldName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, attachmentFieldName = attachmentFieldName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet
     *
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentFieldName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"attachment_field_name"+"}", encodeURIComponent(attachmentFieldName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file
     * Update Attachment Field File
     * 
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentFieldName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, attachmentFieldName = attachmentFieldName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file
     * Update Attachment Field File
     * 
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentFieldName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRequestConfig(objectName = objectName, objectRecordId = objectRecordId, attachmentFieldName = attachmentFieldName, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost
     *
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentFieldName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"attachment_field_name"+"}", encodeURIComponent(attachmentFieldName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachment_fields/file
     * Download All Attachment Field Files
     * 
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachment_fields/file
     * Download All Attachment Field Files
     * 
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet
     *
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/file".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
     * Delete Object Record Attachment
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
     * Delete Object Record Attachment
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRequestConfig(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
     * Retrieve Object Record Attachment Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
     * Retrieve Object Record Attachment Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
     * Update Object Record Attachment Description
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
     * Update Object Record Attachment Description
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRequestConfig(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Delete Object Record Attachment Version
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Delete Object Record Attachment Version
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequestConfig(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())).replace("{"+"attachment_version"+"}", encodeURIComponent(attachmentVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file
     * Download Object Record Attachment File
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file
     * Download Object Record Attachment File
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())).replace("{"+"attachment_version"+"}", encodeURIComponent(attachmentVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Retrieve Object Record Attachment Version Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Retrieve Object Record Attachment Version Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())).replace("{"+"attachment_version"+"}", encodeURIComponent(attachmentVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Restore Object Record Attachment Version
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param restore  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, restore: kotlin.Boolean? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, restore = restore, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
     * Restore Object Record Attachment Version
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param restore  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, restore: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequestConfig(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, attachmentVersion = attachmentVersion, restore = restore, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param restore  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, attachmentVersion: kotlin.String, restore: kotlin.Boolean?, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (restore != null) {
                    put("restore", listOf(restore.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())).replace("{"+"attachment_version"+"}", encodeURIComponent(attachmentVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions
     * Retrieve Object Record Attachment Versions
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions
     * Retrieve Object Record Attachment Versions
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, attachmentId = attachmentId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, attachmentId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())).replace("{"+"attachment_id"+"}", encodeURIComponent(attachmentId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments/file
     * Download All Object Record Attachment Files
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentsFileGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments/file
     * Download All Object Record Attachment Files
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsFileGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentsFileGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentsFileGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentsFileGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}/attachments/file".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments
     * Retrieve Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentsGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/attachments
     * Retrieve Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentsGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentsGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentsGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}/attachments".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/attachments
     * Create Object Record Attachment
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAttachmentsPostWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/{object_record_id}/attachments
     * Create Object Record Attachment
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAttachmentsPostWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAttachmentsPostRequestConfig(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAttachmentsPost
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAttachmentsPostRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/{object_record_id}/attachments".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/audittrail
     * Retrieve Complete Audit History for a Single Object Record
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: kotlin.String, objectRecordId: kotlin.String, startDate: kotlin.String? = null, endDate: kotlin.String? = null, formatResult: kotlin.String? = null, limit: kotlin.String? = null, offset: kotlin.String? = null, events: kotlin.String? = null, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdAudittrailGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, startDate = startDate, endDate = endDate, formatResult = formatResult, limit = limit, offset = offset, events = events, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}/audittrail
     * Retrieve Complete Audit History for a Single Object Record
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdAudittrailGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, startDate: kotlin.String?, endDate: kotlin.String?, formatResult: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, events: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdAudittrailGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, startDate = startDate, endDate = endDate, formatResult = formatResult, limit = limit, offset = offset, events = events, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdAudittrailGet
     *
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdAudittrailGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, startDate: kotlin.String?, endDate: kotlin.String?, formatResult: kotlin.String?, limit: kotlin.String?, offset: kotlin.String?, events: kotlin.String?, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (formatResult != null) {
                    put("format_result", listOf(formatResult.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (events != null) {
                    put("events", listOf(events.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}/audittrail".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}
     * Retrieve Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameObjectRecordIdGet(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameObjectRecordIdGetWithHttpInfo(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/{object_name}/{object_record_id}
     * Retrieve Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameObjectRecordIdGetWithHttpInfo(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameObjectRecordIdGetRequestConfig(objectName = objectName, objectRecordId = objectRecordId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameObjectRecordIdGet
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameObjectRecordIdGetRequestConfig(objectName: kotlin.String, objectRecordId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/{object_name}/{object_record_id}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())).replace("{"+"object_record_id"+"}", encodeURIComponent(objectRecordId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}
     * Create &amp; Upsert Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;. (optional)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNamePost(objectName: kotlin.String, idParam: kotlin.String? = null, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIMigrationMode: kotlin.Boolean? = null, xVaultAPINoTriggers: kotlin.Boolean? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNamePostWithHttpInfo(objectName = objectName, idParam = idParam, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPINoTriggers = xVaultAPINoTriggers, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}
     * Create &amp; Upsert Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;. (optional)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNamePostWithHttpInfo(objectName: kotlin.String, idParam: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPINoTriggers: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNamePostRequestConfig(objectName = objectName, idParam = idParam, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPINoTriggers = xVaultAPINoTriggers, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNamePost
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;. (optional)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNamePostRequestConfig(objectName: kotlin.String, idParam: kotlin.String?, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPINoTriggers: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (idParam != null) {
                    put("idParam", listOf(idParam.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIMigrationMode?.apply { localVariableHeaders["X-VaultAPI-MigrationMode"] = this.toString() }
        xVaultAPINoTriggers?.apply { localVariableHeaders["X-VaultAPI-NoTriggers"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * PUT /vobjects/{object_name}
     * Update Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNamePut(objectName: kotlin.String, authorization: kotlin.String? = null, contentType: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIMigrationMode: kotlin.Boolean? = null, xVaultAPINoTriggers: kotlin.Boolean? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNamePutWithHttpInfo(objectName = objectName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPINoTriggers = xVaultAPINoTriggers, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /vobjects/{object_name}
     * Update Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNamePutWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPINoTriggers: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNamePutRequestConfig(objectName = objectName, authorization = authorization, contentType = contentType, accept = accept, xVaultAPIMigrationMode = xVaultAPIMigrationMode, xVaultAPINoTriggers = xVaultAPINoTriggers, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNamePut
     *
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNamePutRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, contentType: kotlin.String?, accept: kotlin.String?, xVaultAPIMigrationMode: kotlin.Boolean?, xVaultAPINoTriggers: kotlin.Boolean?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIMigrationMode?.apply { localVariableHeaders["X-VaultAPI-MigrationMode"] = this.toString() }
        xVaultAPINoTriggers?.apply { localVariableHeaders["X-VaultAPI-NoTriggers"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/vobjects/{object_name}".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DELETE /vobjects/{object_name}/roles
     * Remove Users &amp; Groups from Roles on Object Records
     * 
     * @param objectName The name of the object where you want to remove roles.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameRolesDelete(objectName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameRolesDeleteWithHttpInfo(objectName = objectName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /vobjects/{object_name}/roles
     * Remove Users &amp; Groups from Roles on Object Records
     * 
     * @param objectName The name of the object where you want to remove roles.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameRolesDeleteWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameRolesDeleteRequestConfig(objectName = objectName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameRolesDelete
     *
     * @param objectName The name of the object where you want to remove roles.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameRolesDeleteRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/vobjects/{object_name}/roles".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /vobjects/{object_name}/roles
     * Assign Users &amp; Groups to Roles on Object Records
     * 
     * @param objectName The name of the object where you want to remove roles.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsObjectNameRolesPost(objectName: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, contentType: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsObjectNameRolesPostWithHttpInfo(objectName = objectName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /vobjects/{object_name}/roles
     * Assign Users &amp; Groups to Roles on Object Records
     * 
     * @param objectName The name of the object where you want to remove roles.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsObjectNameRolesPostWithHttpInfo(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsObjectNameRolesPostRequestConfig(objectName = objectName, authorization = authorization, accept = accept, contentType = contentType, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsObjectNameRolesPost
     *
     * @param objectName The name of the object where you want to remove roles.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsObjectNameRolesPostRequestConfig(objectName: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, contentType: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/vobjects/{object_name}/roles".replace("{"+"object_name"+"}", encodeURIComponent(objectName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /vobjects/outbound_package__v/{package_id}/dependencies
     * Retrieve Outbound Package Dependencies
     * 
     * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: kotlin.String, authorization: kotlin.String? = null, accept: kotlin.String? = null, xVaultAPIClientID: kotlin.String? = null) : Unit {
        val localVarResponse = vobjectsOutboundPackageVPackageIdDependenciesGetWithHttpInfo(packageId = packageId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /vobjects/outbound_package__v/{package_id}/dependencies
     * Retrieve Outbound Package Dependencies
     * 
     * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun vobjectsOutboundPackageVPackageIdDependenciesGetWithHttpInfo(packageId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = vobjectsOutboundPackageVPackageIdDependenciesGetRequestConfig(packageId = packageId, authorization = authorization, accept = accept, xVaultAPIClientID = xVaultAPIClientID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation vobjectsOutboundPackageVPackageIdDependenciesGet
     *
     * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies.
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return RequestConfig
     */
    fun vobjectsOutboundPackageVPackageIdDependenciesGetRequestConfig(packageId: kotlin.String, authorization: kotlin.String?, accept: kotlin.String?, xVaultAPIClientID: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        xVaultAPIClientID?.apply { localVariableHeaders["X-VaultAPI-ClientID"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/vobjects/outbound_package__v/{package_id}/dependencies".replace("{"+"package_id"+"}", encodeURIComponent(packageId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
