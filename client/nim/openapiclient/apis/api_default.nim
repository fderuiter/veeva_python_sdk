#
# Veeva Vault API v25.1
# 
# The latest GA version of the Vault REST API.
# The version of the OpenAPI document: 1.0.0
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model__vobjects__object_name__actions_merge_post_request_inner

const basepath = "http://}/api/v25.1"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc apiGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve API Versions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/api/")


proc apiMdlComponentsComponentTypeAndRecordNameFilesGet*(httpClient: HttpClient, componentTypeAndRecordName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Content File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/api/mdl/components/{component_type_and_record_name}/files")


proc apiMdlComponentsComponentTypeAndRecordNameGet*(httpClient: HttpClient, componentTypeAndRecordName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Component Record (MDL)
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/api/mdl/components/{component_type_and_record_name}")


proc apiMdlExecuteAsyncJobIdResultsGet*(httpClient: HttpClient, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Asynchronous MDL Script Results
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/api/mdl/execute_async/{job_id}/results")


proc apiMdlExecuteAsyncPost*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Execute MDL Script Asynchronously
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/api/mdl/execute_async")


proc apiMdlExecutePost*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Execute MDL Script
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/api/mdl/execute")


proc apiMdlFilesPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Upload Content File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/api/mdl/files")


proc audittrailAuditTrailTypeGet*(httpClient: HttpClient, auditTrailType: string, startDate: string, endDate: string, allDates: string, formatResult: string, limit: string, offset: string, objects: string, events: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Audit Details
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("start_date", $startDate), # Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
    ("end_date", $endDate), # Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
    ("all_dates", $allDates), # Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
    ("format_result", $formatResult), # To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
    ("limit", $limit), # Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    ("offset", $offset), # Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
    ("objects", $objects), # This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.
    ("events", $events), # This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
  ])
  httpClient.get(basepath & fmt"/audittrail/{audit_trail_type}" & "?" & url_encoded_query_params)


proc authDiscoveryPost*(httpClient: HttpClient, accept: string, xVaultAPIClientID: string): Response =
  ## Authentication Type Discovery
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/auth/discovery")


proc authOauthSessionOathOidcProfileIdPost*(httpClient: HttpClient, oathOidcProfileId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## OAuth 2.0 / OpenID Connect
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/auth/oauth/session/{oath_oidc_profile_id}")


proc authPost*(httpClient: HttpClient, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## User Name and Password
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/auth")


proc codeClassNameDelete*(httpClient: HttpClient, className: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Single Source Code File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/code/{class_name}")


proc codeClassNameDisablePut*(httpClient: HttpClient, className: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Disable Vault Extension
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/code/{class_name}/disable")


proc codeClassNameEnablePut*(httpClient: HttpClient, className: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Enable Vault Extension
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/code/{class_name}/enable")


proc codeClassNameGet*(httpClient: HttpClient, className: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Single Source Code File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/code/{class_name}")


proc codeProfilerGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Profiling Sessions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/code/profiler")


proc codeProfilerPost*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Create Profiling Session
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/code/profiler")


proc codeProfilerSessionNameActionsEndPost*(httpClient: HttpClient, sessionName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## End Profiling Session
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/code/profiler/{session_name}/actions/end")


proc codeProfilerSessionNameDelete*(httpClient: HttpClient, sessionName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Profiling Session
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/code/profiler/{session_name}")


proc codeProfilerSessionNameGet*(httpClient: HttpClient, sessionName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Profiling Session
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/code/profiler/{session_name}")


proc codeProfilerSessionNameResultsGet*(httpClient: HttpClient, sessionName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download Profiling Session Results
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/code/profiler/{session_name}/results")


proc codePut*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Add or Replace Single Source Code File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & "/code")


proc compositesTreesEdlHierarchyOrTemplateActionsListnodesPost*(httpClient: HttpClient, edlHierarchyOrTemplate: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Specific Root Nodes
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/composites/trees/{edl_hierarchy_or_template}/actions/listnodes")


proc compositesTreesEdlHierarchyOrTemplateGet*(httpClient: HttpClient, edlHierarchyOrTemplate: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Root Nodes
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/composites/trees/{edl_hierarchy_or_template}")


proc compositesTreesEdlHierarchyVParentNodeIdChildrenGet*(httpClient: HttpClient, parentNodeId: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve a Node's Children
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/composites/trees/edl_hierarchy__v/{parent_node_id}/children")


proc compositesTreesEdlHierarchyVParentNodeIdChildrenPut*(httpClient: HttpClient, parentNodeId: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Update Node Order
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/composites/trees/edl_hierarchy__v/{parent_node_id}/children")


proc configurationComponentTypeAndRecordNameGet*(httpClient: HttpClient, componentTypeAndRecordName: string, loc: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Component Record (XML/JSON)
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # When localized (translated) strings are available, retrieve them by setting loc to true.
  ])
  httpClient.get(basepath & fmt"/configuration/{component_type_and_record_name}" & "?" & url_encoded_query_params)


proc configurationComponentTypeGet*(httpClient: HttpClient, componentType: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Component Record Collection
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/configuration/{component_type}")


proc configurationObjectNameAndObjectTypeGet*(httpClient: HttpClient, objectNameAndObjectType: string, loc: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Details from a Specific Object
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # When localized (translated) strings are available, retrieve them by setting loc to true.
  ])
  httpClient.get(basepath & fmt"/configuration/{object_name_and_object_type}" & "?" & url_encoded_query_params)


proc configurationObjecttypeGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Details from All Object Types
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/configuration/Objecttype")


proc configurationRoleAssignmentRuleDelete*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Lifecycle Role Assignment Override Rules
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & "/configuration/role_assignment_rule")


proc configurationRoleAssignmentRuleGet*(httpClient: HttpClient, lifecycleV: string, roleV: string, productV: string, countryV: string, studyV: string, studyCountryV: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Lifecycle Role Assignment Rules (Default & Override)
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("lifecycle__v", $lifecycleV), # Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c
    ("role__v", $roleV), # Include the name of the role from which to retrieve information. For example: role__v=editor__c
    ("product__v", $productV), # Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap
    ("country__v", $countryV), # Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States
    ("study__v", $studyV), # In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study
    ("study_country__v", $studyCountryV), # In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany
  ])
  httpClient.get(basepath & "/configuration/role_assignment_rule" & "?" & url_encoded_query_params)


proc configurationRoleAssignmentRulePost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Lifecycle Role Assignment Override Rules
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/configuration/role_assignment_rule")


proc configurationRoleAssignmentRulePut*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Lifecycle Role Assignment Rules (Default & Override)
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & "/configuration/role_assignment_rule")


proc delegationLoginPost*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Initiate Delegated Session
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/delegation/login")


proc delegationVaultsGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Delegations
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/delegation/vaults")


proc keepAlivePost*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Session Keep Alive
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/keep-alive")


proc limitsGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Limits on Objects
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/limits")


proc logsApiUsageGet*(httpClient: HttpClient, date: string, logFormat: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download Daily API Usage
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("date", $date), # The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
    ("log_format", $logFormat), # Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
  ])
  httpClient.get(basepath & "/logs/api_usage" & "?" & url_encoded_query_params)


proc logsCodeDebugGet*(httpClient: HttpClient, userId: string, includeInactive: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Debug Logs
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("user_id", $userId), # Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
    ("include_inactive", $includeInactive), # Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.
  ])
  httpClient.get(basepath & "/logs/code/debug" & "?" & url_encoded_query_params)


proc logsCodeDebugIdActionsResetDelete*(httpClient: HttpClient, id: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Debug Log
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/logs/code/debug/{id}/actions/reset")


proc logsCodeDebugIdActionsResetPost*(httpClient: HttpClient, id: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Reset Debug Log
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/logs/code/debug/{id}/actions/reset")


proc logsCodeDebugIdFilesGet*(httpClient: HttpClient, id: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download Debug Log Files
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/logs/code/debug/{id}/files")


proc logsCodeDebugIdGet*(httpClient: HttpClient, id: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Single Debug Log
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/logs/code/debug/{id}")


proc logsCodeDebugPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Debug Log
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/logs/code/debug")


proc logsCodeRuntimeGet*(httpClient: HttpClient, date: string, logFormat: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download SDK Runtime Log
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("date", $date), # 
    ("log_format", $logFormat), # Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
  ])
  httpClient.get(basepath & "/logs/code/runtime" & "?" & url_encoded_query_params)


proc messagesMessageTypeActionsImportPost*(httpClient: HttpClient, messageType: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Import Bulk Translation File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/messages/{message_type}/actions/import")


proc messagesMessageTypeLanguageLangActionsExportPost*(httpClient: HttpClient, messageType: string, lang: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Export Bulk Translation File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/messages/{message_type}/language/{lang}/actions/export")


proc metadataAudittrailAuditTrailTypeGet*(httpClient: HttpClient, auditTrailType: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Audit Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/audittrail/{audit_trail_type}")


proc metadataAudittrailGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Audit Types
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/audittrail")


proc metadataComponentsComponentTypeGet*(httpClient: HttpClient, componentType: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Component Type Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/components/{component_type}")


proc metadataComponentsGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Component Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/components")


proc metadataObjectsBindersTemplatesBindernodesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder Template Node Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/objects/binders/templates/bindernodes")


proc metadataObjectsBindersTemplatesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder Template Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/objects/binders/templates")


proc metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet*(httpClient: HttpClient, placemarkType: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Annotation Placemark Type Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/objects/documents/annotations/placemarks/types/{placemark_type}")


proc metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet*(httpClient: HttpClient, referenceType: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Annotation Reference Type Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/objects/documents/annotations/references/types/{reference_type}")


proc metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet*(httpClient: HttpClient, annotationType: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Annotation Type Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/objects/documents/annotations/types/{annotation_type}")


proc metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet*(httpClient: HttpClient, eventType: string, eventSubtype: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Event SubType Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/objects/documents/events/{event_type}/types/{event_subtype}")


proc metadataObjectsDocumentsEventsGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Event Types and Subtypes
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/objects/documents/events")


proc metadataObjectsDocumentsLockGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Lock Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/objects/documents/lock")


proc metadataObjectsDocumentsPropertiesFindCommonPost*(httpClient: HttpClient, contentType: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Retrieve Common Document Fields
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/metadata/objects/documents/properties/find_common")


proc metadataObjectsDocumentsPropertiesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Document Fields
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/objects/documents/properties")


proc metadataObjectsDocumentsTemplatesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Template Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/objects/documents/templates")


proc metadataObjectsDocumentsTypesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Document Types
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/objects/documents/types")


proc metadataObjectsDocumentsTypesTypeGet*(httpClient: HttpClient, `type`: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Type
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/objects/documents/types/{type}")


proc metadataObjectsDocumentsTypesTypeRelationshipsGet*(httpClient: HttpClient, `type`: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Type Relationships
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/objects/documents/types/{type}/relationships")


proc metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet*(httpClient: HttpClient, `type`: string, subtype: string, classification: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Classification
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}")


proc metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet*(httpClient: HttpClient, `type`: string, subtype: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Subtype
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/objects/documents/types/{type}/subtypes/{subtype}")


proc metadataObjectsGroupsGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Group Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/objects/groups")


proc metadataObjectsSecuritypoliciesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Security Policy Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/objects/securitypolicies")


proc metadataObjectsUsersGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve User Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/objects/users")


proc metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Archived Document Signature Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/query/archived_documents/relationships/document_signature__sysr")


proc metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Signature Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/metadata/query/documents/relationships/document_signature__sysr")


proc metadataVobjectsGet*(httpClient: HttpClient, loc: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Object Collection
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  ])
  httpClient.get(basepath & "/metadata/vobjects" & "?" & url_encoded_query_params)


proc metadataVobjectsObjectNameActionsCanceldeploymentPost*(httpClient: HttpClient, objectName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Cancel Raw Object Deployment
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/metadata/vobjects/{object_name}/actions/canceldeployment")


proc metadataVobjectsObjectNameFieldsObjectFieldNameGet*(httpClient: HttpClient, objectName: string, objectFieldName: string, loc: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Object Field Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  ])
  httpClient.get(basepath & fmt"/metadata/vobjects/{object_name}/fields/{object_field_name}" & "?" & url_encoded_query_params)


proc metadataVobjectsObjectNameGet*(httpClient: HttpClient, objectName: string, loc: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Object Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  ])
  httpClient.get(basepath & fmt"/metadata/vobjects/{object_name}" & "?" & url_encoded_query_params)


proc metadataVobjectsObjectNamePageLayoutsGet*(httpClient: HttpClient, objectName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Page Layouts
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/vobjects/{object_name}/page_layouts")


proc metadataVobjectsObjectNamePageLayoutsLayoutNameGet*(httpClient: HttpClient, objectName: string, layoutName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Page Layout Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/metadata/vobjects/{object_name}/page_layouts/{layout_name}")


proc notificationsHistoriesGet*(httpClient: HttpClient, startDate: string, endDate: string, allDates: bool, formatResult: string, limit: string, offset: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Email Notification Histories
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("start_date", $startDate), # Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
    ("end_date", $endDate), # Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
    ("all_dates", $allDates), # Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
    ("format_result", $formatResult), # To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
    ("limit", $limit), # Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    ("offset", $offset), # Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
  ])
  httpClient.get(basepath & "/notifications/histories" & "?" & url_encoded_query_params)


proc objectWorkflowActionsActionGet*(httpClient: HttpClient, action: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Bulk Workflow Action Details
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/object/workflow/actions/{action}")


proc objectWorkflowActionsActionPost*(httpClient: HttpClient, action: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Initiate Workflow Actions on Multiple Workflows
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/object/workflow/actions/{action}")


proc objectWorkflowActionsCanceltasksPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Cancel Workflow Tasks
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/object/workflow/actions/canceltasks")


proc objectWorkflowActionsCancelworkflowsPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Cancel Workflows
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/object/workflow/actions/cancelworkflows")


proc objectWorkflowActionsGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Bulk Workflow Actions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/object/workflow/actions")


proc objectWorkflowActionsReassigntasksPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Reassign Workflow Tasks
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/object/workflow/actions/reassigntasks")


proc objectWorkflowActionsReplaceworkflowownerPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Replace Workflow Owner
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/object/workflow/actions/replaceworkflowowner")


proc objectsBindersActionsExportJobIdResultsGet*(httpClient: HttpClient, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder Export Results
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/actions/export/{job_id}/results")


proc objectsBindersBinderIdActionsExportPost*(httpClient: HttpClient, binderId: string, source: bool, renditiontype: string, docversion: string, attachments: string, `export`: string, docfield: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Export Binder (Latest Version)
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("source", $source), # to include source content or not
    ("renditiontype", $renditiontype), # to include viewable renditions
    ("docversion", $docversion), # to include all major versions
    ("attachments", $attachments), # to include all versions of attachments
    ("export", $`export`), # configurable filename metadata
    ("docfield", $docfield), # to exclude document metadata csv
  ])
  httpClient.post(basepath & fmt"/objects/binders/{binder_id}/actions/export" & "?" & url_encoded_query_params)


proc objectsBindersBinderIdActionsPost*(httpClient: HttpClient, binderId: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Refresh Binder Auto-Filing
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/binders/{binder_id}/actions")


proc objectsBindersBinderIdBindingRulePut*(httpClient: HttpClient, binderId: string, contentType: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Update Binding Rule
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/binders/{binder_id}/binding_rule")


proc objectsBindersBinderIdDelete*(httpClient: HttpClient, binderId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Binder
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/binders/{binder_id}")


proc objectsBindersBinderIdDocumentsNodeIdBindingRulePut*(httpClient: HttpClient, binderId: string, nodeId: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Update Binder Document Binding Rule
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/binders/{binder_id}/documents/{node_id}/binding_rule")


proc objectsBindersBinderIdDocumentsPost*(httpClient: HttpClient, binderId: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Add Document to Binder
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/binders/{binder_id}/documents")


proc objectsBindersBinderIdDocumentsSectionIdDelete*(httpClient: HttpClient, binderId: string, sectionId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Remove Document from Binder
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/binders/{binder_id}/documents/{section_id}")


proc objectsBindersBinderIdDocumentsSectionIdPut*(httpClient: HttpClient, binderId: string, sectionId: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Move Document in Binder
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/binders/{binder_id}/documents/{section_id}")


proc objectsBindersBinderIdGet*(httpClient: HttpClient, binderId: string, depth: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("depth", $depth), # To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
  ])
  httpClient.get(basepath & fmt"/objects/binders/{binder_id}" & "?" & url_encoded_query_params)


proc objectsBindersBinderIdPost*(httpClient: HttpClient, binderId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Create Binder Version
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/binders/{binder_id}")


proc objectsBindersBinderIdPut*(httpClient: HttpClient, binderId: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Update Binder
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/binders/{binder_id}")


proc objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete*(httpClient: HttpClient, binderId: string, roleNameAndUserOrGroup: string, id: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Remove Users & Groups from Roles on a Single Binder
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}")


proc objectsBindersBinderIdSectionsNodeIdBindingRulePut*(httpClient: HttpClient, binderId: string, nodeId: string, contentType: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Update Binder Section Binding Rule
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/binders/{binder_id}/sections/{node_id}/binding_rule")


proc objectsBindersBinderIdSectionsNodeIdPut*(httpClient: HttpClient, binderId: string, nodeId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Binder Section
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/binders/{binder_id}/sections/{node_id}")


proc objectsBindersBinderIdSectionsPost*(httpClient: HttpClient, binderId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Binder Section
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/binders/{binder_id}/sections")


proc objectsBindersBinderIdSectionsSectionIdDelete*(httpClient: HttpClient, binderId: string, sectionId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Delete Binder Section
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/binders/{binder_id}/sections/{section_id}")


proc objectsBindersBinderIdSectionsSectionIdGet*(httpClient: HttpClient, binderId: string, sectionId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder Sections
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/{binder_id}/sections/{section_id}")


proc objectsBindersBinderIdVersionsGet*(httpClient: HttpClient, binderId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Binder Versions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/{binder_id}/versions")


proc objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost*(httpClient: HttpClient, binderId: string, majorVersion: string, minorVersion: string, source: bool, renditiontype: string, docversion: string, attachments: string, `export`: string, docfield: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Export Binder (Specific Version)
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("source", $source), # to include source content or not
    ("renditiontype", $renditiontype), # to include viewable renditions
    ("docversion", $docversion), # to include all major versions
    ("attachments", $attachments), # to include all versions of attachments
    ("export", $`export`), # configurable filename metadata
    ("docfield", $docfield), # to exclude document metadata csv
  ])
  httpClient.post(basepath & fmt"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export" & "?" & url_encoded_query_params)


proc objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete*(httpClient: HttpClient, binderId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Binder Version
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}")


proc objectsBindersBinderIdVersionsMajorVersionMinorVersionGet*(httpClient: HttpClient, binderId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder Version
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}")


proc objectsBindersBinderIdVersionsMajorVersionMinorVersionPut*(httpClient: HttpClient, binderId: string, majorVersion: string, minorVersion: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Update Binder Version
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}")


proc objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost*(httpClient: HttpClient, binderId: string, majorVersion: string, minorVersion: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Create Binder Relationship
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships")


proc objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete*(httpClient: HttpClient, binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Binder Relationship
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}")


proc objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet*(httpClient: HttpClient, binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder Relationship
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}")


proc objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet*(httpClient: HttpClient, binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder Version Section
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}")


proc objectsBindersIdRolesGet*(httpClient: HttpClient, id: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Binder Roles
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/{id}/roles")


proc objectsBindersIdRolesPost*(httpClient: HttpClient, id: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Assign Users & Groups to Roles on a Single Binder
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/binders/{id}/roles")


proc objectsBindersIdRolesRoleNameGet*(httpClient: HttpClient, id: string, roleName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Role
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/{id}/roles/{role_name}")


proc objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet*(httpClient: HttpClient, id: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder User Actions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions")


proc objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet*(httpClient: HttpClient, id: string, majorVersion: string, minorVersion: string, nameV: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder Entry Criteria
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements")


proc objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut*(httpClient: HttpClient, id: string, majorVersion: string, minorVersion: string, nameV: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Initiate Binder User Action
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}")


proc objectsBindersLifecycleActionsPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Retrieve User Actions on Multiple Binders
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/binders/lifecycle_actions")


proc objectsBindersLifecycleActionsUserActionNamePut*(httpClient: HttpClient, userActionName: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Initiate Bulk Binder User Actions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/binders/lifecycle_actions/{user_action_name}")


proc objectsBindersPost*(httpClient: HttpClient, async: bool, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Create Binder
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("async", $async), # When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. 
  ])
  httpClient.post(basepath & "/objects/binders" & "?" & url_encoded_query_params)


proc objectsBindersTemplatesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder Template Collection
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/objects/binders/templates")


proc objectsBindersTemplatesPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Binder Template
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/binders/templates")


proc objectsBindersTemplatesPut*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Binder Template
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & "/objects/binders/templates")


proc objectsBindersTemplatesTemplateNameBindernodesGet*(httpClient: HttpClient, templateName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder Template Node Attributes
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/templates/{template_name}/bindernodes")


proc objectsBindersTemplatesTemplateNameBindernodesPost*(httpClient: HttpClient, templateName: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Binder Template Node
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/binders/templates/{template_name}/bindernodes")


proc objectsBindersTemplatesTemplateNameBindernodesPut*(httpClient: HttpClient, templateName: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Replace Binder Template Nodes
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/binders/templates/{template_name}/bindernodes")


proc objectsBindersTemplatesTemplateNameDelete*(httpClient: HttpClient, templateName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Binder Template
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/binders/templates/{template_name}")


proc objectsBindersTemplatesTemplateNameGet*(httpClient: HttpClient, templateName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Binder Template Attributes
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/binders/templates/{template_name}")


proc objectsDeletionsDocumentsGet*(httpClient: HttpClient, startDate: string, endDate: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Deleted Document IDs
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("start_date", $startDate), # Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
    ("end_date", $endDate), # Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
  ])
  httpClient.get(basepath & "/objects/deletions/documents" & "?" & url_encoded_query_params)


proc objectsDeletionsVobjectsObjectNameGet*(httpClient: HttpClient, objectName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Deleted Object Record ID
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/deletions/vobjects/{object_name}")


proc objectsDocumentsActionsGet*(httpClient: HttpClient, loc: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Document Workflows
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # When localized (translated) strings are available, retrieve them by setting loc to true.
  ])
  httpClient.get(basepath & "/objects/documents/actions" & "?" & url_encoded_query_params)


proc objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet*(httpClient: HttpClient, lifecycleAndStateAndAction: string, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download Controlled Copy Job Results
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results")


proc objectsDocumentsActionsWorkflowNameGet*(httpClient: HttpClient, workflowName: string, loc: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Workflow Details
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # When localized (translated) strings are available, retrieve them by setting loc to true.
  ])
  httpClient.get(basepath & fmt"/objects/documents/actions/{workflow_name}" & "?" & url_encoded_query_params)


proc objectsDocumentsActionsWorkflowNamePost*(httpClient: HttpClient, workflowName: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Initiate Document Workflow
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/documents/actions/{workflow_name}")


proc objectsDocumentsAnnotationsBatchDelete*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Delete Annotations
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & "/objects/documents/annotations/batch")


proc objectsDocumentsAnnotationsBatchPost*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Create Multiple Annotations
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/documents/annotations/batch")


proc objectsDocumentsAnnotationsBatchPut*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Update Annotations
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & "/objects/documents/annotations/batch")


proc objectsDocumentsAnnotationsRepliesBatchPost*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Add Annotation Replies
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/documents/annotations/replies/batch")


proc objectsDocumentsAttachmentsBatchDelete*(httpClient: HttpClient, accept: string, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Delete Multiple Document Attachments
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & "/objects/documents/attachments/batch")


proc objectsDocumentsAttachmentsBatchPost*(httpClient: HttpClient, accept: string, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Multiple Document Attachments
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/documents/attachments/batch")


proc objectsDocumentsAttachmentsBatchPut*(httpClient: HttpClient, accept: string, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Multiple Document Attachment Descriptions
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & "/objects/documents/attachments/batch")


proc objectsDocumentsBatchActionsFileextractJobIdResultsGet*(httpClient: HttpClient, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Export Results
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/batch/actions/fileextract/{job_id}/results")


proc objectsDocumentsBatchActionsFileextractPost*(httpClient: HttpClient, source: bool, renditions: bool, allversions: bool, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Export Documents
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("source", $source), # Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
    ("renditions", $renditions), # Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
    ("allversions", $allversions), # Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.
  ])
  httpClient.post(basepath & "/objects/documents/batch/actions/fileextract" & "?" & url_encoded_query_params)


proc objectsDocumentsBatchActionsReclassifyPut*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIMigrationMode: bool, xVaultAPIClientID: string): Response =
  ## Reclassify Multiple Documents
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & "/objects/documents/batch/actions/reclassify")


proc objectsDocumentsBatchActionsRerenderPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Multiple Document Renditions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/documents/batch/actions/rerender")


proc objectsDocumentsBatchDelete*(httpClient: HttpClient, idParam: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Delete Multiple Documents
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("idParam", $idParam), # If you’re identifying documents in your input by their external ID
  ])
  httpClient.delete(basepath & "/objects/documents/batch" & "?" & url_encoded_query_params)


proc objectsDocumentsBatchLockDelete*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Undo Collaborative Authoring Checkout
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & "/objects/documents/batch/lock")


proc objectsDocumentsBatchPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIMigrationMode: bool, xVaultAPIClientID: string): Response =
  ## Create Multiple Documents
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/documents/batch")


proc objectsDocumentsBatchPut*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIMigrationMode: bool, xVaultAPIClientID: string): Response =
  ## Update Multiple Documents
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & "/objects/documents/batch")


proc objectsDocumentsDocIdAnchorsGet*(httpClient: HttpClient, docId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Anchor IDs
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/anchors")


proc objectsDocumentsDocIdAnnotationsFileGet*(httpClient: HttpClient, docId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Export Document Annotations to PDF
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/annotations/file")


proc objectsDocumentsDocIdAnnotationsFilePost*(httpClient: HttpClient, docId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Import Document Annotations from PDF
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/documents/{doc_id}/annotations/file")


proc objectsDocumentsDocIdAttachmentsAttachmentIdDelete*(httpClient: HttpClient, docId: string, attachmentId: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Delete Single Document Attachment
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/documents/{doc_id}/attachments/{attachment_id}")


proc objectsDocumentsDocIdAttachmentsAttachmentIdFileGet*(httpClient: HttpClient, docId: string, attachmentId: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Download Document Attachment
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/attachments/{attachment_id}/file")


proc objectsDocumentsDocIdAttachmentsAttachmentIdGet*(httpClient: HttpClient, docId: string, attachmentId: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Attachment Metadata
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/attachments/{attachment_id}")


proc objectsDocumentsDocIdAttachmentsAttachmentIdPut*(httpClient: HttpClient, docId: string, attachmentId: string, accept: string, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Document Attachment Description
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/documents/{doc_id}/attachments/{attachment_id}")


proc objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete*(httpClient: HttpClient, docId: string, attachmentId: string, attachmentVersion: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Delete Single Document Attachment Version
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}")


proc objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet*(httpClient: HttpClient, docId: string, attachmentId: string, attachmentVersion: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Download Document Attachment Version
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file")


proc objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet*(httpClient: HttpClient, docId: string, attachmentId: string, attachmentVersion: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Attachment Version Metadata
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}")


proc objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost*(httpClient: HttpClient, docId: string, attachmentId: string, attachmentVersion: string, restore: bool, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Restore Document Attachment Version
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("restore", $restore), # The parameter restore must be set to true. 
  ])
  httpClient.post(basepath & fmt"/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}" & "?" & url_encoded_query_params)


proc objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet*(httpClient: HttpClient, docId: string, attachmentId: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Attachment Versions
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/attachments/{attachment_id}/versions")


proc objectsDocumentsDocIdAttachmentsFileGet*(httpClient: HttpClient, docId: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Download All Document Attachments
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/attachments/file")


proc objectsDocumentsDocIdAttachmentsGet*(httpClient: HttpClient, docId: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Attachments
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/attachments")


proc objectsDocumentsDocIdAttachmentsPost*(httpClient: HttpClient, docId: string, accept: string, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Document Attachment
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/documents/{doc_id}/attachments")


proc objectsDocumentsDocIdAudittrailGet*(httpClient: HttpClient, docId: string, startDate: string, endDate: string, formatResult: string, limit: string, offset: string, events: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Complete Audit History for a Single Document
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("start_date", $startDate), # Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
    ("end_date", $endDate), # Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
    ("format_result", $formatResult), # To request a CSV file of your audit history, use csv. 
    ("limit", $limit), # Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    ("offset", $offset), # Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
    ("events", $events), # Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
  ])
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/audittrail" & "?" & url_encoded_query_params)


proc objectsDocumentsDocIdDelete*(httpClient: HttpClient, docId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Single Document
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/documents/{doc_id}")


proc objectsDocumentsDocIdEventsGet*(httpClient: HttpClient, docId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Events
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/events")


proc objectsDocumentsDocIdFileGet*(httpClient: HttpClient, docId: string, lockDocument: bool, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Download Document File
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("lockDocument", $lockDocument), # Set to true to Check Out this document before retrieval. If omitted, defaults to false.
  ])
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/file" & "?" & url_encoded_query_params)


proc objectsDocumentsDocIdGet*(httpClient: HttpClient, docId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}")


proc objectsDocumentsDocIdLockDelete*(httpClient: HttpClient, docId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Document Lock
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/documents/{doc_id}/lock")


proc objectsDocumentsDocIdLockGet*(httpClient: HttpClient, docId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Lock
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/lock")


proc objectsDocumentsDocIdLockPost*(httpClient: HttpClient, docId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Create Document Lock
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/documents/{doc_id}/lock")


proc objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Download All Document Version Attachments
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file")


proc objectsDocumentsDocIdPost*(httpClient: HttpClient, docId: string, suppressRendition: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Create Single Document Version
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("suppressRendition", $suppressRendition), # Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
  ])
  httpClient.post(basepath & fmt"/objects/documents/{doc_id}" & "?" & url_encoded_query_params)


proc objectsDocumentsDocIdPut*(httpClient: HttpClient, docId: string, authorization: string, contentType: string, accept: string, xVaultAPIMigrationMode: bool, xVaultAPIClientID: string): Response =
  ## Update Single Document
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/documents/{doc_id}")


proc objectsDocumentsDocIdRenditionsGet*(httpClient: HttpClient, docId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Renditions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/renditions")


proc objectsDocumentsDocIdRenditionsRenditionTypeDelete*(httpClient: HttpClient, docId: string, renditionType: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Single Document Rendition
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/documents/{doc_id}/renditions/{rendition_type}")


proc objectsDocumentsDocIdRenditionsRenditionTypeGet*(httpClient: HttpClient, docId: string, renditionType: string, steadyState: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download Document Rendition File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("steadyState", $steadyState), # Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
  ])
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/renditions/{rendition_type}" & "?" & url_encoded_query_params)


proc objectsDocumentsDocIdRenditionsRenditionTypePost*(httpClient: HttpClient, docId: string, renditionType: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Add Single Document Rendition
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/documents/{doc_id}/renditions/{rendition_type}")


proc objectsDocumentsDocIdRenditionsRenditionTypePut*(httpClient: HttpClient, docId: string, renditionType: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Replace Document Rendition
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/documents/{doc_id}/renditions/{rendition_type}")


proc objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete*(httpClient: HttpClient, docId: string, roleNameAndUserOrGroup: string, id: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Remove Users & Groups from Roles on a Single Document
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}")


proc objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Version Attachments
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments")


proc objectsDocumentsDocIdVersionsGet*(httpClient: HttpClient, docId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Versions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Read Annotations by ID
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Read Replies of Parent Annotation
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Export Document Version Annotations to PDF
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Import Document Version Annotations from PDF
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, limit: string, offset: string, annotationTypes: string, paginationId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Read Annotations by Document Version and Type
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("limit", $limit), # Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
    ("offset", $offset), # This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.
    ("annotation_types", $annotationTypes), # The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` 
    ("pagination_id", $paginationId), # A unique identifier used to load requests with paginated results.
  ])
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations" & "?" & url_encoded_query_params)


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Download Document Version Attachment Version
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Version Attachment Versions
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Single Document Version
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Version Notes as CSV
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Document Event
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Video Annotations
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Download Document Version File
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Version
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, authorization: string, contentType: string, accept: string, xVaultAPIMigrationMode: bool, xVaultAPIClientID: string): Response =
  ## Update Document Version
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Relationships
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Single Document Relationship
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Single Document Relationship
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Relationship
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Version Renditions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Document Version Rendition
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download Document Version Rendition File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Upload Document Version Rendition
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Replace Document Version Rendition
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}")


proc objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet*(httpClient: HttpClient, docId: string, majorVersion: string, minorVersion: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Download Document Version Thumbnail File
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail")


proc objectsDocumentsGet*(httpClient: HttpClient, namedFilter: string, scope: string, versionscope: string, search: string, limit: string, sort: string, start: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Documents
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("named_filter", $namedFilter), # Retrieves only documents which you have created.
    ("scope", $scope), # Searches only within the document content.
    ("versionscope", $versionscope), # Retrieves all document versions, rather than only the latest version.
    ("search", $search), # Search for documents based on a {keyword} in searchable document fields.
    ("limit", $limit), # See VQL documentation for more information.
    ("sort", $sort), # See VQL documentation for more information.
    ("start", $start), # See VQL documentation for more information.
  ])
  httpClient.get(basepath & "/objects/documents" & "?" & url_encoded_query_params)


proc objectsDocumentsIdRolesGet*(httpClient: HttpClient, id: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Document Roles
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{id}/roles")


proc objectsDocumentsIdRolesPost*(httpClient: HttpClient, id: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Assign Users & Groups to Roles on a Single Document
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/documents/{id}/roles")


proc objectsDocumentsIdRolesRoleNameGet*(httpClient: HttpClient, id: string, roleName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Role
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{id}/roles/{role_name}")


proc objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet*(httpClient: HttpClient, id: string, majorVersion: string, minorVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document User Actions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions")


proc objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet*(httpClient: HttpClient, id: string, majorVersion: string, minorVersion: string, nameV: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Entry Criteria
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements")


proc objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut*(httpClient: HttpClient, id: string, majorVersion: string, minorVersion: string, nameV: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Initiate Document User Action
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}")


proc objectsDocumentsLifecycleActionsPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Retrieve User Actions on Multiple Documents
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/documents/lifecycle_actions")


proc objectsDocumentsLifecycleActionsUserActionNamePut*(httpClient: HttpClient, userActionName: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Initiate Bulk Document User Actions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/documents/lifecycle_actions/{user_action_name}")


proc objectsDocumentsPost*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIMigrationMode: bool, xVaultAPIClientID: string): Response =
  ## Create Single Document
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/documents")


proc objectsDocumentsRelationshipsBatchDelete*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Delete Multiple Document Relationships
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & "/objects/documents/relationships/batch")


proc objectsDocumentsRelationshipsBatchPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Multiple Document Relationships
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/documents/relationships/batch")


proc objectsDocumentsRenditionsBatchDelete*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Delete Multiple Document Renditions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & "/objects/documents/renditions/batch")


proc objectsDocumentsRenditionsBatchPost*(httpClient: HttpClient, idParam: string, largeSizeAsset: string, authorization: string, accept: string, contentType: string, xVaultAPIMigrationMode: bool, xVaultAPIClientID: string): Response =
  ## Add Multiple Document Renditions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("idParam", $idParam), # If you’re identifying documents in your input by their external ID
    ("largeSizeAsset", $largeSizeAsset), # If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
  ])
  httpClient.post(basepath & "/objects/documents/renditions/batch" & "?" & url_encoded_query_params)


proc objectsDocumentsRolesBatchDelete*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Remove Users and Groups from Roles on Multiple Documents & Binders
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & "/objects/documents/roles/batch")


proc objectsDocumentsRolesBatchPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Assign Users & Groups to Roles on Multiple Documents & Binders
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/documents/roles/batch")


proc objectsDocumentsTemplatesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Template Collection
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/objects/documents/templates")


proc objectsDocumentsTemplatesPost*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Create Single Document Template
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/documents/templates")


proc objectsDocumentsTemplatesPut*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Multiple Document Templates
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & "/objects/documents/templates")


proc objectsDocumentsTemplatesTemplateNameDelete*(httpClient: HttpClient, templateName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Basic Document Template
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/documents/templates/{template_name}")


proc objectsDocumentsTemplatesTemplateNameFileGet*(httpClient: HttpClient, templateName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download Document Template File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/templates/{template_name}/file")


proc objectsDocumentsTemplatesTemplateNameGet*(httpClient: HttpClient, templateName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Document Template Attributes
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/documents/templates/{template_name}")


proc objectsDocumentsTemplatesTemplateNamePut*(httpClient: HttpClient, templateName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Update Single Document Template
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/documents/templates/{template_name}")


proc objectsDocumentsTokensPost*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Document Tokens
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/documents/tokens")


proc objectsDocumentsVersionsBatchActionsFileextractPost*(httpClient: HttpClient, source: bool, renditions: bool, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Export Document Versions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("source", $source), # Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
    ("renditions", $renditions), # Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
  ])
  httpClient.post(basepath & "/objects/documents/versions/batch/actions/fileextract" & "?" & url_encoded_query_params)


proc objectsDocumentsVersionsBatchDelete*(httpClient: HttpClient, idParam: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Multiple Document Versions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("idParam", $idParam), # If you’re identifying documents in your input by their external ID
  ])
  httpClient.delete(basepath & "/objects/documents/versions/batch" & "?" & url_encoded_query_params)


proc objectsDocumentsVersionsBatchPost*(httpClient: HttpClient, idParam: string, authorization: string, accept: string, contentType: string, xVaultAPIMigrationMode: string, xVaultAPIClientID: string): Response =
  ## Create Multiple Document Versions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("idParam", $idParam), # If you’re identifying documents in your input by their external ID
  ])
  httpClient.post(basepath & "/objects/documents/versions/batch" & "?" & url_encoded_query_params)


proc objectsDomainGet*(httpClient: HttpClient, includeApplication: bool, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Retrieve Domain Information
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("include_application", $includeApplication), # To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
  ])
  httpClient.get(basepath & "/objects/domain" & "?" & url_encoded_query_params)


proc objectsDomainsGet*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Retrieve Domains
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/objects/domains")


proc objectsEdlMatchedDocumentsBatchActionsAddPost*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Add EDL Matched Documents
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/edl_matched_documents/batch/actions/add")


proc objectsEdlMatchedDocumentsBatchActionsRemovePost*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Remove EDL Matched Documents
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/edl_matched_documents/batch/actions/remove")


proc objectsGroupsAutoGet*(httpClient: HttpClient, limit: string, offset: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Auto Managed Groups
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("limit", $limit), # Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
    ("offset", $offset), # Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  ])
  httpClient.get(basepath & "/objects/groups/auto" & "?" & url_encoded_query_params)


proc objectsGroupsGet*(httpClient: HttpClient, includeImplied: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Groups
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("includeImplied", $includeImplied), # When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
  ])
  httpClient.get(basepath & "/objects/groups" & "?" & url_encoded_query_params)


proc objectsGroupsGroupIdDelete*(httpClient: HttpClient, groupId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Group
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/groups/{group_id}")


proc objectsGroupsGroupIdGet*(httpClient: HttpClient, groupId: string, includeImplied: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Group
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("includeImplied", $includeImplied), # When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
  ])
  httpClient.get(basepath & fmt"/objects/groups/{group_id}" & "?" & url_encoded_query_params)


proc objectsGroupsGroupIdPut*(httpClient: HttpClient, groupId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Group
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/groups/{group_id}")


proc objectsGroupsPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Group 
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/groups")


proc objectsLicensesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Application License Usage
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/objects/licenses")


proc objectsObjectworkflowsActionsGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Multi-Record Workflows
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/objects/objectworkflows/actions")


proc objectsObjectworkflowsActionsWorkflowNameGet*(httpClient: HttpClient, workflowName: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Retrieve Multi-Record Workflow Details
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/objectworkflows/actions/{workflow_name}")


proc objectsObjectworkflowsActionsWorkflowNamePost*(httpClient: HttpClient, workflowName: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Initiate Multi-Record Workflow
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/objectworkflows/actions/{workflow_name}")


proc objectsObjectworkflowsGet*(httpClient: HttpClient, objectV: string, recordIdV: string, participant: string, statusV: string, offset: string, pageSize: string, loc: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Workflows
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("object__v", $objectV), # To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
    ("record_id__v", $recordIdV), # To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
    ("participant", $participant), # To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. 
    ("status__v", $statusV), # To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
    ("offset", $offset), # This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
    ("page_size", $pageSize), # This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
    ("loc", $loc), # When localized (translated) strings are available, retrieve them by including ?loc=true. 
  ])
  httpClient.get(basepath & "/objects/objectworkflows" & "?" & url_encoded_query_params)


proc objectsObjectworkflowsTasksGet*(httpClient: HttpClient, objectV: string, recordIdV: string, assigneeV: string, statusV: string, offset: string, pageSize: string, loc: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Workflow Tasks
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("object__v", $objectV), # To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
    ("record_id__v", $recordIdV), # To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
    ("assignee__v", $assigneeV), # To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. 
    ("status__v", $statusV), # To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. 
    ("offset", $offset), # This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
    ("page_size", $pageSize), # This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
    ("loc", $loc), # When localized (translated) strings are available, retrieve them by including ?loc=true. 
  ])
  httpClient.get(basepath & "/objects/objectworkflows/tasks" & "?" & url_encoded_query_params)


proc objectsObjectworkflowsTasksTaskIdActionsAcceptPost*(httpClient: HttpClient, taskId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Accept Single Record Workflow Task
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions/accept")


proc objectsObjectworkflowsTasksTaskIdActionsCancelPost*(httpClient: HttpClient, taskId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Cancel Workflow Task
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions/cancel")


proc objectsObjectworkflowsTasksTaskIdActionsCompletePost*(httpClient: HttpClient, taskId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Complete Single Record Workflow Task
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions/complete")


proc objectsObjectworkflowsTasksTaskIdActionsGet*(httpClient: HttpClient, taskId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Workflow Task Actions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions")


proc objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost*(httpClient: HttpClient, taskId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Accept Multi-item Workflow Task
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept")


proc objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost*(httpClient: HttpClient, taskId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Complete Multi-item Workflow Task
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete")


proc objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost*(httpClient: HttpClient, taskId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Manage Multi-Item Workflow Content
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent")


proc objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost*(httpClient: HttpClient, taskId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Reassign Multi-item Workflow Task
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign")


proc objectsObjectworkflowsTasksTaskIdActionsReassignPost*(httpClient: HttpClient, taskId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Reassign Single Record Workflow Task
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions/reassign")


proc objectsObjectworkflowsTasksTaskIdActionsTaskActionGet*(httpClient: HttpClient, taskId: string, taskAction: string, loc: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Workflow Task Action Details
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # When localized (translated) strings are available, retrieve them by including loc=true. 
  ])
  httpClient.get(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions/{task_action}" & "?" & url_encoded_query_params)


proc objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost*(httpClient: HttpClient, taskId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Undo Workflow Task Acceptance
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions/undoaccept")


proc objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost*(httpClient: HttpClient, taskId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Workflow Task Due Date
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/objectworkflows/tasks/{task_id}/actions/updateduedate")


proc objectsObjectworkflowsTasksTaskIdGet*(httpClient: HttpClient, taskId: string, loc: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Workflow Task Details
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # When localized (translated) strings are available, retrieve them by including loc=true.
  ])
  httpClient.get(basepath & fmt"/objects/objectworkflows/tasks/{task_id}" & "?" & url_encoded_query_params)


proc objectsObjectworkflowsWorkflowIdActionsGet*(httpClient: HttpClient, workflowId: string, loc: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Workflow Actions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # When localized (translated) strings are available, retrieve them by including loc=true. 
  ])
  httpClient.get(basepath & fmt"/objects/objectworkflows/{workflow_id}/actions" & "?" & url_encoded_query_params)


proc objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet*(httpClient: HttpClient, workflowId: string, workflowAction: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Workflow Action Details
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/objectworkflows/{workflow_id}/actions/{workflow_action}")


proc objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost*(httpClient: HttpClient, workflowId: string, workflowAction: string, documentsSys: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Initiate Workflow Action
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("documents__sys", $documentsSys), # Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
  ])
  httpClient.post(basepath & fmt"/objects/objectworkflows/{workflow_id}/actions/{workflow_action}" & "?" & url_encoded_query_params)


proc objectsObjectworkflowsWorkflowIdGet*(httpClient: HttpClient, workflowId: string, loc: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Workflow Details
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # When localized (translated) strings are available, retrieve them by including loc=true.
  ])
  httpClient.get(basepath & fmt"/objects/objectworkflows/{workflow_id}" & "?" & url_encoded_query_params)


proc objectsPicklistsGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Picklists
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/objects/picklists")


proc objectsPicklistsPicklistNameGet*(httpClient: HttpClient, picklistName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Picklist Values
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/picklists/{picklist_name}")


proc objectsPicklistsPicklistNamePicklistValueNameDelete*(httpClient: HttpClient, picklistName: string, picklistValueName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Inactivate Picklist Value
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/picklists/{picklist_name}/{picklist_value_name}")


proc objectsPicklistsPicklistNamePicklistValueNamePut*(httpClient: HttpClient, picklistName: string, picklistValueName: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Picklist Value
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/picklists/{picklist_name}/{picklist_value_name}")


proc objectsPicklistsPicklistNamePost*(httpClient: HttpClient, picklistName: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Picklist Values
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/picklists/{picklist_name}")


proc objectsPicklistsPicklistNamePut*(httpClient: HttpClient, picklistName: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Picklist Value Label
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/picklists/{picklist_name}")


proc objectsSandboxActionsBuildproductionPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Build Production Vault
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/sandbox/actions/buildproduction")


proc objectsSandboxActionsPromoteproductionPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Promote to Production
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/sandbox/actions/promoteproduction")


proc objectsSandboxActionsRecheckusagePost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Recheck Sandbox Usage Limit
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/sandbox/actions/recheckusage")


proc objectsSandboxBatchChangesizePost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Change Sandbox Size
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/sandbox/batch/changesize")


proc objectsSandboxEntitlementsSetPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Set Sandbox Entitlements
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/sandbox/entitlements/set")


proc objectsSandboxGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Sandboxes
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/objects/sandbox")


proc objectsSandboxNameDelete*(httpClient: HttpClient, name: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Sandbox
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/sandbox/{name}")


proc objectsSandboxPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create or Refresh Sandbox
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/sandbox")


proc objectsSandboxSnapshotApiNameActionsUpdatePost*(httpClient: HttpClient, apiName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Update Sandbox Snapshot
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/sandbox/snapshot/{api_name}/actions/update")


proc objectsSandboxSnapshotApiNameActionsUpgradePost*(httpClient: HttpClient, apiName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Upgrade Sandbox Snapshot
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/sandbox/snapshot/{api_name}/actions/upgrade")


proc objectsSandboxSnapshotApiNameDelete*(httpClient: HttpClient, apiName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Sandbox Snapshot
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/objects/sandbox/snapshot/{api_name}")


proc objectsSandboxSnapshotGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Sandbox Snapshots
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/objects/sandbox/snapshot")


proc objectsSandboxSnapshotPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Sandbox Snapshot
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/sandbox/snapshot")


proc objectsSandboxVaultIdActionsRefreshPost*(httpClient: HttpClient, vaultId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Refresh Sandbox from Snapshot
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/objects/sandbox/{vault_id}/actions/refresh")


proc objectsSandboxVaultIdGet*(httpClient: HttpClient, vaultId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Sandbox Details by ID
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/sandbox/{vault_id}")


proc objectsSecuritypoliciesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Security Policies
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/objects/securitypolicies")


proc objectsSecuritypoliciesSecurityPolicyNameGet*(httpClient: HttpClient, securityPolicyName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Security Policy
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/objects/securitypolicies/{security_policy_name}")


proc objectsUsersGet*(httpClient: HttpClient, vaults: string, excludeVaultMembership: string, excludeAppLicensing: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Users
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("vaults", $vaults), # Retrieve all users assigned to all Vaults in your domain.
    ("exclude_vault_membership", $excludeVaultMembership), # Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
    ("exclude_app_licensing", $excludeAppLicensing), # Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
  ])
  httpClient.get(basepath & "/objects/users/" & "?" & url_encoded_query_params)


proc objectsUsersIdGet*(httpClient: HttpClient, id: string, excludeVaultMembership: string, excludeAppLicensing: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve User
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("exclude_vault_membership", $excludeVaultMembership), # Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
    ("exclude_app_licensing", $excludeAppLicensing), # Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
  ])
  httpClient.get(basepath & fmt"/objects/users/{id}" & "?" & url_encoded_query_params)


proc objectsUsersIdPermissionsGet*(httpClient: HttpClient, id: string, filter: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve User Permissions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("filter", $filter), # Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
  ])
  httpClient.get(basepath & fmt"/objects/users/{id}/permissions" & "?" & url_encoded_query_params)


proc objectsUsersIdPut*(httpClient: HttpClient, id: string, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Single User
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/users/{id}")


proc objectsUsersMeGet*(httpClient: HttpClient, excludeVaultMembership: string, excludeAppLicensing: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Validate Session User
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("exclude_vault_membership", $excludeVaultMembership), # Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
    ("exclude_app_licensing", $excludeAppLicensing), # Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
  ])
  httpClient.get(basepath & "/objects/users/me" & "?" & url_encoded_query_params)


proc objectsUsersMePasswordPost*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Change My Password
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/users/me/password")


proc objectsUsersMePermissionsGet*(httpClient: HttpClient, filter: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve My User Permissions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("filter", $filter), # Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
  ])
  httpClient.get(basepath & "/objects/users/me/permissions" & "?" & url_encoded_query_params)


proc objectsUsersMePut*(httpClient: HttpClient, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update My User
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & "/objects/users/me")


proc objectsUsersPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Single User
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/users")


proc objectsUsersPut*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Update Multiple Users
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & "/objects/users")


proc objectsUsersUserIdDelete*(httpClient: HttpClient, userId: string, domain: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Disable User
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("domain", $domain), # When true, this disables the user account in all vaults in the domain.
  ])
  httpClient.delete(basepath & fmt"/objects/users/{user_id}" & "?" & url_encoded_query_params)


proc objectsUsersUserIdVaultMembershipVaultIdPut*(httpClient: HttpClient, userId: string, vaultId: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Update Vault Membership
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/objects/users/{user_id}/vault_membership/{vault_id}")


proc objectsVaultActionsComparePost*(httpClient: HttpClient, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Vault Compare
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/vault/actions/compare")


proc objectsVaultActionsConfigreportPost*(httpClient: HttpClient, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Vault Configuration Report
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/objects/vault/actions/configreport")


proc queryComponentsPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Component Definition Query
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/query/components")


proc queryNextPagePost*(httpClient: HttpClient, nextPage: string, authorization: string, accept: string, xVaultAPIDescribeQuery: bool, contentType: string, xVaultAPIClientID: string): Response =
  ## Next Page URL
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-DescribeQuery"] = xVaultAPIDescribeQuery
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/query/{next_page}")


proc queryPost*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIDescribeQuery: bool, contentType: string, xVaultAPIClientID: string): Response =
  ## Submitting a Query
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-DescribeQuery"] = xVaultAPIDescribeQuery
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/query")


proc queryPreviousPagePost*(httpClient: HttpClient, previousPage: string, authorization: string, accept: string, xVaultAPIDescribeQuery: bool, contentType: string, xVaultAPIClientID: string): Response =
  ## Previous Page URL
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-DescribeQuery"] = xVaultAPIDescribeQuery
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/query/{previous_page}")


proc scimV2MeGet*(httpClient: HttpClient, attributes: string, excludedAttributes: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Current User with SCIM
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("attributes", $attributes), # Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
    ("excludedAttributes", $excludedAttributes), # Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ])
  httpClient.get(basepath & "/scim/v2/Me" & "?" & url_encoded_query_params)


proc scimV2MePut*(httpClient: HttpClient, attributes: string, excludedAttributes: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Current User with SCIM
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("attributes", $attributes), # Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
    ("excludedAttributes", $excludedAttributes), # Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ])
  httpClient.put(basepath & "/scim/v2/Me" & "?" & url_encoded_query_params)


proc scimV2ResourceTypesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All SCIM Resource Types
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/scim/v2/ResourceTypes")


proc scimV2ResourceTypesTypeGet*(httpClient: HttpClient, `type`: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Single SCIM Resource Type
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/scim/v2/ResourceTypes/{type}")


proc scimV2SchemasGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All SCIM Schema Information
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/scim/v2/Schemas")


proc scimV2SchemasIdGet*(httpClient: HttpClient, id: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Single SCIM Schema Information
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/scim/v2/Schemas/{id}")


proc scimV2ServiceProviderConfigGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve SCIM Provider
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/scim/v2/ServiceProviderConfig")


proc scimV2TypeGet*(httpClient: HttpClient, `type`: string, filter: string, attributes: string, excludedAttributes: string, sortBy: string, sortOrder: string, startIndex: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve SCIM Resources
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("filter", $filter), # Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
    ("attributes", $attributes), # Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
    ("excludedAttributes", $excludedAttributes), # Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    ("sortBy", $sortBy), # Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
    ("sortOrder", $sortOrder), # Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
    ("startIndex", $startIndex), # Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
  ])
  httpClient.get(basepath & fmt"/scim/v2/{type}" & "?" & url_encoded_query_params)


proc scimV2TypeIdGet*(httpClient: HttpClient, `type`: string, id: string, attributes: string, excludedAttributes: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Single SCIM Resource
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("attributes", $attributes), # Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
    ("excludedAttributes", $excludedAttributes), # Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ])
  httpClient.get(basepath & fmt"/scim/v2/{type}/{id}" & "?" & url_encoded_query_params)


proc scimV2UsersGet*(httpClient: HttpClient, filter: string, attributes: string, excludedAttributes: string, sortBy: string, sortOrder: string, count: string, startIndex: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Users with SCIM
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("filter", $filter), # Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
    ("attributes", $attributes), # Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
    ("excludedAttributes", $excludedAttributes), # Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
    ("sortBy", $sortBy), # Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
    ("sortOrder", $sortOrder), # Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
    ("count", $count), # Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
    ("startIndex", $startIndex), # Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
  ])
  httpClient.get(basepath & "/scim/v2/Users" & "?" & url_encoded_query_params)


proc scimV2UsersIdGet*(httpClient: HttpClient, id: string, filter: string, attributes: string, excludedAttributes: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Single User with SCIM
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("filter", $filter), # Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
    ("attributes", $attributes), # Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
    ("excludedAttributes", $excludedAttributes), # Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ])
  httpClient.get(basepath & fmt"/scim/v2/Users/{id}" & "?" & url_encoded_query_params)


proc scimV2UsersIdPut*(httpClient: HttpClient, id: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update User with SCIM
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/scim/v2/Users/{id}")


proc scimV2UsersPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create User with SCIM
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/scim/v2/Users")


proc servicesCertificateCertIdGet*(httpClient: HttpClient, certId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Signing Certificate
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/certificate/{cert_id}")


proc servicesConfigurationModeActionsDisablePost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Disable Configuration Mode
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/services/configuration_mode/actions/disable")


proc servicesConfigurationModeActionsEnablePost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Enable Configuration Mode
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/services/configuration_mode/actions/enable")


proc servicesDirectdataFilesGet*(httpClient: HttpClient, extractType: string, startTime: int, stopTime: int, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Retrieve Available Direct Data Files
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("extract_type", $extractType), # The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
    ("start_time", $startTime), # Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
    ("stop_time", $stopTime), # Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
  ])
  httpClient.get(basepath & "/services/directdata/files" & "?" & url_encoded_query_params)


proc servicesDirectdataFilesNameGet*(httpClient: HttpClient, name: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Download Direct Data File
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/directdata/files/{name}")


proc servicesFileStagingItemsContentItemGet*(httpClient: HttpClient, item: string, authorization: string, accept: string, range: string, xVaultAPIClientID: string): Response =
  ## Download Item Content
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Range"] = range
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/file_staging/items/content/{item}")


proc servicesFileStagingItemsItemDelete*(httpClient: HttpClient, item: string, recursive: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete File or Folder
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("recursive", $recursive), # Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
  ])
  httpClient.delete(basepath & fmt"/services/file_staging/items/{item}" & "?" & url_encoded_query_params)


proc servicesFileStagingItemsItemGet*(httpClient: HttpClient, item: string, recursive: string, limit: string, formatResult: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## List Items at a Path
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("recursive", $recursive), # If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
    ("limit", $limit), # Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
    ("format_result", $formatResult), # If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
  ])
  httpClient.get(basepath & fmt"/services/file_staging/items/{item}" & "?" & url_encoded_query_params)


proc servicesFileStagingItemsItemPut*(httpClient: HttpClient, item: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Update Folder or File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/services/file_staging/items/{item}")


proc servicesFileStagingItemsPost*(httpClient: HttpClient, authorization: string, accept: string, contentMD5: string, xVaultAPIClientID: string): Response =
  ## Create Folder or File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-MD5"] = contentMD5
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/services/file_staging/items")


proc servicesFileStagingUploadGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## List Upload Sessions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/services/file_staging/upload/")


proc servicesFileStagingUploadPost*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Create Resumable Upload Session
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/services/file_staging/upload")


proc servicesFileStagingUploadUploadSessionIdDelete*(httpClient: HttpClient, uploadSessionId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Abort Upload Session
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/services/file_staging/upload/{upload_session_id}")


proc servicesFileStagingUploadUploadSessionIdGet*(httpClient: HttpClient, uploadSessionId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Get Upload Session Details
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/file_staging/upload/{upload_session_id}")


proc servicesFileStagingUploadUploadSessionIdPartsGet*(httpClient: HttpClient, uploadSessionId: string, limit: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## List File Parts Uploaded to Session
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("limit", $limit), # Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
  ])
  httpClient.get(basepath & fmt"/services/file_staging/upload/{upload_session_id}/parts" & "?" & url_encoded_query_params)


proc servicesFileStagingUploadUploadSessionIdPost*(httpClient: HttpClient, uploadSessionId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Commit Upload Session
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/services/file_staging/upload/{upload_session_id}")


proc servicesFileStagingUploadUploadSessionIdPut*(httpClient: HttpClient, uploadSessionId: string, authorization: string, accept: string, contentType: string, xVaultAPIFilePartNumber: string, contentMD5: string, xVaultAPIClientID: string): Response =
  ## Upload to a Session
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-FilePartNumber"] = xVaultAPIFilePartNumber
  httpClient.headers["Content-MD5"] = contentMD5
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/services/file_staging/upload/{upload_session_id}")


proc servicesJobsHistoriesGet*(httpClient: HttpClient, startDate: string, endDate: string, status: string, limit: string, offset: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Job Histories
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("start_date", $startDate), # Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
    ("end_date", $endDate), # Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
    ("status", $status), # Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
    ("limit", $limit), # Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
    ("offset", $offset), # Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
  ])
  httpClient.get(basepath & "/services/jobs/histories" & "?" & url_encoded_query_params)


proc servicesJobsJobIdErrorsGet*(httpClient: HttpClient, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Import Bulk Translation File Job Errors
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/jobs/{job_id}/errors")


proc servicesJobsJobIdGet*(httpClient: HttpClient, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Job Status
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/jobs/{job_id}")


proc servicesJobsJobIdSummaryGet*(httpClient: HttpClient, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Import Bulk Translation File Job Summary
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/jobs/{job_id}/summary")


proc servicesJobsJobIdTasksGet*(httpClient: HttpClient, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve SDK Job Tasks
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/jobs/{job_id}/tasks")


proc servicesJobsMonitorsGet*(httpClient: HttpClient, startDate: string, endDate: string, status: string, limit: string, offset: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Job Monitors
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("start_date", $startDate), # Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
    ("end_date", $endDate), # Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
    ("status", $status), # Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
    ("limit", $limit), # Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
    ("offset", $offset), # Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
  ])
  httpClient.get(basepath & "/services/jobs/monitors" & "?" & url_encoded_query_params)


proc servicesJobsStartNowJobIdPost*(httpClient: HttpClient, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Start Job
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/services/jobs/start_now/{job_id}")


proc servicesLoaderExtractPost*(httpClient: HttpClient, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Extract Data Files
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/services/loader/extract")


proc servicesLoaderJobIdTasksTaskIdFailurelogGet*(httpClient: HttpClient, jobId: string, taskId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Load Failure Log Results
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/loader/{job_id}/tasks/{task_id}/failurelog")


proc servicesLoaderJobIdTasksTaskIdResultsGet*(httpClient: HttpClient, jobId: string, taskId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Loader Extract Results
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/loader/{job_id}/tasks/{task_id}/results")


proc servicesLoaderJobIdTasksTaskIdResultsRenditionsGet*(httpClient: HttpClient, jobId: string, taskId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Loader Extract Renditions Results
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/loader/{job_id}/tasks/{task_id}/results/renditions")


proc servicesLoaderJobIdTasksTaskIdSuccesslogGet*(httpClient: HttpClient, jobId: string, taskId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Load Success Log Results
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/loader/{job_id}/tasks/{task_id}/successlog")


proc servicesLoaderLoadPost*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Load Data Objects
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/services/loader/load")


proc servicesPackageActionsValidatePost*(httpClient: HttpClient, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Validate Package
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/services/package/actions/validate")


proc servicesPackagePost*(httpClient: HttpClient, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Export Package
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/services/package")


proc servicesPackagePut*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Import Package
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & "/services/package")


proc servicesQueuesGet*(httpClient: HttpClient, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Queues
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/services/queues")


proc servicesQueuesQueueNameActionsDisableDeliveryPut*(httpClient: HttpClient, queueName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Disable Delivery
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/services/queues/{queue_name}/actions/disable_delivery")


proc servicesQueuesQueueNameActionsEnableDeliveryPut*(httpClient: HttpClient, queueName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Enable Delivery
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/services/queues/{queue_name}/actions/enable_delivery")


proc servicesQueuesQueueNameActionsResetPut*(httpClient: HttpClient, queueName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Reset Queue
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/services/queues/{queue_name}/actions/reset")


proc servicesQueuesQueueNameGet*(httpClient: HttpClient, queueName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Queue Status
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/services/queues/{queue_name}")


proc servicesVobjectVaultPackageVPackageIdActionsValidatePost*(httpClient: HttpClient, packageId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Validate Imported Package
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/services/vobject/vault_package__v/{package_id}/actions/validate")


proc sessionDelete*(httpClient: HttpClient, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## End Session
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & "/session")


proc uicodeDistributionsDistributionNameCodeGet*(httpClient: HttpClient, distributionName: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Download Single Client Code Distribution
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/uicode/distributions/{distribution_name}/code")


proc uicodeDistributionsDistributionNameDelete*(httpClient: HttpClient, distributionName: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Delete Single Client Code Distribution
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/uicode/distributions/{distribution_name}")


proc uicodeDistributionsDistributionNameGet*(httpClient: HttpClient, distributionName: string, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Retrieve Single Client Code Distribution Metadata
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/uicode/distributions/{distribution_name}")


proc uicodeDistributionsGet*(httpClient: HttpClient, accept: string, authorization: string, xVaultAPIClientID: string): Response =
  ## Retrieve All Client Code Distribution Metadata
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & "/uicode/distributions")


proc uicodeDistributionsPost*(httpClient: HttpClient, accept: string, authorization: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Add or Replace Single Client Code Distribution
  httpClient.headers["Accept"] = accept
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/uicode/distributions")


proc vobjectVaultPackageVPackageIdActionsDeployPost*(httpClient: HttpClient, packageId: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Deploy Package
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobject/vault_package__v/{package_id}/actions/deploy")


proc vobjectVaultPackageVPackageIdActionsDeployResultsGet*(httpClient: HttpClient, packageId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Package Deploy Results
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobject/vault_package__v/{package_id}/actions/deploy/results")


proc vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet*(httpClient: HttpClient, objectName: string, jobStatus: string, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Results of Cascade Delete Job
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}")


proc vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet*(httpClient: HttpClient, objectName: string, jobStatus: string, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Results of Deep Copy Job
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}")


proc vobjectsEdlItemVActionsCreateplaceholderPost*(httpClient: HttpClient, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Create a Placeholder from an EDL Item
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & "/vobjects/edl_item__v/actions/createplaceholder")


proc vobjectsMergesJobIdLogGet*(httpClient: HttpClient, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download Merge Records Job Log
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/merges/{job_id}/log")


proc vobjectsMergesJobIdResultsGet*(httpClient: HttpClient, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Record Merge Results
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/merges/{job_id}/results")


proc vobjectsMergesJobIdStatusGet*(httpClient: HttpClient, jobId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Record Merge Status
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/merges/{job_id}/status")


proc vobjectsObjectNameActionsActionNamePost*(httpClient: HttpClient, objectName: string, actionName: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Initiate Object Action on Multiple Records
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobjects/{object_name}/actions/{action_name}")


proc vobjectsObjectNameActionsChangetypePost*(httpClient: HttpClient, objectName: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Change Object Type
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobjects/{object_name}/actions/changetype")


proc vobjectsObjectNameActionsMergePost*(httpClient: HttpClient, objectName: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string, vobjectsObjectNameActionsMergePostRequestInner: seq[_vobjects__object_name__actions_merge_post_request_inner]): Response =
  ## Initiate Record Merge
  httpClient.headers["Content-Type"] = "application/json"
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobjects/{object_name}/actions/merge", $(%vobjectsObjectNameActionsMergePostRequestInner))


proc vobjectsObjectNameActionsRecalculaterollupsGet*(httpClient: HttpClient, objectName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Roll-up Field Recalculation Status
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/actions/recalculaterollups")


proc vobjectsObjectNameActionsRecalculaterollupsPost*(httpClient: HttpClient, objectName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Recalculate Roll-up Fields
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobjects/{object_name}/actions/recalculaterollups")


proc vobjectsObjectNameActionsUpdatecorporatecurrencyPut*(httpClient: HttpClient, objectName: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Corporate Currency Fields
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/vobjects/{object_name}/actions/updatecorporatecurrency")


proc vobjectsObjectNameAttachmentsBatchDelete*(httpClient: HttpClient, objectName: string, idParam: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Delete Multiple Object Record Attachments
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("idParam", $idParam), # 
  ])
  httpClient.delete(basepath & fmt"/vobjects/{object_name}/attachments/batch" & "?" & url_encoded_query_params)


proc vobjectsObjectNameAttachmentsBatchPost*(httpClient: HttpClient, objectName: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Multiple Object Record Attachments
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobjects/{object_name}/attachments/batch")


proc vobjectsObjectNameAttachmentsBatchPut*(httpClient: HttpClient, objectName: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Multiple Object Record Attachment Descriptions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/vobjects/{object_name}/attachments/batch")


proc vobjectsObjectNameDelete*(httpClient: HttpClient, objectName: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Object Records
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/vobjects/{object_name}")


proc vobjectsObjectNameIdRolesRoleNameGet*(httpClient: HttpClient, objectName: string, id: string, roleName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Object Record Roles
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{id}/roles/{role_name}")


proc vobjectsObjectNameObjectRecordIdActionsActionNameGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, actionName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Object User Actions Details
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}/actions/{action_name}")


proc vobjectsObjectNameObjectRecordIdActionsActionNamePost*(httpClient: HttpClient, objectName: string, objectRecordId: string, actionName: string, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string): Response =
  ## Initiate Object Action on a Single Record
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobjects/{object_name}/{object_record_id}/actions/{action_name}")


proc vobjectsObjectNameObjectRecordIdActionsCascadedeletePost*(httpClient: HttpClient, objectName: string, objectRecordId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Cascade Delete Object Record
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobjects/{object_name}/{object_record_id}/actions/cascadedelete")


proc vobjectsObjectNameObjectRecordIdActionsDeepcopyPost*(httpClient: HttpClient, objectName: string, objectRecordId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Deep Copy Object Record
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobjects/{object_name}/{object_record_id}/actions/deepcopy")


proc vobjectsObjectNameObjectRecordIdActionsGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, loc: bool, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Object Record User Actions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("loc", $loc), # Optional: When true, retrieves localized (translated) strings for the label. 
  ])
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}/actions" & "?" & url_encoded_query_params)


proc vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, attachmentFieldName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download Attachment Field File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file")


proc vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost*(httpClient: HttpClient, objectName: string, objectRecordId: string, attachmentFieldName: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Update Attachment Field File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file")


proc vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download All Attachment Field Files
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachment_fields/file")


proc vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete*(httpClient: HttpClient, objectName: string, objectRecordId: string, attachmentId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Delete Object Record Attachment
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}")


proc vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, attachmentId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Object Record Attachment Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}")


proc vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut*(httpClient: HttpClient, objectName: string, objectRecordId: string, attachmentId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Update Object Record Attachment Description
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}")


proc vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete*(httpClient: HttpClient, objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Delete Object Record Attachment Version
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}")


proc vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download Object Record Attachment File
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file")


proc vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Object Record Attachment Version Metadata
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}")


proc vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost*(httpClient: HttpClient, objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore: bool, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Restore Object Record Attachment Version
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("restore", $restore), # 
  ])
  httpClient.post(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}" & "?" & url_encoded_query_params)


proc vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, attachmentId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Object Record Attachment Versions
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions")


proc vobjectsObjectNameObjectRecordIdAttachmentsFileGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Download All Object Record Attachment Files
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachments/file")


proc vobjectsObjectNameObjectRecordIdAttachmentsGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Object Record Attachments
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachments")


proc vobjectsObjectNameObjectRecordIdAttachmentsPost*(httpClient: HttpClient, objectName: string, objectRecordId: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Create Object Record Attachment
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobjects/{object_name}/{object_record_id}/attachments")


proc vobjectsObjectNameObjectRecordIdAudittrailGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, startDate: string, endDate: string, formatResult: string, limit: string, offset: string, events: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Complete Audit History for a Single Object Record
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("start_date", $startDate), # Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
    ("end_date", $endDate), # Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
    ("format_result", $formatResult), # To request a CSV file of your audit history, use csv. 
    ("limit", $limit), # Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
    ("offset", $offset), # Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
    ("events", $events), # Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.
  ])
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}/audittrail" & "?" & url_encoded_query_params)


proc vobjectsObjectNameObjectRecordIdGet*(httpClient: HttpClient, objectName: string, objectRecordId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Object Record
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/{object_name}/{object_record_id}")


proc vobjectsObjectNamePost*(httpClient: HttpClient, objectName: string, idParam: string, authorization: string, contentType: string, accept: string, xVaultAPIMigrationMode: bool, xVaultAPINoTriggers: bool, xVaultAPIClientID: string): Response =
  ## Create & Upsert Object Records
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
  httpClient.headers["X-VaultAPI-NoTriggers"] = xVaultAPINoTriggers
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  let url_encoded_query_params = encodeQuery([
    ("idParam", $idParam), # To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.
  ])
  httpClient.post(basepath & fmt"/vobjects/{object_name}" & "?" & url_encoded_query_params)


proc vobjectsObjectNamePut*(httpClient: HttpClient, objectName: string, authorization: string, contentType: string, accept: string, xVaultAPIMigrationMode: bool, xVaultAPINoTriggers: bool, xVaultAPIClientID: string): Response =
  ## Update Object Records
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
  httpClient.headers["X-VaultAPI-NoTriggers"] = xVaultAPINoTriggers
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.put(basepath & fmt"/vobjects/{object_name}")


proc vobjectsObjectNameRolesDelete*(httpClient: HttpClient, objectName: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Remove Users & Groups from Roles on Object Records
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.delete(basepath & fmt"/vobjects/{object_name}/roles")


proc vobjectsObjectNameRolesPost*(httpClient: HttpClient, objectName: string, authorization: string, accept: string, contentType: string, xVaultAPIClientID: string): Response =
  ## Assign Users & Groups to Roles on Object Records
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["Content-Type"] = contentType
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.post(basepath & fmt"/vobjects/{object_name}/roles")


proc vobjectsOutboundPackageVPackageIdDependenciesGet*(httpClient: HttpClient, packageId: string, authorization: string, accept: string, xVaultAPIClientID: string): Response =
  ## Retrieve Outbound Package Dependencies
  httpClient.headers["Authorization"] = authorization
  httpClient.headers["Accept"] = accept
  httpClient.headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
  httpClient.get(basepath & fmt"/vobjects/outbound_package__v/{package_id}/dependencies")

