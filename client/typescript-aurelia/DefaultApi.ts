/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
} from './models';

/**
 * apiGet - parameters interface
 */
export interface IApiGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * apiMdlComponentsComponentTypeAndRecordNameFilesGet - parameters interface
 */
export interface IApiMdlComponentsComponentTypeAndRecordNameFilesGetParams {
  componentTypeAndRecordName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * apiMdlComponentsComponentTypeAndRecordNameGet - parameters interface
 */
export interface IApiMdlComponentsComponentTypeAndRecordNameGetParams {
  componentTypeAndRecordName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * apiMdlExecuteAsyncJobIdResultsGet - parameters interface
 */
export interface IApiMdlExecuteAsyncJobIdResultsGetParams {
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * apiMdlExecuteAsyncPost - parameters interface
 */
export interface IApiMdlExecuteAsyncPostParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * apiMdlExecutePost - parameters interface
 */
export interface IApiMdlExecutePostParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * apiMdlFilesPost - parameters interface
 */
export interface IApiMdlFilesPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * audittrailAuditTrailTypeGet - parameters interface
 */
export interface IAudittrailAuditTrailTypeGetParams {
  auditTrailType: string;
  startDate?: string;
  endDate?: string;
  allDates?: string;
  formatResult?: string;
  limit?: string;
  offset?: string;
  objects?: string;
  events?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * authDiscoveryPost - parameters interface
 */
export interface IAuthDiscoveryPostParams {
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * authOauthSessionOathOidcProfileIdPost - parameters interface
 */
export interface IAuthOauthSessionOathOidcProfileIdPostParams {
  oathOidcProfileId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * authPost - parameters interface
 */
export interface IAuthPostParams {
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * codeClassNameDelete - parameters interface
 */
export interface ICodeClassNameDeleteParams {
  className: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * codeClassNameDisablePut - parameters interface
 */
export interface ICodeClassNameDisablePutParams {
  className: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * codeClassNameEnablePut - parameters interface
 */
export interface ICodeClassNameEnablePutParams {
  className: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * codeClassNameGet - parameters interface
 */
export interface ICodeClassNameGetParams {
  className: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * codeProfilerGet - parameters interface
 */
export interface ICodeProfilerGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * codeProfilerPost - parameters interface
 */
export interface ICodeProfilerPostParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * codeProfilerSessionNameActionsEndPost - parameters interface
 */
export interface ICodeProfilerSessionNameActionsEndPostParams {
  sessionName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * codeProfilerSessionNameDelete - parameters interface
 */
export interface ICodeProfilerSessionNameDeleteParams {
  sessionName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * codeProfilerSessionNameGet - parameters interface
 */
export interface ICodeProfilerSessionNameGetParams {
  sessionName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * codeProfilerSessionNameResultsGet - parameters interface
 */
export interface ICodeProfilerSessionNameResultsGetParams {
  sessionName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * codePut - parameters interface
 */
export interface ICodePutParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * compositesTreesEdlHierarchyOrTemplateActionsListnodesPost - parameters interface
 */
export interface ICompositesTreesEdlHierarchyOrTemplateActionsListnodesPostParams {
  edlHierarchyOrTemplate: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * compositesTreesEdlHierarchyOrTemplateGet - parameters interface
 */
export interface ICompositesTreesEdlHierarchyOrTemplateGetParams {
  edlHierarchyOrTemplate: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * compositesTreesEdlHierarchyVParentNodeIdChildrenGet - parameters interface
 */
export interface ICompositesTreesEdlHierarchyVParentNodeIdChildrenGetParams {
  parentNodeId: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * compositesTreesEdlHierarchyVParentNodeIdChildrenPut - parameters interface
 */
export interface ICompositesTreesEdlHierarchyVParentNodeIdChildrenPutParams {
  parentNodeId: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * configurationComponentTypeAndRecordNameGet - parameters interface
 */
export interface IConfigurationComponentTypeAndRecordNameGetParams {
  componentTypeAndRecordName: string;
  loc?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * configurationComponentTypeGet - parameters interface
 */
export interface IConfigurationComponentTypeGetParams {
  componentType: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * configurationObjectNameAndObjectTypeGet - parameters interface
 */
export interface IConfigurationObjectNameAndObjectTypeGetParams {
  objectNameAndObjectType: string;
  loc?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * configurationObjecttypeGet - parameters interface
 */
export interface IConfigurationObjecttypeGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * configurationRoleAssignmentRuleDelete - parameters interface
 */
export interface IConfigurationRoleAssignmentRuleDeleteParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * configurationRoleAssignmentRuleGet - parameters interface
 */
export interface IConfigurationRoleAssignmentRuleGetParams {
  lifecycleV?: string;
  roleV?: string;
  productV?: string;
  countryV?: string;
  studyV?: string;
  studyCountryV?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * configurationRoleAssignmentRulePost - parameters interface
 */
export interface IConfigurationRoleAssignmentRulePostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * configurationRoleAssignmentRulePut - parameters interface
 */
export interface IConfigurationRoleAssignmentRulePutParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * delegationLoginPost - parameters interface
 */
export interface IDelegationLoginPostParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * delegationVaultsGet - parameters interface
 */
export interface IDelegationVaultsGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * keepAlivePost - parameters interface
 */
export interface IKeepAlivePostParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * limitsGet - parameters interface
 */
export interface ILimitsGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * logsApiUsageGet - parameters interface
 */
export interface ILogsApiUsageGetParams {
  date?: string;
  logFormat?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * logsCodeDebugGet - parameters interface
 */
export interface ILogsCodeDebugGetParams {
  userId?: string;
  includeInactive?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * logsCodeDebugIdActionsResetDelete - parameters interface
 */
export interface ILogsCodeDebugIdActionsResetDeleteParams {
  id: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * logsCodeDebugIdActionsResetPost - parameters interface
 */
export interface ILogsCodeDebugIdActionsResetPostParams {
  id: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * logsCodeDebugIdFilesGet - parameters interface
 */
export interface ILogsCodeDebugIdFilesGetParams {
  id: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * logsCodeDebugIdGet - parameters interface
 */
export interface ILogsCodeDebugIdGetParams {
  id: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * logsCodeDebugPost - parameters interface
 */
export interface ILogsCodeDebugPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * logsCodeRuntimeGet - parameters interface
 */
export interface ILogsCodeRuntimeGetParams {
  date?: string;
  logFormat?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * messagesMessageTypeActionsImportPost - parameters interface
 */
export interface IMessagesMessageTypeActionsImportPostParams {
  messageType: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * messagesMessageTypeLanguageLangActionsExportPost - parameters interface
 */
export interface IMessagesMessageTypeLanguageLangActionsExportPostParams {
  messageType: string;
  lang: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataAudittrailAuditTrailTypeGet - parameters interface
 */
export interface IMetadataAudittrailAuditTrailTypeGetParams {
  auditTrailType: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataAudittrailGet - parameters interface
 */
export interface IMetadataAudittrailGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataComponentsComponentTypeGet - parameters interface
 */
export interface IMetadataComponentsComponentTypeGetParams {
  componentType: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataComponentsGet - parameters interface
 */
export interface IMetadataComponentsGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsBindersTemplatesBindernodesGet - parameters interface
 */
export interface IMetadataObjectsBindersTemplatesBindernodesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsBindersTemplatesGet - parameters interface
 */
export interface IMetadataObjectsBindersTemplatesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet - parameters interface
 */
export interface IMetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetParams {
  placemarkType: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet - parameters interface
 */
export interface IMetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetParams {
  referenceType: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet - parameters interface
 */
export interface IMetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetParams {
  annotationType: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet - parameters interface
 */
export interface IMetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetParams {
  eventType: string;
  eventSubtype: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsEventsGet - parameters interface
 */
export interface IMetadataObjectsDocumentsEventsGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsLockGet - parameters interface
 */
export interface IMetadataObjectsDocumentsLockGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsPropertiesFindCommonPost - parameters interface
 */
export interface IMetadataObjectsDocumentsPropertiesFindCommonPostParams {
  contentType?: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsPropertiesGet - parameters interface
 */
export interface IMetadataObjectsDocumentsPropertiesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsTemplatesGet - parameters interface
 */
export interface IMetadataObjectsDocumentsTemplatesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsTypesGet - parameters interface
 */
export interface IMetadataObjectsDocumentsTypesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsTypesTypeGet - parameters interface
 */
export interface IMetadataObjectsDocumentsTypesTypeGetParams {
  type: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsTypesTypeRelationshipsGet - parameters interface
 */
export interface IMetadataObjectsDocumentsTypesTypeRelationshipsGetParams {
  type: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet - parameters interface
 */
export interface IMetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetParams {
  type: string;
  subtype: string;
  classification: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet - parameters interface
 */
export interface IMetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetParams {
  type: string;
  subtype: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsGroupsGet - parameters interface
 */
export interface IMetadataObjectsGroupsGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsSecuritypoliciesGet - parameters interface
 */
export interface IMetadataObjectsSecuritypoliciesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataObjectsUsersGet - parameters interface
 */
export interface IMetadataObjectsUsersGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet - parameters interface
 */
export interface IMetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet - parameters interface
 */
export interface IMetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataVobjectsGet - parameters interface
 */
export interface IMetadataVobjectsGetParams {
  loc?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataVobjectsObjectNameActionsCanceldeploymentPost - parameters interface
 */
export interface IMetadataVobjectsObjectNameActionsCanceldeploymentPostParams {
  objectName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataVobjectsObjectNameFieldsObjectFieldNameGet - parameters interface
 */
export interface IMetadataVobjectsObjectNameFieldsObjectFieldNameGetParams {
  objectName: string;
  objectFieldName: string;
  loc?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataVobjectsObjectNameGet - parameters interface
 */
export interface IMetadataVobjectsObjectNameGetParams {
  objectName: string;
  loc?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataVobjectsObjectNamePageLayoutsGet - parameters interface
 */
export interface IMetadataVobjectsObjectNamePageLayoutsGetParams {
  objectName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * metadataVobjectsObjectNamePageLayoutsLayoutNameGet - parameters interface
 */
export interface IMetadataVobjectsObjectNamePageLayoutsLayoutNameGetParams {
  objectName: string;
  layoutName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * notificationsHistoriesGet - parameters interface
 */
export interface INotificationsHistoriesGetParams {
  startDate?: string;
  endDate?: string;
  allDates?: boolean;
  formatResult?: string;
  limit?: string;
  offset?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectWorkflowActionsActionGet - parameters interface
 */
export interface IObjectWorkflowActionsActionGetParams {
  action: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectWorkflowActionsActionPost - parameters interface
 */
export interface IObjectWorkflowActionsActionPostParams {
  action: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectWorkflowActionsCanceltasksPost - parameters interface
 */
export interface IObjectWorkflowActionsCanceltasksPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectWorkflowActionsCancelworkflowsPost - parameters interface
 */
export interface IObjectWorkflowActionsCancelworkflowsPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectWorkflowActionsGet - parameters interface
 */
export interface IObjectWorkflowActionsGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectWorkflowActionsReassigntasksPost - parameters interface
 */
export interface IObjectWorkflowActionsReassigntasksPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectWorkflowActionsReplaceworkflowownerPost - parameters interface
 */
export interface IObjectWorkflowActionsReplaceworkflowownerPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersActionsExportJobIdResultsGet - parameters interface
 */
export interface IObjectsBindersActionsExportJobIdResultsGetParams {
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdActionsExportPost - parameters interface
 */
export interface IObjectsBindersBinderIdActionsExportPostParams {
  binderId: string;
  source?: boolean;
  renditiontype?: string;
  docversion?: string;
  attachments?: string;
  _export?: string;
  docfield?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdActionsPost - parameters interface
 */
export interface IObjectsBindersBinderIdActionsPostParams {
  binderId: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdBindingRulePut - parameters interface
 */
export interface IObjectsBindersBinderIdBindingRulePutParams {
  binderId: string;
  contentType?: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdDelete - parameters interface
 */
export interface IObjectsBindersBinderIdDeleteParams {
  binderId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdDocumentsNodeIdBindingRulePut - parameters interface
 */
export interface IObjectsBindersBinderIdDocumentsNodeIdBindingRulePutParams {
  binderId: string;
  nodeId: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdDocumentsPost - parameters interface
 */
export interface IObjectsBindersBinderIdDocumentsPostParams {
  binderId: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdDocumentsSectionIdDelete - parameters interface
 */
export interface IObjectsBindersBinderIdDocumentsSectionIdDeleteParams {
  binderId: string;
  sectionId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdDocumentsSectionIdPut - parameters interface
 */
export interface IObjectsBindersBinderIdDocumentsSectionIdPutParams {
  binderId: string;
  sectionId: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdGet - parameters interface
 */
export interface IObjectsBindersBinderIdGetParams {
  binderId: string;
  depth?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdPost - parameters interface
 */
export interface IObjectsBindersBinderIdPostParams {
  binderId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdPut - parameters interface
 */
export interface IObjectsBindersBinderIdPutParams {
  binderId: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete - parameters interface
 */
export interface IObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteParams {
  binderId: string;
  roleNameAndUserOrGroup: string;
  id: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdSectionsNodeIdBindingRulePut - parameters interface
 */
export interface IObjectsBindersBinderIdSectionsNodeIdBindingRulePutParams {
  binderId: string;
  nodeId: string;
  contentType?: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdSectionsNodeIdPut - parameters interface
 */
export interface IObjectsBindersBinderIdSectionsNodeIdPutParams {
  binderId: string;
  nodeId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdSectionsPost - parameters interface
 */
export interface IObjectsBindersBinderIdSectionsPostParams {
  binderId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdSectionsSectionIdDelete - parameters interface
 */
export interface IObjectsBindersBinderIdSectionsSectionIdDeleteParams {
  binderId: string;
  sectionId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdSectionsSectionIdGet - parameters interface
 */
export interface IObjectsBindersBinderIdSectionsSectionIdGetParams {
  binderId: string;
  sectionId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdVersionsGet - parameters interface
 */
export interface IObjectsBindersBinderIdVersionsGetParams {
  binderId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost - parameters interface
 */
export interface IObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostParams {
  binderId: string;
  majorVersion: string;
  minorVersion: string;
  source?: boolean;
  renditiontype?: string;
  docversion?: string;
  attachments?: string;
  _export?: string;
  docfield?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete - parameters interface
 */
export interface IObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteParams {
  binderId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdVersionsMajorVersionMinorVersionGet - parameters interface
 */
export interface IObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetParams {
  binderId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdVersionsMajorVersionMinorVersionPut - parameters interface
 */
export interface IObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutParams {
  binderId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost - parameters interface
 */
export interface IObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostParams {
  binderId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete - parameters interface
 */
export interface IObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteParams {
  binderId: string;
  majorVersion: string;
  minorVersion: string;
  relationshipId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet - parameters interface
 */
export interface IObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetParams {
  binderId: string;
  majorVersion: string;
  minorVersion: string;
  relationshipId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet - parameters interface
 */
export interface IObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetParams {
  binderId: string;
  majorVersion: string;
  minorVersion: string;
  sectionId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersIdRolesGet - parameters interface
 */
export interface IObjectsBindersIdRolesGetParams {
  id: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersIdRolesPost - parameters interface
 */
export interface IObjectsBindersIdRolesPostParams {
  id: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersIdRolesRoleNameGet - parameters interface
 */
export interface IObjectsBindersIdRolesRoleNameGetParams {
  id: string;
  roleName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet - parameters interface
 */
export interface IObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetParams {
  id: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet - parameters interface
 */
export interface IObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetParams {
  id: string;
  majorVersion: string;
  minorVersion: string;
  nameV: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut - parameters interface
 */
export interface IObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutParams {
  id: string;
  majorVersion: string;
  minorVersion: string;
  nameV: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersLifecycleActionsPost - parameters interface
 */
export interface IObjectsBindersLifecycleActionsPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersLifecycleActionsUserActionNamePut - parameters interface
 */
export interface IObjectsBindersLifecycleActionsUserActionNamePutParams {
  userActionName: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersPost - parameters interface
 */
export interface IObjectsBindersPostParams {
  async?: boolean;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersTemplatesGet - parameters interface
 */
export interface IObjectsBindersTemplatesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersTemplatesPost - parameters interface
 */
export interface IObjectsBindersTemplatesPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersTemplatesPut - parameters interface
 */
export interface IObjectsBindersTemplatesPutParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersTemplatesTemplateNameBindernodesGet - parameters interface
 */
export interface IObjectsBindersTemplatesTemplateNameBindernodesGetParams {
  templateName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersTemplatesTemplateNameBindernodesPost - parameters interface
 */
export interface IObjectsBindersTemplatesTemplateNameBindernodesPostParams {
  templateName: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersTemplatesTemplateNameBindernodesPut - parameters interface
 */
export interface IObjectsBindersTemplatesTemplateNameBindernodesPutParams {
  templateName: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersTemplatesTemplateNameDelete - parameters interface
 */
export interface IObjectsBindersTemplatesTemplateNameDeleteParams {
  templateName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsBindersTemplatesTemplateNameGet - parameters interface
 */
export interface IObjectsBindersTemplatesTemplateNameGetParams {
  templateName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDeletionsDocumentsGet - parameters interface
 */
export interface IObjectsDeletionsDocumentsGetParams {
  startDate?: string;
  endDate?: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDeletionsVobjectsObjectNameGet - parameters interface
 */
export interface IObjectsDeletionsVobjectsObjectNameGetParams {
  objectName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsActionsGet - parameters interface
 */
export interface IObjectsDocumentsActionsGetParams {
  loc?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet - parameters interface
 */
export interface IObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetParams {
  lifecycleAndStateAndAction: string;
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsActionsWorkflowNameGet - parameters interface
 */
export interface IObjectsDocumentsActionsWorkflowNameGetParams {
  workflowName: string;
  loc?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsActionsWorkflowNamePost - parameters interface
 */
export interface IObjectsDocumentsActionsWorkflowNamePostParams {
  workflowName: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsAnnotationsBatchDelete - parameters interface
 */
export interface IObjectsDocumentsAnnotationsBatchDeleteParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsAnnotationsBatchPost - parameters interface
 */
export interface IObjectsDocumentsAnnotationsBatchPostParams {
  authorization: string;
  contentType: string;
  accept: string;
  xVaultAPIClientID: string;
}

/**
 * objectsDocumentsAnnotationsBatchPut - parameters interface
 */
export interface IObjectsDocumentsAnnotationsBatchPutParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsAnnotationsRepliesBatchPost - parameters interface
 */
export interface IObjectsDocumentsAnnotationsRepliesBatchPostParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsAttachmentsBatchDelete - parameters interface
 */
export interface IObjectsDocumentsAttachmentsBatchDeleteParams {
  accept?: string;
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsAttachmentsBatchPost - parameters interface
 */
export interface IObjectsDocumentsAttachmentsBatchPostParams {
  accept?: string;
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsAttachmentsBatchPut - parameters interface
 */
export interface IObjectsDocumentsAttachmentsBatchPutParams {
  accept?: string;
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsBatchActionsFileextractJobIdResultsGet - parameters interface
 */
export interface IObjectsDocumentsBatchActionsFileextractJobIdResultsGetParams {
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsBatchActionsFileextractPost - parameters interface
 */
export interface IObjectsDocumentsBatchActionsFileextractPostParams {
  source?: boolean;
  renditions?: boolean;
  allversions?: boolean;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsBatchActionsReclassifyPut - parameters interface
 */
export interface IObjectsDocumentsBatchActionsReclassifyPutParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIMigrationMode?: boolean;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsBatchActionsRerenderPost - parameters interface
 */
export interface IObjectsDocumentsBatchActionsRerenderPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsBatchDelete - parameters interface
 */
export interface IObjectsDocumentsBatchDeleteParams {
  idParam?: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsBatchLockDelete - parameters interface
 */
export interface IObjectsDocumentsBatchLockDeleteParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsBatchPost - parameters interface
 */
export interface IObjectsDocumentsBatchPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIMigrationMode?: boolean;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsBatchPut - parameters interface
 */
export interface IObjectsDocumentsBatchPutParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIMigrationMode?: boolean;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAnchorsGet - parameters interface
 */
export interface IObjectsDocumentsDocIdAnchorsGetParams {
  docId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAnnotationsFileGet - parameters interface
 */
export interface IObjectsDocumentsDocIdAnnotationsFileGetParams {
  docId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAnnotationsFilePost - parameters interface
 */
export interface IObjectsDocumentsDocIdAnnotationsFilePostParams {
  docId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsAttachmentIdDelete - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteParams {
  docId: string;
  attachmentId: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsAttachmentIdFileGet - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetParams {
  docId: string;
  attachmentId: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsAttachmentIdGet - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsAttachmentIdGetParams {
  docId: string;
  attachmentId: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsAttachmentIdPut - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsAttachmentIdPutParams {
  docId: string;
  attachmentId: string;
  accept?: string;
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteParams {
  docId: string;
  attachmentId: string;
  attachmentVersion: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetParams {
  docId: string;
  attachmentId: string;
  attachmentVersion: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetParams {
  docId: string;
  attachmentId: string;
  attachmentVersion: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostParams {
  docId: string;
  attachmentId: string;
  attachmentVersion: string;
  restore?: boolean;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetParams {
  docId: string;
  attachmentId: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsFileGet - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsFileGetParams {
  docId: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsGet - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsGetParams {
  docId: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAttachmentsPost - parameters interface
 */
export interface IObjectsDocumentsDocIdAttachmentsPostParams {
  docId: string;
  accept?: string;
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdAudittrailGet - parameters interface
 */
export interface IObjectsDocumentsDocIdAudittrailGetParams {
  docId: string;
  startDate?: string;
  endDate?: string;
  formatResult?: string;
  limit?: string;
  offset?: string;
  events?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdDelete - parameters interface
 */
export interface IObjectsDocumentsDocIdDeleteParams {
  docId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdEventsGet - parameters interface
 */
export interface IObjectsDocumentsDocIdEventsGetParams {
  docId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdFileGet - parameters interface
 */
export interface IObjectsDocumentsDocIdFileGetParams {
  docId: string;
  lockDocument?: boolean;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdGet - parameters interface
 */
export interface IObjectsDocumentsDocIdGetParams {
  docId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdLockDelete - parameters interface
 */
export interface IObjectsDocumentsDocIdLockDeleteParams {
  docId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdLockGet - parameters interface
 */
export interface IObjectsDocumentsDocIdLockGetParams {
  docId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdLockPost - parameters interface
 */
export interface IObjectsDocumentsDocIdLockPostParams {
  docId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet - parameters interface
 */
export interface IObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdPost - parameters interface
 */
export interface IObjectsDocumentsDocIdPostParams {
  docId: string;
  suppressRendition?: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdPut - parameters interface
 */
export interface IObjectsDocumentsDocIdPutParams {
  docId: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIMigrationMode?: boolean;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdRenditionsGet - parameters interface
 */
export interface IObjectsDocumentsDocIdRenditionsGetParams {
  docId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdRenditionsRenditionTypeDelete - parameters interface
 */
export interface IObjectsDocumentsDocIdRenditionsRenditionTypeDeleteParams {
  docId: string;
  renditionType: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdRenditionsRenditionTypeGet - parameters interface
 */
export interface IObjectsDocumentsDocIdRenditionsRenditionTypeGetParams {
  docId: string;
  renditionType: string;
  steadyState?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdRenditionsRenditionTypePost - parameters interface
 */
export interface IObjectsDocumentsDocIdRenditionsRenditionTypePostParams {
  docId: string;
  renditionType: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdRenditionsRenditionTypePut - parameters interface
 */
export interface IObjectsDocumentsDocIdRenditionsRenditionTypePutParams {
  docId: string;
  renditionType: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete - parameters interface
 */
export interface IObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteParams {
  docId: string;
  roleNameAndUserOrGroup: string;
  id: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsGetParams {
  docId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  annotationId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  annotationId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  limit?: string;
  offset?: string;
  annotationTypes?: string;
  paginationId?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  attachmentId: string;
  attachmentVersion: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  attachmentId: string;
  attachmentVersion: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIMigrationMode?: boolean;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  relationshipId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  relationshipId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  renditionType: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  renditionType: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  renditionType: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  renditionType: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet - parameters interface
 */
export interface IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetParams {
  docId: string;
  majorVersion: string;
  minorVersion: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsGet - parameters interface
 */
export interface IObjectsDocumentsGetParams {
  namedFilter?: string;
  scope?: string;
  versionscope?: string;
  search?: string;
  limit?: string;
  sort?: string;
  start?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsIdRolesGet - parameters interface
 */
export interface IObjectsDocumentsIdRolesGetParams {
  id: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsIdRolesPost - parameters interface
 */
export interface IObjectsDocumentsIdRolesPostParams {
  id: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsIdRolesRoleNameGet - parameters interface
 */
export interface IObjectsDocumentsIdRolesRoleNameGetParams {
  id: string;
  roleName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet - parameters interface
 */
export interface IObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetParams {
  id: string;
  majorVersion: string;
  minorVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet - parameters interface
 */
export interface IObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetParams {
  id: string;
  majorVersion: string;
  minorVersion: string;
  nameV: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut - parameters interface
 */
export interface IObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutParams {
  id: string;
  majorVersion: string;
  minorVersion: string;
  nameV: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsLifecycleActionsPost - parameters interface
 */
export interface IObjectsDocumentsLifecycleActionsPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsLifecycleActionsUserActionNamePut - parameters interface
 */
export interface IObjectsDocumentsLifecycleActionsUserActionNamePutParams {
  userActionName: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsPost - parameters interface
 */
export interface IObjectsDocumentsPostParams {
  authorization?: string;
  accept?: string;
  xVaultAPIMigrationMode?: boolean;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsRelationshipsBatchDelete - parameters interface
 */
export interface IObjectsDocumentsRelationshipsBatchDeleteParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsRelationshipsBatchPost - parameters interface
 */
export interface IObjectsDocumentsRelationshipsBatchPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsRenditionsBatchDelete - parameters interface
 */
export interface IObjectsDocumentsRenditionsBatchDeleteParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsRenditionsBatchPost - parameters interface
 */
export interface IObjectsDocumentsRenditionsBatchPostParams {
  idParam?: string;
  largeSizeAsset?: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIMigrationMode?: boolean;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsRolesBatchDelete - parameters interface
 */
export interface IObjectsDocumentsRolesBatchDeleteParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsRolesBatchPost - parameters interface
 */
export interface IObjectsDocumentsRolesBatchPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsTemplatesGet - parameters interface
 */
export interface IObjectsDocumentsTemplatesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsTemplatesPost - parameters interface
 */
export interface IObjectsDocumentsTemplatesPostParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsTemplatesPut - parameters interface
 */
export interface IObjectsDocumentsTemplatesPutParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsTemplatesTemplateNameDelete - parameters interface
 */
export interface IObjectsDocumentsTemplatesTemplateNameDeleteParams {
  templateName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsTemplatesTemplateNameFileGet - parameters interface
 */
export interface IObjectsDocumentsTemplatesTemplateNameFileGetParams {
  templateName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsTemplatesTemplateNameGet - parameters interface
 */
export interface IObjectsDocumentsTemplatesTemplateNameGetParams {
  templateName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsTemplatesTemplateNamePut - parameters interface
 */
export interface IObjectsDocumentsTemplatesTemplateNamePutParams {
  templateName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsTokensPost - parameters interface
 */
export interface IObjectsDocumentsTokensPostParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsVersionsBatchActionsFileextractPost - parameters interface
 */
export interface IObjectsDocumentsVersionsBatchActionsFileextractPostParams {
  source?: boolean;
  renditions?: boolean;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsVersionsBatchDelete - parameters interface
 */
export interface IObjectsDocumentsVersionsBatchDeleteParams {
  idParam?: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDocumentsVersionsBatchPost - parameters interface
 */
export interface IObjectsDocumentsVersionsBatchPostParams {
  idParam?: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIMigrationMode?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDomainGet - parameters interface
 */
export interface IObjectsDomainGetParams {
  includeApplication?: boolean;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsDomainsGet - parameters interface
 */
export interface IObjectsDomainsGetParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsEdlMatchedDocumentsBatchActionsAddPost - parameters interface
 */
export interface IObjectsEdlMatchedDocumentsBatchActionsAddPostParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsEdlMatchedDocumentsBatchActionsRemovePost - parameters interface
 */
export interface IObjectsEdlMatchedDocumentsBatchActionsRemovePostParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsGroupsAutoGet - parameters interface
 */
export interface IObjectsGroupsAutoGetParams {
  limit?: string;
  offset?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsGroupsGet - parameters interface
 */
export interface IObjectsGroupsGetParams {
  includeImplied?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsGroupsGroupIdDelete - parameters interface
 */
export interface IObjectsGroupsGroupIdDeleteParams {
  groupId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsGroupsGroupIdGet - parameters interface
 */
export interface IObjectsGroupsGroupIdGetParams {
  groupId: string;
  includeImplied?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsGroupsGroupIdPut - parameters interface
 */
export interface IObjectsGroupsGroupIdPutParams {
  groupId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsGroupsPost - parameters interface
 */
export interface IObjectsGroupsPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsLicensesGet - parameters interface
 */
export interface IObjectsLicensesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsActionsGet - parameters interface
 */
export interface IObjectsObjectworkflowsActionsGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsActionsWorkflowNameGet - parameters interface
 */
export interface IObjectsObjectworkflowsActionsWorkflowNameGetParams {
  workflowName: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsActionsWorkflowNamePost - parameters interface
 */
export interface IObjectsObjectworkflowsActionsWorkflowNamePostParams {
  workflowName: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsGet - parameters interface
 */
export interface IObjectsObjectworkflowsGetParams {
  objectV?: string;
  recordIdV?: string;
  participant?: string;
  statusV?: string;
  offset?: string;
  pageSize?: string;
  loc?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksGet - parameters interface
 */
export interface IObjectsObjectworkflowsTasksGetParams {
  objectV?: string;
  recordIdV?: string;
  assigneeV?: string;
  statusV?: string;
  offset?: string;
  pageSize?: string;
  loc?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsAcceptPost - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsAcceptPostParams {
  taskId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsCancelPost - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsCancelPostParams {
  taskId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsCompletePost - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsCompletePostParams {
  taskId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsGet - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsGetParams {
  taskId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostParams {
  taskId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostParams {
  taskId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostParams {
  taskId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostParams {
  taskId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsReassignPost - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsReassignPostParams {
  taskId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsTaskActionGet - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetParams {
  taskId: string;
  taskAction: string;
  loc?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostParams {
  taskId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostParams {
  taskId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsTasksTaskIdGet - parameters interface
 */
export interface IObjectsObjectworkflowsTasksTaskIdGetParams {
  taskId: string;
  loc?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsWorkflowIdActionsGet - parameters interface
 */
export interface IObjectsObjectworkflowsWorkflowIdActionsGetParams {
  workflowId: string;
  loc?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet - parameters interface
 */
export interface IObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetParams {
  workflowId: string;
  workflowAction: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost - parameters interface
 */
export interface IObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostParams {
  workflowId: string;
  workflowAction: string;
  documentsSys?: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsObjectworkflowsWorkflowIdGet - parameters interface
 */
export interface IObjectsObjectworkflowsWorkflowIdGetParams {
  workflowId: string;
  loc?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsPicklistsGet - parameters interface
 */
export interface IObjectsPicklistsGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsPicklistsPicklistNameGet - parameters interface
 */
export interface IObjectsPicklistsPicklistNameGetParams {
  picklistName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsPicklistsPicklistNamePicklistValueNameDelete - parameters interface
 */
export interface IObjectsPicklistsPicklistNamePicklistValueNameDeleteParams {
  picklistName: string;
  picklistValueName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsPicklistsPicklistNamePicklistValueNamePut - parameters interface
 */
export interface IObjectsPicklistsPicklistNamePicklistValueNamePutParams {
  picklistName: string;
  picklistValueName: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsPicklistsPicklistNamePost - parameters interface
 */
export interface IObjectsPicklistsPicklistNamePostParams {
  picklistName: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsPicklistsPicklistNamePut - parameters interface
 */
export interface IObjectsPicklistsPicklistNamePutParams {
  picklistName: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxActionsBuildproductionPost - parameters interface
 */
export interface IObjectsSandboxActionsBuildproductionPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxActionsPromoteproductionPost - parameters interface
 */
export interface IObjectsSandboxActionsPromoteproductionPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxActionsRecheckusagePost - parameters interface
 */
export interface IObjectsSandboxActionsRecheckusagePostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxBatchChangesizePost - parameters interface
 */
export interface IObjectsSandboxBatchChangesizePostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxEntitlementsSetPost - parameters interface
 */
export interface IObjectsSandboxEntitlementsSetPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxGet - parameters interface
 */
export interface IObjectsSandboxGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxNameDelete - parameters interface
 */
export interface IObjectsSandboxNameDeleteParams {
  name: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxPost - parameters interface
 */
export interface IObjectsSandboxPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxSnapshotApiNameActionsUpdatePost - parameters interface
 */
export interface IObjectsSandboxSnapshotApiNameActionsUpdatePostParams {
  apiName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxSnapshotApiNameActionsUpgradePost - parameters interface
 */
export interface IObjectsSandboxSnapshotApiNameActionsUpgradePostParams {
  apiName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxSnapshotApiNameDelete - parameters interface
 */
export interface IObjectsSandboxSnapshotApiNameDeleteParams {
  apiName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxSnapshotGet - parameters interface
 */
export interface IObjectsSandboxSnapshotGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxSnapshotPost - parameters interface
 */
export interface IObjectsSandboxSnapshotPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxVaultIdActionsRefreshPost - parameters interface
 */
export interface IObjectsSandboxVaultIdActionsRefreshPostParams {
  vaultId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSandboxVaultIdGet - parameters interface
 */
export interface IObjectsSandboxVaultIdGetParams {
  vaultId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSecuritypoliciesGet - parameters interface
 */
export interface IObjectsSecuritypoliciesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsSecuritypoliciesSecurityPolicyNameGet - parameters interface
 */
export interface IObjectsSecuritypoliciesSecurityPolicyNameGetParams {
  securityPolicyName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersGet - parameters interface
 */
export interface IObjectsUsersGetParams {
  vaults?: string;
  excludeVaultMembership?: string;
  excludeAppLicensing?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersIdGet - parameters interface
 */
export interface IObjectsUsersIdGetParams {
  id: string;
  excludeVaultMembership?: string;
  excludeAppLicensing?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersIdPermissionsGet - parameters interface
 */
export interface IObjectsUsersIdPermissionsGetParams {
  id: string;
  filter?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersIdPut - parameters interface
 */
export interface IObjectsUsersIdPutParams {
  id: string;
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersMeGet - parameters interface
 */
export interface IObjectsUsersMeGetParams {
  excludeVaultMembership?: string;
  excludeAppLicensing?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersMePasswordPost - parameters interface
 */
export interface IObjectsUsersMePasswordPostParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersMePermissionsGet - parameters interface
 */
export interface IObjectsUsersMePermissionsGetParams {
  filter?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersMePut - parameters interface
 */
export interface IObjectsUsersMePutParams {
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersPost - parameters interface
 */
export interface IObjectsUsersPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersPut - parameters interface
 */
export interface IObjectsUsersPutParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersUserIdDelete - parameters interface
 */
export interface IObjectsUsersUserIdDeleteParams {
  userId: string;
  domain?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsUsersUserIdVaultMembershipVaultIdPut - parameters interface
 */
export interface IObjectsUsersUserIdVaultMembershipVaultIdPutParams {
  userId: string;
  vaultId: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsVaultActionsComparePost - parameters interface
 */
export interface IObjectsVaultActionsComparePostParams {
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * objectsVaultActionsConfigreportPost - parameters interface
 */
export interface IObjectsVaultActionsConfigreportPostParams {
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * queryComponentsPost - parameters interface
 */
export interface IQueryComponentsPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * queryNextPagePost - parameters interface
 */
export interface IQueryNextPagePostParams {
  nextPage: string;
  authorization?: string;
  accept?: string;
  xVaultAPIDescribeQuery?: boolean;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * queryPost - parameters interface
 */
export interface IQueryPostParams {
  authorization?: string;
  accept?: string;
  xVaultAPIDescribeQuery?: boolean;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * queryPreviousPagePost - parameters interface
 */
export interface IQueryPreviousPagePostParams {
  previousPage: string;
  authorization?: string;
  accept?: string;
  xVaultAPIDescribeQuery?: boolean;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2MeGet - parameters interface
 */
export interface IScimV2MeGetParams {
  attributes?: string;
  excludedAttributes?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2MePut - parameters interface
 */
export interface IScimV2MePutParams {
  attributes?: string;
  excludedAttributes?: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2ResourceTypesGet - parameters interface
 */
export interface IScimV2ResourceTypesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2ResourceTypesTypeGet - parameters interface
 */
export interface IScimV2ResourceTypesTypeGetParams {
  type: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2SchemasGet - parameters interface
 */
export interface IScimV2SchemasGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2SchemasIdGet - parameters interface
 */
export interface IScimV2SchemasIdGetParams {
  id: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2ServiceProviderConfigGet - parameters interface
 */
export interface IScimV2ServiceProviderConfigGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2TypeGet - parameters interface
 */
export interface IScimV2TypeGetParams {
  type: string;
  filter?: string;
  attributes?: string;
  excludedAttributes?: string;
  sortBy?: string;
  sortOrder?: string;
  startIndex?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2TypeIdGet - parameters interface
 */
export interface IScimV2TypeIdGetParams {
  type: string;
  id: string;
  attributes?: string;
  excludedAttributes?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2UsersGet - parameters interface
 */
export interface IScimV2UsersGetParams {
  filter?: string;
  attributes?: string;
  excludedAttributes?: string;
  sortBy?: string;
  sortOrder?: string;
  count?: string;
  startIndex?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2UsersIdGet - parameters interface
 */
export interface IScimV2UsersIdGetParams {
  id: string;
  filter?: string;
  attributes?: string;
  excludedAttributes?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2UsersIdPut - parameters interface
 */
export interface IScimV2UsersIdPutParams {
  id: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * scimV2UsersPost - parameters interface
 */
export interface IScimV2UsersPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesCertificateCertIdGet - parameters interface
 */
export interface IServicesCertificateCertIdGetParams {
  certId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesConfigurationModeActionsDisablePost - parameters interface
 */
export interface IServicesConfigurationModeActionsDisablePostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesConfigurationModeActionsEnablePost - parameters interface
 */
export interface IServicesConfigurationModeActionsEnablePostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesDirectdataFilesGet - parameters interface
 */
export interface IServicesDirectdataFilesGetParams {
  extractType?: string;
  startTime?: number;
  stopTime?: number;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesDirectdataFilesNameGet - parameters interface
 */
export interface IServicesDirectdataFilesNameGetParams {
  name: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingItemsContentItemGet - parameters interface
 */
export interface IServicesFileStagingItemsContentItemGetParams {
  item: string;
  authorization?: string;
  accept?: string;
  range?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingItemsItemDelete - parameters interface
 */
export interface IServicesFileStagingItemsItemDeleteParams {
  item: string;
  recursive?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingItemsItemGet - parameters interface
 */
export interface IServicesFileStagingItemsItemGetParams {
  item: string;
  recursive?: string;
  limit?: string;
  formatResult?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingItemsItemPut - parameters interface
 */
export interface IServicesFileStagingItemsItemPutParams {
  item: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingItemsPost - parameters interface
 */
export interface IServicesFileStagingItemsPostParams {
  authorization?: string;
  accept?: string;
  contentMD5?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingUploadGet - parameters interface
 */
export interface IServicesFileStagingUploadGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingUploadPost - parameters interface
 */
export interface IServicesFileStagingUploadPostParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingUploadUploadSessionIdDelete - parameters interface
 */
export interface IServicesFileStagingUploadUploadSessionIdDeleteParams {
  uploadSessionId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingUploadUploadSessionIdGet - parameters interface
 */
export interface IServicesFileStagingUploadUploadSessionIdGetParams {
  uploadSessionId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingUploadUploadSessionIdPartsGet - parameters interface
 */
export interface IServicesFileStagingUploadUploadSessionIdPartsGetParams {
  uploadSessionId: string;
  limit?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingUploadUploadSessionIdPost - parameters interface
 */
export interface IServicesFileStagingUploadUploadSessionIdPostParams {
  uploadSessionId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesFileStagingUploadUploadSessionIdPut - parameters interface
 */
export interface IServicesFileStagingUploadUploadSessionIdPutParams {
  uploadSessionId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIFilePartNumber?: string;
  contentMD5?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesJobsHistoriesGet - parameters interface
 */
export interface IServicesJobsHistoriesGetParams {
  startDate?: string;
  endDate?: string;
  status?: string;
  limit?: string;
  offset?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesJobsJobIdErrorsGet - parameters interface
 */
export interface IServicesJobsJobIdErrorsGetParams {
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesJobsJobIdGet - parameters interface
 */
export interface IServicesJobsJobIdGetParams {
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesJobsJobIdSummaryGet - parameters interface
 */
export interface IServicesJobsJobIdSummaryGetParams {
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesJobsJobIdTasksGet - parameters interface
 */
export interface IServicesJobsJobIdTasksGetParams {
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesJobsMonitorsGet - parameters interface
 */
export interface IServicesJobsMonitorsGetParams {
  startDate?: string;
  endDate?: string;
  status?: string;
  limit?: string;
  offset?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesJobsStartNowJobIdPost - parameters interface
 */
export interface IServicesJobsStartNowJobIdPostParams {
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesLoaderExtractPost - parameters interface
 */
export interface IServicesLoaderExtractPostParams {
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesLoaderJobIdTasksTaskIdFailurelogGet - parameters interface
 */
export interface IServicesLoaderJobIdTasksTaskIdFailurelogGetParams {
  jobId: string;
  taskId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesLoaderJobIdTasksTaskIdResultsGet - parameters interface
 */
export interface IServicesLoaderJobIdTasksTaskIdResultsGetParams {
  jobId: string;
  taskId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesLoaderJobIdTasksTaskIdResultsRenditionsGet - parameters interface
 */
export interface IServicesLoaderJobIdTasksTaskIdResultsRenditionsGetParams {
  jobId: string;
  taskId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesLoaderJobIdTasksTaskIdSuccesslogGet - parameters interface
 */
export interface IServicesLoaderJobIdTasksTaskIdSuccesslogGetParams {
  jobId: string;
  taskId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesLoaderLoadPost - parameters interface
 */
export interface IServicesLoaderLoadPostParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesPackageActionsValidatePost - parameters interface
 */
export interface IServicesPackageActionsValidatePostParams {
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesPackagePost - parameters interface
 */
export interface IServicesPackagePostParams {
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesPackagePut - parameters interface
 */
export interface IServicesPackagePutParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesQueuesGet - parameters interface
 */
export interface IServicesQueuesGetParams {
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesQueuesQueueNameActionsDisableDeliveryPut - parameters interface
 */
export interface IServicesQueuesQueueNameActionsDisableDeliveryPutParams {
  queueName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesQueuesQueueNameActionsEnableDeliveryPut - parameters interface
 */
export interface IServicesQueuesQueueNameActionsEnableDeliveryPutParams {
  queueName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesQueuesQueueNameActionsResetPut - parameters interface
 */
export interface IServicesQueuesQueueNameActionsResetPutParams {
  queueName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesQueuesQueueNameGet - parameters interface
 */
export interface IServicesQueuesQueueNameGetParams {
  queueName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * servicesVobjectVaultPackageVPackageIdActionsValidatePost - parameters interface
 */
export interface IServicesVobjectVaultPackageVPackageIdActionsValidatePostParams {
  packageId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * sessionDelete - parameters interface
 */
export interface ISessionDeleteParams {
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * uicodeDistributionsDistributionNameCodeGet - parameters interface
 */
export interface IUicodeDistributionsDistributionNameCodeGetParams {
  distributionName: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * uicodeDistributionsDistributionNameDelete - parameters interface
 */
export interface IUicodeDistributionsDistributionNameDeleteParams {
  distributionName: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * uicodeDistributionsDistributionNameGet - parameters interface
 */
export interface IUicodeDistributionsDistributionNameGetParams {
  distributionName: string;
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * uicodeDistributionsGet - parameters interface
 */
export interface IUicodeDistributionsGetParams {
  accept?: string;
  authorization?: string;
  xVaultAPIClientID?: string;
}

/**
 * uicodeDistributionsPost - parameters interface
 */
export interface IUicodeDistributionsPostParams {
  accept?: string;
  authorization?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectVaultPackageVPackageIdActionsDeployPost - parameters interface
 */
export interface IVobjectVaultPackageVPackageIdActionsDeployPostParams {
  packageId: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectVaultPackageVPackageIdActionsDeployResultsGet - parameters interface
 */
export interface IVobjectVaultPackageVPackageIdActionsDeployResultsGetParams {
  packageId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet - parameters interface
 */
export interface IVobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetParams {
  objectName: string;
  jobStatus: string;
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet - parameters interface
 */
export interface IVobjectsDeepcopyResultsObjectNameJobStatusJobIdGetParams {
  objectName: string;
  jobStatus: string;
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsEdlItemVActionsCreateplaceholderPost - parameters interface
 */
export interface IVobjectsEdlItemVActionsCreateplaceholderPostParams {
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsMergesJobIdLogGet - parameters interface
 */
export interface IVobjectsMergesJobIdLogGetParams {
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsMergesJobIdResultsGet - parameters interface
 */
export interface IVobjectsMergesJobIdResultsGetParams {
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsMergesJobIdStatusGet - parameters interface
 */
export interface IVobjectsMergesJobIdStatusGetParams {
  jobId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameActionsActionNamePost - parameters interface
 */
export interface IVobjectsObjectNameActionsActionNamePostParams {
  objectName: string;
  actionName: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameActionsChangetypePost - parameters interface
 */
export interface IVobjectsObjectNameActionsChangetypePostParams {
  objectName: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameActionsMergePost - parameters interface
 */
export interface IVobjectsObjectNameActionsMergePostParams {
  objectName: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
  vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>;
}

/**
 * vobjectsObjectNameActionsRecalculaterollupsGet - parameters interface
 */
export interface IVobjectsObjectNameActionsRecalculaterollupsGetParams {
  objectName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameActionsRecalculaterollupsPost - parameters interface
 */
export interface IVobjectsObjectNameActionsRecalculaterollupsPostParams {
  objectName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameActionsUpdatecorporatecurrencyPut - parameters interface
 */
export interface IVobjectsObjectNameActionsUpdatecorporatecurrencyPutParams {
  objectName: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameAttachmentsBatchDelete - parameters interface
 */
export interface IVobjectsObjectNameAttachmentsBatchDeleteParams {
  objectName: string;
  idParam?: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameAttachmentsBatchPost - parameters interface
 */
export interface IVobjectsObjectNameAttachmentsBatchPostParams {
  objectName: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameAttachmentsBatchPut - parameters interface
 */
export interface IVobjectsObjectNameAttachmentsBatchPutParams {
  objectName: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameDelete - parameters interface
 */
export interface IVobjectsObjectNameDeleteParams {
  objectName: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameIdRolesRoleNameGet - parameters interface
 */
export interface IVobjectsObjectNameIdRolesRoleNameGetParams {
  objectName: string;
  id: string;
  roleName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdActionsActionNameGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdActionsActionNameGetParams {
  objectName: string;
  objectRecordId: string;
  actionName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdActionsActionNamePost - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdActionsActionNamePostParams {
  objectName: string;
  objectRecordId: string;
  actionName: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdActionsCascadedeletePost - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdActionsCascadedeletePostParams {
  objectName: string;
  objectRecordId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdActionsDeepcopyPost - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdActionsDeepcopyPostParams {
  objectName: string;
  objectRecordId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdActionsGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdActionsGetParams {
  objectName: string;
  objectRecordId: string;
  loc?: boolean;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetParams {
  objectName: string;
  objectRecordId: string;
  attachmentFieldName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostParams {
  objectName: string;
  objectRecordId: string;
  attachmentFieldName: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetParams {
  objectName: string;
  objectRecordId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteParams {
  objectName: string;
  objectRecordId: string;
  attachmentId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetParams {
  objectName: string;
  objectRecordId: string;
  attachmentId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutParams {
  objectName: string;
  objectRecordId: string;
  attachmentId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteParams {
  objectName: string;
  objectRecordId: string;
  attachmentId: string;
  attachmentVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetParams {
  objectName: string;
  objectRecordId: string;
  attachmentId: string;
  attachmentVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetParams {
  objectName: string;
  objectRecordId: string;
  attachmentId: string;
  attachmentVersion: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostParams {
  objectName: string;
  objectRecordId: string;
  attachmentId: string;
  attachmentVersion: string;
  restore?: boolean;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetParams {
  objectName: string;
  objectRecordId: string;
  attachmentId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentsFileGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentsFileGetParams {
  objectName: string;
  objectRecordId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentsGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentsGetParams {
  objectName: string;
  objectRecordId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAttachmentsPost - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAttachmentsPostParams {
  objectName: string;
  objectRecordId: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdAudittrailGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdAudittrailGetParams {
  objectName: string;
  objectRecordId: string;
  startDate?: string;
  endDate?: string;
  formatResult?: string;
  limit?: string;
  offset?: string;
  events?: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameObjectRecordIdGet - parameters interface
 */
export interface IVobjectsObjectNameObjectRecordIdGetParams {
  objectName: string;
  objectRecordId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNamePost - parameters interface
 */
export interface IVobjectsObjectNamePostParams {
  objectName: string;
  idParam?: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIMigrationMode?: boolean;
  xVaultAPINoTriggers?: boolean;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNamePut - parameters interface
 */
export interface IVobjectsObjectNamePutParams {
  objectName: string;
  authorization?: string;
  contentType?: string;
  accept?: string;
  xVaultAPIMigrationMode?: boolean;
  xVaultAPINoTriggers?: boolean;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameRolesDelete - parameters interface
 */
export interface IVobjectsObjectNameRolesDeleteParams {
  objectName: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsObjectNameRolesPost - parameters interface
 */
export interface IVobjectsObjectNameRolesPostParams {
  objectName: string;
  authorization?: string;
  accept?: string;
  contentType?: string;
  xVaultAPIClientID?: string;
}

/**
 * vobjectsOutboundPackageVPackageIdDependenciesGet - parameters interface
 */
export interface IVobjectsOutboundPackageVPackageIdDependenciesGetParams {
  packageId: string;
  authorization?: string;
  accept?: string;
  xVaultAPIClientID?: string;
}

/**
 * DefaultApi - API class
 */
@autoinject()
export class DefaultApi extends Api {

  /**
   * Creates a new DefaultApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Retrieve API Versions
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async apiGet(params: IApiGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/api/`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Content File
   * @param params.componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async apiMdlComponentsComponentTypeAndRecordNameFilesGet(params: IApiMdlComponentsComponentTypeAndRecordNameFilesGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('apiMdlComponentsComponentTypeAndRecordNameFilesGet', params, 'componentTypeAndRecordName');

    // Create URL to call
    const url = `${this.basePath}/api/mdl/components/{component_type_and_record_name}/files`
      .replace(`{${'component_type_and_record_name'}}`, encodeURIComponent(`${params['componentTypeAndRecordName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Component Record (MDL)
   * @param params.componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async apiMdlComponentsComponentTypeAndRecordNameGet(params: IApiMdlComponentsComponentTypeAndRecordNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('apiMdlComponentsComponentTypeAndRecordNameGet', params, 'componentTypeAndRecordName');

    // Create URL to call
    const url = `${this.basePath}/api/mdl/components/{component_type_and_record_name}`
      .replace(`{${'component_type_and_record_name'}}`, encodeURIComponent(`${params['componentTypeAndRecordName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Asynchronous MDL Script Results
   * @param params.jobId 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async apiMdlExecuteAsyncJobIdResultsGet(params: IApiMdlExecuteAsyncJobIdResultsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('apiMdlExecuteAsyncJobIdResultsGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/api/mdl/execute_async/{job_id}/results`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Execute MDL Script Asynchronously
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async apiMdlExecuteAsyncPost(params: IApiMdlExecuteAsyncPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/api/mdl/execute_async`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Execute MDL Script
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async apiMdlExecutePost(params: IApiMdlExecutePostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/api/mdl/execute`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Upload Content File
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async apiMdlFilesPost(params: IApiMdlFilesPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/api/mdl/files`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Audit Details
   * @param params.auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
   * @param params.startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
   * @param params.endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
   * @param params.allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
   * @param params.formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
   * @param params.limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
   * @param params.offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
   * @param params.objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
   * @param params.events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async audittrailAuditTrailTypeGet(params: IAudittrailAuditTrailTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('audittrailAuditTrailTypeGet', params, 'auditTrailType');

    // Create URL to call
    const url = `${this.basePath}/audittrail/{audit_trail_type}`
      .replace(`{${'audit_trail_type'}}`, encodeURIComponent(`${params['auditTrailType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'all_dates': params['allDates'],
        'format_result': params['formatResult'],
        'limit': params['limit'],
        'offset': params['offset'],
        'objects': params['objects'],
        'events': params['events'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Authentication Type Discovery
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async authDiscoveryPost(params: IAuthDiscoveryPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/auth/discovery`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * OAuth 2.0 / OpenID Connect
   * @param params.oathOidcProfileId 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async authOauthSessionOathOidcProfileIdPost(params: IAuthOauthSessionOathOidcProfileIdPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('authOauthSessionOathOidcProfileIdPost', params, 'oathOidcProfileId');

    // Create URL to call
    const url = `${this.basePath}/auth/oauth/session/{oath_oidc_profile_id}`
      .replace(`{${'oath_oidc_profile_id'}}`, encodeURIComponent(`${params['oathOidcProfileId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * User Name and Password
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async authPost(params: IAuthPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/auth`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Single Source Code File
   * @param params.className The fully qualified class name of your file.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async codeClassNameDelete(params: ICodeClassNameDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('codeClassNameDelete', params, 'className');

    // Create URL to call
    const url = `${this.basePath}/code/{class_name}`
      .replace(`{${'class_name'}}`, encodeURIComponent(`${params['className']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Disable Vault Extension
   * @param params.className The fully qualified class name of your file.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async codeClassNameDisablePut(params: ICodeClassNameDisablePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('codeClassNameDisablePut', params, 'className');

    // Create URL to call
    const url = `${this.basePath}/code/{class_name}/disable`
      .replace(`{${'class_name'}}`, encodeURIComponent(`${params['className']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Enable Vault Extension
   * @param params.className The fully qualified class name of your file.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async codeClassNameEnablePut(params: ICodeClassNameEnablePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('codeClassNameEnablePut', params, 'className');

    // Create URL to call
    const url = `${this.basePath}/code/{class_name}/enable`
      .replace(`{${'class_name'}}`, encodeURIComponent(`${params['className']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Single Source Code File
   * @param params.className The fully qualified class name of your file.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async codeClassNameGet(params: ICodeClassNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('codeClassNameGet', params, 'className');

    // Create URL to call
    const url = `${this.basePath}/code/{class_name}`
      .replace(`{${'class_name'}}`, encodeURIComponent(`${params['className']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Profiling Sessions
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async codeProfilerGet(params: ICodeProfilerGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/code/profiler`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Profiling Session
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async codeProfilerPost(params: ICodeProfilerPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/code/profiler`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * End Profiling Session
   * @param params.sessionName The name of the session, for example,  baseline__c.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async codeProfilerSessionNameActionsEndPost(params: ICodeProfilerSessionNameActionsEndPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('codeProfilerSessionNameActionsEndPost', params, 'sessionName');

    // Create URL to call
    const url = `${this.basePath}/code/profiler/{session_name}/actions/end`
      .replace(`{${'session_name'}}`, encodeURIComponent(`${params['sessionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Profiling Session
   * @param params.sessionName The name of the session, for example,  baseline__c.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async codeProfilerSessionNameDelete(params: ICodeProfilerSessionNameDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('codeProfilerSessionNameDelete', params, 'sessionName');

    // Create URL to call
    const url = `${this.basePath}/code/profiler/{session_name}`
      .replace(`{${'session_name'}}`, encodeURIComponent(`${params['sessionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Profiling Session
   * @param params.sessionName The name of the session, for example,  baseline__c.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async codeProfilerSessionNameGet(params: ICodeProfilerSessionNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('codeProfilerSessionNameGet', params, 'sessionName');

    // Create URL to call
    const url = `${this.basePath}/code/profiler/{session_name}`
      .replace(`{${'session_name'}}`, encodeURIComponent(`${params['sessionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Profiling Session Results
   * @param params.sessionName The name of the session, for example,  baseline__c.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async codeProfilerSessionNameResultsGet(params: ICodeProfilerSessionNameResultsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('codeProfilerSessionNameResultsGet', params, 'sessionName');

    // Create URL to call
    const url = `${this.basePath}/code/profiler/{session_name}/results`
      .replace(`{${'session_name'}}`, encodeURIComponent(`${params['sessionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add or Replace Single Source Code File
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async codePut(params: ICodePutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/code`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Specific Root Nodes
   * @param params.edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(params: ICompositesTreesEdlHierarchyOrTemplateActionsListnodesPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('compositesTreesEdlHierarchyOrTemplateActionsListnodesPost', params, 'edlHierarchyOrTemplate');

    // Create URL to call
    const url = `${this.basePath}/composites/trees/{edl_hierarchy_or_template}/actions/listnodes`
      .replace(`{${'edl_hierarchy_or_template'}}`, encodeURIComponent(`${params['edlHierarchyOrTemplate']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Root Nodes
   * @param params.edlHierarchyOrTemplate 
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async compositesTreesEdlHierarchyOrTemplateGet(params: ICompositesTreesEdlHierarchyOrTemplateGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('compositesTreesEdlHierarchyOrTemplateGet', params, 'edlHierarchyOrTemplate');

    // Create URL to call
    const url = `${this.basePath}/composites/trees/{edl_hierarchy_or_template}`
      .replace(`{${'edl_hierarchy_or_template'}}`, encodeURIComponent(`${params['edlHierarchyOrTemplate']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve a Node\&#39;s Children
   * @param params.parentNodeId The ID of a parent node in the hierarchy.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async compositesTreesEdlHierarchyVParentNodeIdChildrenGet(params: ICompositesTreesEdlHierarchyVParentNodeIdChildrenGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('compositesTreesEdlHierarchyVParentNodeIdChildrenGet', params, 'parentNodeId');

    // Create URL to call
    const url = `${this.basePath}/composites/trees/edl_hierarchy__v/{parent_node_id}/children`
      .replace(`{${'parent_node_id'}}`, encodeURIComponent(`${params['parentNodeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Node Order
   * @param params.parentNodeId The ID of a parent node in the hierarchy.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async compositesTreesEdlHierarchyVParentNodeIdChildrenPut(params: ICompositesTreesEdlHierarchyVParentNodeIdChildrenPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('compositesTreesEdlHierarchyVParentNodeIdChildrenPut', params, 'parentNodeId');

    // Create URL to call
    const url = `${this.basePath}/composites/trees/edl_hierarchy__v/{parent_node_id}/children`
      .replace(`{${'parent_node_id'}}`, encodeURIComponent(`${params['parentNodeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Component Record (XML/JSON)
   * @param params.componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
   * @param params.loc When localized (translated) strings are available, retrieve them by setting loc to true.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async configurationComponentTypeAndRecordNameGet(params: IConfigurationComponentTypeAndRecordNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('configurationComponentTypeAndRecordNameGet', params, 'componentTypeAndRecordName');

    // Create URL to call
    const url = `${this.basePath}/configuration/{component_type_and_record_name}`
      .replace(`{${'component_type_and_record_name'}}`, encodeURIComponent(`${params['componentTypeAndRecordName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Component Record Collection
   * @param params.componentType 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async configurationComponentTypeGet(params: IConfigurationComponentTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('configurationComponentTypeGet', params, 'componentType');

    // Create URL to call
    const url = `${this.basePath}/configuration/{component_type}`
      .replace(`{${'component_type'}}`, encodeURIComponent(`${params['componentType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Details from a Specific Object
   * @param params.objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
   * @param params.loc When localized (translated) strings are available, retrieve them by setting loc to true.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async configurationObjectNameAndObjectTypeGet(params: IConfigurationObjectNameAndObjectTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('configurationObjectNameAndObjectTypeGet', params, 'objectNameAndObjectType');

    // Create URL to call
    const url = `${this.basePath}/configuration/{object_name_and_object_type}`
      .replace(`{${'object_name_and_object_type'}}`, encodeURIComponent(`${params['objectNameAndObjectType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Details from All Object Types
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async configurationObjecttypeGet(params: IConfigurationObjecttypeGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/configuration/Objecttype`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Lifecycle Role Assignment Override Rules
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async configurationRoleAssignmentRuleDelete(params: IConfigurationRoleAssignmentRuleDeleteParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/configuration/role_assignment_rule`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
   * @param params.lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
   * @param params.roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
   * @param params.productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
   * @param params.countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
   * @param params.studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
   * @param params.studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async configurationRoleAssignmentRuleGet(params: IConfigurationRoleAssignmentRuleGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/configuration/role_assignment_rule`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'lifecycle__v': params['lifecycleV'],
        'role__v': params['roleV'],
        'product__v': params['productV'],
        'country__v': params['countryV'],
        'study__v': params['studyV'],
        'study_country__v': params['studyCountryV'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Lifecycle Role Assignment Override Rules
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async configurationRoleAssignmentRulePost(params: IConfigurationRoleAssignmentRulePostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/configuration/role_assignment_rule`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Lifecycle Role Assignment Rules (Default &amp; Override)
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async configurationRoleAssignmentRulePut(params: IConfigurationRoleAssignmentRulePutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/configuration/role_assignment_rule`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Delegated Session
   * @param params.authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async delegationLoginPost(params: IDelegationLoginPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/delegation/login`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Delegations
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async delegationVaultsGet(params: IDelegationVaultsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/delegation/vaults`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Session Keep Alive
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async keepAlivePost(params: IKeepAlivePostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/keep-alive`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Limits on Objects
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async limitsGet(params: ILimitsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/limits`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Daily API Usage
   * @param params.date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
   * @param params.logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async logsApiUsageGet(params: ILogsApiUsageGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/logs/api_usage`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'date': params['date'],
        'log_format': params['logFormat'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Debug Logs
   * @param params.userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
   * @param params.includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async logsCodeDebugGet(params: ILogsCodeDebugGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/logs/code/debug`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'user_id': params['userId'],
        'include_inactive': params['includeInactive'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Debug Log
   * @param params.id The ID of the debug log to delete.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async logsCodeDebugIdActionsResetDelete(params: ILogsCodeDebugIdActionsResetDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('logsCodeDebugIdActionsResetDelete', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/logs/code/debug/{id}/actions/reset`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Reset Debug Log
   * @param params.id The ID of the debug log to delete.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async logsCodeDebugIdActionsResetPost(params: ILogsCodeDebugIdActionsResetPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('logsCodeDebugIdActionsResetPost', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/logs/code/debug/{id}/actions/reset`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Debug Log Files
   * @param params.id The ID of the debug log to download.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async logsCodeDebugIdFilesGet(params: ILogsCodeDebugIdFilesGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('logsCodeDebugIdFilesGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/logs/code/debug/{id}/files`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Single Debug Log
   * @param params.id The ID of the debug log to retrieve.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async logsCodeDebugIdGet(params: ILogsCodeDebugIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('logsCodeDebugIdGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/logs/code/debug/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Debug Log
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async logsCodeDebugPost(params: ILogsCodeDebugPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/logs/code/debug`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download SDK Runtime Log
   * @param params.date 
   * @param params.logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async logsCodeRuntimeGet(params: ILogsCodeRuntimeGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/logs/code/runtime`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'date': params['date'],
        'log_format': params['logFormat'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Import Bulk Translation File
   * @param params.messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async messagesMessageTypeActionsImportPost(params: IMessagesMessageTypeActionsImportPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('messagesMessageTypeActionsImportPost', params, 'messageType');

    // Create URL to call
    const url = `${this.basePath}/messages/{message_type}/actions/import`
      .replace(`{${'message_type'}}`, encodeURIComponent(`${params['messageType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Export Bulk Translation File
   * @param params.messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
   * @param params.lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async messagesMessageTypeLanguageLangActionsExportPost(params: IMessagesMessageTypeLanguageLangActionsExportPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('messagesMessageTypeLanguageLangActionsExportPost', params, 'messageType');
    this.ensureParamIsSet('messagesMessageTypeLanguageLangActionsExportPost', params, 'lang');

    // Create URL to call
    const url = `${this.basePath}/messages/{message_type}/language/{lang}/actions/export`
      .replace(`{${'message_type'}}`, encodeURIComponent(`${params['messageType']}`))
      .replace(`{${'lang'}}`, encodeURIComponent(`${params['lang']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Audit Metadata
   * @param params.auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataAudittrailAuditTrailTypeGet(params: IMetadataAudittrailAuditTrailTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataAudittrailAuditTrailTypeGet', params, 'auditTrailType');

    // Create URL to call
    const url = `${this.basePath}/metadata/audittrail/{audit_trail_type}`
      .replace(`{${'audit_trail_type'}}`, encodeURIComponent(`${params['auditTrailType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Audit Types
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataAudittrailGet(params: IMetadataAudittrailGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/audittrail`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Component Type Metadata
   * @param params.componentType The component type name (Picklist, Docfield, Doctype, etc.).
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataComponentsComponentTypeGet(params: IMetadataComponentsComponentTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataComponentsComponentTypeGet', params, 'componentType');

    // Create URL to call
    const url = `${this.basePath}/metadata/components/{component_type}`
      .replace(`{${'component_type'}}`, encodeURIComponent(`${params['componentType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Component Metadata
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataComponentsGet(params: IMetadataComponentsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/components`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder Template Node Metadata
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsBindersTemplatesBindernodesGet(params: IMetadataObjectsBindersTemplatesBindernodesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/binders/templates/bindernodes`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder Template Metadata
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsBindersTemplatesGet(params: IMetadataObjectsBindersTemplatesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/binders/templates`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Annotation Placemark Type Metadata
   * @param params.placemarkType The name of the placemark type. For example, sticky__sys.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(params: IMetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet', params, 'placemarkType');

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/annotations/placemarks/types/{placemark_type}`
      .replace(`{${'placemark_type'}}`, encodeURIComponent(`${params['placemarkType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Annotation Reference Type Metadata
   * @param params.referenceType 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(params: IMetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet', params, 'referenceType');

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/annotations/references/types/{reference_type}`
      .replace(`{${'reference_type'}}`, encodeURIComponent(`${params['referenceType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Annotation Type Metadata
   * @param params.annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(params: IMetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet', params, 'annotationType');

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/annotations/types/{annotation_type}`
      .replace(`{${'annotation_type'}}`, encodeURIComponent(`${params['annotationType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Event SubType Metadata
   * @param params.eventType The event type. For example, distribution__v.
   * @param params.eventSubtype The event subtype. For example, approved_email__v.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(params: IMetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet', params, 'eventType');
    this.ensureParamIsSet('metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet', params, 'eventSubtype');

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/events/{event_type}/types/{event_subtype}`
      .replace(`{${'event_type'}}`, encodeURIComponent(`${params['eventType']}`))
      .replace(`{${'event_subtype'}}`, encodeURIComponent(`${params['eventSubtype']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Event Types and Subtypes
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsEventsGet(params: IMetadataObjectsDocumentsEventsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/events`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Lock Metadata
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsLockGet(params: IMetadataObjectsDocumentsLockGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/lock`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Common Document Fields
   * @param params.contentType 
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsPropertiesFindCommonPost(params: IMetadataObjectsDocumentsPropertiesFindCommonPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/properties/find_common`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Document Fields
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsPropertiesGet(params: IMetadataObjectsDocumentsPropertiesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/properties`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Template Metadata
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsTemplatesGet(params: IMetadataObjectsDocumentsTemplatesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/templates`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Document Types
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsTypesGet(params: IMetadataObjectsDocumentsTypesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/types`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Type
   * @param params.type The document type. See Retrieve Document Types.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsTypesTypeGet(params: IMetadataObjectsDocumentsTypesTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataObjectsDocumentsTypesTypeGet', params, 'type');

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/types/{type}`
      .replace(`{${'type'}}`, encodeURIComponent(`${params['type']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Type Relationships
   * @param params.type The document type. See Retrieve Document Types.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsTypesTypeRelationshipsGet(params: IMetadataObjectsDocumentsTypesTypeRelationshipsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataObjectsDocumentsTypesTypeRelationshipsGet', params, 'type');

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/types/{type}/relationships`
      .replace(`{${'type'}}`, encodeURIComponent(`${params['type']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Classification
   * @param params.type The document type. See Retrieve Document Types.
   * @param params.subtype The document subtype. See Retrieve Document Types.
   * @param params.classification The document classification. See Retrieve Document Types.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(params: IMetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet', params, 'type');
    this.ensureParamIsSet('metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet', params, 'subtype');
    this.ensureParamIsSet('metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet', params, 'classification');

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}`
      .replace(`{${'type'}}`, encodeURIComponent(`${params['type']}`))
      .replace(`{${'subtype'}}`, encodeURIComponent(`${params['subtype']}`))
      .replace(`{${'classification'}}`, encodeURIComponent(`${params['classification']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Subtype
   * @param params.type The document type. See Retrieve Document Types.
   * @param params.subtype The document subtype. See Retrieve Document Types.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(params: IMetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet', params, 'type');
    this.ensureParamIsSet('metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet', params, 'subtype');

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/documents/types/{type}/subtypes/{subtype}`
      .replace(`{${'type'}}`, encodeURIComponent(`${params['type']}`))
      .replace(`{${'subtype'}}`, encodeURIComponent(`${params['subtype']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Group Metadata
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsGroupsGet(params: IMetadataObjectsGroupsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/groups`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Security Policy Metadata
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsSecuritypoliciesGet(params: IMetadataObjectsSecuritypoliciesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/securitypolicies`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve User Metadata
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataObjectsUsersGet(params: IMetadataObjectsUsersGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/objects/users`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Archived Document Signature Metadata
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(params: IMetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/query/archived_documents/relationships/document_signature__sysr`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Signature Metadata
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(params: IMetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/query/documents/relationships/document_signature__sysr`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Object Collection
   * @param params.loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataVobjectsGet(params: IMetadataVobjectsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/metadata/vobjects`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Cancel Raw Object Deployment
   * @param params.objectName 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataVobjectsObjectNameActionsCanceldeploymentPost(params: IMetadataVobjectsObjectNameActionsCanceldeploymentPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataVobjectsObjectNameActionsCanceldeploymentPost', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/metadata/vobjects/{object_name}/actions/canceldeployment`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Object Field Metadata
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectFieldName The object field name value (id, name__v, external_id__v, etc.).
   * @param params.loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataVobjectsObjectNameFieldsObjectFieldNameGet(params: IMetadataVobjectsObjectNameFieldsObjectFieldNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataVobjectsObjectNameFieldsObjectFieldNameGet', params, 'objectName');
    this.ensureParamIsSet('metadataVobjectsObjectNameFieldsObjectFieldNameGet', params, 'objectFieldName');

    // Create URL to call
    const url = `${this.basePath}/metadata/vobjects/{object_name}/fields/{object_field_name}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_field_name'}}`, encodeURIComponent(`${params['objectFieldName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Object Metadata
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataVobjectsObjectNameGet(params: IMetadataVobjectsObjectNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataVobjectsObjectNameGet', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/metadata/vobjects/{object_name}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Page Layouts
   * @param params.objectName 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataVobjectsObjectNamePageLayoutsGet(params: IMetadataVobjectsObjectNamePageLayoutsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataVobjectsObjectNamePageLayoutsGet', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/metadata/vobjects/{object_name}/page_layouts`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Page Layout Metadata
   * @param params.objectName The name of the object from which to retrieve page layout metadata.
   * @param params.layoutName The name of the page layout from which to retrieve metadata.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async metadataVobjectsObjectNamePageLayoutsLayoutNameGet(params: IMetadataVobjectsObjectNamePageLayoutsLayoutNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('metadataVobjectsObjectNamePageLayoutsLayoutNameGet', params, 'objectName');
    this.ensureParamIsSet('metadataVobjectsObjectNamePageLayoutsLayoutNameGet', params, 'layoutName');

    // Create URL to call
    const url = `${this.basePath}/metadata/vobjects/{object_name}/page_layouts/{layout_name}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'layout_name'}}`, encodeURIComponent(`${params['layoutName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Email Notification Histories
   * @param params.startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
   * @param params.endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
   * @param params.allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
   * @param params.formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
   * @param params.limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
   * @param params.offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async notificationsHistoriesGet(params: INotificationsHistoriesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/notifications/histories`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'all_dates': params['allDates'],
        'format_result': params['formatResult'],
        'limit': params['limit'],
        'offset': params['offset'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Bulk Workflow Action Details
   * @param params.action 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectWorkflowActionsActionGet(params: IObjectWorkflowActionsActionGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectWorkflowActionsActionGet', params, 'action');

    // Create URL to call
    const url = `${this.basePath}/object/workflow/actions/{action}`
      .replace(`{${'action'}}`, encodeURIComponent(`${params['action']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Workflow Actions on Multiple Workflows
   * @param params.action 
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectWorkflowActionsActionPost(params: IObjectWorkflowActionsActionPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectWorkflowActionsActionPost', params, 'action');

    // Create URL to call
    const url = `${this.basePath}/object/workflow/actions/{action}`
      .replace(`{${'action'}}`, encodeURIComponent(`${params['action']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Cancel Workflow Tasks
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectWorkflowActionsCanceltasksPost(params: IObjectWorkflowActionsCanceltasksPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/object/workflow/actions/canceltasks`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Cancel Workflows
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectWorkflowActionsCancelworkflowsPost(params: IObjectWorkflowActionsCancelworkflowsPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/object/workflow/actions/cancelworkflows`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Bulk Workflow Actions
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectWorkflowActionsGet(params: IObjectWorkflowActionsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/object/workflow/actions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Reassign Workflow Tasks
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectWorkflowActionsReassigntasksPost(params: IObjectWorkflowActionsReassigntasksPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/object/workflow/actions/reassigntasks`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Replace Workflow Owner
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectWorkflowActionsReplaceworkflowownerPost(params: IObjectWorkflowActionsReplaceworkflowownerPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/object/workflow/actions/replaceworkflowowner`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder Export Results
   * @param params.jobId The id value of the requested export job. This is returned with the export binder requests above.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersActionsExportJobIdResultsGet(params: IObjectsBindersActionsExportJobIdResultsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersActionsExportJobIdResultsGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/actions/export/{job_id}/results`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Export Binder (Latest Version)
   * @param params.binderId The binder id field value.
   * @param params.source to include source content or not
   * @param params.renditiontype to include viewable renditions
   * @param params.docversion to include all major versions
   * @param params.attachments to include all versions of attachments
   * @param params._export configurable filename metadata
   * @param params.docfield to exclude document metadata csv
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdActionsExportPost(params: IObjectsBindersBinderIdActionsExportPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdActionsExportPost', params, 'binderId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/actions/export`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'source': params['source'],
        'renditiontype': params['renditiontype'],
        'docversion': params['docversion'],
        'attachments': params['attachments'],
        'export': params['_export'],
        'docfield': params['docfield'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Refresh Binder Auto-Filing
   * @param params.binderId The binder id field value.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdActionsPost(params: IObjectsBindersBinderIdActionsPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdActionsPost', params, 'binderId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/actions`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Binding Rule
   * @param params.binderId The binder id field value.
   * @param params.contentType 
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdBindingRulePut(params: IObjectsBindersBinderIdBindingRulePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdBindingRulePut', params, 'binderId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/binding_rule`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Binder
   * @param params.binderId The binder id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdDelete(params: IObjectsBindersBinderIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdDelete', params, 'binderId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Binder Document Binding Rule
   * @param params.binderId The binder id field value.
   * @param params.nodeId The binder node id field value.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdDocumentsNodeIdBindingRulePut(params: IObjectsBindersBinderIdDocumentsNodeIdBindingRulePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdDocumentsNodeIdBindingRulePut', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdDocumentsNodeIdBindingRulePut', params, 'nodeId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/documents/{node_id}/binding_rule`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'node_id'}}`, encodeURIComponent(`${params['nodeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add Document to Binder
   * @param params.binderId The binder id field value.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdDocumentsPost(params: IObjectsBindersBinderIdDocumentsPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdDocumentsPost', params, 'binderId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/documents`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Remove Document from Binder
   * @param params.binderId The binder id field value.
   * @param params.sectionId The binder node id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdDocumentsSectionIdDelete(params: IObjectsBindersBinderIdDocumentsSectionIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdDocumentsSectionIdDelete', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdDocumentsSectionIdDelete', params, 'sectionId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/documents/{section_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'section_id'}}`, encodeURIComponent(`${params['sectionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Move Document in Binder
   * @param params.binderId The binder id field value.
   * @param params.sectionId The binder node id field value.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdDocumentsSectionIdPut(params: IObjectsBindersBinderIdDocumentsSectionIdPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdDocumentsSectionIdPut', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdDocumentsSectionIdPut', params, 'sectionId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/documents/{section_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'section_id'}}`, encodeURIComponent(`${params['sectionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder
   * @param params.binderId The binder id field value.
   * @param params.depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdGet(params: IObjectsBindersBinderIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdGet', params, 'binderId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'depth': params['depth'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Binder Version
   * @param params.binderId The binder id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdPost(params: IObjectsBindersBinderIdPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdPost', params, 'binderId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Binder
   * @param params.binderId The binder id field value.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdPut(params: IObjectsBindersBinderIdPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdPut', params, 'binderId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Remove Users &amp; Groups from Roles on a Single Binder
   * @param params.binderId The id value of the binder from which to remove roles.
   * @param params.roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
   * @param params.id The id value of the user or group to remove from the role.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(params: IObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete', params, 'roleNameAndUserOrGroup');
    this.ensureParamIsSet('objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'role_name_and_user_or_group'}}`, encodeURIComponent(`${params['roleNameAndUserOrGroup']}`))
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Binder Section Binding Rule
   * @param params.binderId The binder id field value.
   * @param params.nodeId The binder node id field value.
   * @param params.contentType 
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdSectionsNodeIdBindingRulePut(params: IObjectsBindersBinderIdSectionsNodeIdBindingRulePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdSectionsNodeIdBindingRulePut', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdSectionsNodeIdBindingRulePut', params, 'nodeId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/sections/{node_id}/binding_rule`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'node_id'}}`, encodeURIComponent(`${params['nodeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Binder Section
   * @param params.binderId The binder id field value.
   * @param params.nodeId The binder node id of the section.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdSectionsNodeIdPut(params: IObjectsBindersBinderIdSectionsNodeIdPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdSectionsNodeIdPut', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdSectionsNodeIdPut', params, 'nodeId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/sections/{node_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'node_id'}}`, encodeURIComponent(`${params['nodeId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Binder Section
   * @param params.binderId The binder id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdSectionsPost(params: IObjectsBindersBinderIdSectionsPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdSectionsPost', params, 'binderId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/sections`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Binder Section
   * @param params.binderId The binder id field value.
   * @param params.sectionId The binder node id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdSectionsSectionIdDelete(params: IObjectsBindersBinderIdSectionsSectionIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdSectionsSectionIdDelete', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdSectionsSectionIdDelete', params, 'sectionId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/sections/{section_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'section_id'}}`, encodeURIComponent(`${params['sectionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder Sections
   * @param params.binderId The binder id field value.
   * @param params.sectionId The binder node id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdSectionsSectionIdGet(params: IObjectsBindersBinderIdSectionsSectionIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdSectionsSectionIdGet', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdSectionsSectionIdGet', params, 'sectionId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/sections/{section_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'section_id'}}`, encodeURIComponent(`${params['sectionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Binder Versions
   * @param params.binderId The binder id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdVersionsGet(params: IObjectsBindersBinderIdVersionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdVersionsGet', params, 'binderId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/versions`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Export Binder (Specific Version)
   * @param params.binderId The binder id field value.
   * @param params.majorVersion The binder major_version_number__v field value.
   * @param params.minorVersion The binder minor_version_number__v field value.
   * @param params.source to include source content or not
   * @param params.renditiontype to include viewable renditions
   * @param params.docversion to include all major versions
   * @param params.attachments to include all versions of attachments
   * @param params._export configurable filename metadata
   * @param params.docfield to exclude document metadata csv
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(params: IObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost', params, 'majorVersion');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'source': params['source'],
        'renditiontype': params['renditiontype'],
        'docversion': params['docversion'],
        'attachments': params['attachments'],
        'export': params['_export'],
        'docfield': params['docfield'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Binder Version
   * @param params.binderId The binder id field value.
   * @param params.majorVersion The binder major_version_number__v field value.
   * @param params.minorVersion The binder minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(params: IObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete', params, 'majorVersion');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/versions/{major_version}/{minor_version}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder Version
   * @param params.binderId The binder id field value.
   * @param params.majorVersion The binder major_version_number__v field value.
   * @param params.minorVersion The binder minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(params: IObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionGet', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/versions/{major_version}/{minor_version}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Binder Version
   * @param params.binderId The binder id field value.
   * @param params.majorVersion The binder major_version_number__v field value.
   * @param params.minorVersion The binder minor_version_number__v field value.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(params: IObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionPut', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionPut', params, 'majorVersion');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionPut', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/versions/{major_version}/{minor_version}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Binder Relationship
   * @param params.binderId The binder id field value.
   * @param params.majorVersion The binder major_version_number__v field value.
   * @param params.minorVersion The binder minor_version_number__v field value.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(params: IObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost', params, 'majorVersion');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Binder Relationship
   * @param params.binderId The binder id field value.
   * @param params.majorVersion The binder major_version_number__v field value.
   * @param params.minorVersion The binder minor_version_number__v field value.
   * @param params.relationshipId The binder relationship id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(params: IObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', params, 'majorVersion');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', params, 'minorVersion');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', params, 'relationshipId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'relationship_id'}}`, encodeURIComponent(`${params['relationshipId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder Relationship
   * @param params.binderId The binder id field value.
   * @param params.majorVersion The binder major_version_number__v field value.
   * @param params.minorVersion The binder minor_version_number__v field value.
   * @param params.relationshipId The binder relationship id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(params: IObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', params, 'minorVersion');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', params, 'relationshipId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'relationship_id'}}`, encodeURIComponent(`${params['relationshipId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder Version Section
   * @param params.binderId The binder id field value.
   * @param params.majorVersion The binder major_version_number__v field value.
   * @param params.minorVersion The binder minor_version_number__v field value.
   * @param params.sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(params: IObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet', params, 'binderId');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet', params, 'minorVersion');
    this.ensureParamIsSet('objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet', params, 'sectionId');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}`
      .replace(`{${'binder_id'}}`, encodeURIComponent(`${params['binderId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'section_id'}}`, encodeURIComponent(`${params['sectionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Binder Roles
   * @param params.id 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersIdRolesGet(params: IObjectsBindersIdRolesGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersIdRolesGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{id}/roles`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Assign Users &amp; Groups to Roles on a Single Binder
   * @param params.id 
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersIdRolesPost(params: IObjectsBindersIdRolesPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersIdRolesPost', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{id}/roles`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Role
   * @param params.id The binder &#x60;id&#x60;.
   * @param params.roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersIdRolesRoleNameGet(params: IObjectsBindersIdRolesRoleNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersIdRolesRoleNameGet', params, 'id');
    this.ensureParamIsSet('objectsBindersIdRolesRoleNameGet', params, 'roleName');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{id}/roles/{role_name}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`))
      .replace(`{${'role_name'}}`, encodeURIComponent(`${params['roleName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder User Actions
   * @param params.id The binder id field value from which to retrieve available user actions.
   * @param params.majorVersion The major version number of the binder.
   * @param params.minorVersion The minor version number of the binder.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(params: IObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet', params, 'id');
    this.ensureParamIsSet('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder Entry Criteria
   * @param params.id The binder id field value from which to retrieve available user actions.
   * @param params.majorVersion The major version number of the binder.
   * @param params.minorVersion The minor version number of the binder.
   * @param params.nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(params: IObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', params, 'id');
    this.ensureParamIsSet('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', params, 'minorVersion');
    this.ensureParamIsSet('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', params, 'nameV');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'name__v'}}`, encodeURIComponent(`${params['nameV']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Binder User Action
   * @param params.id The binder id field value from which to retrieve available user actions.
   * @param params.majorVersion The major version number of the binder.
   * @param params.minorVersion The minor version number of the binder.
   * @param params.nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(params: IObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', params, 'id');
    this.ensureParamIsSet('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', params, 'majorVersion');
    this.ensureParamIsSet('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', params, 'minorVersion');
    this.ensureParamIsSet('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', params, 'nameV');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'name__v'}}`, encodeURIComponent(`${params['nameV']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve User Actions on Multiple Binders
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersLifecycleActionsPost(params: IObjectsBindersLifecycleActionsPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/binders/lifecycle_actions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Bulk Binder User Actions
   * @param params.userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersLifecycleActionsUserActionNamePut(params: IObjectsBindersLifecycleActionsUserActionNamePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersLifecycleActionsUserActionNamePut', params, 'userActionName');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/lifecycle_actions/{user_action_name}`
      .replace(`{${'user_action_name'}}`, encodeURIComponent(`${params['userActionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Binder
   * @param params.async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersPost(params: IObjectsBindersPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/binders`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'async': params['async'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder Template Collection
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersTemplatesGet(params: IObjectsBindersTemplatesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/binders/templates`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Binder Template
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersTemplatesPost(params: IObjectsBindersTemplatesPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/binders/templates`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Binder Template
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersTemplatesPut(params: IObjectsBindersTemplatesPutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/binders/templates`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder Template Node Attributes
   * @param params.templateName The binder template name__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersTemplatesTemplateNameBindernodesGet(params: IObjectsBindersTemplatesTemplateNameBindernodesGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersTemplatesTemplateNameBindernodesGet', params, 'templateName');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/templates/{template_name}/bindernodes`
      .replace(`{${'template_name'}}`, encodeURIComponent(`${params['templateName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Binder Template Node
   * @param params.templateName The binder template name__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersTemplatesTemplateNameBindernodesPost(params: IObjectsBindersTemplatesTemplateNameBindernodesPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersTemplatesTemplateNameBindernodesPost', params, 'templateName');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/templates/{template_name}/bindernodes`
      .replace(`{${'template_name'}}`, encodeURIComponent(`${params['templateName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Replace Binder Template Nodes
   * @param params.templateName The binder template name__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersTemplatesTemplateNameBindernodesPut(params: IObjectsBindersTemplatesTemplateNameBindernodesPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersTemplatesTemplateNameBindernodesPut', params, 'templateName');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/templates/{template_name}/bindernodes`
      .replace(`{${'template_name'}}`, encodeURIComponent(`${params['templateName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Binder Template
   * @param params.templateName The binder template name__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersTemplatesTemplateNameDelete(params: IObjectsBindersTemplatesTemplateNameDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersTemplatesTemplateNameDelete', params, 'templateName');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/templates/{template_name}`
      .replace(`{${'template_name'}}`, encodeURIComponent(`${params['templateName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Binder Template Attributes
   * @param params.templateName The binder template name__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsBindersTemplatesTemplateNameGet(params: IObjectsBindersTemplatesTemplateNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsBindersTemplatesTemplateNameGet', params, 'templateName');

    // Create URL to call
    const url = `${this.basePath}/objects/binders/templates/{template_name}`
      .replace(`{${'template_name'}}`, encodeURIComponent(`${params['templateName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Deleted Document IDs
   * @param params.startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
   * @param params.endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDeletionsDocumentsGet(params: IObjectsDeletionsDocumentsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/deletions/documents`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Deleted Object Record ID
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDeletionsVobjectsObjectNameGet(params: IObjectsDeletionsVobjectsObjectNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDeletionsVobjectsObjectNameGet', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/objects/deletions/vobjects/{object_name}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Document Workflows
   * @param params.loc When localized (translated) strings are available, retrieve them by setting loc to true.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsActionsGet(params: IObjectsDocumentsActionsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/actions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Controlled Copy Job Results
   * @param params.lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
   * @param params.jobId 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(params: IObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet', params, 'lifecycleAndStateAndAction');
    this.ensureParamIsSet('objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results`
      .replace(`{${'lifecycle_and_state_and_action'}}`, encodeURIComponent(`${params['lifecycleAndStateAndAction']}`))
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Workflow Details
   * @param params.workflowName The document workflow name value.
   * @param params.loc When localized (translated) strings are available, retrieve them by setting loc to true.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsActionsWorkflowNameGet(params: IObjectsDocumentsActionsWorkflowNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsActionsWorkflowNameGet', params, 'workflowName');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/actions/{workflow_name}`
      .replace(`{${'workflow_name'}}`, encodeURIComponent(`${params['workflowName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Document Workflow
   * @param params.workflowName The document workflow name value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsActionsWorkflowNamePost(params: IObjectsDocumentsActionsWorkflowNamePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsActionsWorkflowNamePost', params, 'workflowName');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/actions/{workflow_name}`
      .replace(`{${'workflow_name'}}`, encodeURIComponent(`${params['workflowName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Annotations
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsAnnotationsBatchDelete(params: IObjectsDocumentsAnnotationsBatchDeleteParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/annotations/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Multiple Annotations
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsAnnotationsBatchPost(params: IObjectsDocumentsAnnotationsBatchPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsAnnotationsBatchPost', params, 'authorization');
    this.ensureParamIsSet('objectsDocumentsAnnotationsBatchPost', params, 'contentType');
    this.ensureParamIsSet('objectsDocumentsAnnotationsBatchPost', params, 'accept');
    this.ensureParamIsSet('objectsDocumentsAnnotationsBatchPost', params, 'xVaultAPIClientID');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/annotations/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Annotations
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsAnnotationsBatchPut(params: IObjectsDocumentsAnnotationsBatchPutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/annotations/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add Annotation Replies
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsAnnotationsRepliesBatchPost(params: IObjectsDocumentsAnnotationsRepliesBatchPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/annotations/replies/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Multiple Document Attachments
   * @param params.accept 
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsAttachmentsBatchDelete(params: IObjectsDocumentsAttachmentsBatchDeleteParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/attachments/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Multiple Document Attachments
   * @param params.accept 
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsAttachmentsBatchPost(params: IObjectsDocumentsAttachmentsBatchPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/attachments/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Multiple Document Attachment Descriptions
   * @param params.accept 
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsAttachmentsBatchPut(params: IObjectsDocumentsAttachmentsBatchPutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/attachments/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Export Results
   * @param params.jobId The id value of the requested export job. This is returned with the export document requests.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsBatchActionsFileextractJobIdResultsGet(params: IObjectsDocumentsBatchActionsFileextractJobIdResultsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsBatchActionsFileextractJobIdResultsGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/batch/actions/fileextract/{job_id}/results`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Export Documents
   * @param params.source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
   * @param params.renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
   * @param params.allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsBatchActionsFileextractPost(params: IObjectsDocumentsBatchActionsFileextractPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/batch/actions/fileextract`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'source': params['source'],
        'renditions': params['renditions'],
        'allversions': params['allversions'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Reclassify Multiple Documents
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsBatchActionsReclassifyPut(params: IObjectsDocumentsBatchActionsReclassifyPutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/batch/actions/reclassify`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-MigrationMode', params['xVaultAPIMigrationMode'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Multiple Document Renditions
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsBatchActionsRerenderPost(params: IObjectsDocumentsBatchActionsRerenderPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/batch/actions/rerender`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Multiple Documents
   * @param params.idParam If you’re identifying documents in your input by their external ID
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsBatchDelete(params: IObjectsDocumentsBatchDeleteParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Set query parameters
      .withParams({ 
        'idParam': params['idParam'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Undo Collaborative Authoring Checkout
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsBatchLockDelete(params: IObjectsDocumentsBatchLockDeleteParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/batch/lock`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Multiple Documents
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsBatchPost(params: IObjectsDocumentsBatchPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-MigrationMode', params['xVaultAPIMigrationMode'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Multiple Documents
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsBatchPut(params: IObjectsDocumentsBatchPutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-MigrationMode', params['xVaultAPIMigrationMode'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Anchor IDs
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAnchorsGet(params: IObjectsDocumentsDocIdAnchorsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAnchorsGet', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/anchors`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Export Document Annotations to PDF
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAnnotationsFileGet(params: IObjectsDocumentsDocIdAnnotationsFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAnnotationsFileGet', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/annotations/file`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Import Document Annotations from PDF
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAnnotationsFilePost(params: IObjectsDocumentsDocIdAnnotationsFilePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAnnotationsFilePost', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/annotations/file`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Single Document Attachment
   * @param params.docId The document id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsAttachmentIdDelete(params: IObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdDelete', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdDelete', params, 'attachmentId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments/{attachment_id}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Document Attachment
   * @param params.docId The document id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(params: IObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdFileGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdFileGet', params, 'attachmentId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments/{attachment_id}/file`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Attachment Metadata
   * @param params.docId The document id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsAttachmentIdGet(params: IObjectsDocumentsDocIdAttachmentsAttachmentIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdGet', params, 'attachmentId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments/{attachment_id}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Document Attachment Description
   * @param params.docId The document id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsAttachmentIdPut(params: IObjectsDocumentsDocIdAttachmentsAttachmentIdPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdPut', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdPut', params, 'attachmentId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments/{attachment_id}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Single Document Attachment Version
   * @param params.docId The document id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.attachmentVersion The attachment version__v field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(params: IObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', params, 'attachmentId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', params, 'attachmentVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`))
      .replace(`{${'attachment_version'}}`, encodeURIComponent(`${params['attachmentVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Document Attachment Version
   * @param params.docId The document id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.attachmentVersion The attachment version__v field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(params: IObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'attachmentId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'attachmentVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`))
      .replace(`{${'attachment_version'}}`, encodeURIComponent(`${params['attachmentVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Attachment Version Metadata
   * @param params.docId The document id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.attachmentVersion The attachment version__v field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(params: IObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'attachmentId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'attachmentVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`))
      .replace(`{${'attachment_version'}}`, encodeURIComponent(`${params['attachmentVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Restore Document Attachment Version
   * @param params.docId The document id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.attachmentVersion The attachment version__v field value.
   * @param params.restore The parameter restore must be set to true. 
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(params: IObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', params, 'attachmentId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', params, 'attachmentVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`))
      .replace(`{${'attachment_version'}}`, encodeURIComponent(`${params['attachmentVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'restore': params['restore'],
      })
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Attachment Versions
   * @param params.docId The document id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(params: IObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet', params, 'attachmentId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments/{attachment_id}/versions`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download All Document Attachments
   * @param params.docId The document id field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsFileGet(params: IObjectsDocumentsDocIdAttachmentsFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsFileGet', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments/file`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Attachments
   * @param params.docId The document id field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsGet(params: IObjectsDocumentsDocIdAttachmentsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsGet', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Document Attachment
   * @param params.docId The document id field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAttachmentsPost(params: IObjectsDocumentsDocIdAttachmentsPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAttachmentsPost', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/attachments`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Complete Audit History for a Single Document
   * @param params.docId The document ID for which to retrieve audit history.
   * @param params.startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
   * @param params.endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
   * @param params.formatResult To request a CSV file of your audit history, use csv. 
   * @param params.limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
   * @param params.offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
   * @param params.events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdAudittrailGet(params: IObjectsDocumentsDocIdAudittrailGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdAudittrailGet', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/audittrail`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'format_result': params['formatResult'],
        'limit': params['limit'],
        'offset': params['offset'],
        'events': params['events'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Single Document
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdDelete(params: IObjectsDocumentsDocIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdDelete', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Events
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdEventsGet(params: IObjectsDocumentsDocIdEventsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdEventsGet', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/events`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Document File
   * @param params.docId The document id field value.
   * @param params.lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdFileGet(params: IObjectsDocumentsDocIdFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdFileGet', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/file`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'lockDocument': params['lockDocument'],
      })
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdGet(params: IObjectsDocumentsDocIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdGet', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Document Lock
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdLockDelete(params: IObjectsDocumentsDocIdLockDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdLockDelete', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/lock`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Lock
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdLockGet(params: IObjectsDocumentsDocIdLockGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdLockGet', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/lock`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Document Lock
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdLockPost(params: IObjectsDocumentsDocIdLockPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdLockPost', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/lock`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download All Document Version Attachments
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(params: IObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Single Document Version
   * @param params.docId The document id field value.
   * @param params.suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdPost(params: IObjectsDocumentsDocIdPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdPost', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'suppressRendition': params['suppressRendition'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Single Document
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdPut(params: IObjectsDocumentsDocIdPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdPut', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-MigrationMode', params['xVaultAPIMigrationMode'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Renditions
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdRenditionsGet(params: IObjectsDocumentsDocIdRenditionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdRenditionsGet', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/renditions`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Single Document Rendition
   * @param params.docId The document id field value.
   * @param params.renditionType The document rendition type.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdRenditionsRenditionTypeDelete(params: IObjectsDocumentsDocIdRenditionsRenditionTypeDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdRenditionsRenditionTypeDelete', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdRenditionsRenditionTypeDelete', params, 'renditionType');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/renditions/{rendition_type}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'rendition_type'}}`, encodeURIComponent(`${params['renditionType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Document Rendition File
   * @param params.docId The document id field value.
   * @param params.renditionType The document rendition type.
   * @param params.steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdRenditionsRenditionTypeGet(params: IObjectsDocumentsDocIdRenditionsRenditionTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdRenditionsRenditionTypeGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdRenditionsRenditionTypeGet', params, 'renditionType');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/renditions/{rendition_type}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'rendition_type'}}`, encodeURIComponent(`${params['renditionType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'steadyState': params['steadyState'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add Single Document Rendition
   * @param params.docId The document id field value.
   * @param params.renditionType The document rendition type.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdRenditionsRenditionTypePost(params: IObjectsDocumentsDocIdRenditionsRenditionTypePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdRenditionsRenditionTypePost', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdRenditionsRenditionTypePost', params, 'renditionType');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/renditions/{rendition_type}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'rendition_type'}}`, encodeURIComponent(`${params['renditionType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Replace Document Rendition
   * @param params.docId The document id field value.
   * @param params.renditionType The document rendition type.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdRenditionsRenditionTypePut(params: IObjectsDocumentsDocIdRenditionsRenditionTypePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdRenditionsRenditionTypePut', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdRenditionsRenditionTypePut', params, 'renditionType');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/renditions/{rendition_type}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'rendition_type'}}`, encodeURIComponent(`${params['renditionType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Remove Users &amp; Groups from Roles on a Single Document
   * @param params.docId The id value of the document from which to remove roles.
   * @param params.roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
   * @param params.id The id value of the user or group to remove from the role.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(params: IObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete', params, 'roleNameAndUserOrGroup');
    this.ensureParamIsSet('objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'role_name_and_user_or_group'}}`, encodeURIComponent(`${params['roleNameAndUserOrGroup']}`))
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Version Attachments
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(params: IObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Versions
   * @param params.docId The document id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsGet(params: IObjectsDocumentsDocIdVersionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsGet', params, 'docId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Read Annotations by ID
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet', params, 'annotationId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'annotation_id'}}`, encodeURIComponent(`${params['annotationId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Read Replies of Parent Annotation
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet', params, 'annotationId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'annotation_id'}}`, encodeURIComponent(`${params['annotationId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Export Document Version Annotations to PDF
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Import Document Version Annotations from PDF
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Read Annotations by Document Version and Type
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
   * @param params.offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
   * @param params.annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
   * @param params.paginationId A unique identifier used to load requests with paginated results.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'limit': params['limit'],
        'offset': params['offset'],
        'annotation_types': params['annotationTypes'],
        'pagination_id': params['paginationId'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Document Version Attachment Version
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.attachmentId The id field value of the attachment.
   * @param params.attachmentVersion The version of the attachment.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'attachmentId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'attachmentVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`))
      .replace(`{${'attachment_version'}}`, encodeURIComponent(`${params['attachmentVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Version Attachment Versions
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.attachmentId The id of the document attachment to retrieve.
   * @param params.attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'attachmentId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'attachmentVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`))
      .replace(`{${'attachment_version'}}`, encodeURIComponent(`${params['attachmentVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Single Document Version
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Version Notes as CSV
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Document Event
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Video Annotations
   * @param params.docId The video document id field value.
   * @param params.majorVersion The video document major_version_number__v field value.
   * @param params.minorVersion The video document minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Document Version File
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Version
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Document Version
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-MigrationMode', params['xVaultAPIMigrationMode'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Relationships
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Single Document Relationship
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Single Document Relationship
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.relationshipId The relationship id field value. See Retrieve Document Relationships.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', params, 'relationshipId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'relationship_id'}}`, encodeURIComponent(`${params['relationshipId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Relationship
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.relationshipId The relationship id field value. See Retrieve Document Relationships.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', params, 'relationshipId');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'relationship_id'}}`, encodeURIComponent(`${params['relationshipId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Version Renditions
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Document Version Rendition
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.renditionType The document rendition type.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete', params, 'renditionType');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'rendition_type'}}`, encodeURIComponent(`${params['renditionType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Document Version Rendition File
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.renditionType The document rendition type.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet', params, 'renditionType');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'rendition_type'}}`, encodeURIComponent(`${params['renditionType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Upload Document Version Rendition
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.renditionType The document rendition type.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost', params, 'renditionType');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'rendition_type'}}`, encodeURIComponent(`${params['renditionType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Replace Document Version Rendition
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.renditionType The document rendition type.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut', params, 'renditionType');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'rendition_type'}}`, encodeURIComponent(`${params['renditionType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Document Version Thumbnail File
   * @param params.docId The document id field value.
   * @param params.majorVersion The document major_version_number__v field value.
   * @param params.minorVersion The document minor_version_number__v field value.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(params: IObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet', params, 'docId');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail`
      .replace(`{${'doc_id'}}`, encodeURIComponent(`${params['docId']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Documents
   * @param params.namedFilter Retrieves only documents which you have created.
   * @param params.scope Searches only within the document content.
   * @param params.versionscope Retrieves all document versions, rather than only the latest version.
   * @param params.search Search for documents based on a {keyword} in searchable document fields.
   * @param params.limit See VQL documentation for more information.
   * @param params.sort See VQL documentation for more information.
   * @param params.start See VQL documentation for more information.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsGet(params: IObjectsDocumentsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'named_filter': params['namedFilter'],
        'scope': params['scope'],
        'versionscope': params['versionscope'],
        'search': params['search'],
        'limit': params['limit'],
        'sort': params['sort'],
        'start': params['start'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Document Roles
   * @param params.id 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsIdRolesGet(params: IObjectsDocumentsIdRolesGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsIdRolesGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{id}/roles`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Assign Users &amp; Groups to Roles on a Single Document
   * @param params.id 
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsIdRolesPost(params: IObjectsDocumentsIdRolesPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsIdRolesPost', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{id}/roles`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Role
   * @param params.id The document &#x60;id&#x60;.
   * @param params.roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsIdRolesRoleNameGet(params: IObjectsDocumentsIdRolesRoleNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsIdRolesRoleNameGet', params, 'id');
    this.ensureParamIsSet('objectsDocumentsIdRolesRoleNameGet', params, 'roleName');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{id}/roles/{role_name}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`))
      .replace(`{${'role_name'}}`, encodeURIComponent(`${params['roleName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document User Actions
   * @param params.id The document id field value from which to retrieve available user actions.
   * @param params.majorVersion The major version number of the document.
   * @param params.minorVersion The minor version number of the document.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(params: IObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet', params, 'id');
    this.ensureParamIsSet('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet', params, 'minorVersion');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Entry Criteria
   * @param params.id The document id field value from which to retrieve available user actions.
   * @param params.majorVersion The major version number of the document.
   * @param params.minorVersion The minor version number of the document.
   * @param params.nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(params: IObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', params, 'id');
    this.ensureParamIsSet('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', params, 'nameV');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'name__v'}}`, encodeURIComponent(`${params['nameV']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Document User Action
   * @param params.id The document id field value from which to retrieve available user actions.
   * @param params.majorVersion The major version number of the document.
   * @param params.minorVersion The minor version number of the document.
   * @param params.nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(params: IObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', params, 'id');
    this.ensureParamIsSet('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', params, 'majorVersion');
    this.ensureParamIsSet('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', params, 'minorVersion');
    this.ensureParamIsSet('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', params, 'nameV');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`))
      .replace(`{${'major_version'}}`, encodeURIComponent(`${params['majorVersion']}`))
      .replace(`{${'minor_version'}}`, encodeURIComponent(`${params['minorVersion']}`))
      .replace(`{${'name__v'}}`, encodeURIComponent(`${params['nameV']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve User Actions on Multiple Documents
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsLifecycleActionsPost(params: IObjectsDocumentsLifecycleActionsPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/lifecycle_actions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Bulk Document User Actions
   * @param params.userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsLifecycleActionsUserActionNamePut(params: IObjectsDocumentsLifecycleActionsUserActionNamePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsLifecycleActionsUserActionNamePut', params, 'userActionName');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/lifecycle_actions/{user_action_name}`
      .replace(`{${'user_action_name'}}`, encodeURIComponent(`${params['userActionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Single Document
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsPost(params: IObjectsDocumentsPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-MigrationMode', params['xVaultAPIMigrationMode'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Multiple Document Relationships
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsRelationshipsBatchDelete(params: IObjectsDocumentsRelationshipsBatchDeleteParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/relationships/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Multiple Document Relationships
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsRelationshipsBatchPost(params: IObjectsDocumentsRelationshipsBatchPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/relationships/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Multiple Document Renditions
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsRenditionsBatchDelete(params: IObjectsDocumentsRenditionsBatchDeleteParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/renditions/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add Multiple Document Renditions
   * @param params.idParam If you’re identifying documents in your input by their external ID
   * @param params.largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsRenditionsBatchPost(params: IObjectsDocumentsRenditionsBatchPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/renditions/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'idParam': params['idParam'],
        'largeSizeAsset': params['largeSizeAsset'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-MigrationMode', params['xVaultAPIMigrationMode'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsRolesBatchDelete(params: IObjectsDocumentsRolesBatchDeleteParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/roles/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsRolesBatchPost(params: IObjectsDocumentsRolesBatchPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/roles/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Template Collection
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsTemplatesGet(params: IObjectsDocumentsTemplatesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/templates`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Single Document Template
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsTemplatesPost(params: IObjectsDocumentsTemplatesPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/templates`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Multiple Document Templates
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsTemplatesPut(params: IObjectsDocumentsTemplatesPutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/templates`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Basic Document Template
   * @param params.templateName The document template name__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsTemplatesTemplateNameDelete(params: IObjectsDocumentsTemplatesTemplateNameDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsTemplatesTemplateNameDelete', params, 'templateName');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/templates/{template_name}`
      .replace(`{${'template_name'}}`, encodeURIComponent(`${params['templateName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Document Template File
   * @param params.templateName The document template name__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsTemplatesTemplateNameFileGet(params: IObjectsDocumentsTemplatesTemplateNameFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsTemplatesTemplateNameFileGet', params, 'templateName');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/templates/{template_name}/file`
      .replace(`{${'template_name'}}`, encodeURIComponent(`${params['templateName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Document Template Attributes
   * @param params.templateName The document template name__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsTemplatesTemplateNameGet(params: IObjectsDocumentsTemplatesTemplateNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsTemplatesTemplateNameGet', params, 'templateName');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/templates/{template_name}`
      .replace(`{${'template_name'}}`, encodeURIComponent(`${params['templateName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Single Document Template
   * @param params.templateName The document template name__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsTemplatesTemplateNamePut(params: IObjectsDocumentsTemplatesTemplateNamePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsDocumentsTemplatesTemplateNamePut', params, 'templateName');

    // Create URL to call
    const url = `${this.basePath}/objects/documents/templates/{template_name}`
      .replace(`{${'template_name'}}`, encodeURIComponent(`${params['templateName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Document Tokens
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsTokensPost(params: IObjectsDocumentsTokensPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/tokens`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Export Document Versions
   * @param params.source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
   * @param params.renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsVersionsBatchActionsFileextractPost(params: IObjectsDocumentsVersionsBatchActionsFileextractPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/versions/batch/actions/fileextract`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'source': params['source'],
        'renditions': params['renditions'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Multiple Document Versions
   * @param params.idParam If you’re identifying documents in your input by their external ID
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsVersionsBatchDelete(params: IObjectsDocumentsVersionsBatchDeleteParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/versions/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Set query parameters
      .withParams({ 
        'idParam': params['idParam'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Multiple Document Versions
   * @param params.idParam If you’re identifying documents in your input by their external ID
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDocumentsVersionsBatchPost(params: IObjectsDocumentsVersionsBatchPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/documents/versions/batch`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'idParam': params['idParam'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-MigrationMode', params['xVaultAPIMigrationMode'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Domain Information
   * @param params.includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDomainGet(params: IObjectsDomainGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/domain`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'include_application': params['includeApplication'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Domains
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsDomainsGet(params: IObjectsDomainsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/domains`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add EDL Matched Documents
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsEdlMatchedDocumentsBatchActionsAddPost(params: IObjectsEdlMatchedDocumentsBatchActionsAddPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/edl_matched_documents/batch/actions/add`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Remove EDL Matched Documents
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsEdlMatchedDocumentsBatchActionsRemovePost(params: IObjectsEdlMatchedDocumentsBatchActionsRemovePostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/edl_matched_documents/batch/actions/remove`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Auto Managed Groups
   * @param params.limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
   * @param params.offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsGroupsAutoGet(params: IObjectsGroupsAutoGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/groups/auto`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'limit': params['limit'],
        'offset': params['offset'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Groups
   * @param params.includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsGroupsGet(params: IObjectsGroupsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/groups`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'includeImplied': params['includeImplied'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Group
   * @param params.groupId The group id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsGroupsGroupIdDelete(params: IObjectsGroupsGroupIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsGroupsGroupIdDelete', params, 'groupId');

    // Create URL to call
    const url = `${this.basePath}/objects/groups/{group_id}`
      .replace(`{${'group_id'}}`, encodeURIComponent(`${params['groupId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Group
   * @param params.groupId The group id field value.
   * @param params.includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsGroupsGroupIdGet(params: IObjectsGroupsGroupIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsGroupsGroupIdGet', params, 'groupId');

    // Create URL to call
    const url = `${this.basePath}/objects/groups/{group_id}`
      .replace(`{${'group_id'}}`, encodeURIComponent(`${params['groupId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'includeImplied': params['includeImplied'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Group
   * @param params.groupId The group id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsGroupsGroupIdPut(params: IObjectsGroupsGroupIdPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsGroupsGroupIdPut', params, 'groupId');

    // Create URL to call
    const url = `${this.basePath}/objects/groups/{group_id}`
      .replace(`{${'group_id'}}`, encodeURIComponent(`${params['groupId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Group 
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsGroupsPost(params: IObjectsGroupsPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/groups`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Application License Usage
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsLicensesGet(params: IObjectsLicensesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/licenses`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Multi-Record Workflows
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsActionsGet(params: IObjectsObjectworkflowsActionsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/actions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Multi-Record Workflow Details
   * @param params.workflowName 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsActionsWorkflowNameGet(params: IObjectsObjectworkflowsActionsWorkflowNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsActionsWorkflowNameGet', params, 'workflowName');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/actions/{workflow_name}`
      .replace(`{${'workflow_name'}}`, encodeURIComponent(`${params['workflowName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Multi-Record Workflow
   * @param params.workflowName 
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsActionsWorkflowNamePost(params: IObjectsObjectworkflowsActionsWorkflowNamePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsActionsWorkflowNamePost', params, 'workflowName');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/actions/{workflow_name}`
      .replace(`{${'workflow_name'}}`, encodeURIComponent(`${params['workflowName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Workflows
   * @param params.objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
   * @param params.recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
   * @param params.participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
   * @param params.statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
   * @param params.offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
   * @param params.pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
   * @param params.loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsGet(params: IObjectsObjectworkflowsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'object__v': params['objectV'],
        'record_id__v': params['recordIdV'],
        'participant': params['participant'],
        'status__v': params['statusV'],
        'offset': params['offset'],
        'page_size': params['pageSize'],
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Workflow Tasks
   * @param params.objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
   * @param params.recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
   * @param params.assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
   * @param params.statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
   * @param params.offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
   * @param params.pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
   * @param params.loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksGet(params: IObjectsObjectworkflowsTasksGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'object__v': params['objectV'],
        'record_id__v': params['recordIdV'],
        'assignee__v': params['assigneeV'],
        'status__v': params['statusV'],
        'offset': params['offset'],
        'page_size': params['pageSize'],
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Accept Single Record Workflow Task
   * @param params.taskId The task id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsAcceptPost(params: IObjectsObjectworkflowsTasksTaskIdActionsAcceptPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsAcceptPost', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions/accept`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Cancel Workflow Task
   * @param params.taskId The task id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsCancelPost(params: IObjectsObjectworkflowsTasksTaskIdActionsCancelPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsCancelPost', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions/cancel`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Complete Single Record Workflow Task
   * @param params.taskId The task id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsCompletePost(params: IObjectsObjectworkflowsTasksTaskIdActionsCompletePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsCompletePost', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions/complete`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Workflow Task Actions
   * @param params.taskId The task id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsGet(params: IObjectsObjectworkflowsTasksTaskIdActionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsGet', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Accept Multi-item Workflow Task
   * @param params.taskId The task id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(params: IObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Complete Multi-item Workflow Task
   * @param params.taskId The task id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(params: IObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Manage Multi-Item Workflow Content
   * @param params.taskId The task id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(params: IObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Reassign Multi-item Workflow Task
   * @param params.taskId The id of the task to reassign.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(params: IObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Reassign Single Record Workflow Task
   * @param params.taskId The id of the task to reassign.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsReassignPost(params: IObjectsObjectworkflowsTasksTaskIdActionsReassignPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsReassignPost', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions/reassign`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Workflow Task Action Details
   * @param params.taskId The task id field value.
   * @param params.taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
   * @param params.loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(params: IObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsTaskActionGet', params, 'taskId');
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsTaskActionGet', params, 'taskAction');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions/{task_action}`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`))
      .replace(`{${'task_action'}}`, encodeURIComponent(`${params['taskAction']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Undo Workflow Task Acceptance
   * @param params.taskId The task id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(params: IObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions/undoaccept`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Workflow Task Due Date
   * @param params.taskId The id of the task.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(params: IObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}/actions/updateduedate`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Workflow Task Details
   * @param params.taskId The task id field value.
   * @param params.loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsTasksTaskIdGet(params: IObjectsObjectworkflowsTasksTaskIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsTasksTaskIdGet', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/tasks/{task_id}`
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Workflow Actions
   * @param params.workflowId The workflow id field value.
   * @param params.loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsWorkflowIdActionsGet(params: IObjectsObjectworkflowsWorkflowIdActionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsWorkflowIdActionsGet', params, 'workflowId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/{workflow_id}/actions`
      .replace(`{${'workflow_id'}}`, encodeURIComponent(`${params['workflowId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Workflow Action Details
   * @param params.workflowId The workflow id field value.
   * @param params.workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(params: IObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet', params, 'workflowId');
    this.ensureParamIsSet('objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet', params, 'workflowAction');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/{workflow_id}/actions/{workflow_action}`
      .replace(`{${'workflow_id'}}`, encodeURIComponent(`${params['workflowId']}`))
      .replace(`{${'workflow_action'}}`, encodeURIComponent(`${params['workflowAction']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Workflow Action
   * @param params.workflowId The workflow id field value.
   * @param params.workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
   * @param params.documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(params: IObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost', params, 'workflowId');
    this.ensureParamIsSet('objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost', params, 'workflowAction');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/{workflow_id}/actions/{workflow_action}`
      .replace(`{${'workflow_id'}}`, encodeURIComponent(`${params['workflowId']}`))
      .replace(`{${'workflow_action'}}`, encodeURIComponent(`${params['workflowAction']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'documents__sys': params['documentsSys'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Workflow Details
   * @param params.workflowId The workflow id field value.
   * @param params.loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsObjectworkflowsWorkflowIdGet(params: IObjectsObjectworkflowsWorkflowIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsObjectworkflowsWorkflowIdGet', params, 'workflowId');

    // Create URL to call
    const url = `${this.basePath}/objects/objectworkflows/{workflow_id}`
      .replace(`{${'workflow_id'}}`, encodeURIComponent(`${params['workflowId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Picklists
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsPicklistsGet(params: IObjectsPicklistsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/picklists`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Picklist Values
   * @param params.picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsPicklistsPicklistNameGet(params: IObjectsPicklistsPicklistNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsPicklistsPicklistNameGet', params, 'picklistName');

    // Create URL to call
    const url = `${this.basePath}/objects/picklists/{picklist_name}`
      .replace(`{${'picklist_name'}}`, encodeURIComponent(`${params['picklistName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Inactivate Picklist Value
   * @param params.picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
   * @param params.picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsPicklistsPicklistNamePicklistValueNameDelete(params: IObjectsPicklistsPicklistNamePicklistValueNameDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsPicklistsPicklistNamePicklistValueNameDelete', params, 'picklistName');
    this.ensureParamIsSet('objectsPicklistsPicklistNamePicklistValueNameDelete', params, 'picklistValueName');

    // Create URL to call
    const url = `${this.basePath}/objects/picklists/{picklist_name}/{picklist_value_name}`
      .replace(`{${'picklist_name'}}`, encodeURIComponent(`${params['picklistName']}`))
      .replace(`{${'picklist_value_name'}}`, encodeURIComponent(`${params['picklistValueName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Picklist Value
   * @param params.picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
   * @param params.picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsPicklistsPicklistNamePicklistValueNamePut(params: IObjectsPicklistsPicklistNamePicklistValueNamePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsPicklistsPicklistNamePicklistValueNamePut', params, 'picklistName');
    this.ensureParamIsSet('objectsPicklistsPicklistNamePicklistValueNamePut', params, 'picklistValueName');

    // Create URL to call
    const url = `${this.basePath}/objects/picklists/{picklist_name}/{picklist_value_name}`
      .replace(`{${'picklist_name'}}`, encodeURIComponent(`${params['picklistName']}`))
      .replace(`{${'picklist_value_name'}}`, encodeURIComponent(`${params['picklistValueName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Picklist Values
   * @param params.picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsPicklistsPicklistNamePost(params: IObjectsPicklistsPicklistNamePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsPicklistsPicklistNamePost', params, 'picklistName');

    // Create URL to call
    const url = `${this.basePath}/objects/picklists/{picklist_name}`
      .replace(`{${'picklist_name'}}`, encodeURIComponent(`${params['picklistName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Picklist Value Label
   * @param params.picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsPicklistsPicklistNamePut(params: IObjectsPicklistsPicklistNamePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsPicklistsPicklistNamePut', params, 'picklistName');

    // Create URL to call
    const url = `${this.basePath}/objects/picklists/{picklist_name}`
      .replace(`{${'picklist_name'}}`, encodeURIComponent(`${params['picklistName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Build Production Vault
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxActionsBuildproductionPost(params: IObjectsSandboxActionsBuildproductionPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/actions/buildproduction`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Promote to Production
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxActionsPromoteproductionPost(params: IObjectsSandboxActionsPromoteproductionPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/actions/promoteproduction`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Recheck Sandbox Usage Limit
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxActionsRecheckusagePost(params: IObjectsSandboxActionsRecheckusagePostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/actions/recheckusage`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Change Sandbox Size
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxBatchChangesizePost(params: IObjectsSandboxBatchChangesizePostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/batch/changesize`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Set Sandbox Entitlements
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxEntitlementsSetPost(params: IObjectsSandboxEntitlementsSetPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/entitlements/set`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Sandboxes
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxGet(params: IObjectsSandboxGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Sandbox
   * @param params.name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxNameDelete(params: IObjectsSandboxNameDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsSandboxNameDelete', params, 'name');

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/{name}`
      .replace(`{${'name'}}`, encodeURIComponent(`${params['name']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create or Refresh Sandbox
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxPost(params: IObjectsSandboxPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Sandbox Snapshot
   * @param params.apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxSnapshotApiNameActionsUpdatePost(params: IObjectsSandboxSnapshotApiNameActionsUpdatePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsSandboxSnapshotApiNameActionsUpdatePost', params, 'apiName');

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/snapshot/{api_name}/actions/update`
      .replace(`{${'api_name'}}`, encodeURIComponent(`${params['apiName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Upgrade Sandbox Snapshot
   * @param params.apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxSnapshotApiNameActionsUpgradePost(params: IObjectsSandboxSnapshotApiNameActionsUpgradePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsSandboxSnapshotApiNameActionsUpgradePost', params, 'apiName');

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/snapshot/{api_name}/actions/upgrade`
      .replace(`{${'api_name'}}`, encodeURIComponent(`${params['apiName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Sandbox Snapshot
   * @param params.apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxSnapshotApiNameDelete(params: IObjectsSandboxSnapshotApiNameDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsSandboxSnapshotApiNameDelete', params, 'apiName');

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/snapshot/{api_name}`
      .replace(`{${'api_name'}}`, encodeURIComponent(`${params['apiName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Sandbox Snapshots
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxSnapshotGet(params: IObjectsSandboxSnapshotGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/snapshot`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Sandbox Snapshot
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxSnapshotPost(params: IObjectsSandboxSnapshotPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/snapshot`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Refresh Sandbox from Snapshot
   * @param params.vaultId The Vault ID of the sandbox to be refreshed.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxVaultIdActionsRefreshPost(params: IObjectsSandboxVaultIdActionsRefreshPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsSandboxVaultIdActionsRefreshPost', params, 'vaultId');

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/{vault_id}/actions/refresh`
      .replace(`{${'vault_id'}}`, encodeURIComponent(`${params['vaultId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Sandbox Details by ID
   * @param params.vaultId 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSandboxVaultIdGet(params: IObjectsSandboxVaultIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsSandboxVaultIdGet', params, 'vaultId');

    // Create URL to call
    const url = `${this.basePath}/objects/sandbox/{vault_id}`
      .replace(`{${'vault_id'}}`, encodeURIComponent(`${params['vaultId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Security Policies
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSecuritypoliciesGet(params: IObjectsSecuritypoliciesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/securitypolicies`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Security Policy
   * @param params.securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsSecuritypoliciesSecurityPolicyNameGet(params: IObjectsSecuritypoliciesSecurityPolicyNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsSecuritypoliciesSecurityPolicyNameGet', params, 'securityPolicyName');

    // Create URL to call
    const url = `${this.basePath}/objects/securitypolicies/{security_policy_name}`
      .replace(`{${'security_policy_name'}}`, encodeURIComponent(`${params['securityPolicyName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Users
   * @param params.vaults Retrieve all users assigned to all Vaults in your domain.
   * @param params.excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
   * @param params.excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersGet(params: IObjectsUsersGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/users/`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'vaults': params['vaults'],
        'exclude_vault_membership': params['excludeVaultMembership'],
        'exclude_app_licensing': params['excludeAppLicensing'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve User
   * @param params.id The user id field value. Use the value me to get information for the currently authenticated user.
   * @param params.excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
   * @param params.excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersIdGet(params: IObjectsUsersIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsUsersIdGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/objects/users/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'exclude_vault_membership': params['excludeVaultMembership'],
        'exclude_app_licensing': params['excludeAppLicensing'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve User Permissions
   * @param params.id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
   * @param params.filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersIdPermissionsGet(params: IObjectsUsersIdPermissionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsUsersIdPermissionsGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/objects/users/{id}/permissions`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'filter': params['filter'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Single User
   * @param params.id The user id field value. Use the value me to get information for the currently authenticated user.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersIdPut(params: IObjectsUsersIdPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsUsersIdPut', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/objects/users/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Validate Session User
   * @param params.excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
   * @param params.excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersMeGet(params: IObjectsUsersMeGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/users/me`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'exclude_vault_membership': params['excludeVaultMembership'],
        'exclude_app_licensing': params['excludeAppLicensing'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Change My Password
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersMePasswordPost(params: IObjectsUsersMePasswordPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/users/me/password`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve My User Permissions
   * @param params.filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersMePermissionsGet(params: IObjectsUsersMePermissionsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/users/me/permissions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'filter': params['filter'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update My User
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersMePut(params: IObjectsUsersMePutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/users/me`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Single User
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersPost(params: IObjectsUsersPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/users`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Multiple Users
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersPut(params: IObjectsUsersPutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/users`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Disable User
   * @param params.userId The user id field value. 
   * @param params.domain When true, this disables the user account in all vaults in the domain.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersUserIdDelete(params: IObjectsUsersUserIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsUsersUserIdDelete', params, 'userId');

    // Create URL to call
    const url = `${this.basePath}/objects/users/{user_id}`
      .replace(`{${'user_id'}}`, encodeURIComponent(`${params['userId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Set query parameters
      .withParams({ 
        'domain': params['domain'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Vault Membership
   * @param params.userId The user id field value.
   * @param params.vaultId The system-managed id field value assigned to each vault in the domain.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsUsersUserIdVaultMembershipVaultIdPut(params: IObjectsUsersUserIdVaultMembershipVaultIdPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('objectsUsersUserIdVaultMembershipVaultIdPut', params, 'userId');
    this.ensureParamIsSet('objectsUsersUserIdVaultMembershipVaultIdPut', params, 'vaultId');

    // Create URL to call
    const url = `${this.basePath}/objects/users/{user_id}/vault_membership/{vault_id}`
      .replace(`{${'user_id'}}`, encodeURIComponent(`${params['userId']}`))
      .replace(`{${'vault_id'}}`, encodeURIComponent(`${params['vaultId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Vault Compare
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsVaultActionsComparePost(params: IObjectsVaultActionsComparePostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/vault/actions/compare`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Vault Configuration Report
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async objectsVaultActionsConfigreportPost(params: IObjectsVaultActionsConfigreportPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/objects/vault/actions/configreport`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Component Definition Query
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async queryComponentsPost(params: IQueryComponentsPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/query/components`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Next Page URL
   * @param params.nextPage 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIDescribeQuery 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async queryNextPagePost(params: IQueryNextPagePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('queryNextPagePost', params, 'nextPage');

    // Create URL to call
    const url = `${this.basePath}/query/{next_page}`
      .replace(`{${'next_page'}}`, encodeURIComponent(`${params['nextPage']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-DescribeQuery', params['xVaultAPIDescribeQuery'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Submitting a Query
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIDescribeQuery 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async queryPost(params: IQueryPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/query`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-DescribeQuery', params['xVaultAPIDescribeQuery'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Previous Page URL
   * @param params.previousPage 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIDescribeQuery 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async queryPreviousPagePost(params: IQueryPreviousPagePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('queryPreviousPagePost', params, 'previousPage');

    // Create URL to call
    const url = `${this.basePath}/query/{previous_page}`
      .replace(`{${'previous_page'}}`, encodeURIComponent(`${params['previousPage']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-DescribeQuery', params['xVaultAPIDescribeQuery'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Current User with SCIM
   * @param params.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param params.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2MeGet(params: IScimV2MeGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/scim/v2/Me`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'attributes': params['attributes'],
        'excludedAttributes': params['excludedAttributes'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Current User with SCIM
   * @param params.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param params.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2MePut(params: IScimV2MePutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/scim/v2/Me`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Set query parameters
      .withParams({ 
        'attributes': params['attributes'],
        'excludedAttributes': params['excludedAttributes'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All SCIM Resource Types
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2ResourceTypesGet(params: IScimV2ResourceTypesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/scim/v2/ResourceTypes`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Single SCIM Resource Type
   * @param params.type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2ResourceTypesTypeGet(params: IScimV2ResourceTypesTypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('scimV2ResourceTypesTypeGet', params, 'type');

    // Create URL to call
    const url = `${this.basePath}/scim/v2/ResourceTypes/{type}`
      .replace(`{${'type'}}`, encodeURIComponent(`${params['type']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All SCIM Schema Information
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2SchemasGet(params: IScimV2SchemasGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/scim/v2/Schemas`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Single SCIM Schema Information
   * @param params.id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2SchemasIdGet(params: IScimV2SchemasIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('scimV2SchemasIdGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/scim/v2/Schemas/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve SCIM Provider
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2ServiceProviderConfigGet(params: IScimV2ServiceProviderConfigGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/scim/v2/ServiceProviderConfig`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve SCIM Resources
   * @param params.type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
   * @param params.filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
   * @param params.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param params.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param params.sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
   * @param params.sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
   * @param params.startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2TypeGet(params: IScimV2TypeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('scimV2TypeGet', params, 'type');

    // Create URL to call
    const url = `${this.basePath}/scim/v2/{type}`
      .replace(`{${'type'}}`, encodeURIComponent(`${params['type']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'filter': params['filter'],
        'attributes': params['attributes'],
        'excludedAttributes': params['excludedAttributes'],
        'sortBy': params['sortBy'],
        'sortOrder': params['sortOrder'],
        'startIndex': params['startIndex'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Single SCIM Resource
   * @param params.type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
   * @param params.id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
   * @param params.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param params.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2TypeIdGet(params: IScimV2TypeIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('scimV2TypeIdGet', params, 'type');
    this.ensureParamIsSet('scimV2TypeIdGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/scim/v2/{type}/{id}`
      .replace(`{${'type'}}`, encodeURIComponent(`${params['type']}`))
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'attributes': params['attributes'],
        'excludedAttributes': params['excludedAttributes'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Users with SCIM
   * @param params.filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
   * @param params.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param params.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param params.sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
   * @param params.sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
   * @param params.count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
   * @param params.startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2UsersGet(params: IScimV2UsersGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/scim/v2/Users`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'filter': params['filter'],
        'attributes': params['attributes'],
        'excludedAttributes': params['excludedAttributes'],
        'sortBy': params['sortBy'],
        'sortOrder': params['sortOrder'],
        'count': params['count'],
        'startIndex': params['startIndex'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Single User with SCIM
   * @param params.id The id of the user you wish to update.
   * @param params.filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
   * @param params.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param params.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2UsersIdGet(params: IScimV2UsersIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('scimV2UsersIdGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/scim/v2/Users/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'filter': params['filter'],
        'attributes': params['attributes'],
        'excludedAttributes': params['excludedAttributes'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update User with SCIM
   * @param params.id The id of the user you wish to update.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2UsersIdPut(params: IScimV2UsersIdPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('scimV2UsersIdPut', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/scim/v2/Users/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create User with SCIM
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async scimV2UsersPost(params: IScimV2UsersPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/scim/v2/Users`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Signing Certificate
   * @param params.certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesCertificateCertIdGet(params: IServicesCertificateCertIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesCertificateCertIdGet', params, 'certId');

    // Create URL to call
    const url = `${this.basePath}/services/certificate/{cert_id}`
      .replace(`{${'cert_id'}}`, encodeURIComponent(`${params['certId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Disable Configuration Mode
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesConfigurationModeActionsDisablePost(params: IServicesConfigurationModeActionsDisablePostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/configuration_mode/actions/disable`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Enable Configuration Mode
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesConfigurationModeActionsEnablePost(params: IServicesConfigurationModeActionsEnablePostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/configuration_mode/actions/enable`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Available Direct Data Files
   * @param params.extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
   * @param params.startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
   * @param params.stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesDirectdataFilesGet(params: IServicesDirectdataFilesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/directdata/files`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'extract_type': params['extractType'],
        'start_time': params['startTime'],
        'stop_time': params['stopTime'],
      })
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Direct Data File
   * @param params.name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesDirectdataFilesNameGet(params: IServicesDirectdataFilesNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesDirectdataFilesNameGet', params, 'name');

    // Create URL to call
    const url = `${this.basePath}/services/directdata/files/{name}`
      .replace(`{${'name'}}`, encodeURIComponent(`${params['name']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Item Content
   * @param params.item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
   * @param params.authorization 
   * @param params.accept 
   * @param params.range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingItemsContentItemGet(params: IServicesFileStagingItemsContentItemGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesFileStagingItemsContentItemGet', params, 'item');

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/items/content/{item}`
      .replace(`{${'item'}}`, encodeURIComponent(`${params['item']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Range', params['range'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete File or Folder
   * @param params.item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
   * @param params.recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingItemsItemDelete(params: IServicesFileStagingItemsItemDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesFileStagingItemsItemDelete', params, 'item');

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/items/{item}`
      .replace(`{${'item'}}`, encodeURIComponent(`${params['item']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Set query parameters
      .withParams({ 
        'recursive': params['recursive'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List Items at a Path
   * @param params.item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
   * @param params.recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
   * @param params.limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
   * @param params.formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingItemsItemGet(params: IServicesFileStagingItemsItemGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesFileStagingItemsItemGet', params, 'item');

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/items/{item}`
      .replace(`{${'item'}}`, encodeURIComponent(`${params['item']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'recursive': params['recursive'],
        'limit': params['limit'],
        'format_result': params['formatResult'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Folder or File
   * @param params.item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingItemsItemPut(params: IServicesFileStagingItemsItemPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesFileStagingItemsItemPut', params, 'item');

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/items/{item}`
      .replace(`{${'item'}}`, encodeURIComponent(`${params['item']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Folder or File
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentMD5 Optional: The MD5 checksum of the file being uploaded.
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingItemsPost(params: IServicesFileStagingItemsPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/items`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-MD5', params['contentMD5'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List Upload Sessions
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingUploadGet(params: IServicesFileStagingUploadGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/upload/`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Resumable Upload Session
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingUploadPost(params: IServicesFileStagingUploadPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/upload`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Abort Upload Session
   * @param params.uploadSessionId 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingUploadUploadSessionIdDelete(params: IServicesFileStagingUploadUploadSessionIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesFileStagingUploadUploadSessionIdDelete', params, 'uploadSessionId');

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/upload/{upload_session_id}`
      .replace(`{${'upload_session_id'}}`, encodeURIComponent(`${params['uploadSessionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Upload Session Details
   * @param params.uploadSessionId 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingUploadUploadSessionIdGet(params: IServicesFileStagingUploadUploadSessionIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesFileStagingUploadUploadSessionIdGet', params, 'uploadSessionId');

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/upload/{upload_session_id}`
      .replace(`{${'upload_session_id'}}`, encodeURIComponent(`${params['uploadSessionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List File Parts Uploaded to Session
   * @param params.uploadSessionId 
   * @param params.limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingUploadUploadSessionIdPartsGet(params: IServicesFileStagingUploadUploadSessionIdPartsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesFileStagingUploadUploadSessionIdPartsGet', params, 'uploadSessionId');

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/upload/{upload_session_id}/parts`
      .replace(`{${'upload_session_id'}}`, encodeURIComponent(`${params['uploadSessionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'limit': params['limit'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Commit Upload Session
   * @param params.uploadSessionId 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingUploadUploadSessionIdPost(params: IServicesFileStagingUploadUploadSessionIdPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesFileStagingUploadUploadSessionIdPost', params, 'uploadSessionId');

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/upload/{upload_session_id}`
      .replace(`{${'upload_session_id'}}`, encodeURIComponent(`${params['uploadSessionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Upload to a Session
   * @param params.uploadSessionId 
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
   * @param params.contentMD5 Optional: The MD5 checksum of the file part being uploaded.
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesFileStagingUploadUploadSessionIdPut(params: IServicesFileStagingUploadUploadSessionIdPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesFileStagingUploadUploadSessionIdPut', params, 'uploadSessionId');

    // Create URL to call
    const url = `${this.basePath}/services/file_staging/upload/{upload_session_id}`
      .replace(`{${'upload_session_id'}}`, encodeURIComponent(`${params['uploadSessionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-FilePartNumber', params['xVaultAPIFilePartNumber'])      .withHeader('Content-MD5', params['contentMD5'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Job Histories
   * @param params.startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
   * @param params.endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
   * @param params.status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
   * @param params.limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
   * @param params.offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesJobsHistoriesGet(params: IServicesJobsHistoriesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/jobs/histories`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'status': params['status'],
        'limit': params['limit'],
        'offset': params['offset'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Import Bulk Translation File Job Errors
   * @param params.jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesJobsJobIdErrorsGet(params: IServicesJobsJobIdErrorsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesJobsJobIdErrorsGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/services/jobs/{job_id}/errors`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Job Status
   * @param params.jobId The ID of the job, returned from the original job request.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesJobsJobIdGet(params: IServicesJobsJobIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesJobsJobIdGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/services/jobs/{job_id}`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Import Bulk Translation File Job Summary
   * @param params.jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesJobsJobIdSummaryGet(params: IServicesJobsJobIdSummaryGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesJobsJobIdSummaryGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/services/jobs/{job_id}/summary`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve SDK Job Tasks
   * @param params.jobId The ID of the SDK job, returned from the original job request.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesJobsJobIdTasksGet(params: IServicesJobsJobIdTasksGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesJobsJobIdTasksGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/services/jobs/{job_id}/tasks`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Job Monitors
   * @param params.startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
   * @param params.endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
   * @param params.status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
   * @param params.limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
   * @param params.offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesJobsMonitorsGet(params: IServicesJobsMonitorsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/jobs/monitors`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'status': params['status'],
        'limit': params['limit'],
        'offset': params['offset'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Start Job
   * @param params.jobId The ID of the scheduled job instance to start.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesJobsStartNowJobIdPost(params: IServicesJobsStartNowJobIdPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesJobsStartNowJobIdPost', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/services/jobs/start_now/{job_id}`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Extract Data Files
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesLoaderExtractPost(params: IServicesLoaderExtractPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/loader/extract`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Load Failure Log Results
   * @param params.jobId The id value of the requested extract job.
   * @param params.taskId The id value of the requested extract task.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesLoaderJobIdTasksTaskIdFailurelogGet(params: IServicesLoaderJobIdTasksTaskIdFailurelogGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesLoaderJobIdTasksTaskIdFailurelogGet', params, 'jobId');
    this.ensureParamIsSet('servicesLoaderJobIdTasksTaskIdFailurelogGet', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/services/loader/{job_id}/tasks/{task_id}/failurelog`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`))
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Loader Extract Results
   * @param params.jobId The id value of the requested extract job.
   * @param params.taskId The id value of the requested extract task.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesLoaderJobIdTasksTaskIdResultsGet(params: IServicesLoaderJobIdTasksTaskIdResultsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesLoaderJobIdTasksTaskIdResultsGet', params, 'jobId');
    this.ensureParamIsSet('servicesLoaderJobIdTasksTaskIdResultsGet', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/services/loader/{job_id}/tasks/{task_id}/results`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`))
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Loader Extract Renditions Results
   * @param params.jobId The id value of the requested extract job.
   * @param params.taskId The id value of the requested extract task.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(params: IServicesLoaderJobIdTasksTaskIdResultsRenditionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesLoaderJobIdTasksTaskIdResultsRenditionsGet', params, 'jobId');
    this.ensureParamIsSet('servicesLoaderJobIdTasksTaskIdResultsRenditionsGet', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/services/loader/{job_id}/tasks/{task_id}/results/renditions`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`))
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Load Success Log Results
   * @param params.jobId The id value of the requested extract job.
   * @param params.taskId The id value of the requested extract task.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesLoaderJobIdTasksTaskIdSuccesslogGet(params: IServicesLoaderJobIdTasksTaskIdSuccesslogGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesLoaderJobIdTasksTaskIdSuccesslogGet', params, 'jobId');
    this.ensureParamIsSet('servicesLoaderJobIdTasksTaskIdSuccesslogGet', params, 'taskId');

    // Create URL to call
    const url = `${this.basePath}/services/loader/{job_id}/tasks/{task_id}/successlog`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`))
      .replace(`{${'task_id'}}`, encodeURIComponent(`${params['taskId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Load Data Objects
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesLoaderLoadPost(params: IServicesLoaderLoadPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/loader/load`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Validate Package
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesPackageActionsValidatePost(params: IServicesPackageActionsValidatePostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/package/actions/validate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Export Package
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesPackagePost(params: IServicesPackagePostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/package`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Import Package
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesPackagePut(params: IServicesPackagePutParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/package`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Queues
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesQueuesGet(params: IServicesQueuesGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/services/queues`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Disable Delivery
   * @param params.queueName The name of a specific Queue.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesQueuesQueueNameActionsDisableDeliveryPut(params: IServicesQueuesQueueNameActionsDisableDeliveryPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesQueuesQueueNameActionsDisableDeliveryPut', params, 'queueName');

    // Create URL to call
    const url = `${this.basePath}/services/queues/{queue_name}/actions/disable_delivery`
      .replace(`{${'queue_name'}}`, encodeURIComponent(`${params['queueName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Enable Delivery
   * @param params.queueName The name of a specific Queue.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesQueuesQueueNameActionsEnableDeliveryPut(params: IServicesQueuesQueueNameActionsEnableDeliveryPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesQueuesQueueNameActionsEnableDeliveryPut', params, 'queueName');

    // Create URL to call
    const url = `${this.basePath}/services/queues/{queue_name}/actions/enable_delivery`
      .replace(`{${'queue_name'}}`, encodeURIComponent(`${params['queueName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Reset Queue
   * @param params.queueName The name of a specific Queue.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesQueuesQueueNameActionsResetPut(params: IServicesQueuesQueueNameActionsResetPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesQueuesQueueNameActionsResetPut', params, 'queueName');

    // Create URL to call
    const url = `${this.basePath}/services/queues/{queue_name}/actions/reset`
      .replace(`{${'queue_name'}}`, encodeURIComponent(`${params['queueName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Queue Status
   * @param params.queueName The name of a specific queue. For example, queue__c.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesQueuesQueueNameGet(params: IServicesQueuesQueueNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesQueuesQueueNameGet', params, 'queueName');

    // Create URL to call
    const url = `${this.basePath}/services/queues/{queue_name}`
      .replace(`{${'queue_name'}}`, encodeURIComponent(`${params['queueName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Validate Imported Package
   * @param params.packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async servicesVobjectVaultPackageVPackageIdActionsValidatePost(params: IServicesVobjectVaultPackageVPackageIdActionsValidatePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('servicesVobjectVaultPackageVPackageIdActionsValidatePost', params, 'packageId');

    // Create URL to call
    const url = `${this.basePath}/services/vobject/vault_package__v/{package_id}/actions/validate`
      .replace(`{${'package_id'}}`, encodeURIComponent(`${params['packageId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * End Session
   * @param params.accept 
   * @param params.authorization The Vault sessionId to end.
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async sessionDelete(params: ISessionDeleteParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/session`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Single Client Code Distribution
   * @param params.distributionName The name attribute of the client code distribution to download.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async uicodeDistributionsDistributionNameCodeGet(params: IUicodeDistributionsDistributionNameCodeGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('uicodeDistributionsDistributionNameCodeGet', params, 'distributionName');

    // Create URL to call
    const url = `${this.basePath}/uicode/distributions/{distribution_name}/code`
      .replace(`{${'distribution_name'}}`, encodeURIComponent(`${params['distributionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Single Client Code Distribution
   * @param params.distributionName The name attribute of the client code distribution to delete.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async uicodeDistributionsDistributionNameDelete(params: IUicodeDistributionsDistributionNameDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('uicodeDistributionsDistributionNameDelete', params, 'distributionName');

    // Create URL to call
    const url = `${this.basePath}/uicode/distributions/{distribution_name}`
      .replace(`{${'distribution_name'}}`, encodeURIComponent(`${params['distributionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Single Client Code Distribution Metadata
   * @param params.distributionName The name attribute of the client code distribution to delete.
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async uicodeDistributionsDistributionNameGet(params: IUicodeDistributionsDistributionNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('uicodeDistributionsDistributionNameGet', params, 'distributionName');

    // Create URL to call
    const url = `${this.basePath}/uicode/distributions/{distribution_name}`
      .replace(`{${'distribution_name'}}`, encodeURIComponent(`${params['distributionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve All Client Code Distribution Metadata
   * @param params.accept 
   * @param params.authorization 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async uicodeDistributionsGet(params: IUicodeDistributionsGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/uicode/distributions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add or Replace Single Client Code Distribution
   * @param params.accept 
   * @param params.authorization 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async uicodeDistributionsPost(params: IUicodeDistributionsPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/uicode/distributions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Accept', params['accept'])      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Deploy Package
   * @param params.packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectVaultPackageVPackageIdActionsDeployPost(params: IVobjectVaultPackageVPackageIdActionsDeployPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectVaultPackageVPackageIdActionsDeployPost', params, 'packageId');

    // Create URL to call
    const url = `${this.basePath}/vobject/vault_package__v/{package_id}/actions/deploy`
      .replace(`{${'package_id'}}`, encodeURIComponent(`${params['packageId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Package Deploy Results
   * @param params.packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectVaultPackageVPackageIdActionsDeployResultsGet(params: IVobjectVaultPackageVPackageIdActionsDeployResultsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectVaultPackageVPackageIdActionsDeployResultsGet', params, 'packageId');

    // Create URL to call
    const url = `${this.basePath}/vobject/vault_package__v/{package_id}/actions/deploy/results`
      .replace(`{${'package_id'}}`, encodeURIComponent(`${params['packageId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Results of Cascade Delete Job
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.jobStatus 
   * @param params.jobId 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(params: IVobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet', params, 'jobStatus');
    this.ensureParamIsSet('vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'job_status'}}`, encodeURIComponent(`${params['jobStatus']}`))
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Results of Deep Copy Job
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.jobStatus The ID of the job, retrieved from the response of the job request.
   * @param params.jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(params: IVobjectsDeepcopyResultsObjectNameJobStatusJobIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet', params, 'jobStatus');
    this.ensureParamIsSet('vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'job_status'}}`, encodeURIComponent(`${params['jobStatus']}`))
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create a Placeholder from an EDL Item
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsEdlItemVActionsCreateplaceholderPost(params: IVobjectsEdlItemVActionsCreateplaceholderPostParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/vobjects/edl_item__v/actions/createplaceholder`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Merge Records Job Log
   * @param params.jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsMergesJobIdLogGet(params: IVobjectsMergesJobIdLogGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsMergesJobIdLogGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/merges/{job_id}/log`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Record Merge Results
   * @param params.jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsMergesJobIdResultsGet(params: IVobjectsMergesJobIdResultsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsMergesJobIdResultsGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/merges/{job_id}/results`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Record Merge Status
   * @param params.jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsMergesJobIdStatusGet(params: IVobjectsMergesJobIdStatusGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsMergesJobIdStatusGet', params, 'jobId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/merges/{job_id}/status`
      .replace(`{${'job_id'}}`, encodeURIComponent(`${params['jobId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Object Action on Multiple Records
   * @param params.objectName The object name__v field value.
   * @param params.actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameActionsActionNamePost(params: IVobjectsObjectNameActionsActionNamePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameActionsActionNamePost', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameActionsActionNamePost', params, 'actionName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/actions/{action_name}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'action_name'}}`, encodeURIComponent(`${params['actionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Change Object Type
   * @param params.objectName The name of the object.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameActionsChangetypePost(params: IVobjectsObjectNameActionsChangetypePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameActionsChangetypePost', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/actions/changetype`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Record Merge
   * @param params.objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @param params.vobjectsObjectNameActionsMergePostRequestInner 
   */
  async vobjectsObjectNameActionsMergePost(params: IVobjectsObjectNameActionsMergePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameActionsMergePost', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/actions/merge`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['vobjectsObjectNameActionsMergePostRequestInner'] || {}))
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Roll-up Field Recalculation Status
   * @param params.objectName The name of the object for which to check the status of a Roll-up field recalculation.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameActionsRecalculaterollupsGet(params: IVobjectsObjectNameActionsRecalculaterollupsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameActionsRecalculaterollupsGet', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/actions/recalculaterollups`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Recalculate Roll-up Fields
   * @param params.objectName The name of the object for which to check the status of a Roll-up field recalculation.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameActionsRecalculaterollupsPost(params: IVobjectsObjectNameActionsRecalculaterollupsPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameActionsRecalculaterollupsPost', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/actions/recalculaterollups`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Corporate Currency Fields
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameActionsUpdatecorporatecurrencyPut(params: IVobjectsObjectNameActionsUpdatecorporatecurrencyPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameActionsUpdatecorporatecurrencyPut', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/actions/updatecorporatecurrency`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Multiple Object Record Attachments
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.idParam 
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameAttachmentsBatchDelete(params: IVobjectsObjectNameAttachmentsBatchDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameAttachmentsBatchDelete', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/attachments/batch`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Set query parameters
      .withParams({ 
        'idParam': params['idParam'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Multiple Object Record Attachments
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameAttachmentsBatchPost(params: IVobjectsObjectNameAttachmentsBatchPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameAttachmentsBatchPost', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/attachments/batch`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Multiple Object Record Attachment Descriptions
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameAttachmentsBatchPut(params: IVobjectsObjectNameAttachmentsBatchPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameAttachmentsBatchPut', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/attachments/batch`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Object Records
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.authorization 
   * @param params.contentType Can be text/csv or application/json
   * @param params.accept Can be text/csv or application/json
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameDelete(params: IVobjectsObjectNameDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameDelete', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Object Record Roles
   * @param params.objectName The object name.
   * @param params.id The id of the document, binder, or object record.
   * @param params.roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameIdRolesRoleNameGet(params: IVobjectsObjectNameIdRolesRoleNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameIdRolesRoleNameGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameIdRolesRoleNameGet', params, 'id');
    this.ensureParamIsSet('vobjectsObjectNameIdRolesRoleNameGet', params, 'roleName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{id}/roles/{role_name}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`))
      .replace(`{${'role_name'}}`, encodeURIComponent(`${params['roleName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Object User Actions Details
   * @param params.objectName The object name__v field value.
   * @param params.objectRecordId The object record id field value from which to retrieve user actions.
   * @param params.actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdActionsActionNameGet(params: IVobjectsObjectNameObjectRecordIdActionsActionNameGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsActionNameGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsActionNameGet', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsActionNameGet', params, 'actionName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/actions/{action_name}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'action_name'}}`, encodeURIComponent(`${params['actionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Initiate Object Action on a Single Record
   * @param params.objectName The object name__v field value.
   * @param params.objectRecordId The object record id field value from which to retrieve user actions.
   * @param params.actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
   * @param params.authorization 
   * @param params.contentType 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdActionsActionNamePost(params: IVobjectsObjectNameObjectRecordIdActionsActionNamePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsActionNamePost', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsActionNamePost', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsActionNamePost', params, 'actionName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/actions/{action_name}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'action_name'}}`, encodeURIComponent(`${params['actionName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Cascade Delete Object Record
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(params: IVobjectsObjectNameObjectRecordIdActionsCascadedeletePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsCascadedeletePost', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsCascadedeletePost', params, 'objectRecordId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/actions/cascadedelete`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Deep Copy Object Record
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(params: IVobjectsObjectNameObjectRecordIdActionsDeepcopyPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsDeepcopyPost', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsDeepcopyPost', params, 'objectRecordId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/actions/deepcopy`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Object Record User Actions
   * @param params.objectName The object name__v field value.
   * @param params.objectRecordId The object record id field value.
   * @param params.loc Optional: When true, retrieves localized (translated) strings for the label. 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdActionsGet(params: IVobjectsObjectNameObjectRecordIdActionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdActionsGet', params, 'objectRecordId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/actions`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'loc': params['loc'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Attachment Field File
   * @param params.objectName The object name__v field value. For example, product__v.
   * @param params.objectRecordId The object record id field value.
   * @param params.attachmentFieldName The name of the Attachment field to update.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(params: IVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet', params, 'attachmentFieldName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'attachment_field_name'}}`, encodeURIComponent(`${params['attachmentFieldName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Attachment Field File
   * @param params.objectName The object name__v field value. For example, product__v.
   * @param params.objectRecordId The object record id field value.
   * @param params.attachmentFieldName The name of the Attachment field to update.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(params: IVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost', params, 'attachmentFieldName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'attachment_field_name'}}`, encodeURIComponent(`${params['attachmentFieldName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download All Attachment Field Files
   * @param params.objectName The object name__v field value. For example, product__v.
   * @param params.objectRecordId The object record id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(params: IVobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet', params, 'objectRecordId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachment_fields/file`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Object Record Attachment
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(params: IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete', params, 'attachmentId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Object Record Attachment Metadata
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(params: IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet', params, 'attachmentId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Object Record Attachment Description
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(params: IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut', params, 'attachmentId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Object Record Attachment Version
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.attachmentVersion The attachment version__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(params: IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', params, 'attachmentId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', params, 'attachmentVersion');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`))
      .replace(`{${'attachment_version'}}`, encodeURIComponent(`${params['attachmentVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Object Record Attachment File
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.attachmentVersion 
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(params: IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'attachmentId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', params, 'attachmentVersion');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`))
      .replace(`{${'attachment_version'}}`, encodeURIComponent(`${params['attachmentVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Object Record Attachment Version Metadata
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.attachmentVersion The attachment version__v field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(params: IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'attachmentId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', params, 'attachmentVersion');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`))
      .replace(`{${'attachment_version'}}`, encodeURIComponent(`${params['attachmentVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Restore Object Record Attachment Version
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.attachmentVersion The attachment version__v field value.
   * @param params.restore 
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(params: IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', params, 'attachmentId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', params, 'attachmentVersion');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`))
      .replace(`{${'attachment_version'}}`, encodeURIComponent(`${params['attachmentVersion']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'restore': params['restore'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Object Record Attachment Versions
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.attachmentId The attachment id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(params: IVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet', params, 'objectRecordId');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet', params, 'attachmentId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`))
      .replace(`{${'attachment_id'}}`, encodeURIComponent(`${params['attachmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download All Object Record Attachment Files
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentsFileGet(params: IVobjectsObjectNameObjectRecordIdAttachmentsFileGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsFileGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsFileGet', params, 'objectRecordId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachments/file`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Object Record Attachments
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentsGet(params: IVobjectsObjectNameObjectRecordIdAttachmentsGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsGet', params, 'objectRecordId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachments`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Object Record Attachment
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAttachmentsPost(params: IVobjectsObjectNameObjectRecordIdAttachmentsPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsPost', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAttachmentsPost', params, 'objectRecordId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/attachments`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Complete Audit History for a Single Object Record
   * @param params.objectName The object name__v field value.
   * @param params.objectRecordId The object record id field value from which to retrieve user actions.
   * @param params.startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
   * @param params.endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
   * @param params.formatResult To request a CSV file of your audit history, use csv. 
   * @param params.limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
   * @param params.offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
   * @param params.events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdAudittrailGet(params: IVobjectsObjectNameObjectRecordIdAudittrailGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAudittrailGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdAudittrailGet', params, 'objectRecordId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}/audittrail`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'format_result': params['formatResult'],
        'limit': params['limit'],
        'offset': params['offset'],
        'events': params['events'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Object Record
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.objectRecordId The object record id field value.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameObjectRecordIdGet(params: IVobjectsObjectNameObjectRecordIdGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdGet', params, 'objectName');
    this.ensureParamIsSet('vobjectsObjectNameObjectRecordIdGet', params, 'objectRecordId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/{object_record_id}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`))
      .replace(`{${'object_record_id'}}`, encodeURIComponent(`${params['objectRecordId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create &amp; Upsert Object Records
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
   * @param params.authorization 
   * @param params.contentType Can be text/csv or application/json
   * @param params.accept Can be text/csv or application/json
   * @param params.xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
   * @param params.xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNamePost(params: IVobjectsObjectNamePostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNamePost', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'idParam': params['idParam'],
      })
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-MigrationMode', params['xVaultAPIMigrationMode'])      .withHeader('X-VaultAPI-NoTriggers', params['xVaultAPINoTriggers'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Object Records
   * @param params.objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param params.authorization 
   * @param params.contentType Can be text/csv or application/json
   * @param params.accept Can be text/csv or application/json
   * @param params.xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
   * @param params.xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNamePut(params: IVobjectsObjectNamePutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNamePut', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('Authorization', params['authorization'])      .withHeader('Content-Type', params['contentType'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-MigrationMode', params['xVaultAPIMigrationMode'])      .withHeader('X-VaultAPI-NoTriggers', params['xVaultAPINoTriggers'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Remove Users &amp; Groups from Roles on Object Records
   * @param params.objectName The name of the object where you want to remove roles.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameRolesDelete(params: IVobjectsObjectNameRolesDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameRolesDelete', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/roles`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Assign Users &amp; Groups to Roles on Object Records
   * @param params.objectName The name of the object where you want to remove roles.
   * @param params.authorization 
   * @param params.accept 
   * @param params.contentType 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsObjectNameRolesPost(params: IVobjectsObjectNameRolesPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsObjectNameRolesPost', params, 'objectName');

    // Create URL to call
    const url = `${this.basePath}/vobjects/{object_name}/roles`
      .replace(`{${'object_name'}}`, encodeURIComponent(`${params['objectName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('Content-Type', params['contentType'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve Outbound Package Dependencies
   * @param params.packageId The ID of the outbound_package__v record from which to retrieve dependencies.
   * @param params.authorization 
   * @param params.accept 
   * @param params.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   */
  async vobjectsOutboundPackageVPackageIdDependenciesGet(params: IVobjectsOutboundPackageVPackageIdDependenciesGetParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('vobjectsOutboundPackageVPackageIdDependenciesGet', params, 'packageId');

    // Create URL to call
    const url = `${this.basePath}/vobjects/outbound_package__v/{package_id}/dependencies`
      .replace(`{${'package_id'}}`, encodeURIComponent(`${params['packageId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Authorization', params['authorization'])      .withHeader('Accept', params['accept'])      .withHeader('X-VaultAPI-ClientID', params['xVaultAPIClientID'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

