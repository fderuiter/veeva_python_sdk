# #Veeva Vault API v25.1
#
##The latest GA version of the Vault REST API.
#
#The version of the OpenAPI document: 1.0.0
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.14.0
#

require "uri"

module OpenAPIClient
  class DefaultApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve API Versions
    # @return [nil]
    def api_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      api_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve API Versions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.api_get ..."}
      end
      # resource path
      local_var_path = "/api/"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.api_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#api_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Content File
    # @param component_type_and_record_name [String] The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
    # @return [nil]
    def api_mdl_components_component_type_and_record_name_files_get(component_type_and_record_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      api_mdl_components_component_type_and_record_name_files_get_with_http_info(component_type_and_record_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Content File
    # @param component_type_and_record_name [String] The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_components_component_type_and_record_name_files_get_with_http_info(component_type_and_record_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.api_mdl_components_component_type_and_record_name_files_get ..."}
      end
      # verify the required parameter "component_type_and_record_name" is set
      if @api_client.config.client_side_validation && component_type_and_record_name.nil?
        raise ArgumentError.new("Missing the required parameter 'component_type_and_record_name' when calling DefaultApi.api_mdl_components_component_type_and_record_name_files_get")
      end
      # resource path
      local_var_path = "/api/mdl/components/{component_type_and_record_name}/files".sub("{" + "component_type_and_record_name" + "}", URI.encode_path(component_type_and_record_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.api_mdl_components_component_type_and_record_name_files_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#api_mdl_components_component_type_and_record_name_files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Component Record (MDL)
    # @param component_type_and_record_name [String] The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
    # @return [nil]
    def api_mdl_components_component_type_and_record_name_get(component_type_and_record_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      api_mdl_components_component_type_and_record_name_get_with_http_info(component_type_and_record_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Component Record (MDL)
    # @param component_type_and_record_name [String] The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_components_component_type_and_record_name_get_with_http_info(component_type_and_record_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.api_mdl_components_component_type_and_record_name_get ..."}
      end
      # verify the required parameter "component_type_and_record_name" is set
      if @api_client.config.client_side_validation && component_type_and_record_name.nil?
        raise ArgumentError.new("Missing the required parameter 'component_type_and_record_name' when calling DefaultApi.api_mdl_components_component_type_and_record_name_get")
      end
      # resource path
      local_var_path = "/api/mdl/components/{component_type_and_record_name}".sub("{" + "component_type_and_record_name" + "}", URI.encode_path(component_type_and_record_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.api_mdl_components_component_type_and_record_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#api_mdl_components_component_type_and_record_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Asynchronous MDL Script Results
    # @param job_id [String] 
    # @return [nil]
    def api_mdl_execute_async_job_id_results_get(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      api_mdl_execute_async_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Asynchronous MDL Script Results
    # @param job_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_execute_async_job_id_results_get_with_http_info(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.api_mdl_execute_async_job_id_results_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.api_mdl_execute_async_job_id_results_get")
      end
      # resource path
      local_var_path = "/api/mdl/execute_async/{job_id}/results".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.api_mdl_execute_async_job_id_results_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#api_mdl_execute_async_job_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Execute MDL Script Asynchronously
    # @return [nil]
    def api_mdl_execute_async_post(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      api_mdl_execute_async_post_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Execute MDL Script Asynchronously
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_execute_async_post_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.api_mdl_execute_async_post ..."}
      end
      # resource path
      local_var_path = "/api/mdl/execute_async"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.api_mdl_execute_async_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#api_mdl_execute_async_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Execute MDL Script
    # @return [nil]
    def api_mdl_execute_post(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      api_mdl_execute_post_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Execute MDL Script
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_execute_post_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.api_mdl_execute_post ..."}
      end
      # resource path
      local_var_path = "/api/mdl/execute"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.api_mdl_execute_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#api_mdl_execute_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Upload Content File
    # @return [nil]
    def api_mdl_files_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      api_mdl_files_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Upload Content File
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_mdl_files_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.api_mdl_files_post ..."}
      end
      # resource path
      local_var_path = "/api/mdl/files"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.api_mdl_files_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#api_mdl_files_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Audit Details
    # @param audit_trail_type [String] The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
    # @return [nil]
    def audittrail_audit_trail_type_get(audit_trail_type : String, start_date : String? = nil, end_date : String? = nil, all_dates : String? = nil, format_result : String? = nil, limit : String? = nil, offset : String? = nil, objects : String? = nil, events : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      audittrail_audit_trail_type_get_with_http_info(audit_trail_type, start_date, end_date, all_dates, format_result, limit, offset, objects, events, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Audit Details
    # @param audit_trail_type [String] The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def audittrail_audit_trail_type_get_with_http_info(audit_trail_type : String, start_date : String? = nil, end_date : String? = nil, all_dates : String? = nil, format_result : String? = nil, limit : String? = nil, offset : String? = nil, objects : String? = nil, events : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.audittrail_audit_trail_type_get ..."}
      end
      # verify the required parameter "audit_trail_type" is set
      if @api_client.config.client_side_validation && audit_trail_type.nil?
        raise ArgumentError.new("Missing the required parameter 'audit_trail_type' when calling DefaultApi.audittrail_audit_trail_type_get")
      end
      # resource path
      local_var_path = "/audittrail/{audit_trail_type}".sub("{" + "audit_trail_type" + "}", URI.encode_path(audit_trail_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["all_dates"] = all_dates.to_s unless all_dates.nil?
      query_params["format_result"] = format_result.to_s unless format_result.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?
      query_params["objects"] = objects.to_s unless objects.nil?
      query_params["events"] = events.to_s unless events.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.audittrail_audit_trail_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#audittrail_audit_trail_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Authentication Type Discovery
    # @return [nil]
    def auth_discovery_post(accept : String? = nil, x_vault_api_client_id : String? = nil)
      auth_discovery_post_with_http_info(accept, x_vault_api_client_id)
      nil
    end

    # Authentication Type Discovery
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def auth_discovery_post_with_http_info(accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.auth_discovery_post ..."}
      end
      # resource path
      local_var_path = "/auth/discovery"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.auth_discovery_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#auth_discovery_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # OAuth 2.0 / OpenID Connect
    # @param oath_oidc_profile_id [String] 
    # @return [nil]
    def auth_oauth_session_oath_oidc_profile_id_post(oath_oidc_profile_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      auth_oauth_session_oath_oidc_profile_id_post_with_http_info(oath_oidc_profile_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # OAuth 2.0 / OpenID Connect
    # @param oath_oidc_profile_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def auth_oauth_session_oath_oidc_profile_id_post_with_http_info(oath_oidc_profile_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.auth_oauth_session_oath_oidc_profile_id_post ..."}
      end
      # verify the required parameter "oath_oidc_profile_id" is set
      if @api_client.config.client_side_validation && oath_oidc_profile_id.nil?
        raise ArgumentError.new("Missing the required parameter 'oath_oidc_profile_id' when calling DefaultApi.auth_oauth_session_oath_oidc_profile_id_post")
      end
      # resource path
      local_var_path = "/auth/oauth/session/{oath_oidc_profile_id}".sub("{" + "oath_oidc_profile_id" + "}", URI.encode_path(oath_oidc_profile_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.auth_oauth_session_oath_oidc_profile_id_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#auth_oauth_session_oath_oidc_profile_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # User Name and Password
    # @return [nil]
    def auth_post(content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      auth_post_with_http_info(content_type, accept, x_vault_api_client_id)
      nil
    end

    # User Name and Password
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def auth_post_with_http_info(content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.auth_post ..."}
      end
      # resource path
      local_var_path = "/auth"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.auth_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#auth_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Single Source Code File
    # @param class_name [String] The fully qualified class name of your file.
    # @return [nil]
    def code_class_name_delete(class_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      code_class_name_delete_with_http_info(class_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Single Source Code File
    # @param class_name [String] The fully qualified class name of your file.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_class_name_delete_with_http_info(class_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.code_class_name_delete ..."}
      end
      # verify the required parameter "class_name" is set
      if @api_client.config.client_side_validation && class_name.nil?
        raise ArgumentError.new("Missing the required parameter 'class_name' when calling DefaultApi.code_class_name_delete")
      end
      # resource path
      local_var_path = "/code/{class_name}".sub("{" + "class_name" + "}", URI.encode_path(class_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.code_class_name_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#code_class_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Disable Vault Extension
    # @param class_name [String] The fully qualified class name of your file.
    # @return [nil]
    def code_class_name_disable_put(class_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      code_class_name_disable_put_with_http_info(class_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Disable Vault Extension
    # @param class_name [String] The fully qualified class name of your file.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_class_name_disable_put_with_http_info(class_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.code_class_name_disable_put ..."}
      end
      # verify the required parameter "class_name" is set
      if @api_client.config.client_side_validation && class_name.nil?
        raise ArgumentError.new("Missing the required parameter 'class_name' when calling DefaultApi.code_class_name_disable_put")
      end
      # resource path
      local_var_path = "/code/{class_name}/disable".sub("{" + "class_name" + "}", URI.encode_path(class_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.code_class_name_disable_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#code_class_name_disable_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Enable Vault Extension
    # @param class_name [String] The fully qualified class name of your file.
    # @return [nil]
    def code_class_name_enable_put(class_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      code_class_name_enable_put_with_http_info(class_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Enable Vault Extension
    # @param class_name [String] The fully qualified class name of your file.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_class_name_enable_put_with_http_info(class_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.code_class_name_enable_put ..."}
      end
      # verify the required parameter "class_name" is set
      if @api_client.config.client_side_validation && class_name.nil?
        raise ArgumentError.new("Missing the required parameter 'class_name' when calling DefaultApi.code_class_name_enable_put")
      end
      # resource path
      local_var_path = "/code/{class_name}/enable".sub("{" + "class_name" + "}", URI.encode_path(class_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.code_class_name_enable_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#code_class_name_enable_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Single Source Code File
    # @param class_name [String] The fully qualified class name of your file.
    # @return [nil]
    def code_class_name_get(class_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      code_class_name_get_with_http_info(class_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Single Source Code File
    # @param class_name [String] The fully qualified class name of your file.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_class_name_get_with_http_info(class_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.code_class_name_get ..."}
      end
      # verify the required parameter "class_name" is set
      if @api_client.config.client_side_validation && class_name.nil?
        raise ArgumentError.new("Missing the required parameter 'class_name' when calling DefaultApi.code_class_name_get")
      end
      # resource path
      local_var_path = "/code/{class_name}".sub("{" + "class_name" + "}", URI.encode_path(class_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.code_class_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#code_class_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Profiling Sessions
    # @return [nil]
    def code_profiler_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      code_profiler_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Profiling Sessions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.code_profiler_get ..."}
      end
      # resource path
      local_var_path = "/code/profiler"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.code_profiler_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#code_profiler_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Profiling Session
    # @return [nil]
    def code_profiler_post(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      code_profiler_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Create Profiling Session
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_post_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.code_profiler_post ..."}
      end
      # resource path
      local_var_path = "/code/profiler"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.code_profiler_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#code_profiler_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # End Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @return [nil]
    def code_profiler_session_name_actions_end_post(session_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      code_profiler_session_name_actions_end_post_with_http_info(session_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # End Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_session_name_actions_end_post_with_http_info(session_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.code_profiler_session_name_actions_end_post ..."}
      end
      # verify the required parameter "session_name" is set
      if @api_client.config.client_side_validation && session_name.nil?
        raise ArgumentError.new("Missing the required parameter 'session_name' when calling DefaultApi.code_profiler_session_name_actions_end_post")
      end
      # resource path
      local_var_path = "/code/profiler/{session_name}/actions/end".sub("{" + "session_name" + "}", URI.encode_path(session_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.code_profiler_session_name_actions_end_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#code_profiler_session_name_actions_end_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @return [nil]
    def code_profiler_session_name_delete(session_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      code_profiler_session_name_delete_with_http_info(session_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_session_name_delete_with_http_info(session_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.code_profiler_session_name_delete ..."}
      end
      # verify the required parameter "session_name" is set
      if @api_client.config.client_side_validation && session_name.nil?
        raise ArgumentError.new("Missing the required parameter 'session_name' when calling DefaultApi.code_profiler_session_name_delete")
      end
      # resource path
      local_var_path = "/code/profiler/{session_name}".sub("{" + "session_name" + "}", URI.encode_path(session_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.code_profiler_session_name_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#code_profiler_session_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @return [nil]
    def code_profiler_session_name_get(session_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      code_profiler_session_name_get_with_http_info(session_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Profiling Session
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_session_name_get_with_http_info(session_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.code_profiler_session_name_get ..."}
      end
      # verify the required parameter "session_name" is set
      if @api_client.config.client_side_validation && session_name.nil?
        raise ArgumentError.new("Missing the required parameter 'session_name' when calling DefaultApi.code_profiler_session_name_get")
      end
      # resource path
      local_var_path = "/code/profiler/{session_name}".sub("{" + "session_name" + "}", URI.encode_path(session_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.code_profiler_session_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#code_profiler_session_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Profiling Session Results
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @return [nil]
    def code_profiler_session_name_results_get(session_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      code_profiler_session_name_results_get_with_http_info(session_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download Profiling Session Results
    # @param session_name [String] The name of the session, for example,  baseline__c.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_profiler_session_name_results_get_with_http_info(session_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.code_profiler_session_name_results_get ..."}
      end
      # verify the required parameter "session_name" is set
      if @api_client.config.client_side_validation && session_name.nil?
        raise ArgumentError.new("Missing the required parameter 'session_name' when calling DefaultApi.code_profiler_session_name_results_get")
      end
      # resource path
      local_var_path = "/code/profiler/{session_name}/results".sub("{" + "session_name" + "}", URI.encode_path(session_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.code_profiler_session_name_results_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#code_profiler_session_name_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Add or Replace Single Source Code File
    # @return [nil]
    def code_put(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      code_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Add or Replace Single Source Code File
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_put_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.code_put ..."}
      end
      # resource path
      local_var_path = "/code"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.code_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#code_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Specific Root Nodes
    # @param edl_hierarchy_or_template [String] Choose to retrieve either edl_hierarchy__v or edl_template__v
    # @return [nil]
    def composites_trees_edl_hierarchy_or_template_actions_listnodes_post(edl_hierarchy_or_template : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      composites_trees_edl_hierarchy_or_template_actions_listnodes_post_with_http_info(edl_hierarchy_or_template, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Specific Root Nodes
    # @param edl_hierarchy_or_template [String] Choose to retrieve either edl_hierarchy__v or edl_template__v
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def composites_trees_edl_hierarchy_or_template_actions_listnodes_post_with_http_info(edl_hierarchy_or_template : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.composites_trees_edl_hierarchy_or_template_actions_listnodes_post ..."}
      end
      # verify the required parameter "edl_hierarchy_or_template" is set
      if @api_client.config.client_side_validation && edl_hierarchy_or_template.nil?
        raise ArgumentError.new("Missing the required parameter 'edl_hierarchy_or_template' when calling DefaultApi.composites_trees_edl_hierarchy_or_template_actions_listnodes_post")
      end
      # resource path
      local_var_path = "/composites/trees/{edl_hierarchy_or_template}/actions/listnodes".sub("{" + "edl_hierarchy_or_template" + "}", URI.encode_path(edl_hierarchy_or_template.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.composites_trees_edl_hierarchy_or_template_actions_listnodes_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#composites_trees_edl_hierarchy_or_template_actions_listnodes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Root Nodes
    # @param edl_hierarchy_or_template [String] 
    # @return [nil]
    def composites_trees_edl_hierarchy_or_template_get(edl_hierarchy_or_template : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      composites_trees_edl_hierarchy_or_template_get_with_http_info(edl_hierarchy_or_template, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Root Nodes
    # @param edl_hierarchy_or_template [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def composites_trees_edl_hierarchy_or_template_get_with_http_info(edl_hierarchy_or_template : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.composites_trees_edl_hierarchy_or_template_get ..."}
      end
      # verify the required parameter "edl_hierarchy_or_template" is set
      if @api_client.config.client_side_validation && edl_hierarchy_or_template.nil?
        raise ArgumentError.new("Missing the required parameter 'edl_hierarchy_or_template' when calling DefaultApi.composites_trees_edl_hierarchy_or_template_get")
      end
      # resource path
      local_var_path = "/composites/trees/{edl_hierarchy_or_template}".sub("{" + "edl_hierarchy_or_template" + "}", URI.encode_path(edl_hierarchy_or_template.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.composites_trees_edl_hierarchy_or_template_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#composites_trees_edl_hierarchy_or_template_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve a Node's Children
    # @param parent_node_id [String] The ID of a parent node in the hierarchy.
    # @return [nil]
    def composites_trees_edl_hierarchy_v_parent_node_id_children_get(parent_node_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      composites_trees_edl_hierarchy_v_parent_node_id_children_get_with_http_info(parent_node_id, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve a Node&#39;s Children
    # @param parent_node_id [String] The ID of a parent node in the hierarchy.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def composites_trees_edl_hierarchy_v_parent_node_id_children_get_with_http_info(parent_node_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_get ..."}
      end
      # verify the required parameter "parent_node_id" is set
      if @api_client.config.client_side_validation && parent_node_id.nil?
        raise ArgumentError.new("Missing the required parameter 'parent_node_id' when calling DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_get")
      end
      # resource path
      local_var_path = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children".sub("{" + "parent_node_id" + "}", URI.encode_path(parent_node_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#composites_trees_edl_hierarchy_v_parent_node_id_children_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Node Order
    # @param parent_node_id [String] The ID of a parent node in the hierarchy.
    # @return [nil]
    def composites_trees_edl_hierarchy_v_parent_node_id_children_put(parent_node_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      composites_trees_edl_hierarchy_v_parent_node_id_children_put_with_http_info(parent_node_id, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Update Node Order
    # @param parent_node_id [String] The ID of a parent node in the hierarchy.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def composites_trees_edl_hierarchy_v_parent_node_id_children_put_with_http_info(parent_node_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_put ..."}
      end
      # verify the required parameter "parent_node_id" is set
      if @api_client.config.client_side_validation && parent_node_id.nil?
        raise ArgumentError.new("Missing the required parameter 'parent_node_id' when calling DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_put")
      end
      # resource path
      local_var_path = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children".sub("{" + "parent_node_id" + "}", URI.encode_path(parent_node_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.composites_trees_edl_hierarchy_v_parent_node_id_children_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#composites_trees_edl_hierarchy_v_parent_node_id_children_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Component Record (XML/JSON)
    # @param component_type_and_record_name [String] The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
    # @return [nil]
    def configuration_component_type_and_record_name_get(component_type_and_record_name : String, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      configuration_component_type_and_record_name_get_with_http_info(component_type_and_record_name, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Component Record (XML/JSON)
    # @param component_type_and_record_name [String] The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_component_type_and_record_name_get_with_http_info(component_type_and_record_name : String, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.configuration_component_type_and_record_name_get ..."}
      end
      # verify the required parameter "component_type_and_record_name" is set
      if @api_client.config.client_side_validation && component_type_and_record_name.nil?
        raise ArgumentError.new("Missing the required parameter 'component_type_and_record_name' when calling DefaultApi.configuration_component_type_and_record_name_get")
      end
      # resource path
      local_var_path = "/configuration/{component_type_and_record_name}".sub("{" + "component_type_and_record_name" + "}", URI.encode_path(component_type_and_record_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.configuration_component_type_and_record_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#configuration_component_type_and_record_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Component Record Collection
    # @param component_type [String] 
    # @return [nil]
    def configuration_component_type_get(component_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      configuration_component_type_get_with_http_info(component_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Component Record Collection
    # @param component_type [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_component_type_get_with_http_info(component_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.configuration_component_type_get ..."}
      end
      # verify the required parameter "component_type" is set
      if @api_client.config.client_side_validation && component_type.nil?
        raise ArgumentError.new("Missing the required parameter 'component_type' when calling DefaultApi.configuration_component_type_get")
      end
      # resource path
      local_var_path = "/configuration/{component_type}".sub("{" + "component_type" + "}", URI.encode_path(component_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.configuration_component_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#configuration_component_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Details from a Specific Object
    # @param object_name_and_object_type [String] The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
    # @return [nil]
    def configuration_object_name_and_object_type_get(object_name_and_object_type : String, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      configuration_object_name_and_object_type_get_with_http_info(object_name_and_object_type, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Details from a Specific Object
    # @param object_name_and_object_type [String] The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_object_name_and_object_type_get_with_http_info(object_name_and_object_type : String, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.configuration_object_name_and_object_type_get ..."}
      end
      # verify the required parameter "object_name_and_object_type" is set
      if @api_client.config.client_side_validation && object_name_and_object_type.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name_and_object_type' when calling DefaultApi.configuration_object_name_and_object_type_get")
      end
      # resource path
      local_var_path = "/configuration/{object_name_and_object_type}".sub("{" + "object_name_and_object_type" + "}", URI.encode_path(object_name_and_object_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.configuration_object_name_and_object_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#configuration_object_name_and_object_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Details from All Object Types
    # @return [nil]
    def configuration_objecttype_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      configuration_objecttype_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Details from All Object Types
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_objecttype_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.configuration_objecttype_get ..."}
      end
      # resource path
      local_var_path = "/configuration/Objecttype"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.configuration_objecttype_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#configuration_objecttype_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Lifecycle Role Assignment Override Rules
    # @return [nil]
    def configuration_role_assignment_rule_delete(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      configuration_role_assignment_rule_delete_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Lifecycle Role Assignment Override Rules
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_role_assignment_rule_delete_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.configuration_role_assignment_rule_delete ..."}
      end
      # resource path
      local_var_path = "/configuration/role_assignment_rule"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.configuration_role_assignment_rule_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#configuration_role_assignment_rule_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Lifecycle Role Assignment Rules (Default & Override)
    # @return [nil]
    def configuration_role_assignment_rule_get(lifecycle__v : String? = nil, role__v : String? = nil, product__v : String? = nil, country__v : String? = nil, study__v : String? = nil, study_country__v : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      configuration_role_assignment_rule_get_with_http_info(lifecycle__v, role__v, product__v, country__v, study__v, study_country__v, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_role_assignment_rule_get_with_http_info(lifecycle__v : String? = nil, role__v : String? = nil, product__v : String? = nil, country__v : String? = nil, study__v : String? = nil, study_country__v : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.configuration_role_assignment_rule_get ..."}
      end
      # resource path
      local_var_path = "/configuration/role_assignment_rule"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["lifecycle__v"] = lifecycle__v.to_s unless lifecycle__v.nil?
      query_params["role__v"] = role__v.to_s unless role__v.nil?
      query_params["product__v"] = product__v.to_s unless product__v.nil?
      query_params["country__v"] = country__v.to_s unless country__v.nil?
      query_params["study__v"] = study__v.to_s unless study__v.nil?
      query_params["study_country__v"] = study_country__v.to_s unless study_country__v.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.configuration_role_assignment_rule_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#configuration_role_assignment_rule_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Lifecycle Role Assignment Override Rules
    # @return [nil]
    def configuration_role_assignment_rule_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      configuration_role_assignment_rule_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Lifecycle Role Assignment Override Rules
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_role_assignment_rule_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.configuration_role_assignment_rule_post ..."}
      end
      # resource path
      local_var_path = "/configuration/role_assignment_rule"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.configuration_role_assignment_rule_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#configuration_role_assignment_rule_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Lifecycle Role Assignment Rules (Default & Override)
    # @return [nil]
    def configuration_role_assignment_rule_put(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      configuration_role_assignment_rule_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Lifecycle Role Assignment Rules (Default &amp; Override)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_role_assignment_rule_put_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.configuration_role_assignment_rule_put ..."}
      end
      # resource path
      local_var_path = "/configuration/role_assignment_rule"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.configuration_role_assignment_rule_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#configuration_role_assignment_rule_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Delegated Session
    # @return [nil]
    def delegation_login_post(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      delegation_login_post_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Initiate Delegated Session
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delegation_login_post_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.delegation_login_post ..."}
      end
      # resource path
      local_var_path = "/delegation/login"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.delegation_login_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#delegation_login_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Delegations
    # @return [nil]
    def delegation_vaults_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      delegation_vaults_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Delegations
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delegation_vaults_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.delegation_vaults_get ..."}
      end
      # resource path
      local_var_path = "/delegation/vaults"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.delegation_vaults_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#delegation_vaults_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Session Keep Alive
    # @return [nil]
    def keep_alive_post(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      keep_alive_post_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Session Keep Alive
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def keep_alive_post_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.keep_alive_post ..."}
      end
      # resource path
      local_var_path = "/keep-alive"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.keep_alive_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#keep_alive_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Limits on Objects
    # @return [nil]
    def limits_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      limits_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Limits on Objects
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def limits_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.limits_get ..."}
      end
      # resource path
      local_var_path = "/limits"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.limits_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#limits_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Daily API Usage
    # @return [nil]
    def logs_api_usage_get(date : String? = nil, log_format : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      logs_api_usage_get_with_http_info(date, log_format, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download Daily API Usage
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_api_usage_get_with_http_info(date : String? = nil, log_format : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.logs_api_usage_get ..."}
      end
      # resource path
      local_var_path = "/logs/api_usage"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["date"] = date.to_s unless date.nil?
      query_params["log_format"] = log_format.to_s unless log_format.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.logs_api_usage_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#logs_api_usage_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Debug Logs
    # @return [nil]
    def logs_code_debug_get(user_id : String? = nil, include_inactive : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      logs_code_debug_get_with_http_info(user_id, include_inactive, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Debug Logs
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_get_with_http_info(user_id : String? = nil, include_inactive : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.logs_code_debug_get ..."}
      end
      # resource path
      local_var_path = "/logs/code/debug"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["user_id"] = user_id.to_s unless user_id.nil?
      query_params["include_inactive"] = include_inactive.to_s unless include_inactive.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.logs_code_debug_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#logs_code_debug_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Debug Log
    # @param id [String] The ID of the debug log to delete.
    # @return [nil]
    def logs_code_debug_id_actions_reset_delete(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      logs_code_debug_id_actions_reset_delete_with_http_info(id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Debug Log
    # @param id [String] The ID of the debug log to delete.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_id_actions_reset_delete_with_http_info(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.logs_code_debug_id_actions_reset_delete ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.logs_code_debug_id_actions_reset_delete")
      end
      # resource path
      local_var_path = "/logs/code/debug/{id}/actions/reset".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.logs_code_debug_id_actions_reset_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#logs_code_debug_id_actions_reset_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Reset Debug Log
    # @param id [String] The ID of the debug log to delete.
    # @return [nil]
    def logs_code_debug_id_actions_reset_post(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      logs_code_debug_id_actions_reset_post_with_http_info(id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Reset Debug Log
    # @param id [String] The ID of the debug log to delete.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_id_actions_reset_post_with_http_info(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.logs_code_debug_id_actions_reset_post ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.logs_code_debug_id_actions_reset_post")
      end
      # resource path
      local_var_path = "/logs/code/debug/{id}/actions/reset".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.logs_code_debug_id_actions_reset_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#logs_code_debug_id_actions_reset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Debug Log Files
    # @param id [String] The ID of the debug log to download.
    # @return [nil]
    def logs_code_debug_id_files_get(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      logs_code_debug_id_files_get_with_http_info(id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download Debug Log Files
    # @param id [String] The ID of the debug log to download.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_id_files_get_with_http_info(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.logs_code_debug_id_files_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.logs_code_debug_id_files_get")
      end
      # resource path
      local_var_path = "/logs/code/debug/{id}/files".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.logs_code_debug_id_files_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#logs_code_debug_id_files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Single Debug Log
    # @param id [String] The ID of the debug log to retrieve.
    # @return [nil]
    def logs_code_debug_id_get(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      logs_code_debug_id_get_with_http_info(id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Single Debug Log
    # @param id [String] The ID of the debug log to retrieve.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_id_get_with_http_info(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.logs_code_debug_id_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.logs_code_debug_id_get")
      end
      # resource path
      local_var_path = "/logs/code/debug/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.logs_code_debug_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#logs_code_debug_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Debug Log
    # @return [nil]
    def logs_code_debug_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      logs_code_debug_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Debug Log
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_debug_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.logs_code_debug_post ..."}
      end
      # resource path
      local_var_path = "/logs/code/debug"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.logs_code_debug_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#logs_code_debug_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download SDK Runtime Log
    # @return [nil]
    def logs_code_runtime_get(date : String? = nil, log_format : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      logs_code_runtime_get_with_http_info(date, log_format, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download SDK Runtime Log
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logs_code_runtime_get_with_http_info(date : String? = nil, log_format : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.logs_code_runtime_get ..."}
      end
      # resource path
      local_var_path = "/logs/code/runtime"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["date"] = date.to_s unless date.nil?
      query_params["log_format"] = log_format.to_s unless log_format.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.logs_code_runtime_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#logs_code_runtime_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Import Bulk Translation File
    # @param message_type [String] The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
    # @return [nil]
    def messages_message_type_actions_import_post(message_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      messages_message_type_actions_import_post_with_http_info(message_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Import Bulk Translation File
    # @param message_type [String] The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def messages_message_type_actions_import_post_with_http_info(message_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.messages_message_type_actions_import_post ..."}
      end
      # verify the required parameter "message_type" is set
      if @api_client.config.client_side_validation && message_type.nil?
        raise ArgumentError.new("Missing the required parameter 'message_type' when calling DefaultApi.messages_message_type_actions_import_post")
      end
      # resource path
      local_var_path = "/messages/{message_type}/actions/import".sub("{" + "message_type" + "}", URI.encode_path(message_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.messages_message_type_actions_import_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#messages_message_type_actions_import_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Export Bulk Translation File
    # @param message_type [String] The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
    # @param lang [String] A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
    # @return [nil]
    def messages_message_type_language_lang_actions_export_post(message_type : String, lang : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      messages_message_type_language_lang_actions_export_post_with_http_info(message_type, lang, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Export Bulk Translation File
    # @param message_type [String] The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
    # @param lang [String] A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def messages_message_type_language_lang_actions_export_post_with_http_info(message_type : String, lang : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.messages_message_type_language_lang_actions_export_post ..."}
      end
      # verify the required parameter "message_type" is set
      if @api_client.config.client_side_validation && message_type.nil?
        raise ArgumentError.new("Missing the required parameter 'message_type' when calling DefaultApi.messages_message_type_language_lang_actions_export_post")
      end
      # verify the required parameter "lang" is set
      if @api_client.config.client_side_validation && lang.nil?
        raise ArgumentError.new("Missing the required parameter 'lang' when calling DefaultApi.messages_message_type_language_lang_actions_export_post")
      end
      # resource path
      local_var_path = "/messages/{message_type}/language/{lang}/actions/export".sub("{" + "message_type" + "}", URI.encode_path(message_type.to_s)).sub("{" + "lang" + "}", URI.encode_path(lang.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.messages_message_type_language_lang_actions_export_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#messages_message_type_language_lang_actions_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Audit Metadata
    # @param audit_trail_type [String] The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
    # @return [nil]
    def metadata_audittrail_audit_trail_type_get(audit_trail_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_audittrail_audit_trail_type_get_with_http_info(audit_trail_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Audit Metadata
    # @param audit_trail_type [String] The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_audittrail_audit_trail_type_get_with_http_info(audit_trail_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_audittrail_audit_trail_type_get ..."}
      end
      # verify the required parameter "audit_trail_type" is set
      if @api_client.config.client_side_validation && audit_trail_type.nil?
        raise ArgumentError.new("Missing the required parameter 'audit_trail_type' when calling DefaultApi.metadata_audittrail_audit_trail_type_get")
      end
      # resource path
      local_var_path = "/metadata/audittrail/{audit_trail_type}".sub("{" + "audit_trail_type" + "}", URI.encode_path(audit_trail_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_audittrail_audit_trail_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_audittrail_audit_trail_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Audit Types
    # @return [nil]
    def metadata_audittrail_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_audittrail_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Audit Types
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_audittrail_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_audittrail_get ..."}
      end
      # resource path
      local_var_path = "/metadata/audittrail"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_audittrail_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_audittrail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Component Type Metadata
    # @param component_type [String] The component type name (Picklist, Docfield, Doctype, etc.).
    # @return [nil]
    def metadata_components_component_type_get(component_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_components_component_type_get_with_http_info(component_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Component Type Metadata
    # @param component_type [String] The component type name (Picklist, Docfield, Doctype, etc.).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_components_component_type_get_with_http_info(component_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_components_component_type_get ..."}
      end
      # verify the required parameter "component_type" is set
      if @api_client.config.client_side_validation && component_type.nil?
        raise ArgumentError.new("Missing the required parameter 'component_type' when calling DefaultApi.metadata_components_component_type_get")
      end
      # resource path
      local_var_path = "/metadata/components/{component_type}".sub("{" + "component_type" + "}", URI.encode_path(component_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_components_component_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_components_component_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Component Metadata
    # @return [nil]
    def metadata_components_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_components_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Component Metadata
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_components_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_components_get ..."}
      end
      # resource path
      local_var_path = "/metadata/components"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_components_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_components_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder Template Node Metadata
    # @return [nil]
    def metadata_objects_binders_templates_bindernodes_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_binders_templates_bindernodes_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder Template Node Metadata
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_binders_templates_bindernodes_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_binders_templates_bindernodes_get ..."}
      end
      # resource path
      local_var_path = "/metadata/objects/binders/templates/bindernodes"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_binders_templates_bindernodes_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_binders_templates_bindernodes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder Template Metadata
    # @return [nil]
    def metadata_objects_binders_templates_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_binders_templates_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder Template Metadata
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_binders_templates_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_binders_templates_get ..."}
      end
      # resource path
      local_var_path = "/metadata/objects/binders/templates"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_binders_templates_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_binders_templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Annotation Placemark Type Metadata
    # @param placemark_type [String] The name of the placemark type. For example, sticky__sys.
    # @return [nil]
    def metadata_objects_documents_annotations_placemarks_types_placemark_type_get(placemark_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_annotations_placemarks_types_placemark_type_get_with_http_info(placemark_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Annotation Placemark Type Metadata
    # @param placemark_type [String] The name of the placemark type. For example, sticky__sys.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_annotations_placemarks_types_placemark_type_get_with_http_info(placemark_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_annotations_placemarks_types_placemark_type_get ..."}
      end
      # verify the required parameter "placemark_type" is set
      if @api_client.config.client_side_validation && placemark_type.nil?
        raise ArgumentError.new("Missing the required parameter 'placemark_type' when calling DefaultApi.metadata_objects_documents_annotations_placemarks_types_placemark_type_get")
      end
      # resource path
      local_var_path = "/metadata/objects/documents/annotations/placemarks/types/{placemark_type}".sub("{" + "placemark_type" + "}", URI.encode_path(placemark_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_annotations_placemarks_types_placemark_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_annotations_placemarks_types_placemark_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Annotation Reference Type Metadata
    # @param reference_type [String] 
    # @return [nil]
    def metadata_objects_documents_annotations_references_types_reference_type_get(reference_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_annotations_references_types_reference_type_get_with_http_info(reference_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Annotation Reference Type Metadata
    # @param reference_type [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_annotations_references_types_reference_type_get_with_http_info(reference_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_annotations_references_types_reference_type_get ..."}
      end
      # verify the required parameter "reference_type" is set
      if @api_client.config.client_side_validation && reference_type.nil?
        raise ArgumentError.new("Missing the required parameter 'reference_type' when calling DefaultApi.metadata_objects_documents_annotations_references_types_reference_type_get")
      end
      # resource path
      local_var_path = "/metadata/objects/documents/annotations/references/types/{reference_type}".sub("{" + "reference_type" + "}", URI.encode_path(reference_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_annotations_references_types_reference_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_annotations_references_types_reference_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Annotation Type Metadata
    # @param annotation_type [String] The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
    # @return [nil]
    def metadata_objects_documents_annotations_types_annotation_type_get(annotation_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_annotations_types_annotation_type_get_with_http_info(annotation_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Annotation Type Metadata
    # @param annotation_type [String] The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_annotations_types_annotation_type_get_with_http_info(annotation_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_annotations_types_annotation_type_get ..."}
      end
      # verify the required parameter "annotation_type" is set
      if @api_client.config.client_side_validation && annotation_type.nil?
        raise ArgumentError.new("Missing the required parameter 'annotation_type' when calling DefaultApi.metadata_objects_documents_annotations_types_annotation_type_get")
      end
      # resource path
      local_var_path = "/metadata/objects/documents/annotations/types/{annotation_type}".sub("{" + "annotation_type" + "}", URI.encode_path(annotation_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_annotations_types_annotation_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_annotations_types_annotation_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Event SubType Metadata
    # @param event_type [String] The event type. For example, distribution__v.
    # @param event_subtype [String] The event subtype. For example, approved_email__v.
    # @return [nil]
    def metadata_objects_documents_events_event_type_types_event_subtype_get(event_type : String, event_subtype : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_events_event_type_types_event_subtype_get_with_http_info(event_type, event_subtype, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Event SubType Metadata
    # @param event_type [String] The event type. For example, distribution__v.
    # @param event_subtype [String] The event subtype. For example, approved_email__v.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_events_event_type_types_event_subtype_get_with_http_info(event_type : String, event_subtype : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_events_event_type_types_event_subtype_get ..."}
      end
      # verify the required parameter "event_type" is set
      if @api_client.config.client_side_validation && event_type.nil?
        raise ArgumentError.new("Missing the required parameter 'event_type' when calling DefaultApi.metadata_objects_documents_events_event_type_types_event_subtype_get")
      end
      # verify the required parameter "event_subtype" is set
      if @api_client.config.client_side_validation && event_subtype.nil?
        raise ArgumentError.new("Missing the required parameter 'event_subtype' when calling DefaultApi.metadata_objects_documents_events_event_type_types_event_subtype_get")
      end
      # resource path
      local_var_path = "/metadata/objects/documents/events/{event_type}/types/{event_subtype}".sub("{" + "event_type" + "}", URI.encode_path(event_type.to_s)).sub("{" + "event_subtype" + "}", URI.encode_path(event_subtype.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_events_event_type_types_event_subtype_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_events_event_type_types_event_subtype_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Event Types and Subtypes
    # @return [nil]
    def metadata_objects_documents_events_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_events_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Event Types and Subtypes
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_events_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_events_get ..."}
      end
      # resource path
      local_var_path = "/metadata/objects/documents/events"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_events_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Lock Metadata
    # @return [nil]
    def metadata_objects_documents_lock_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_lock_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Lock Metadata
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_lock_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_lock_get ..."}
      end
      # resource path
      local_var_path = "/metadata/objects/documents/lock"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_lock_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_lock_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Common Document Fields
    # @return [nil]
    def metadata_objects_documents_properties_find_common_post(content_type : String? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_properties_find_common_post_with_http_info(content_type, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Retrieve Common Document Fields
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_properties_find_common_post_with_http_info(content_type : String? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_properties_find_common_post ..."}
      end
      # resource path
      local_var_path = "/metadata/objects/documents/properties/find_common"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_properties_find_common_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_properties_find_common_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Document Fields
    # @return [nil]
    def metadata_objects_documents_properties_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_properties_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Document Fields
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_properties_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_properties_get ..."}
      end
      # resource path
      local_var_path = "/metadata/objects/documents/properties"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_properties_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_properties_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Template Metadata
    # @return [nil]
    def metadata_objects_documents_templates_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_templates_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Template Metadata
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_templates_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_templates_get ..."}
      end
      # resource path
      local_var_path = "/metadata/objects/documents/templates"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_templates_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Document Types
    # @return [nil]
    def metadata_objects_documents_types_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_types_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Document Types
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_types_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_types_get ..."}
      end
      # resource path
      local_var_path = "/metadata/objects/documents/types"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_types_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Type
    # @param _type [String] The document type. See Retrieve Document Types.
    # @return [nil]
    def metadata_objects_documents_types_type_get(_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_types_type_get_with_http_info(_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Type
    # @param _type [String] The document type. See Retrieve Document Types.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_types_type_get_with_http_info(_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_types_type_get ..."}
      end
      # verify the required parameter "_type" is set
      if @api_client.config.client_side_validation && _type.nil?
        raise ArgumentError.new("Missing the required parameter '_type' when calling DefaultApi.metadata_objects_documents_types_type_get")
      end
      # resource path
      local_var_path = "/metadata/objects/documents/types/{type}".sub("{" + "type" + "}", URI.encode_path(_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_types_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_types_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Type Relationships
    # @param _type [String] The document type. See Retrieve Document Types.
    # @return [nil]
    def metadata_objects_documents_types_type_relationships_get(_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_types_type_relationships_get_with_http_info(_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Type Relationships
    # @param _type [String] The document type. See Retrieve Document Types.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_types_type_relationships_get_with_http_info(_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_types_type_relationships_get ..."}
      end
      # verify the required parameter "_type" is set
      if @api_client.config.client_side_validation && _type.nil?
        raise ArgumentError.new("Missing the required parameter '_type' when calling DefaultApi.metadata_objects_documents_types_type_relationships_get")
      end
      # resource path
      local_var_path = "/metadata/objects/documents/types/{type}/relationships".sub("{" + "type" + "}", URI.encode_path(_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_types_type_relationships_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_types_type_relationships_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Classification
    # @param _type [String] The document type. See Retrieve Document Types.
    # @param subtype [String] The document subtype. See Retrieve Document Types.
    # @param classification [String] The document classification. See Retrieve Document Types.
    # @return [nil]
    def metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get(_type : String, subtype : String, classification : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get_with_http_info(_type, subtype, classification, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Classification
    # @param _type [String] The document type. See Retrieve Document Types.
    # @param subtype [String] The document subtype. See Retrieve Document Types.
    # @param classification [String] The document classification. See Retrieve Document Types.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get_with_http_info(_type : String, subtype : String, classification : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get ..."}
      end
      # verify the required parameter "_type" is set
      if @api_client.config.client_side_validation && _type.nil?
        raise ArgumentError.new("Missing the required parameter '_type' when calling DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get")
      end
      # verify the required parameter "subtype" is set
      if @api_client.config.client_side_validation && subtype.nil?
        raise ArgumentError.new("Missing the required parameter 'subtype' when calling DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get")
      end
      # verify the required parameter "classification" is set
      if @api_client.config.client_side_validation && classification.nil?
        raise ArgumentError.new("Missing the required parameter 'classification' when calling DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get")
      end
      # resource path
      local_var_path = "/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}".sub("{" + "type" + "}", URI.encode_path(_type.to_s)).sub("{" + "subtype" + "}", URI.encode_path(subtype.to_s)).sub("{" + "classification" + "}", URI.encode_path(classification.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Subtype
    # @param _type [String] The document type. See Retrieve Document Types.
    # @param subtype [String] The document subtype. See Retrieve Document Types.
    # @return [nil]
    def metadata_objects_documents_types_type_subtypes_subtype_get(_type : String, subtype : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_documents_types_type_subtypes_subtype_get_with_http_info(_type, subtype, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Subtype
    # @param _type [String] The document type. See Retrieve Document Types.
    # @param subtype [String] The document subtype. See Retrieve Document Types.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_documents_types_type_subtypes_subtype_get_with_http_info(_type : String, subtype : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_get ..."}
      end
      # verify the required parameter "_type" is set
      if @api_client.config.client_side_validation && _type.nil?
        raise ArgumentError.new("Missing the required parameter '_type' when calling DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_get")
      end
      # verify the required parameter "subtype" is set
      if @api_client.config.client_side_validation && subtype.nil?
        raise ArgumentError.new("Missing the required parameter 'subtype' when calling DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_get")
      end
      # resource path
      local_var_path = "/metadata/objects/documents/types/{type}/subtypes/{subtype}".sub("{" + "type" + "}", URI.encode_path(_type.to_s)).sub("{" + "subtype" + "}", URI.encode_path(subtype.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_documents_types_type_subtypes_subtype_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_documents_types_type_subtypes_subtype_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Group Metadata
    # @return [nil]
    def metadata_objects_groups_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_groups_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Group Metadata
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_groups_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_groups_get ..."}
      end
      # resource path
      local_var_path = "/metadata/objects/groups"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_groups_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Security Policy Metadata
    # @return [nil]
    def metadata_objects_securitypolicies_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_securitypolicies_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Security Policy Metadata
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_securitypolicies_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_securitypolicies_get ..."}
      end
      # resource path
      local_var_path = "/metadata/objects/securitypolicies"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_securitypolicies_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_securitypolicies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve User Metadata
    # @return [nil]
    def metadata_objects_users_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_objects_users_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve User Metadata
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_objects_users_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_objects_users_get ..."}
      end
      # resource path
      local_var_path = "/metadata/objects/users"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_objects_users_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_objects_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Archived Document Signature Metadata
    # @return [nil]
    def metadata_query_archived_documents_relationships_document_signature_sysr_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_query_archived_documents_relationships_document_signature_sysr_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Archived Document Signature Metadata
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_query_archived_documents_relationships_document_signature_sysr_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_query_archived_documents_relationships_document_signature_sysr_get ..."}
      end
      # resource path
      local_var_path = "/metadata/query/archived_documents/relationships/document_signature__sysr"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_query_archived_documents_relationships_document_signature_sysr_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_query_archived_documents_relationships_document_signature_sysr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Signature Metadata
    # @return [nil]
    def metadata_query_documents_relationships_document_signature_sysr_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_query_documents_relationships_document_signature_sysr_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Signature Metadata
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_query_documents_relationships_document_signature_sysr_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_query_documents_relationships_document_signature_sysr_get ..."}
      end
      # resource path
      local_var_path = "/metadata/query/documents/relationships/document_signature__sysr"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_query_documents_relationships_document_signature_sysr_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_query_documents_relationships_document_signature_sysr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Object Collection
    # @return [nil]
    def metadata_vobjects_get(loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_vobjects_get_with_http_info(loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Object Collection
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_get_with_http_info(loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_vobjects_get ..."}
      end
      # resource path
      local_var_path = "/metadata/vobjects"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_vobjects_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_vobjects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Cancel Raw Object Deployment
    # @param object_name [String] 
    # @return [nil]
    def metadata_vobjects_object_name_actions_canceldeployment_post(object_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_vobjects_object_name_actions_canceldeployment_post_with_http_info(object_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Cancel Raw Object Deployment
    # @param object_name [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_object_name_actions_canceldeployment_post_with_http_info(object_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_vobjects_object_name_actions_canceldeployment_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.metadata_vobjects_object_name_actions_canceldeployment_post")
      end
      # resource path
      local_var_path = "/metadata/vobjects/{object_name}/actions/canceldeployment".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_vobjects_object_name_actions_canceldeployment_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_vobjects_object_name_actions_canceldeployment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Object Field Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_field_name [String] The object field name value (id, name__v, external_id__v, etc.).
    # @return [nil]
    def metadata_vobjects_object_name_fields_object_field_name_get(object_name : String, object_field_name : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_vobjects_object_name_fields_object_field_name_get_with_http_info(object_name, object_field_name, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Object Field Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_field_name [String] The object field name value (id, name__v, external_id__v, etc.).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_object_name_fields_object_field_name_get_with_http_info(object_name : String, object_field_name : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_vobjects_object_name_fields_object_field_name_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.metadata_vobjects_object_name_fields_object_field_name_get")
      end
      # verify the required parameter "object_field_name" is set
      if @api_client.config.client_side_validation && object_field_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_field_name' when calling DefaultApi.metadata_vobjects_object_name_fields_object_field_name_get")
      end
      # resource path
      local_var_path = "/metadata/vobjects/{object_name}/fields/{object_field_name}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_field_name" + "}", URI.encode_path(object_field_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_vobjects_object_name_fields_object_field_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_vobjects_object_name_fields_object_field_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Object Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [nil]
    def metadata_vobjects_object_name_get(object_name : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_vobjects_object_name_get_with_http_info(object_name, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Object Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_object_name_get_with_http_info(object_name : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_vobjects_object_name_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.metadata_vobjects_object_name_get")
      end
      # resource path
      local_var_path = "/metadata/vobjects/{object_name}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_vobjects_object_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_vobjects_object_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Page Layouts
    # @param object_name [String] 
    # @return [nil]
    def metadata_vobjects_object_name_page_layouts_get(object_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_vobjects_object_name_page_layouts_get_with_http_info(object_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Page Layouts
    # @param object_name [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_object_name_page_layouts_get_with_http_info(object_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_vobjects_object_name_page_layouts_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.metadata_vobjects_object_name_page_layouts_get")
      end
      # resource path
      local_var_path = "/metadata/vobjects/{object_name}/page_layouts".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_vobjects_object_name_page_layouts_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_vobjects_object_name_page_layouts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Page Layout Metadata
    # @param object_name [String] The name of the object from which to retrieve page layout metadata.
    # @param layout_name [String] The name of the page layout from which to retrieve metadata.
    # @return [nil]
    def metadata_vobjects_object_name_page_layouts_layout_name_get(object_name : String, layout_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      metadata_vobjects_object_name_page_layouts_layout_name_get_with_http_info(object_name, layout_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Page Layout Metadata
    # @param object_name [String] The name of the object from which to retrieve page layout metadata.
    # @param layout_name [String] The name of the page layout from which to retrieve metadata.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def metadata_vobjects_object_name_page_layouts_layout_name_get_with_http_info(object_name : String, layout_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.metadata_vobjects_object_name_page_layouts_layout_name_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.metadata_vobjects_object_name_page_layouts_layout_name_get")
      end
      # verify the required parameter "layout_name" is set
      if @api_client.config.client_side_validation && layout_name.nil?
        raise ArgumentError.new("Missing the required parameter 'layout_name' when calling DefaultApi.metadata_vobjects_object_name_page_layouts_layout_name_get")
      end
      # resource path
      local_var_path = "/metadata/vobjects/{object_name}/page_layouts/{layout_name}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "layout_name" + "}", URI.encode_path(layout_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.metadata_vobjects_object_name_page_layouts_layout_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#metadata_vobjects_object_name_page_layouts_layout_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Email Notification Histories
    # @return [nil]
    def notifications_histories_get(start_date : String? = nil, end_date : String? = nil, all_dates : Bool? = nil, format_result : String? = nil, limit : String? = nil, offset : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      notifications_histories_get_with_http_info(start_date, end_date, all_dates, format_result, limit, offset, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Email Notification Histories
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notifications_histories_get_with_http_info(start_date : String? = nil, end_date : String? = nil, all_dates : Bool? = nil, format_result : String? = nil, limit : String? = nil, offset : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.notifications_histories_get ..."}
      end
      # resource path
      local_var_path = "/notifications/histories"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["all_dates"] = all_dates.to_s unless all_dates.nil?
      query_params["format_result"] = format_result.to_s unless format_result.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.notifications_histories_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#notifications_histories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Bulk Workflow Action Details
    # @param action [String] 
    # @return [nil]
    def object_workflow_actions_action_get(action : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      object_workflow_actions_action_get_with_http_info(action, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Bulk Workflow Action Details
    # @param action [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_action_get_with_http_info(action : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.object_workflow_actions_action_get ..."}
      end
      # verify the required parameter "action" is set
      if @api_client.config.client_side_validation && action.nil?
        raise ArgumentError.new("Missing the required parameter 'action' when calling DefaultApi.object_workflow_actions_action_get")
      end
      # resource path
      local_var_path = "/object/workflow/actions/{action}".sub("{" + "action" + "}", URI.encode_path(action.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.object_workflow_actions_action_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#object_workflow_actions_action_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Workflow Actions on Multiple Workflows
    # @param action [String] 
    # @return [nil]
    def object_workflow_actions_action_post(action : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      object_workflow_actions_action_post_with_http_info(action, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Initiate Workflow Actions on Multiple Workflows
    # @param action [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_action_post_with_http_info(action : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.object_workflow_actions_action_post ..."}
      end
      # verify the required parameter "action" is set
      if @api_client.config.client_side_validation && action.nil?
        raise ArgumentError.new("Missing the required parameter 'action' when calling DefaultApi.object_workflow_actions_action_post")
      end
      # resource path
      local_var_path = "/object/workflow/actions/{action}".sub("{" + "action" + "}", URI.encode_path(action.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.object_workflow_actions_action_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#object_workflow_actions_action_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Cancel Workflow Tasks
    # @return [nil]
    def object_workflow_actions_canceltasks_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      object_workflow_actions_canceltasks_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Cancel Workflow Tasks
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_canceltasks_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.object_workflow_actions_canceltasks_post ..."}
      end
      # resource path
      local_var_path = "/object/workflow/actions/canceltasks"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.object_workflow_actions_canceltasks_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#object_workflow_actions_canceltasks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Cancel Workflows
    # @return [nil]
    def object_workflow_actions_cancelworkflows_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      object_workflow_actions_cancelworkflows_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Cancel Workflows
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_cancelworkflows_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.object_workflow_actions_cancelworkflows_post ..."}
      end
      # resource path
      local_var_path = "/object/workflow/actions/cancelworkflows"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.object_workflow_actions_cancelworkflows_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#object_workflow_actions_cancelworkflows_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Bulk Workflow Actions
    # @return [nil]
    def object_workflow_actions_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      object_workflow_actions_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Bulk Workflow Actions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.object_workflow_actions_get ..."}
      end
      # resource path
      local_var_path = "/object/workflow/actions"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.object_workflow_actions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#object_workflow_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Reassign Workflow Tasks
    # @return [nil]
    def object_workflow_actions_reassigntasks_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      object_workflow_actions_reassigntasks_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Reassign Workflow Tasks
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_reassigntasks_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.object_workflow_actions_reassigntasks_post ..."}
      end
      # resource path
      local_var_path = "/object/workflow/actions/reassigntasks"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.object_workflow_actions_reassigntasks_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#object_workflow_actions_reassigntasks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Replace Workflow Owner
    # @return [nil]
    def object_workflow_actions_replaceworkflowowner_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      object_workflow_actions_replaceworkflowowner_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Replace Workflow Owner
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def object_workflow_actions_replaceworkflowowner_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.object_workflow_actions_replaceworkflowowner_post ..."}
      end
      # resource path
      local_var_path = "/object/workflow/actions/replaceworkflowowner"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.object_workflow_actions_replaceworkflowowner_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#object_workflow_actions_replaceworkflowowner_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder Export Results
    # @param job_id [String] The id value of the requested export job. This is returned with the export binder requests above.
    # @return [nil]
    def objects_binders_actions_export_job_id_results_get(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_actions_export_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder Export Results
    # @param job_id [String] The id value of the requested export job. This is returned with the export binder requests above.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_actions_export_job_id_results_get_with_http_info(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_actions_export_job_id_results_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.objects_binders_actions_export_job_id_results_get")
      end
      # resource path
      local_var_path = "/objects/binders/actions/export/{job_id}/results".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_actions_export_job_id_results_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_actions_export_job_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Export Binder (Latest Version)
    # @param binder_id [String] The binder id field value.
    # @return [nil]
    def objects_binders_binder_id_actions_export_post(binder_id : String, source : Bool? = nil, renditiontype : String? = nil, docversion : String? = nil, attachments : String? = nil, export : String? = nil, docfield : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_actions_export_post_with_http_info(binder_id, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Export Binder (Latest Version)
    # @param binder_id [String] The binder id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_actions_export_post_with_http_info(binder_id : String, source : Bool? = nil, renditiontype : String? = nil, docversion : String? = nil, attachments : String? = nil, export : String? = nil, docfield : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_actions_export_post ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_actions_export_post")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/actions/export".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["source"] = source.to_s unless source.nil?
      query_params["renditiontype"] = renditiontype.to_s unless renditiontype.nil?
      query_params["docversion"] = docversion.to_s unless docversion.nil?
      query_params["attachments"] = attachments.to_s unless attachments.nil?
      query_params["export"] = export.to_s unless export.nil?
      query_params["docfield"] = docfield.to_s unless docfield.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_actions_export_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_actions_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Refresh Binder Auto-Filing
    # @param binder_id [String] The binder id field value.
    # @return [nil]
    def objects_binders_binder_id_actions_post(binder_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_actions_post_with_http_info(binder_id, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Refresh Binder Auto-Filing
    # @param binder_id [String] The binder id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_actions_post_with_http_info(binder_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_actions_post ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_actions_post")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/actions".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_actions_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_actions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Binding Rule
    # @param binder_id [String] The binder id field value.
    # @return [nil]
    def objects_binders_binder_id_binding_rule_put(binder_id : String, content_type : String? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_binding_rule_put_with_http_info(binder_id, content_type, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Update Binding Rule
    # @param binder_id [String] The binder id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_binding_rule_put_with_http_info(binder_id : String, content_type : String? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_binding_rule_put ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_binding_rule_put")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/binding_rule".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_binding_rule_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_binding_rule_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Binder
    # @param binder_id [String] The binder id field value.
    # @return [nil]
    def objects_binders_binder_id_delete(binder_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_delete_with_http_info(binder_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Binder
    # @param binder_id [String] The binder id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_delete_with_http_info(binder_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_delete ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_delete")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Binder Document Binding Rule
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id field value.
    # @return [nil]
    def objects_binders_binder_id_documents_node_id_binding_rule_put(binder_id : String, node_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_documents_node_id_binding_rule_put_with_http_info(binder_id, node_id, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Update Binder Document Binding Rule
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_documents_node_id_binding_rule_put_with_http_info(binder_id : String, node_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_documents_node_id_binding_rule_put ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_documents_node_id_binding_rule_put")
      end
      # verify the required parameter "node_id" is set
      if @api_client.config.client_side_validation && node_id.nil?
        raise ArgumentError.new("Missing the required parameter 'node_id' when calling DefaultApi.objects_binders_binder_id_documents_node_id_binding_rule_put")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/documents/{node_id}/binding_rule".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "node_id" + "}", URI.encode_path(node_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_documents_node_id_binding_rule_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_documents_node_id_binding_rule_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Add Document to Binder
    # @param binder_id [String] The binder id field value.
    # @return [nil]
    def objects_binders_binder_id_documents_post(binder_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_documents_post_with_http_info(binder_id, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Add Document to Binder
    # @param binder_id [String] The binder id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_documents_post_with_http_info(binder_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_documents_post ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_documents_post")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/documents".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_documents_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_documents_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Remove Document from Binder
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @return [nil]
    def objects_binders_binder_id_documents_section_id_delete(binder_id : String, section_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_documents_section_id_delete_with_http_info(binder_id, section_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Remove Document from Binder
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_documents_section_id_delete_with_http_info(binder_id : String, section_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_documents_section_id_delete ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_documents_section_id_delete")
      end
      # verify the required parameter "section_id" is set
      if @api_client.config.client_side_validation && section_id.nil?
        raise ArgumentError.new("Missing the required parameter 'section_id' when calling DefaultApi.objects_binders_binder_id_documents_section_id_delete")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/documents/{section_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "section_id" + "}", URI.encode_path(section_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_documents_section_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_documents_section_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Move Document in Binder
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @return [nil]
    def objects_binders_binder_id_documents_section_id_put(binder_id : String, section_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_documents_section_id_put_with_http_info(binder_id, section_id, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Move Document in Binder
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_documents_section_id_put_with_http_info(binder_id : String, section_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_documents_section_id_put ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_documents_section_id_put")
      end
      # verify the required parameter "section_id" is set
      if @api_client.config.client_side_validation && section_id.nil?
        raise ArgumentError.new("Missing the required parameter 'section_id' when calling DefaultApi.objects_binders_binder_id_documents_section_id_put")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/documents/{section_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "section_id" + "}", URI.encode_path(section_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_documents_section_id_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_documents_section_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder
    # @param binder_id [String] The binder id field value.
    # @return [nil]
    def objects_binders_binder_id_get(binder_id : String, depth : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_get_with_http_info(binder_id, depth, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder
    # @param binder_id [String] The binder id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_get_with_http_info(binder_id : String, depth : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_get ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_get")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["depth"] = depth.to_s unless depth.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Binder Version
    # @param binder_id [String] The binder id field value.
    # @return [nil]
    def objects_binders_binder_id_post(binder_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_post_with_http_info(binder_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Create Binder Version
    # @param binder_id [String] The binder id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_post_with_http_info(binder_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_post ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_post")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Binder
    # @param binder_id [String] The binder id field value.
    # @return [nil]
    def objects_binders_binder_id_put(binder_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_put_with_http_info(binder_id, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Update Binder
    # @param binder_id [String] The binder id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_put_with_http_info(binder_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_put ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_put")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Remove Users & Groups from Roles on a Single Binder
    # @param binder_id [String] The id value of the binder from which to remove roles.
    # @param role_name_and_user_or_group [String] The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
    # @param id [String] The id value of the user or group to remove from the role.
    # @return [nil]
    def objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete(binder_id : String, role_name_and_user_or_group : String, id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete_with_http_info(binder_id, role_name_and_user_or_group, id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Remove Users &amp; Groups from Roles on a Single Binder
    # @param binder_id [String] The id value of the binder from which to remove roles.
    # @param role_name_and_user_or_group [String] The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
    # @param id [String] The id value of the user or group to remove from the role.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete_with_http_info(binder_id : String, role_name_and_user_or_group : String, id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete")
      end
      # verify the required parameter "role_name_and_user_or_group" is set
      if @api_client.config.client_side_validation && role_name_and_user_or_group.nil?
        raise ArgumentError.new("Missing the required parameter 'role_name_and_user_or_group' when calling DefaultApi.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete")
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "role_name_and_user_or_group" + "}", URI.encode_path(role_name_and_user_or_group.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Binder Section Binding Rule
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id field value.
    # @return [nil]
    def objects_binders_binder_id_sections_node_id_binding_rule_put(binder_id : String, node_id : String, content_type : String? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_sections_node_id_binding_rule_put_with_http_info(binder_id, node_id, content_type, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Update Binder Section Binding Rule
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_sections_node_id_binding_rule_put_with_http_info(binder_id : String, node_id : String, content_type : String? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_sections_node_id_binding_rule_put ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_sections_node_id_binding_rule_put")
      end
      # verify the required parameter "node_id" is set
      if @api_client.config.client_side_validation && node_id.nil?
        raise ArgumentError.new("Missing the required parameter 'node_id' when calling DefaultApi.objects_binders_binder_id_sections_node_id_binding_rule_put")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/sections/{node_id}/binding_rule".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "node_id" + "}", URI.encode_path(node_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_sections_node_id_binding_rule_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_sections_node_id_binding_rule_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Binder Section
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id of the section.
    # @return [nil]
    def objects_binders_binder_id_sections_node_id_put(binder_id : String, node_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_sections_node_id_put_with_http_info(binder_id, node_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Binder Section
    # @param binder_id [String] The binder id field value.
    # @param node_id [String] The binder node id of the section.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_sections_node_id_put_with_http_info(binder_id : String, node_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_sections_node_id_put ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_sections_node_id_put")
      end
      # verify the required parameter "node_id" is set
      if @api_client.config.client_side_validation && node_id.nil?
        raise ArgumentError.new("Missing the required parameter 'node_id' when calling DefaultApi.objects_binders_binder_id_sections_node_id_put")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/sections/{node_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "node_id" + "}", URI.encode_path(node_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_sections_node_id_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_sections_node_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Binder Section
    # @param binder_id [String] The binder id field value.
    # @return [nil]
    def objects_binders_binder_id_sections_post(binder_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_sections_post_with_http_info(binder_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Binder Section
    # @param binder_id [String] The binder id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_sections_post_with_http_info(binder_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_sections_post ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_sections_post")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/sections".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_sections_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_sections_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Binder Section
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @return [nil]
    def objects_binders_binder_id_sections_section_id_delete(binder_id : String, section_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_sections_section_id_delete_with_http_info(binder_id, section_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Delete Binder Section
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_sections_section_id_delete_with_http_info(binder_id : String, section_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_sections_section_id_delete ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_sections_section_id_delete")
      end
      # verify the required parameter "section_id" is set
      if @api_client.config.client_side_validation && section_id.nil?
        raise ArgumentError.new("Missing the required parameter 'section_id' when calling DefaultApi.objects_binders_binder_id_sections_section_id_delete")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/sections/{section_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "section_id" + "}", URI.encode_path(section_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_sections_section_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_sections_section_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder Sections
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @return [nil]
    def objects_binders_binder_id_sections_section_id_get(binder_id : String, section_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_sections_section_id_get_with_http_info(binder_id, section_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder Sections
    # @param binder_id [String] The binder id field value.
    # @param section_id [String] The binder node id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_sections_section_id_get_with_http_info(binder_id : String, section_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_sections_section_id_get ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_sections_section_id_get")
      end
      # verify the required parameter "section_id" is set
      if @api_client.config.client_side_validation && section_id.nil?
        raise ArgumentError.new("Missing the required parameter 'section_id' when calling DefaultApi.objects_binders_binder_id_sections_section_id_get")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/sections/{section_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "section_id" + "}", URI.encode_path(section_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_sections_section_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_sections_section_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Binder Versions
    # @param binder_id [String] The binder id field value.
    # @return [nil]
    def objects_binders_binder_id_versions_get(binder_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_versions_get_with_http_info(binder_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Binder Versions
    # @param binder_id [String] The binder id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_get_with_http_info(binder_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_versions_get ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_get")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/versions".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_versions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Export Binder (Specific Version)
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_actions_export_post(binder_id : String, major_version : String, minor_version : String, source : Bool? = nil, renditiontype : String? = nil, docversion : String? = nil, attachments : String? = nil, export : String? = nil, docfield : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_versions_major_version_minor_version_actions_export_post_with_http_info(binder_id, major_version, minor_version, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Export Binder (Specific Version)
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_actions_export_post_with_http_info(binder_id : String, major_version : String, minor_version : String, source : Bool? = nil, renditiontype : String? = nil, docversion : String? = nil, attachments : String? = nil, export : String? = nil, docfield : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["source"] = source.to_s unless source.nil?
      query_params["renditiontype"] = renditiontype.to_s unless renditiontype.nil?
      query_params["docversion"] = docversion.to_s unless docversion.nil?
      query_params["attachments"] = attachments.to_s unless attachments.nil?
      query_params["export"] = export.to_s unless export.nil?
      query_params["docfield"] = docfield.to_s unless docfield.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_actions_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_delete(binder_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_versions_major_version_minor_version_delete_with_http_info(binder_id, major_version, minor_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_delete_with_http_info(binder_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_delete ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_delete")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_delete")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_delete")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_get(binder_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_versions_major_version_minor_version_get_with_http_info(binder_id, major_version, minor_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_get_with_http_info(binder_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_get ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_get")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_put(binder_id : String, major_version : String, minor_version : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_versions_major_version_minor_version_put_with_http_info(binder_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Update Binder Version
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_put_with_http_info(binder_id : String, major_version : String, minor_version : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_put ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_put")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_put")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_put")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_post(binder_id : String, major_version : String, minor_version : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_versions_major_version_minor_version_relationships_post_with_http_info(binder_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Create Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_post_with_http_info(binder_id : String, major_version : String, minor_version : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_post ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_post")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_post")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_post")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_relationships_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param relationship_id [String] The binder relationship id field value.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete(binder_id : String, major_version : String, minor_version : String, relationship_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(binder_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param relationship_id [String] The binder relationship id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(binder_id : String, major_version : String, minor_version : String, relationship_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete")
      end
      # verify the required parameter "relationship_id" is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        raise ArgumentError.new("Missing the required parameter 'relationship_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "relationship_id" + "}", URI.encode_path(relationship_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param relationship_id [String] The binder relationship id field value.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get(binder_id : String, major_version : String, minor_version : String, relationship_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(binder_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder Relationship
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param relationship_id [String] The binder relationship id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(binder_id : String, major_version : String, minor_version : String, relationship_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get")
      end
      # verify the required parameter "relationship_id" is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        raise ArgumentError.new("Missing the required parameter 'relationship_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "relationship_id" + "}", URI.encode_path(relationship_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder Version Section
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param section_id [String] Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
    # @return [nil]
    def objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get(binder_id : String, major_version : String, minor_version : String, section_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get_with_http_info(binder_id, major_version, minor_version, section_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder Version Section
    # @param binder_id [String] The binder id field value.
    # @param major_version [String] The binder major_version_number__v field value.
    # @param minor_version [String] The binder minor_version_number__v field value.
    # @param section_id [String] Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get_with_http_info(binder_id : String, major_version : String, minor_version : String, section_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get ..."}
      end
      # verify the required parameter "binder_id" is set
      if @api_client.config.client_side_validation && binder_id.nil?
        raise ArgumentError.new("Missing the required parameter 'binder_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get")
      end
      # verify the required parameter "section_id" is set
      if @api_client.config.client_side_validation && section_id.nil?
        raise ArgumentError.new("Missing the required parameter 'section_id' when calling DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get")
      end
      # resource path
      local_var_path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}".sub("{" + "binder_id" + "}", URI.encode_path(binder_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "section_id" + "}", URI.encode_path(section_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Binder Roles
    # @param id [String] 
    # @return [nil]
    def objects_binders_id_roles_get(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_id_roles_get_with_http_info(id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Binder Roles
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_roles_get_with_http_info(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_id_roles_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_roles_get")
      end
      # resource path
      local_var_path = "/objects/binders/{id}/roles".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_id_roles_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_id_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Assign Users & Groups to Roles on a Single Binder
    # @param id [String] 
    # @return [nil]
    def objects_binders_id_roles_post(id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_id_roles_post_with_http_info(id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Assign Users &amp; Groups to Roles on a Single Binder
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_roles_post_with_http_info(id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_id_roles_post ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_roles_post")
      end
      # resource path
      local_var_path = "/objects/binders/{id}/roles".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_id_roles_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_id_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Role
    # @param id [String] The binder &#x60;id&#x60;.
    # @param role_name [String] The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
    # @return [nil]
    def objects_binders_id_roles_role_name_get(id : String, role_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_id_roles_role_name_get_with_http_info(id, role_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Role
    # @param id [String] The binder &#x60;id&#x60;.
    # @param role_name [String] The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_roles_role_name_get_with_http_info(id : String, role_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_id_roles_role_name_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_roles_role_name_get")
      end
      # verify the required parameter "role_name" is set
      if @api_client.config.client_side_validation && role_name.nil?
        raise ArgumentError.new("Missing the required parameter 'role_name' when calling DefaultApi.objects_binders_id_roles_role_name_get")
      end
      # resource path
      local_var_path = "/objects/binders/{id}/roles/{role_name}".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "role_name" + "}", URI.encode_path(role_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_id_roles_role_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_id_roles_role_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder User Actions
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @return [nil]
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get(id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id, major_version, minor_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder User Actions
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get")
      end
      # resource path
      local_var_path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder Entry Criteria
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @param name__v [String] The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
    # @return [nil]
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get(id : String, major_version : String, minor_version : String, name__v : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id, major_version, minor_version, name__v, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder Entry Criteria
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @param name__v [String] The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id : String, major_version : String, minor_version : String, name__v : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get")
      end
      # verify the required parameter "name__v" is set
      if @api_client.config.client_side_validation && name__v.nil?
        raise ArgumentError.new("Missing the required parameter 'name__v' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get")
      end
      # resource path
      local_var_path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "name__v" + "}", URI.encode_path(name__v.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Binder User Action
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @param name__v [String] The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
    # @return [nil]
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put(id : String, major_version : String, minor_version : String, name__v : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id, major_version, minor_version, name__v, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Initiate Binder User Action
    # @param id [String] The binder id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the binder.
    # @param minor_version [String] The minor version number of the binder.
    # @param name__v [String] The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id : String, major_version : String, minor_version : String, name__v : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put")
      end
      # verify the required parameter "name__v" is set
      if @api_client.config.client_side_validation && name__v.nil?
        raise ArgumentError.new("Missing the required parameter 'name__v' when calling DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put")
      end
      # resource path
      local_var_path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "name__v" + "}", URI.encode_path(name__v.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve User Actions on Multiple Binders
    # @return [nil]
    def objects_binders_lifecycle_actions_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_lifecycle_actions_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Retrieve User Actions on Multiple Binders
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_lifecycle_actions_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_lifecycle_actions_post ..."}
      end
      # resource path
      local_var_path = "/objects/binders/lifecycle_actions"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_lifecycle_actions_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_lifecycle_actions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Bulk Binder User Actions
    # @param user_action_name [String] The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
    # @return [nil]
    def objects_binders_lifecycle_actions_user_action_name_put(user_action_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_lifecycle_actions_user_action_name_put_with_http_info(user_action_name, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Initiate Bulk Binder User Actions
    # @param user_action_name [String] The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_lifecycle_actions_user_action_name_put_with_http_info(user_action_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_lifecycle_actions_user_action_name_put ..."}
      end
      # verify the required parameter "user_action_name" is set
      if @api_client.config.client_side_validation && user_action_name.nil?
        raise ArgumentError.new("Missing the required parameter 'user_action_name' when calling DefaultApi.objects_binders_lifecycle_actions_user_action_name_put")
      end
      # resource path
      local_var_path = "/objects/binders/lifecycle_actions/{user_action_name}".sub("{" + "user_action_name" + "}", URI.encode_path(user_action_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_lifecycle_actions_user_action_name_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_lifecycle_actions_user_action_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Binder
    # @return [nil]
    def objects_binders_post(async : Bool? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_post_with_http_info(async, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Create Binder
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_post_with_http_info(async : Bool? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_post ..."}
      end
      # resource path
      local_var_path = "/objects/binders"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["async"] = async.to_s unless async.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder Template Collection
    # @return [nil]
    def objects_binders_templates_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_templates_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder Template Collection
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_templates_get ..."}
      end
      # resource path
      local_var_path = "/objects/binders/templates"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_templates_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Binder Template
    # @return [nil]
    def objects_binders_templates_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_templates_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Binder Template
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_templates_post ..."}
      end
      # resource path
      local_var_path = "/objects/binders/templates"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_templates_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_templates_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Binder Template
    # @return [nil]
    def objects_binders_templates_put(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_templates_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Binder Template
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_put_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_templates_put ..."}
      end
      # resource path
      local_var_path = "/objects/binders/templates"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_templates_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_templates_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder Template Node Attributes
    # @param template_name [String] The binder template name__v field value.
    # @return [nil]
    def objects_binders_templates_template_name_bindernodes_get(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_templates_template_name_bindernodes_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder Template Node Attributes
    # @param template_name [String] The binder template name__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_template_name_bindernodes_get_with_http_info(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_templates_template_name_bindernodes_get ..."}
      end
      # verify the required parameter "template_name" is set
      if @api_client.config.client_side_validation && template_name.nil?
        raise ArgumentError.new("Missing the required parameter 'template_name' when calling DefaultApi.objects_binders_templates_template_name_bindernodes_get")
      end
      # resource path
      local_var_path = "/objects/binders/templates/{template_name}/bindernodes".sub("{" + "template_name" + "}", URI.encode_path(template_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_templates_template_name_bindernodes_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_templates_template_name_bindernodes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Binder Template Node
    # @param template_name [String] The binder template name__v field value.
    # @return [nil]
    def objects_binders_templates_template_name_bindernodes_post(template_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_templates_template_name_bindernodes_post_with_http_info(template_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Binder Template Node
    # @param template_name [String] The binder template name__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_template_name_bindernodes_post_with_http_info(template_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_templates_template_name_bindernodes_post ..."}
      end
      # verify the required parameter "template_name" is set
      if @api_client.config.client_side_validation && template_name.nil?
        raise ArgumentError.new("Missing the required parameter 'template_name' when calling DefaultApi.objects_binders_templates_template_name_bindernodes_post")
      end
      # resource path
      local_var_path = "/objects/binders/templates/{template_name}/bindernodes".sub("{" + "template_name" + "}", URI.encode_path(template_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_templates_template_name_bindernodes_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_templates_template_name_bindernodes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Replace Binder Template Nodes
    # @param template_name [String] The binder template name__v field value.
    # @return [nil]
    def objects_binders_templates_template_name_bindernodes_put(template_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_templates_template_name_bindernodes_put_with_http_info(template_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Replace Binder Template Nodes
    # @param template_name [String] The binder template name__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_template_name_bindernodes_put_with_http_info(template_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_templates_template_name_bindernodes_put ..."}
      end
      # verify the required parameter "template_name" is set
      if @api_client.config.client_side_validation && template_name.nil?
        raise ArgumentError.new("Missing the required parameter 'template_name' when calling DefaultApi.objects_binders_templates_template_name_bindernodes_put")
      end
      # resource path
      local_var_path = "/objects/binders/templates/{template_name}/bindernodes".sub("{" + "template_name" + "}", URI.encode_path(template_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_templates_template_name_bindernodes_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_templates_template_name_bindernodes_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Binder Template
    # @param template_name [String] The binder template name__v field value.
    # @return [nil]
    def objects_binders_templates_template_name_delete(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_templates_template_name_delete_with_http_info(template_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Binder Template
    # @param template_name [String] The binder template name__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_template_name_delete_with_http_info(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_templates_template_name_delete ..."}
      end
      # verify the required parameter "template_name" is set
      if @api_client.config.client_side_validation && template_name.nil?
        raise ArgumentError.new("Missing the required parameter 'template_name' when calling DefaultApi.objects_binders_templates_template_name_delete")
      end
      # resource path
      local_var_path = "/objects/binders/templates/{template_name}".sub("{" + "template_name" + "}", URI.encode_path(template_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_templates_template_name_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_templates_template_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Binder Template Attributes
    # @param template_name [String] The binder template name__v field value.
    # @return [nil]
    def objects_binders_templates_template_name_get(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_binders_templates_template_name_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Binder Template Attributes
    # @param template_name [String] The binder template name__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_binders_templates_template_name_get_with_http_info(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_binders_templates_template_name_get ..."}
      end
      # verify the required parameter "template_name" is set
      if @api_client.config.client_side_validation && template_name.nil?
        raise ArgumentError.new("Missing the required parameter 'template_name' when calling DefaultApi.objects_binders_templates_template_name_get")
      end
      # resource path
      local_var_path = "/objects/binders/templates/{template_name}".sub("{" + "template_name" + "}", URI.encode_path(template_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_binders_templates_template_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_binders_templates_template_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Deleted Document IDs
    # @return [nil]
    def objects_deletions_documents_get(start_date : String? = nil, end_date : String? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_deletions_documents_get_with_http_info(start_date, end_date, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Deleted Document IDs
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_deletions_documents_get_with_http_info(start_date : String? = nil, end_date : String? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_deletions_documents_get ..."}
      end
      # resource path
      local_var_path = "/objects/deletions/documents"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_deletions_documents_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_deletions_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Deleted Object Record ID
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [nil]
    def objects_deletions_vobjects_object_name_get(object_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_deletions_vobjects_object_name_get_with_http_info(object_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Deleted Object Record ID
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_deletions_vobjects_object_name_get_with_http_info(object_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_deletions_vobjects_object_name_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.objects_deletions_vobjects_object_name_get")
      end
      # resource path
      local_var_path = "/objects/deletions/vobjects/{object_name}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_deletions_vobjects_object_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_deletions_vobjects_object_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Document Workflows
    # @return [nil]
    def objects_documents_actions_get(loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_actions_get_with_http_info(loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Document Workflows
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_actions_get_with_http_info(loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_actions_get ..."}
      end
      # resource path
      local_var_path = "/objects/documents/actions"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_actions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Controlled Copy Job Results
    # @param lifecycle_and_state_and_action [String] The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
    # @param job_id [String] 
    # @return [nil]
    def objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get(lifecycle_and_state_and_action : String, job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get_with_http_info(lifecycle_and_state_and_action, job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download Controlled Copy Job Results
    # @param lifecycle_and_state_and_action [String] The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
    # @param job_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get_with_http_info(lifecycle_and_state_and_action : String, job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get ..."}
      end
      # verify the required parameter "lifecycle_and_state_and_action" is set
      if @api_client.config.client_side_validation && lifecycle_and_state_and_action.nil?
        raise ArgumentError.new("Missing the required parameter 'lifecycle_and_state_and_action' when calling DefaultApi.objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get")
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get")
      end
      # resource path
      local_var_path = "/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results".sub("{" + "lifecycle_and_state_and_action" + "}", URI.encode_path(lifecycle_and_state_and_action.to_s)).sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Workflow Details
    # @param workflow_name [String] The document workflow name value.
    # @return [nil]
    def objects_documents_actions_workflow_name_get(workflow_name : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_actions_workflow_name_get_with_http_info(workflow_name, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Workflow Details
    # @param workflow_name [String] The document workflow name value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_actions_workflow_name_get_with_http_info(workflow_name : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_actions_workflow_name_get ..."}
      end
      # verify the required parameter "workflow_name" is set
      if @api_client.config.client_side_validation && workflow_name.nil?
        raise ArgumentError.new("Missing the required parameter 'workflow_name' when calling DefaultApi.objects_documents_actions_workflow_name_get")
      end
      # resource path
      local_var_path = "/objects/documents/actions/{workflow_name}".sub("{" + "workflow_name" + "}", URI.encode_path(workflow_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_actions_workflow_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_actions_workflow_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Document Workflow
    # @param workflow_name [String] The document workflow name value.
    # @return [nil]
    def objects_documents_actions_workflow_name_post(workflow_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_actions_workflow_name_post_with_http_info(workflow_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Initiate Document Workflow
    # @param workflow_name [String] The document workflow name value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_actions_workflow_name_post_with_http_info(workflow_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_actions_workflow_name_post ..."}
      end
      # verify the required parameter "workflow_name" is set
      if @api_client.config.client_side_validation && workflow_name.nil?
        raise ArgumentError.new("Missing the required parameter 'workflow_name' when calling DefaultApi.objects_documents_actions_workflow_name_post")
      end
      # resource path
      local_var_path = "/objects/documents/actions/{workflow_name}".sub("{" + "workflow_name" + "}", URI.encode_path(workflow_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_actions_workflow_name_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_actions_workflow_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Annotations
    # @return [nil]
    def objects_documents_annotations_batch_delete(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_annotations_batch_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Delete Annotations
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_annotations_batch_delete_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_annotations_batch_delete ..."}
      end
      # resource path
      local_var_path = "/objects/documents/annotations/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_annotations_batch_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_annotations_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Multiple Annotations
    # @param authorization [String] 
    # @param content_type [String] 
    # @param accept [String] 
    # @param x_vault_api_client_id [String] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [nil]
    def objects_documents_annotations_batch_post(authorization : String, content_type : String, accept : String, x_vault_api_client_id : String)
      objects_documents_annotations_batch_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Create Multiple Annotations
    # @param authorization [String] 
    # @param content_type [String] 
    # @param accept [String] 
    # @param x_vault_api_client_id [String] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_annotations_batch_post_with_http_info(authorization : String, content_type : String, accept : String, x_vault_api_client_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_annotations_batch_post ..."}
      end
      # verify the required parameter "authorization" is set
      if @api_client.config.client_side_validation && authorization.nil?
        raise ArgumentError.new("Missing the required parameter 'authorization' when calling DefaultApi.objects_documents_annotations_batch_post")
      end
      if @api_client.config.client_side_validation && authorization.to_s.size > 0
        raise ArgumentError.new("invalid value for \"authorization\" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be smaller than or equal to 0.")
      end

      if @api_client.config.client_side_validation && authorization.to_s.size < 0
        raise ArgumentError.new("invalid value for \"authorization\" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be greater than or equal to 0.")
      end

      # verify the required parameter "content_type" is set
      if @api_client.config.client_side_validation && content_type.nil?
        raise ArgumentError.new("Missing the required parameter 'content_type' when calling DefaultApi.objects_documents_annotations_batch_post")
      end
      if @api_client.config.client_side_validation && content_type.to_s.size > 0
        raise ArgumentError.new("invalid value for \"content_type\" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be smaller than or equal to 0.")
      end

      if @api_client.config.client_side_validation && content_type.to_s.size < 0
        raise ArgumentError.new("invalid value for \"content_type\" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be greater than or equal to 0.")
      end

      # verify the required parameter "accept" is set
      if @api_client.config.client_side_validation && accept.nil?
        raise ArgumentError.new("Missing the required parameter 'accept' when calling DefaultApi.objects_documents_annotations_batch_post")
      end
      if @api_client.config.client_side_validation && accept.to_s.size > 0
        raise ArgumentError.new("invalid value for \"accept\" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be smaller than or equal to 0.")
      end

      if @api_client.config.client_side_validation && accept.to_s.size < 0
        raise ArgumentError.new("invalid value for \"accept\" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be greater than or equal to 0.")
      end

      # verify the required parameter "x_vault_api_client_id" is set
      if @api_client.config.client_side_validation && x_vault_api_client_id.nil?
        raise ArgumentError.new("Missing the required parameter 'x_vault_api_client_id' when calling DefaultApi.objects_documents_annotations_batch_post")
      end
      if @api_client.config.client_side_validation && x_vault_api_client_id.to_s.size > 0
        raise ArgumentError.new("invalid value for \"x_vault_api_client_id\" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be smaller than or equal to 0.")
      end

      if @api_client.config.client_side_validation && x_vault_api_client_id.to_s.size < 0
        raise ArgumentError.new("invalid value for \"x_vault_api_client_id\" when calling DefaultApi.objects_documents_annotations_batch_post, the character length must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/objects/documents/annotations/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_annotations_batch_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_annotations_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Annotations
    # @return [nil]
    def objects_documents_annotations_batch_put(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_annotations_batch_put_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Update Annotations
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_annotations_batch_put_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_annotations_batch_put ..."}
      end
      # resource path
      local_var_path = "/objects/documents/annotations/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_annotations_batch_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_annotations_batch_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Add Annotation Replies
    # @return [nil]
    def objects_documents_annotations_replies_batch_post(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_annotations_replies_batch_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Add Annotation Replies
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_annotations_replies_batch_post_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_annotations_replies_batch_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/annotations/replies/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_annotations_replies_batch_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_annotations_replies_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Multiple Document Attachments
    # @return [nil]
    def objects_documents_attachments_batch_delete(accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_attachments_batch_delete_with_http_info(accept, authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Delete Multiple Document Attachments
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_attachments_batch_delete_with_http_info(accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_attachments_batch_delete ..."}
      end
      # resource path
      local_var_path = "/objects/documents/attachments/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_attachments_batch_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_attachments_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Multiple Document Attachments
    # @return [nil]
    def objects_documents_attachments_batch_post(accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_attachments_batch_post_with_http_info(accept, authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Create Multiple Document Attachments
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_attachments_batch_post_with_http_info(accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_attachments_batch_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/attachments/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_attachments_batch_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_attachments_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Multiple Document Attachment Descriptions
    # @return [nil]
    def objects_documents_attachments_batch_put(accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_attachments_batch_put_with_http_info(accept, authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Update Multiple Document Attachment Descriptions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_attachments_batch_put_with_http_info(accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_attachments_batch_put ..."}
      end
      # resource path
      local_var_path = "/objects/documents/attachments/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_attachments_batch_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_attachments_batch_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Export Results
    # @param job_id [String] The id value of the requested export job. This is returned with the export document requests.
    # @return [nil]
    def objects_documents_batch_actions_fileextract_job_id_results_get(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_batch_actions_fileextract_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Export Results
    # @param job_id [String] The id value of the requested export job. This is returned with the export document requests.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_actions_fileextract_job_id_results_get_with_http_info(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_batch_actions_fileextract_job_id_results_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.objects_documents_batch_actions_fileextract_job_id_results_get")
      end
      # resource path
      local_var_path = "/objects/documents/batch/actions/fileextract/{job_id}/results".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_batch_actions_fileextract_job_id_results_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_batch_actions_fileextract_job_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Export Documents
    # @return [nil]
    def objects_documents_batch_actions_fileextract_post(source : Bool? = nil, renditions : Bool? = nil, allversions : Bool? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_batch_actions_fileextract_post_with_http_info(source, renditions, allversions, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Export Documents
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_actions_fileextract_post_with_http_info(source : Bool? = nil, renditions : Bool? = nil, allversions : Bool? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_batch_actions_fileextract_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/batch/actions/fileextract"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["source"] = source.to_s unless source.nil?
      query_params["renditions"] = renditions.to_s unless renditions.nil?
      query_params["allversions"] = allversions.to_s unless allversions.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_batch_actions_fileextract_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_batch_actions_fileextract_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Reclassify Multiple Documents
    # @return [nil]
    def objects_documents_batch_actions_reclassify_put(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_batch_actions_reclassify_put_with_http_info(authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id)
      nil
    end

    # Reclassify Multiple Documents
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_actions_reclassify_put_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_batch_actions_reclassify_put ..."}
      end
      # resource path
      local_var_path = "/objects/documents/batch/actions/reclassify"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-MigrationMode"] = x_vault_api_migration_mode
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_batch_actions_reclassify_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_batch_actions_reclassify_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Multiple Document Renditions
    # @return [nil]
    def objects_documents_batch_actions_rerender_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_batch_actions_rerender_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Multiple Document Renditions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_actions_rerender_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_batch_actions_rerender_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/batch/actions/rerender"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_batch_actions_rerender_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_batch_actions_rerender_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Multiple Documents
    # @return [nil]
    def objects_documents_batch_delete(id_param : String? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_batch_delete_with_http_info(id_param, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Delete Multiple Documents
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_delete_with_http_info(id_param : String? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_batch_delete ..."}
      end
      # resource path
      local_var_path = "/objects/documents/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["idParam"] = id_param.to_s unless id_param.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_batch_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Undo Collaborative Authoring Checkout
    # @return [nil]
    def objects_documents_batch_lock_delete(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_batch_lock_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Undo Collaborative Authoring Checkout
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_lock_delete_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_batch_lock_delete ..."}
      end
      # resource path
      local_var_path = "/objects/documents/batch/lock"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_batch_lock_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_batch_lock_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Multiple Documents
    # @return [nil]
    def objects_documents_batch_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_batch_post_with_http_info(authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id)
      nil
    end

    # Create Multiple Documents
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_batch_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-MigrationMode"] = x_vault_api_migration_mode
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_batch_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Multiple Documents
    # @return [nil]
    def objects_documents_batch_put(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_batch_put_with_http_info(authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id)
      nil
    end

    # Update Multiple Documents
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_batch_put_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_batch_put ..."}
      end
      # resource path
      local_var_path = "/objects/documents/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-MigrationMode"] = x_vault_api_migration_mode
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_batch_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_batch_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Anchor IDs
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_anchors_get(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_anchors_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Anchor IDs
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_anchors_get_with_http_info(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_anchors_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_anchors_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/anchors".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_anchors_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_anchors_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Export Document Annotations to PDF
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_annotations_file_get(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_annotations_file_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Export Document Annotations to PDF
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_annotations_file_get_with_http_info(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_annotations_file_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_annotations_file_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/annotations/file".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_annotations_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_annotations_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Import Document Annotations from PDF
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_annotations_file_post(doc_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_annotations_file_post_with_http_info(doc_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Import Document Annotations from PDF
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_annotations_file_post_with_http_info(doc_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_annotations_file_post ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_annotations_file_post")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/annotations/file".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_annotations_file_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_annotations_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Single Document Attachment
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_delete(doc_id : String, attachment_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_attachment_id_delete_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Delete Single Document Attachment
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_delete_with_http_info(doc_id : String, attachment_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_delete ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_delete")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_delete")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments/{attachment_id}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Document Attachment
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_file_get(doc_id : String, attachment_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_attachment_id_file_get_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Download Document Attachment
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_file_get_with_http_info(doc_id : String, attachment_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_file_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_file_get")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_file_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments/{attachment_id}/file".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Attachment Metadata
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_get(doc_id : String, attachment_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_attachment_id_get_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Attachment Metadata
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_get_with_http_info(doc_id : String, attachment_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_get")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments/{attachment_id}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Document Attachment Description
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_put(doc_id : String, attachment_id : String, accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_attachment_id_put_with_http_info(doc_id, attachment_id, accept, authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Update Document Attachment Description
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_put_with_http_info(doc_id : String, attachment_id : String, accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_put ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_put")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_put")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments/{attachment_id}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Single Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete(doc_id : String, attachment_id : String, attachment_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Delete Single Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(doc_id : String, attachment_id : String, attachment_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete")
      end
      # verify the required parameter "attachment_version" is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s)).sub("{" + "attachment_version" + "}", URI.encode_path(attachment_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get(doc_id : String, attachment_id : String, attachment_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Download Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id : String, attachment_id : String, attachment_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # verify the required parameter "attachment_version" is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s)).sub("{" + "attachment_version" + "}", URI.encode_path(attachment_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Attachment Version Metadata
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get(doc_id : String, attachment_id : String, attachment_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Attachment Version Metadata
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id : String, attachment_id : String, attachment_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get")
      end
      # verify the required parameter "attachment_version" is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s)).sub("{" + "attachment_version" + "}", URI.encode_path(attachment_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Restore Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post(doc_id : String, attachment_id : String, attachment_version : String, restore : Bool? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(doc_id, attachment_id, attachment_version, restore, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Restore Document Attachment Version
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(doc_id : String, attachment_id : String, attachment_version : String, restore : Bool? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post")
      end
      # verify the required parameter "attachment_version" is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s)).sub("{" + "attachment_version" + "}", URI.encode_path(attachment_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["restore"] = restore.to_s unless restore.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Attachment Versions
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_attachment_id_versions_get(doc_id : String, attachment_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_attachment_id_versions_get_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Attachment Versions
    # @param doc_id [String] The document id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_attachment_id_versions_get_with_http_info(doc_id : String, attachment_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_get")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_attachment_id_versions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_attachment_id_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download All Document Attachments
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_file_get(doc_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_file_get_with_http_info(doc_id, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Download All Document Attachments
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_file_get_with_http_info(doc_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_file_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_file_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments/file".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Attachments
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_get(doc_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_get_with_http_info(doc_id, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Attachments
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_get_with_http_info(doc_id : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Document Attachment
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_attachments_post(doc_id : String, accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_attachments_post_with_http_info(doc_id, accept, authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Create Document Attachment
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_attachments_post_with_http_info(doc_id : String, accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_attachments_post ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_attachments_post")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/attachments".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_attachments_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_attachments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Complete Audit History for a Single Document
    # @param doc_id [String] The document ID for which to retrieve audit history.
    # @return [nil]
    def objects_documents_doc_id_audittrail_get(doc_id : String, start_date : String? = nil, end_date : String? = nil, format_result : String? = nil, limit : String? = nil, offset : String? = nil, events : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_audittrail_get_with_http_info(doc_id, start_date, end_date, format_result, limit, offset, events, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Complete Audit History for a Single Document
    # @param doc_id [String] The document ID for which to retrieve audit history.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_audittrail_get_with_http_info(doc_id : String, start_date : String? = nil, end_date : String? = nil, format_result : String? = nil, limit : String? = nil, offset : String? = nil, events : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_audittrail_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_audittrail_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/audittrail".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["format_result"] = format_result.to_s unless format_result.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?
      query_params["events"] = events.to_s unless events.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_audittrail_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_audittrail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Single Document
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_delete(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_delete_with_http_info(doc_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Single Document
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_delete_with_http_info(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_delete ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_delete")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Events
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_events_get(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_events_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Events
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_events_get_with_http_info(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_events_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_events_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/events".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_events_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Document File
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_file_get(doc_id : String, lock_document : Bool? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_file_get_with_http_info(doc_id, lock_document, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Download Document File
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_file_get_with_http_info(doc_id : String, lock_document : Bool? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_file_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_file_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/file".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["lockDocument"] = lock_document.to_s unless lock_document.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_get(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_get_with_http_info(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Document Lock
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_lock_delete(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_lock_delete_with_http_info(doc_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Document Lock
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_lock_delete_with_http_info(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_lock_delete ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_lock_delete")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/lock".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_lock_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_lock_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Lock
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_lock_get(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_lock_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Lock
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_lock_get_with_http_info(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_lock_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_lock_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/lock".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_lock_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_lock_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Document Lock
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_lock_post(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_lock_post_with_http_info(doc_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Create Document Lock
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_lock_post_with_http_info(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_lock_post ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_lock_post")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/lock".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_lock_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_lock_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download All Document Version Attachments
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_major_version_minor_version_attachments_file_get(doc_id : String, major_version : String, minor_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_major_version_minor_version_attachments_file_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Download All Document Version Attachments
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_major_version_minor_version_attachments_file_get_with_http_info(doc_id : String, major_version : String, minor_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_major_version_minor_version_attachments_file_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_major_version_minor_version_attachments_file_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_major_version_minor_version_attachments_file_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_major_version_minor_version_attachments_file_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_major_version_minor_version_attachments_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_major_version_minor_version_attachments_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Single Document Version
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_post(doc_id : String, suppress_rendition : String? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_post_with_http_info(doc_id, suppress_rendition, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Create Single Document Version
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_post_with_http_info(doc_id : String, suppress_rendition : String? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_post ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_post")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["suppressRendition"] = suppress_rendition.to_s unless suppress_rendition.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Single Document
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_put(doc_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_put_with_http_info(doc_id, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id)
      nil
    end

    # Update Single Document
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_put_with_http_info(doc_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_put ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_put")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-MigrationMode"] = x_vault_api_migration_mode
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Renditions
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_renditions_get(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_renditions_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Renditions
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_renditions_get_with_http_info(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_renditions_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_renditions_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/renditions".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_renditions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_renditions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Single Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @return [nil]
    def objects_documents_doc_id_renditions_rendition_type_delete(doc_id : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_renditions_rendition_type_delete_with_http_info(doc_id, rendition_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Single Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_renditions_rendition_type_delete_with_http_info(doc_id : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_renditions_rendition_type_delete ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_delete")
      end
      # verify the required parameter "rendition_type" is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        raise ArgumentError.new("Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_delete")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/renditions/{rendition_type}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "rendition_type" + "}", URI.encode_path(rendition_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_renditions_rendition_type_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_renditions_rendition_type_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Document Rendition File
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @return [nil]
    def objects_documents_doc_id_renditions_rendition_type_get(doc_id : String, rendition_type : String, steady_state : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_renditions_rendition_type_get_with_http_info(doc_id, rendition_type, steady_state, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download Document Rendition File
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_renditions_rendition_type_get_with_http_info(doc_id : String, rendition_type : String, steady_state : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_renditions_rendition_type_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_get")
      end
      # verify the required parameter "rendition_type" is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        raise ArgumentError.new("Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/renditions/{rendition_type}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "rendition_type" + "}", URI.encode_path(rendition_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["steadyState"] = steady_state.to_s unless steady_state.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_renditions_rendition_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_renditions_rendition_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Add Single Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @return [nil]
    def objects_documents_doc_id_renditions_rendition_type_post(doc_id : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_renditions_rendition_type_post_with_http_info(doc_id, rendition_type, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Add Single Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_renditions_rendition_type_post_with_http_info(doc_id : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_renditions_rendition_type_post ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_post")
      end
      # verify the required parameter "rendition_type" is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        raise ArgumentError.new("Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_post")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/renditions/{rendition_type}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "rendition_type" + "}", URI.encode_path(rendition_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_renditions_rendition_type_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_renditions_rendition_type_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Replace Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @return [nil]
    def objects_documents_doc_id_renditions_rendition_type_put(doc_id : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_renditions_rendition_type_put_with_http_info(doc_id, rendition_type, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Replace Document Rendition
    # @param doc_id [String] The document id field value.
    # @param rendition_type [String] The document rendition type.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_renditions_rendition_type_put_with_http_info(doc_id : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_renditions_rendition_type_put ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_put")
      end
      # verify the required parameter "rendition_type" is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        raise ArgumentError.new("Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_renditions_rendition_type_put")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/renditions/{rendition_type}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "rendition_type" + "}", URI.encode_path(rendition_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_renditions_rendition_type_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_renditions_rendition_type_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Remove Users & Groups from Roles on a Single Document
    # @param doc_id [String] The id value of the document from which to remove roles.
    # @param role_name_and_user_or_group [String] The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
    # @param id [String] The id value of the user or group to remove from the role.
    # @return [nil]
    def objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete(doc_id : String, role_name_and_user_or_group : String, id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete_with_http_info(doc_id, role_name_and_user_or_group, id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Remove Users &amp; Groups from Roles on a Single Document
    # @param doc_id [String] The id value of the document from which to remove roles.
    # @param role_name_and_user_or_group [String] The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
    # @param id [String] The id value of the user or group to remove from the role.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete_with_http_info(doc_id : String, role_name_and_user_or_group : String, id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete")
      end
      # verify the required parameter "role_name_and_user_or_group" is set
      if @api_client.config.client_side_validation && role_name_and_user_or_group.nil?
        raise ArgumentError.new("Missing the required parameter 'role_name_and_user_or_group' when calling DefaultApi.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete")
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "role_name_and_user_or_group" + "}", URI.encode_path(role_name_and_user_or_group.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Version Attachments
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_version_major_version_minor_version_attachments_get(doc_id : String, major_version : String, minor_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_version_major_version_minor_version_attachments_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Version Attachments
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_version_major_version_minor_version_attachments_get_with_http_info(doc_id : String, major_version : String, minor_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_version_major_version_minor_version_attachments_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_version_major_version_minor_version_attachments_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_version_major_version_minor_version_attachments_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_version_major_version_minor_version_attachments_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_version_major_version_minor_version_attachments_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_version_major_version_minor_version_attachments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Versions
    # @param doc_id [String] The document id field value.
    # @return [nil]
    def objects_documents_doc_id_versions_get(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Versions
    # @param doc_id [String] The document id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_get_with_http_info(doc_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Read Annotations by ID
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param annotation_id [String] The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get(doc_id : String, major_version : String, minor_version : String, annotation_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get_with_http_info(doc_id, major_version, minor_version, annotation_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Read Annotations by ID
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param annotation_id [String] The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get_with_http_info(doc_id : String, major_version : String, minor_version : String, annotation_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get")
      end
      # verify the required parameter "annotation_id" is set
      if @api_client.config.client_side_validation && annotation_id.nil?
        raise ArgumentError.new("Missing the required parameter 'annotation_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "annotation_id" + "}", URI.encode_path(annotation_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Read Replies of Parent Annotation
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param annotation_id [String] The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get(doc_id : String, major_version : String, minor_version : String, annotation_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get_with_http_info(doc_id, major_version, minor_version, annotation_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Read Replies of Parent Annotation
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param annotation_id [String] The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get_with_http_info(doc_id : String, major_version : String, minor_version : String, annotation_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get")
      end
      # verify the required parameter "annotation_id" is set
      if @api_client.config.client_side_validation && annotation_id.nil?
        raise ArgumentError.new("Missing the required parameter 'annotation_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "annotation_id" + "}", URI.encode_path(annotation_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Export Document Version Annotations to PDF
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Export Document Version Annotations to PDF
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get_with_http_info(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Import Document Version Annotations from PDF
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post_with_http_info(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Import Document Version Annotations from PDF
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post_with_http_info(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Read Annotations by Document Version and Type
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_get(doc_id : String, major_version : String, minor_version : String, limit : String? = nil, offset : String? = nil, annotation_types : String? = nil, pagination_id : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_annotations_get_with_http_info(doc_id, major_version, minor_version, limit, offset, annotation_types, pagination_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Read Annotations by Document Version and Type
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_get_with_http_info(doc_id : String, major_version : String, minor_version : String, limit : String? = nil, offset : String? = nil, annotation_types : String? = nil, pagination_id : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?
      query_params["annotation_types"] = annotation_types.to_s unless annotation_types.nil?
      query_params["pagination_id"] = pagination_id.to_s unless pagination_id.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_annotations_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_annotations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Document Version Attachment Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param attachment_id [String] The id field value of the attachment.
    # @param attachment_version [String] The version of the attachment.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get(doc_id : String, major_version : String, minor_version : String, attachment_id : String, attachment_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id, major_version, minor_version, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Download Document Version Attachment Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param attachment_id [String] The id field value of the attachment.
    # @param attachment_version [String] The version of the attachment.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id : String, major_version : String, minor_version : String, attachment_id : String, attachment_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # verify the required parameter "attachment_version" is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s)).sub("{" + "attachment_version" + "}", URI.encode_path(attachment_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Version Attachment Versions
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param attachment_id [String] The id of the document attachment to retrieve.
    # @param attachment_version [String] Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get(doc_id : String, major_version : String, minor_version : String, attachment_id : String, attachment_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id, major_version, minor_version, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Version Attachment Versions
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param attachment_id [String] The id of the document attachment to retrieve.
    # @param attachment_version [String] Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id : String, major_version : String, minor_version : String, attachment_id : String, attachment_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get")
      end
      # verify the required parameter "attachment_version" is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s)).sub("{" + "attachment_version" + "}", URI.encode_path(attachment_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Single Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_delete(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_delete_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Single Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_delete_with_http_info(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_delete ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_delete")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_delete")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_delete")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Version Notes as CSV
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Version Notes as CSV
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get_with_http_info(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Document Event
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_events_post(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_events_post_with_http_info(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Document Event
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_events_post_with_http_info(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_events_post ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_events_post")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_events_post")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_events_post")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_events_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_events_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Video Annotations
    # @param doc_id [String] The video document id field value.
    # @param major_version [String] The video document major_version_number__v field value.
    # @param minor_version [String] The video document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Video Annotations
    # @param doc_id [String] The video document id field value.
    # @param major_version [String] The video document major_version_number__v field value.
    # @param minor_version [String] The video document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get_with_http_info(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Document Version File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_file_get(doc_id : String, major_version : String, minor_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_file_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Download Document Version File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_file_get_with_http_info(doc_id : String, major_version : String, minor_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_file_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_file_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_file_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_file_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_get(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_get_with_http_info(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_put(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_put_with_http_info(doc_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id)
      nil
    end

    # Update Document Version
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_put_with_http_info(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_put ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_put")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_put")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_put")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-MigrationMode"] = x_vault_api_migration_mode
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Relationships
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_get(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_relationships_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Relationships
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_get_with_http_info(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_relationships_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Single Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_post(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_relationships_post_with_http_info(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Single Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_post_with_http_info(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_post ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_post")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_post")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_post")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_relationships_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Single Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param relationship_id [String] The relationship id field value. See Retrieve Document Relationships.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete(doc_id : String, major_version : String, minor_version : String, relationship_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(doc_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Single Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param relationship_id [String] The relationship id field value. See Retrieve Document Relationships.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(doc_id : String, major_version : String, minor_version : String, relationship_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete")
      end
      # verify the required parameter "relationship_id" is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        raise ArgumentError.new("Missing the required parameter 'relationship_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "relationship_id" + "}", URI.encode_path(relationship_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param relationship_id [String] The relationship id field value. See Retrieve Document Relationships.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get(doc_id : String, major_version : String, minor_version : String, relationship_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(doc_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Relationship
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param relationship_id [String] The relationship id field value. See Retrieve Document Relationships.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(doc_id : String, major_version : String, minor_version : String, relationship_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get")
      end
      # verify the required parameter "relationship_id" is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        raise ArgumentError.new("Missing the required parameter 'relationship_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "relationship_id" + "}", URI.encode_path(relationship_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Version Renditions
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_get(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_renditions_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Version Renditions
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_get_with_http_info(doc_id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_renditions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete(doc_id : String, major_version : String, minor_version : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete_with_http_info(doc_id : String, major_version : String, minor_version : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete")
      end
      # verify the required parameter "rendition_type" is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        raise ArgumentError.new("Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "rendition_type" + "}", URI.encode_path(rendition_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Document Version Rendition File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get(doc_id : String, major_version : String, minor_version : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download Document Version Rendition File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get_with_http_info(doc_id : String, major_version : String, minor_version : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get")
      end
      # verify the required parameter "rendition_type" is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        raise ArgumentError.new("Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "rendition_type" + "}", URI.encode_path(rendition_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Upload Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post(doc_id : String, major_version : String, minor_version : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Upload Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post_with_http_info(doc_id : String, major_version : String, minor_version : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post")
      end
      # verify the required parameter "rendition_type" is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        raise ArgumentError.new("Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "rendition_type" + "}", URI.encode_path(rendition_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Replace Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put(doc_id : String, major_version : String, minor_version : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Replace Document Version Rendition
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @param rendition_type [String] The document rendition type.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put_with_http_info(doc_id : String, major_version : String, minor_version : String, rendition_type : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put")
      end
      # verify the required parameter "rendition_type" is set
      if @api_client.config.client_side_validation && rendition_type.nil?
        raise ArgumentError.new("Missing the required parameter 'rendition_type' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "rendition_type" + "}", URI.encode_path(rendition_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Document Version Thumbnail File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [nil]
    def objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get(doc_id : String, major_version : String, minor_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Download Document Version Thumbnail File
    # @param doc_id [String] The document id field value.
    # @param major_version [String] The document major_version_number__v field value.
    # @param minor_version [String] The document minor_version_number__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get_with_http_info(doc_id : String, major_version : String, minor_version : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get ..."}
      end
      # verify the required parameter "doc_id" is set
      if @api_client.config.client_side_validation && doc_id.nil?
        raise ArgumentError.new("Missing the required parameter 'doc_id' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get")
      end
      # resource path
      local_var_path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail".sub("{" + "doc_id" + "}", URI.encode_path(doc_id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Documents
    # @return [nil]
    def objects_documents_get(named_filter : String? = nil, scope : String? = nil, versionscope : String? = nil, search : String? = nil, limit : String? = nil, sort : String? = nil, start : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_get_with_http_info(named_filter, scope, versionscope, search, limit, sort, start, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Documents
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_get_with_http_info(named_filter : String? = nil, scope : String? = nil, versionscope : String? = nil, search : String? = nil, limit : String? = nil, sort : String? = nil, start : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_get ..."}
      end
      # resource path
      local_var_path = "/objects/documents"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["named_filter"] = named_filter.to_s unless named_filter.nil?
      query_params["scope"] = scope.to_s unless scope.nil?
      query_params["versionscope"] = versionscope.to_s unless versionscope.nil?
      query_params["search"] = search.to_s unless search.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["sort"] = sort.to_s unless sort.nil?
      query_params["start"] = start.to_s unless start.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Document Roles
    # @param id [String] 
    # @return [nil]
    def objects_documents_id_roles_get(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_id_roles_get_with_http_info(id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Document Roles
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_roles_get_with_http_info(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_id_roles_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_roles_get")
      end
      # resource path
      local_var_path = "/objects/documents/{id}/roles".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_id_roles_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_id_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Assign Users & Groups to Roles on a Single Document
    # @param id [String] 
    # @return [nil]
    def objects_documents_id_roles_post(id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_id_roles_post_with_http_info(id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Assign Users &amp; Groups to Roles on a Single Document
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_roles_post_with_http_info(id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_id_roles_post ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_roles_post")
      end
      # resource path
      local_var_path = "/objects/documents/{id}/roles".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_id_roles_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_id_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Role
    # @param id [String] The document &#x60;id&#x60;.
    # @param role_name [String] The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
    # @return [nil]
    def objects_documents_id_roles_role_name_get(id : String, role_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_id_roles_role_name_get_with_http_info(id, role_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Role
    # @param id [String] The document &#x60;id&#x60;.
    # @param role_name [String] The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_roles_role_name_get_with_http_info(id : String, role_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_id_roles_role_name_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_roles_role_name_get")
      end
      # verify the required parameter "role_name" is set
      if @api_client.config.client_side_validation && role_name.nil?
        raise ArgumentError.new("Missing the required parameter 'role_name' when calling DefaultApi.objects_documents_id_roles_role_name_get")
      end
      # resource path
      local_var_path = "/objects/documents/{id}/roles/{role_name}".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "role_name" + "}", URI.encode_path(role_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_id_roles_role_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_id_roles_role_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document User Actions
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @return [nil]
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get(id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id, major_version, minor_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document User Actions
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id : String, major_version : String, minor_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get")
      end
      # resource path
      local_var_path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Entry Criteria
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @param name__v [String] The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
    # @return [nil]
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get(id : String, major_version : String, minor_version : String, name__v : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id, major_version, minor_version, name__v, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Entry Criteria
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @param name__v [String] The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id : String, major_version : String, minor_version : String, name__v : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get")
      end
      # verify the required parameter "name__v" is set
      if @api_client.config.client_side_validation && name__v.nil?
        raise ArgumentError.new("Missing the required parameter 'name__v' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get")
      end
      # resource path
      local_var_path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "name__v" + "}", URI.encode_path(name__v.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Document User Action
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @param name__v [String] The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
    # @return [nil]
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put(id : String, major_version : String, minor_version : String, name__v : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id, major_version, minor_version, name__v, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Initiate Document User Action
    # @param id [String] The document id field value from which to retrieve available user actions.
    # @param major_version [String] The major version number of the document.
    # @param minor_version [String] The minor version number of the document.
    # @param name__v [String] The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id : String, major_version : String, minor_version : String, name__v : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put")
      end
      # verify the required parameter "major_version" is set
      if @api_client.config.client_side_validation && major_version.nil?
        raise ArgumentError.new("Missing the required parameter 'major_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put")
      end
      # verify the required parameter "minor_version" is set
      if @api_client.config.client_side_validation && minor_version.nil?
        raise ArgumentError.new("Missing the required parameter 'minor_version' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put")
      end
      # verify the required parameter "name__v" is set
      if @api_client.config.client_side_validation && name__v.nil?
        raise ArgumentError.new("Missing the required parameter 'name__v' when calling DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put")
      end
      # resource path
      local_var_path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "major_version" + "}", URI.encode_path(major_version.to_s)).sub("{" + "minor_version" + "}", URI.encode_path(minor_version.to_s)).sub("{" + "name__v" + "}", URI.encode_path(name__v.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve User Actions on Multiple Documents
    # @return [nil]
    def objects_documents_lifecycle_actions_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_lifecycle_actions_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Retrieve User Actions on Multiple Documents
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_lifecycle_actions_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_lifecycle_actions_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/lifecycle_actions"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_lifecycle_actions_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_lifecycle_actions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Bulk Document User Actions
    # @param user_action_name [String] The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
    # @return [nil]
    def objects_documents_lifecycle_actions_user_action_name_put(user_action_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_lifecycle_actions_user_action_name_put_with_http_info(user_action_name, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Initiate Bulk Document User Actions
    # @param user_action_name [String] The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_lifecycle_actions_user_action_name_put_with_http_info(user_action_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_lifecycle_actions_user_action_name_put ..."}
      end
      # verify the required parameter "user_action_name" is set
      if @api_client.config.client_side_validation && user_action_name.nil?
        raise ArgumentError.new("Missing the required parameter 'user_action_name' when calling DefaultApi.objects_documents_lifecycle_actions_user_action_name_put")
      end
      # resource path
      local_var_path = "/objects/documents/lifecycle_actions/{user_action_name}".sub("{" + "user_action_name" + "}", URI.encode_path(user_action_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_lifecycle_actions_user_action_name_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_lifecycle_actions_user_action_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Single Document
    # @return [nil]
    def objects_documents_post(authorization : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_post_with_http_info(authorization, accept, x_vault_api_migration_mode, x_vault_api_client_id)
      nil
    end

    # Create Single Document
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_post_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-MigrationMode"] = x_vault_api_migration_mode
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Multiple Document Relationships
    # @return [nil]
    def objects_documents_relationships_batch_delete(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_relationships_batch_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Delete Multiple Document Relationships
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_relationships_batch_delete_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_relationships_batch_delete ..."}
      end
      # resource path
      local_var_path = "/objects/documents/relationships/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_relationships_batch_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_relationships_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Multiple Document Relationships
    # @return [nil]
    def objects_documents_relationships_batch_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_relationships_batch_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Multiple Document Relationships
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_relationships_batch_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_relationships_batch_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/relationships/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_relationships_batch_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_relationships_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Multiple Document Renditions
    # @return [nil]
    def objects_documents_renditions_batch_delete(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_renditions_batch_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Delete Multiple Document Renditions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_renditions_batch_delete_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_renditions_batch_delete ..."}
      end
      # resource path
      local_var_path = "/objects/documents/renditions/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_renditions_batch_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_renditions_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Add Multiple Document Renditions
    # @return [nil]
    def objects_documents_renditions_batch_post(id_param : String? = nil, large_size_asset : String? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_renditions_batch_post_with_http_info(id_param, large_size_asset, authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id)
      nil
    end

    # Add Multiple Document Renditions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_renditions_batch_post_with_http_info(id_param : String? = nil, large_size_asset : String? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_renditions_batch_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/renditions/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["idParam"] = id_param.to_s unless id_param.nil?
      query_params["largeSizeAsset"] = large_size_asset.to_s unless large_size_asset.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-MigrationMode"] = x_vault_api_migration_mode
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_renditions_batch_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_renditions_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Remove Users and Groups from Roles on Multiple Documents & Binders
    # @return [nil]
    def objects_documents_roles_batch_delete(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_roles_batch_delete_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Remove Users and Groups from Roles on Multiple Documents &amp; Binders
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_roles_batch_delete_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_roles_batch_delete ..."}
      end
      # resource path
      local_var_path = "/objects/documents/roles/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_roles_batch_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_roles_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Assign Users & Groups to Roles on Multiple Documents & Binders
    # @return [nil]
    def objects_documents_roles_batch_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_roles_batch_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_roles_batch_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_roles_batch_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/roles/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_roles_batch_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_roles_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Template Collection
    # @return [nil]
    def objects_documents_templates_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_templates_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Template Collection
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_templates_get ..."}
      end
      # resource path
      local_var_path = "/objects/documents/templates"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_templates_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Single Document Template
    # @return [nil]
    def objects_documents_templates_post(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_templates_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Create Single Document Template
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_post_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_templates_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/templates"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_templates_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_templates_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Multiple Document Templates
    # @return [nil]
    def objects_documents_templates_put(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_templates_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Multiple Document Templates
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_put_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_templates_put ..."}
      end
      # resource path
      local_var_path = "/objects/documents/templates"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_templates_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_templates_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Basic Document Template
    # @param template_name [String] The document template name__v field value.
    # @return [nil]
    def objects_documents_templates_template_name_delete(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_templates_template_name_delete_with_http_info(template_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Basic Document Template
    # @param template_name [String] The document template name__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_template_name_delete_with_http_info(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_templates_template_name_delete ..."}
      end
      # verify the required parameter "template_name" is set
      if @api_client.config.client_side_validation && template_name.nil?
        raise ArgumentError.new("Missing the required parameter 'template_name' when calling DefaultApi.objects_documents_templates_template_name_delete")
      end
      # resource path
      local_var_path = "/objects/documents/templates/{template_name}".sub("{" + "template_name" + "}", URI.encode_path(template_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_templates_template_name_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_templates_template_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Document Template File
    # @param template_name [String] The document template name__v field value.
    # @return [nil]
    def objects_documents_templates_template_name_file_get(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_templates_template_name_file_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download Document Template File
    # @param template_name [String] The document template name__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_template_name_file_get_with_http_info(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_templates_template_name_file_get ..."}
      end
      # verify the required parameter "template_name" is set
      if @api_client.config.client_side_validation && template_name.nil?
        raise ArgumentError.new("Missing the required parameter 'template_name' when calling DefaultApi.objects_documents_templates_template_name_file_get")
      end
      # resource path
      local_var_path = "/objects/documents/templates/{template_name}/file".sub("{" + "template_name" + "}", URI.encode_path(template_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_templates_template_name_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_templates_template_name_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Document Template Attributes
    # @param template_name [String] The document template name__v field value.
    # @return [nil]
    def objects_documents_templates_template_name_get(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_templates_template_name_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Document Template Attributes
    # @param template_name [String] The document template name__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_template_name_get_with_http_info(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_templates_template_name_get ..."}
      end
      # verify the required parameter "template_name" is set
      if @api_client.config.client_side_validation && template_name.nil?
        raise ArgumentError.new("Missing the required parameter 'template_name' when calling DefaultApi.objects_documents_templates_template_name_get")
      end
      # resource path
      local_var_path = "/objects/documents/templates/{template_name}".sub("{" + "template_name" + "}", URI.encode_path(template_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_templates_template_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_templates_template_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Single Document Template
    # @param template_name [String] The document template name__v field value.
    # @return [nil]
    def objects_documents_templates_template_name_put(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_templates_template_name_put_with_http_info(template_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Update Single Document Template
    # @param template_name [String] The document template name__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_templates_template_name_put_with_http_info(template_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_templates_template_name_put ..."}
      end
      # verify the required parameter "template_name" is set
      if @api_client.config.client_side_validation && template_name.nil?
        raise ArgumentError.new("Missing the required parameter 'template_name' when calling DefaultApi.objects_documents_templates_template_name_put")
      end
      # resource path
      local_var_path = "/objects/documents/templates/{template_name}".sub("{" + "template_name" + "}", URI.encode_path(template_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_templates_template_name_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_templates_template_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Document Tokens
    # @return [nil]
    def objects_documents_tokens_post(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_tokens_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Document Tokens
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_tokens_post_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_tokens_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/tokens"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_tokens_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_tokens_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Export Document Versions
    # @return [nil]
    def objects_documents_versions_batch_actions_fileextract_post(source : Bool? = nil, renditions : Bool? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_versions_batch_actions_fileextract_post_with_http_info(source, renditions, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Export Document Versions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_versions_batch_actions_fileextract_post_with_http_info(source : Bool? = nil, renditions : Bool? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_versions_batch_actions_fileextract_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/versions/batch/actions/fileextract"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["source"] = source.to_s unless source.nil?
      query_params["renditions"] = renditions.to_s unless renditions.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_versions_batch_actions_fileextract_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_versions_batch_actions_fileextract_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Multiple Document Versions
    # @return [nil]
    def objects_documents_versions_batch_delete(id_param : String? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_versions_batch_delete_with_http_info(id_param, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Delete Multiple Document Versions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_versions_batch_delete_with_http_info(id_param : String? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_versions_batch_delete ..."}
      end
      # resource path
      local_var_path = "/objects/documents/versions/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["idParam"] = id_param.to_s unless id_param.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_versions_batch_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_versions_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Multiple Document Versions
    # @return [nil]
    def objects_documents_versions_batch_post(id_param : String? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_migration_mode : String? = nil, x_vault_api_client_id : String? = nil)
      objects_documents_versions_batch_post_with_http_info(id_param, authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id)
      nil
    end

    # Create Multiple Document Versions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_documents_versions_batch_post_with_http_info(id_param : String? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_migration_mode : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_documents_versions_batch_post ..."}
      end
      # resource path
      local_var_path = "/objects/documents/versions/batch"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["idParam"] = id_param.to_s unless id_param.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-MigrationMode"] = x_vault_api_migration_mode
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_documents_versions_batch_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_documents_versions_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Domain Information
    # @return [nil]
    def objects_domain_get(include_application : Bool? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_domain_get_with_http_info(include_application, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Retrieve Domain Information
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_domain_get_with_http_info(include_application : Bool? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_domain_get ..."}
      end
      # resource path
      local_var_path = "/objects/domain"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["include_application"] = include_application.to_s unless include_application.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_domain_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_domain_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Domains
    # @return [nil]
    def objects_domains_get(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_domains_get_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Retrieve Domains
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_domains_get_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_domains_get ..."}
      end
      # resource path
      local_var_path = "/objects/domains"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_domains_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Add EDL Matched Documents
    # @return [nil]
    def objects_edl_matched_documents_batch_actions_add_post(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_edl_matched_documents_batch_actions_add_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Add EDL Matched Documents
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_edl_matched_documents_batch_actions_add_post_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_edl_matched_documents_batch_actions_add_post ..."}
      end
      # resource path
      local_var_path = "/objects/edl_matched_documents/batch/actions/add"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_edl_matched_documents_batch_actions_add_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_edl_matched_documents_batch_actions_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Remove EDL Matched Documents
    # @return [nil]
    def objects_edl_matched_documents_batch_actions_remove_post(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_edl_matched_documents_batch_actions_remove_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Remove EDL Matched Documents
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_edl_matched_documents_batch_actions_remove_post_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_edl_matched_documents_batch_actions_remove_post ..."}
      end
      # resource path
      local_var_path = "/objects/edl_matched_documents/batch/actions/remove"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_edl_matched_documents_batch_actions_remove_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_edl_matched_documents_batch_actions_remove_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Auto Managed Groups
    # @return [nil]
    def objects_groups_auto_get(limit : String? = nil, offset : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_groups_auto_get_with_http_info(limit, offset, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Auto Managed Groups
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_auto_get_with_http_info(limit : String? = nil, offset : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_groups_auto_get ..."}
      end
      # resource path
      local_var_path = "/objects/groups/auto"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_groups_auto_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_groups_auto_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Groups
    # @return [nil]
    def objects_groups_get(include_implied : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_groups_get_with_http_info(include_implied, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Groups
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_get_with_http_info(include_implied : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_groups_get ..."}
      end
      # resource path
      local_var_path = "/objects/groups"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["includeImplied"] = include_implied.to_s unless include_implied.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_groups_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Group
    # @param group_id [String] The group id field value.
    # @return [nil]
    def objects_groups_group_id_delete(group_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_groups_group_id_delete_with_http_info(group_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Group
    # @param group_id [String] The group id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_group_id_delete_with_http_info(group_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_groups_group_id_delete ..."}
      end
      # verify the required parameter "group_id" is set
      if @api_client.config.client_side_validation && group_id.nil?
        raise ArgumentError.new("Missing the required parameter 'group_id' when calling DefaultApi.objects_groups_group_id_delete")
      end
      # resource path
      local_var_path = "/objects/groups/{group_id}".sub("{" + "group_id" + "}", URI.encode_path(group_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_groups_group_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_groups_group_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Group
    # @param group_id [String] The group id field value.
    # @return [nil]
    def objects_groups_group_id_get(group_id : String, include_implied : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_groups_group_id_get_with_http_info(group_id, include_implied, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Group
    # @param group_id [String] The group id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_group_id_get_with_http_info(group_id : String, include_implied : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_groups_group_id_get ..."}
      end
      # verify the required parameter "group_id" is set
      if @api_client.config.client_side_validation && group_id.nil?
        raise ArgumentError.new("Missing the required parameter 'group_id' when calling DefaultApi.objects_groups_group_id_get")
      end
      # resource path
      local_var_path = "/objects/groups/{group_id}".sub("{" + "group_id" + "}", URI.encode_path(group_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["includeImplied"] = include_implied.to_s unless include_implied.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_groups_group_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_groups_group_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Group
    # @param group_id [String] The group id field value.
    # @return [nil]
    def objects_groups_group_id_put(group_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_groups_group_id_put_with_http_info(group_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Group
    # @param group_id [String] The group id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_group_id_put_with_http_info(group_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_groups_group_id_put ..."}
      end
      # verify the required parameter "group_id" is set
      if @api_client.config.client_side_validation && group_id.nil?
        raise ArgumentError.new("Missing the required parameter 'group_id' when calling DefaultApi.objects_groups_group_id_put")
      end
      # resource path
      local_var_path = "/objects/groups/{group_id}".sub("{" + "group_id" + "}", URI.encode_path(group_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_groups_group_id_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_groups_group_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Group 
    # @return [nil]
    def objects_groups_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_groups_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Group 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_groups_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_groups_post ..."}
      end
      # resource path
      local_var_path = "/objects/groups"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_groups_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Application License Usage
    # @return [nil]
    def objects_licenses_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_licenses_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Application License Usage
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_licenses_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_licenses_get ..."}
      end
      # resource path
      local_var_path = "/objects/licenses"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_licenses_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_licenses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Multi-Record Workflows
    # @return [nil]
    def objects_objectworkflows_actions_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_actions_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Multi-Record Workflows
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_actions_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_actions_get ..."}
      end
      # resource path
      local_var_path = "/objects/objectworkflows/actions"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_actions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Multi-Record Workflow Details
    # @param workflow_name [String] 
    # @return [nil]
    def objects_objectworkflows_actions_workflow_name_get(workflow_name : String, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_actions_workflow_name_get_with_http_info(workflow_name, authorization, x_vault_api_client_id)
      nil
    end

    # Retrieve Multi-Record Workflow Details
    # @param workflow_name [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_actions_workflow_name_get_with_http_info(workflow_name : String, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_actions_workflow_name_get ..."}
      end
      # verify the required parameter "workflow_name" is set
      if @api_client.config.client_side_validation && workflow_name.nil?
        raise ArgumentError.new("Missing the required parameter 'workflow_name' when calling DefaultApi.objects_objectworkflows_actions_workflow_name_get")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/actions/{workflow_name}".sub("{" + "workflow_name" + "}", URI.encode_path(workflow_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_actions_workflow_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_actions_workflow_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Multi-Record Workflow
    # @param workflow_name [String] 
    # @return [nil]
    def objects_objectworkflows_actions_workflow_name_post(workflow_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_actions_workflow_name_post_with_http_info(workflow_name, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Initiate Multi-Record Workflow
    # @param workflow_name [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_actions_workflow_name_post_with_http_info(workflow_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_actions_workflow_name_post ..."}
      end
      # verify the required parameter "workflow_name" is set
      if @api_client.config.client_side_validation && workflow_name.nil?
        raise ArgumentError.new("Missing the required parameter 'workflow_name' when calling DefaultApi.objects_objectworkflows_actions_workflow_name_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/actions/{workflow_name}".sub("{" + "workflow_name" + "}", URI.encode_path(workflow_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_actions_workflow_name_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_actions_workflow_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Workflows
    # @return [nil]
    def objects_objectworkflows_get(object__v : String? = nil, record_id__v : String? = nil, participant : String? = nil, status__v : String? = nil, offset : String? = nil, page_size : String? = nil, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_get_with_http_info(object__v, record_id__v, participant, status__v, offset, page_size, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Workflows
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_get_with_http_info(object__v : String? = nil, record_id__v : String? = nil, participant : String? = nil, status__v : String? = nil, offset : String? = nil, page_size : String? = nil, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_get ..."}
      end
      # resource path
      local_var_path = "/objects/objectworkflows"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["object__v"] = object__v.to_s unless object__v.nil?
      query_params["record_id__v"] = record_id__v.to_s unless record_id__v.nil?
      query_params["participant"] = participant.to_s unless participant.nil?
      query_params["status__v"] = status__v.to_s unless status__v.nil?
      query_params["offset"] = offset.to_s unless offset.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Workflow Tasks
    # @return [nil]
    def objects_objectworkflows_tasks_get(object__v : String? = nil, record_id__v : String? = nil, assignee__v : String? = nil, status__v : String? = nil, offset : String? = nil, page_size : String? = nil, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_get_with_http_info(object__v, record_id__v, assignee__v, status__v, offset, page_size, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Workflow Tasks
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_get_with_http_info(object__v : String? = nil, record_id__v : String? = nil, assignee__v : String? = nil, status__v : String? = nil, offset : String? = nil, page_size : String? = nil, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_get ..."}
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["object__v"] = object__v.to_s unless object__v.nil?
      query_params["record_id__v"] = record_id__v.to_s unless record_id__v.nil?
      query_params["assignee__v"] = assignee__v.to_s unless assignee__v.nil?
      query_params["status__v"] = status__v.to_s unless status__v.nil?
      query_params["offset"] = offset.to_s unless offset.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Accept Single Record Workflow Task
    # @param task_id [String] The task id field value.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_accept_post(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_accept_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Accept Single Record Workflow Task
    # @param task_id [String] The task id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_accept_post_with_http_info(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_accept_post ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_accept_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions/accept".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_accept_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_accept_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Cancel Workflow Task
    # @param task_id [String] The task id field value.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_cancel_post(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_cancel_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Cancel Workflow Task
    # @param task_id [String] The task id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_cancel_post_with_http_info(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_cancel_post ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_cancel_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions/cancel".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_cancel_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_cancel_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Complete Single Record Workflow Task
    # @param task_id [String] The task id field value.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_complete_post(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_complete_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Complete Single Record Workflow Task
    # @param task_id [String] The task id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_complete_post_with_http_info(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_complete_post ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_complete_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions/complete".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_complete_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_complete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Workflow Task Actions
    # @param task_id [String] The task id field value.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_get(task_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_get_with_http_info(task_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Workflow Task Actions
    # @param task_id [String] The task id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_get_with_http_info(task_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_get ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_get")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Accept Multi-item Workflow Task
    # @param task_id [String] The task id field value.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_mdwaccept_post(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_mdwaccept_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Accept Multi-item Workflow Task
    # @param task_id [String] The task id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_mdwaccept_post_with_http_info(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwaccept_post ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwaccept_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwaccept_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_mdwaccept_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Complete Multi-item Workflow Task
    # @param task_id [String] The task id field value.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Complete Multi-item Workflow Task
    # @param task_id [String] The task id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post_with_http_info(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Manage Multi-Item Workflow Content
    # @param task_id [String] The task id field value.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Manage Multi-Item Workflow Content
    # @param task_id [String] The task id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post_with_http_info(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Reassign Multi-item Workflow Task
    # @param task_id [String] The id of the task to reassign.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_mdwreassign_post(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_mdwreassign_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Reassign Multi-item Workflow Task
    # @param task_id [String] The id of the task to reassign.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_mdwreassign_post_with_http_info(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwreassign_post ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwreassign_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_mdwreassign_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_mdwreassign_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Reassign Single Record Workflow Task
    # @param task_id [String] The id of the task to reassign.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_reassign_post(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_reassign_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Reassign Single Record Workflow Task
    # @param task_id [String] The id of the task to reassign.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_reassign_post_with_http_info(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_reassign_post ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_reassign_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions/reassign".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_reassign_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_reassign_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Workflow Task Action Details
    # @param task_id [String] The task id field value.
    # @param task_action [String] The name of the task action retrieved from Retrieve Workflow Task Actions.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_task_action_get(task_id : String, task_action : String, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_task_action_get_with_http_info(task_id, task_action, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Workflow Task Action Details
    # @param task_id [String] The task id field value.
    # @param task_action [String] The name of the task action retrieved from Retrieve Workflow Task Actions.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_task_action_get_with_http_info(task_id : String, task_action : String, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_task_action_get ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_task_action_get")
      end
      # verify the required parameter "task_action" is set
      if @api_client.config.client_side_validation && task_action.nil?
        raise ArgumentError.new("Missing the required parameter 'task_action' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_task_action_get")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions/{task_action}".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s)).sub("{" + "task_action" + "}", URI.encode_path(task_action.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_task_action_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_task_action_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Undo Workflow Task Acceptance
    # @param task_id [String] The task id field value.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_undoaccept_post(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_undoaccept_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Undo Workflow Task Acceptance
    # @param task_id [String] The task id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_undoaccept_post_with_http_info(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_undoaccept_post ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_undoaccept_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions/undoaccept".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_undoaccept_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_undoaccept_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Workflow Task Due Date
    # @param task_id [String] The id of the task.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_actions_updateduedate_post(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_actions_updateduedate_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Workflow Task Due Date
    # @param task_id [String] The id of the task.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_actions_updateduedate_post_with_http_info(task_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_actions_updateduedate_post ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_actions_updateduedate_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}/actions/updateduedate".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_actions_updateduedate_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_actions_updateduedate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Workflow Task Details
    # @param task_id [String] The task id field value.
    # @return [nil]
    def objects_objectworkflows_tasks_task_id_get(task_id : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_tasks_task_id_get_with_http_info(task_id, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Workflow Task Details
    # @param task_id [String] The task id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_tasks_task_id_get_with_http_info(task_id : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_tasks_task_id_get ..."}
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.objects_objectworkflows_tasks_task_id_get")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/tasks/{task_id}".sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_tasks_task_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_tasks_task_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Workflow Actions
    # @param workflow_id [String] The workflow id field value.
    # @return [nil]
    def objects_objectworkflows_workflow_id_actions_get(workflow_id : String, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_workflow_id_actions_get_with_http_info(workflow_id, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Workflow Actions
    # @param workflow_id [String] The workflow id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_workflow_id_actions_get_with_http_info(workflow_id : String, loc : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_workflow_id_actions_get ..."}
      end
      # verify the required parameter "workflow_id" is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        raise ArgumentError.new("Missing the required parameter 'workflow_id' when calling DefaultApi.objects_objectworkflows_workflow_id_actions_get")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/{workflow_id}/actions".sub("{" + "workflow_id" + "}", URI.encode_path(workflow_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_workflow_id_actions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_workflow_id_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Workflow Action Details
    # @param workflow_id [String] The workflow id field value.
    # @param workflow_action [String] The workflow action name retrieved from Retrieve Workflow Actions.
    # @return [nil]
    def objects_objectworkflows_workflow_id_actions_workflow_action_get(workflow_id : String, workflow_action : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_workflow_id_actions_workflow_action_get_with_http_info(workflow_id, workflow_action, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Workflow Action Details
    # @param workflow_id [String] The workflow id field value.
    # @param workflow_action [String] The workflow action name retrieved from Retrieve Workflow Actions.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_workflow_id_actions_workflow_action_get_with_http_info(workflow_id : String, workflow_action : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_get ..."}
      end
      # verify the required parameter "workflow_id" is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        raise ArgumentError.new("Missing the required parameter 'workflow_id' when calling DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_get")
      end
      # verify the required parameter "workflow_action" is set
      if @api_client.config.client_side_validation && workflow_action.nil?
        raise ArgumentError.new("Missing the required parameter 'workflow_action' when calling DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_get")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}".sub("{" + "workflow_id" + "}", URI.encode_path(workflow_id.to_s)).sub("{" + "workflow_action" + "}", URI.encode_path(workflow_action.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_workflow_id_actions_workflow_action_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Workflow Action
    # @param workflow_id [String] The workflow id field value.
    # @param workflow_action [String] The workflow action name retrieved from Retrieve Workflow Actions.
    # @return [nil]
    def objects_objectworkflows_workflow_id_actions_workflow_action_post(workflow_id : String, workflow_action : String, documents__sys : String? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_workflow_id_actions_workflow_action_post_with_http_info(workflow_id, workflow_action, documents__sys, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Initiate Workflow Action
    # @param workflow_id [String] The workflow id field value.
    # @param workflow_action [String] The workflow action name retrieved from Retrieve Workflow Actions.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_workflow_id_actions_workflow_action_post_with_http_info(workflow_id : String, workflow_action : String, documents__sys : String? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_post ..."}
      end
      # verify the required parameter "workflow_id" is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        raise ArgumentError.new("Missing the required parameter 'workflow_id' when calling DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_post")
      end
      # verify the required parameter "workflow_action" is set
      if @api_client.config.client_side_validation && workflow_action.nil?
        raise ArgumentError.new("Missing the required parameter 'workflow_action' when calling DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_post")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}".sub("{" + "workflow_id" + "}", URI.encode_path(workflow_id.to_s)).sub("{" + "workflow_action" + "}", URI.encode_path(workflow_action.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["documents__sys"] = documents__sys.to_s unless documents__sys.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_workflow_id_actions_workflow_action_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_workflow_id_actions_workflow_action_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Workflow Details
    # @param workflow_id [String] The workflow id field value.
    # @return [nil]
    def objects_objectworkflows_workflow_id_get(workflow_id : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_objectworkflows_workflow_id_get_with_http_info(workflow_id, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Workflow Details
    # @param workflow_id [String] The workflow id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_objectworkflows_workflow_id_get_with_http_info(workflow_id : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_objectworkflows_workflow_id_get ..."}
      end
      # verify the required parameter "workflow_id" is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        raise ArgumentError.new("Missing the required parameter 'workflow_id' when calling DefaultApi.objects_objectworkflows_workflow_id_get")
      end
      # resource path
      local_var_path = "/objects/objectworkflows/{workflow_id}".sub("{" + "workflow_id" + "}", URI.encode_path(workflow_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_objectworkflows_workflow_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_objectworkflows_workflow_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Picklists
    # @return [nil]
    def objects_picklists_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_picklists_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Picklists
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_picklists_get ..."}
      end
      # resource path
      local_var_path = "/objects/picklists"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_picklists_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_picklists_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Picklist Values
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @return [nil]
    def objects_picklists_picklist_name_get(picklist_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_picklists_picklist_name_get_with_http_info(picklist_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Picklist Values
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_picklist_name_get_with_http_info(picklist_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_picklists_picklist_name_get ..."}
      end
      # verify the required parameter "picklist_name" is set
      if @api_client.config.client_side_validation && picklist_name.nil?
        raise ArgumentError.new("Missing the required parameter 'picklist_name' when calling DefaultApi.objects_picklists_picklist_name_get")
      end
      # resource path
      local_var_path = "/objects/picklists/{picklist_name}".sub("{" + "picklist_name" + "}", URI.encode_path(picklist_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_picklists_picklist_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_picklists_picklist_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Inactivate Picklist Value
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param picklist_value_name [String] The picklist value name field value (north_america__c, south_america__c, etc.)
    # @return [nil]
    def objects_picklists_picklist_name_picklist_value_name_delete(picklist_name : String, picklist_value_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_picklists_picklist_name_picklist_value_name_delete_with_http_info(picklist_name, picklist_value_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Inactivate Picklist Value
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param picklist_value_name [String] The picklist value name field value (north_america__c, south_america__c, etc.)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_picklist_name_picklist_value_name_delete_with_http_info(picklist_name : String, picklist_value_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_picklists_picklist_name_picklist_value_name_delete ..."}
      end
      # verify the required parameter "picklist_name" is set
      if @api_client.config.client_side_validation && picklist_name.nil?
        raise ArgumentError.new("Missing the required parameter 'picklist_name' when calling DefaultApi.objects_picklists_picklist_name_picklist_value_name_delete")
      end
      # verify the required parameter "picklist_value_name" is set
      if @api_client.config.client_side_validation && picklist_value_name.nil?
        raise ArgumentError.new("Missing the required parameter 'picklist_value_name' when calling DefaultApi.objects_picklists_picklist_name_picklist_value_name_delete")
      end
      # resource path
      local_var_path = "/objects/picklists/{picklist_name}/{picklist_value_name}".sub("{" + "picklist_name" + "}", URI.encode_path(picklist_name.to_s)).sub("{" + "picklist_value_name" + "}", URI.encode_path(picklist_value_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_picklists_picklist_name_picklist_value_name_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_picklists_picklist_name_picklist_value_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Picklist Value
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param picklist_value_name [String] The picklist value name field value (north_america__c, south_america__c, etc.)
    # @return [nil]
    def objects_picklists_picklist_name_picklist_value_name_put(picklist_name : String, picklist_value_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_picklists_picklist_name_picklist_value_name_put_with_http_info(picklist_name, picklist_value_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Picklist Value
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @param picklist_value_name [String] The picklist value name field value (north_america__c, south_america__c, etc.)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_picklist_name_picklist_value_name_put_with_http_info(picklist_name : String, picklist_value_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_picklists_picklist_name_picklist_value_name_put ..."}
      end
      # verify the required parameter "picklist_name" is set
      if @api_client.config.client_side_validation && picklist_name.nil?
        raise ArgumentError.new("Missing the required parameter 'picklist_name' when calling DefaultApi.objects_picklists_picklist_name_picklist_value_name_put")
      end
      # verify the required parameter "picklist_value_name" is set
      if @api_client.config.client_side_validation && picklist_value_name.nil?
        raise ArgumentError.new("Missing the required parameter 'picklist_value_name' when calling DefaultApi.objects_picklists_picklist_name_picklist_value_name_put")
      end
      # resource path
      local_var_path = "/objects/picklists/{picklist_name}/{picklist_value_name}".sub("{" + "picklist_name" + "}", URI.encode_path(picklist_name.to_s)).sub("{" + "picklist_value_name" + "}", URI.encode_path(picklist_value_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_picklists_picklist_name_picklist_value_name_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_picklists_picklist_name_picklist_value_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Picklist Values
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @return [nil]
    def objects_picklists_picklist_name_post(picklist_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_picklists_picklist_name_post_with_http_info(picklist_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Picklist Values
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_picklist_name_post_with_http_info(picklist_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_picklists_picklist_name_post ..."}
      end
      # verify the required parameter "picklist_name" is set
      if @api_client.config.client_side_validation && picklist_name.nil?
        raise ArgumentError.new("Missing the required parameter 'picklist_name' when calling DefaultApi.objects_picklists_picklist_name_post")
      end
      # resource path
      local_var_path = "/objects/picklists/{picklist_name}".sub("{" + "picklist_name" + "}", URI.encode_path(picklist_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_picklists_picklist_name_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_picklists_picklist_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Picklist Value Label
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @return [nil]
    def objects_picklists_picklist_name_put(picklist_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_picklists_picklist_name_put_with_http_info(picklist_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Picklist Value Label
    # @param picklist_name [String] The picklist name field value (license_type__v, product_family__c, region__c, etc.)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_picklists_picklist_name_put_with_http_info(picklist_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_picklists_picklist_name_put ..."}
      end
      # verify the required parameter "picklist_name" is set
      if @api_client.config.client_side_validation && picklist_name.nil?
        raise ArgumentError.new("Missing the required parameter 'picklist_name' when calling DefaultApi.objects_picklists_picklist_name_put")
      end
      # resource path
      local_var_path = "/objects/picklists/{picklist_name}".sub("{" + "picklist_name" + "}", URI.encode_path(picklist_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_picklists_picklist_name_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_picklists_picklist_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Build Production Vault
    # @return [nil]
    def objects_sandbox_actions_buildproduction_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_actions_buildproduction_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Build Production Vault
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_actions_buildproduction_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_actions_buildproduction_post ..."}
      end
      # resource path
      local_var_path = "/objects/sandbox/actions/buildproduction"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_actions_buildproduction_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_actions_buildproduction_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Promote to Production
    # @return [nil]
    def objects_sandbox_actions_promoteproduction_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_actions_promoteproduction_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Promote to Production
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_actions_promoteproduction_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_actions_promoteproduction_post ..."}
      end
      # resource path
      local_var_path = "/objects/sandbox/actions/promoteproduction"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_actions_promoteproduction_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_actions_promoteproduction_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Recheck Sandbox Usage Limit
    # @return [nil]
    def objects_sandbox_actions_recheckusage_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_actions_recheckusage_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Recheck Sandbox Usage Limit
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_actions_recheckusage_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_actions_recheckusage_post ..."}
      end
      # resource path
      local_var_path = "/objects/sandbox/actions/recheckusage"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_actions_recheckusage_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_actions_recheckusage_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Change Sandbox Size
    # @return [nil]
    def objects_sandbox_batch_changesize_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_batch_changesize_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Change Sandbox Size
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_batch_changesize_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_batch_changesize_post ..."}
      end
      # resource path
      local_var_path = "/objects/sandbox/batch/changesize"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_batch_changesize_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_batch_changesize_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Set Sandbox Entitlements
    # @return [nil]
    def objects_sandbox_entitlements_set_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_entitlements_set_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Set Sandbox Entitlements
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_entitlements_set_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_entitlements_set_post ..."}
      end
      # resource path
      local_var_path = "/objects/sandbox/entitlements/set"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_entitlements_set_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_entitlements_set_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Sandboxes
    # @return [nil]
    def objects_sandbox_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Sandboxes
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_get ..."}
      end
      # resource path
      local_var_path = "/objects/sandbox"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Sandbox
    # @param name [String] The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
    # @return [nil]
    def objects_sandbox_name_delete(name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_name_delete_with_http_info(name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Sandbox
    # @param name [String] The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_name_delete_with_http_info(name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_name_delete ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling DefaultApi.objects_sandbox_name_delete")
      end
      # resource path
      local_var_path = "/objects/sandbox/{name}".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_name_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create or Refresh Sandbox
    # @return [nil]
    def objects_sandbox_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create or Refresh Sandbox
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_post ..."}
      end
      # resource path
      local_var_path = "/objects/sandbox"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @return [nil]
    def objects_sandbox_snapshot_api_name_actions_update_post(api_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_snapshot_api_name_actions_update_post_with_http_info(api_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Update Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_snapshot_api_name_actions_update_post_with_http_info(api_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_snapshot_api_name_actions_update_post ..."}
      end
      # verify the required parameter "api_name" is set
      if @api_client.config.client_side_validation && api_name.nil?
        raise ArgumentError.new("Missing the required parameter 'api_name' when calling DefaultApi.objects_sandbox_snapshot_api_name_actions_update_post")
      end
      # resource path
      local_var_path = "/objects/sandbox/snapshot/{api_name}/actions/update".sub("{" + "api_name" + "}", URI.encode_path(api_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_snapshot_api_name_actions_update_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_snapshot_api_name_actions_update_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Upgrade Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @return [nil]
    def objects_sandbox_snapshot_api_name_actions_upgrade_post(api_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_snapshot_api_name_actions_upgrade_post_with_http_info(api_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Upgrade Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_snapshot_api_name_actions_upgrade_post_with_http_info(api_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_snapshot_api_name_actions_upgrade_post ..."}
      end
      # verify the required parameter "api_name" is set
      if @api_client.config.client_side_validation && api_name.nil?
        raise ArgumentError.new("Missing the required parameter 'api_name' when calling DefaultApi.objects_sandbox_snapshot_api_name_actions_upgrade_post")
      end
      # resource path
      local_var_path = "/objects/sandbox/snapshot/{api_name}/actions/upgrade".sub("{" + "api_name" + "}", URI.encode_path(api_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_snapshot_api_name_actions_upgrade_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_snapshot_api_name_actions_upgrade_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @return [nil]
    def objects_sandbox_snapshot_api_name_delete(api_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_snapshot_api_name_delete_with_http_info(api_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Sandbox Snapshot
    # @param api_name [String] The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_snapshot_api_name_delete_with_http_info(api_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_snapshot_api_name_delete ..."}
      end
      # verify the required parameter "api_name" is set
      if @api_client.config.client_side_validation && api_name.nil?
        raise ArgumentError.new("Missing the required parameter 'api_name' when calling DefaultApi.objects_sandbox_snapshot_api_name_delete")
      end
      # resource path
      local_var_path = "/objects/sandbox/snapshot/{api_name}".sub("{" + "api_name" + "}", URI.encode_path(api_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_snapshot_api_name_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_snapshot_api_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Sandbox Snapshots
    # @return [nil]
    def objects_sandbox_snapshot_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_snapshot_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Sandbox Snapshots
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_snapshot_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_snapshot_get ..."}
      end
      # resource path
      local_var_path = "/objects/sandbox/snapshot"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_snapshot_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_snapshot_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Sandbox Snapshot
    # @return [nil]
    def objects_sandbox_snapshot_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_snapshot_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Sandbox Snapshot
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_snapshot_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_snapshot_post ..."}
      end
      # resource path
      local_var_path = "/objects/sandbox/snapshot"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_snapshot_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Refresh Sandbox from Snapshot
    # @param vault_id [String] The Vault ID of the sandbox to be refreshed.
    # @return [nil]
    def objects_sandbox_vault_id_actions_refresh_post(vault_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_vault_id_actions_refresh_post_with_http_info(vault_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Refresh Sandbox from Snapshot
    # @param vault_id [String] The Vault ID of the sandbox to be refreshed.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_vault_id_actions_refresh_post_with_http_info(vault_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_vault_id_actions_refresh_post ..."}
      end
      # verify the required parameter "vault_id" is set
      if @api_client.config.client_side_validation && vault_id.nil?
        raise ArgumentError.new("Missing the required parameter 'vault_id' when calling DefaultApi.objects_sandbox_vault_id_actions_refresh_post")
      end
      # resource path
      local_var_path = "/objects/sandbox/{vault_id}/actions/refresh".sub("{" + "vault_id" + "}", URI.encode_path(vault_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_vault_id_actions_refresh_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_vault_id_actions_refresh_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Sandbox Details by ID
    # @param vault_id [String] 
    # @return [nil]
    def objects_sandbox_vault_id_get(vault_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_sandbox_vault_id_get_with_http_info(vault_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Sandbox Details by ID
    # @param vault_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_sandbox_vault_id_get_with_http_info(vault_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_sandbox_vault_id_get ..."}
      end
      # verify the required parameter "vault_id" is set
      if @api_client.config.client_side_validation && vault_id.nil?
        raise ArgumentError.new("Missing the required parameter 'vault_id' when calling DefaultApi.objects_sandbox_vault_id_get")
      end
      # resource path
      local_var_path = "/objects/sandbox/{vault_id}".sub("{" + "vault_id" + "}", URI.encode_path(vault_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_sandbox_vault_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_sandbox_vault_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Security Policies
    # @return [nil]
    def objects_securitypolicies_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_securitypolicies_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Security Policies
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_securitypolicies_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_securitypolicies_get ..."}
      end
      # resource path
      local_var_path = "/objects/securitypolicies"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_securitypolicies_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_securitypolicies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Security Policy
    # @param security_policy_name [String] Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
    # @return [nil]
    def objects_securitypolicies_security_policy_name_get(security_policy_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_securitypolicies_security_policy_name_get_with_http_info(security_policy_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Security Policy
    # @param security_policy_name [String] Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_securitypolicies_security_policy_name_get_with_http_info(security_policy_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_securitypolicies_security_policy_name_get ..."}
      end
      # verify the required parameter "security_policy_name" is set
      if @api_client.config.client_side_validation && security_policy_name.nil?
        raise ArgumentError.new("Missing the required parameter 'security_policy_name' when calling DefaultApi.objects_securitypolicies_security_policy_name_get")
      end
      # resource path
      local_var_path = "/objects/securitypolicies/{security_policy_name}".sub("{" + "security_policy_name" + "}", URI.encode_path(security_policy_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_securitypolicies_security_policy_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_securitypolicies_security_policy_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Users
    # @return [nil]
    def objects_users_get(vaults : String? = nil, exclude_vault_membership : String? = nil, exclude_app_licensing : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_get_with_http_info(vaults, exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Users
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_get_with_http_info(vaults : String? = nil, exclude_vault_membership : String? = nil, exclude_app_licensing : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_get ..."}
      end
      # resource path
      local_var_path = "/objects/users/"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["vaults"] = vaults.to_s unless vaults.nil?
      query_params["exclude_vault_membership"] = exclude_vault_membership.to_s unless exclude_vault_membership.nil?
      query_params["exclude_app_licensing"] = exclude_app_licensing.to_s unless exclude_app_licensing.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve User
    # @param id [String] The user id field value. Use the value me to get information for the currently authenticated user.
    # @return [nil]
    def objects_users_id_get(id : String, exclude_vault_membership : String? = nil, exclude_app_licensing : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_id_get_with_http_info(id, exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve User
    # @param id [String] The user id field value. Use the value me to get information for the currently authenticated user.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_id_get_with_http_info(id : String, exclude_vault_membership : String? = nil, exclude_app_licensing : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_id_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_users_id_get")
      end
      # resource path
      local_var_path = "/objects/users/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["exclude_vault_membership"] = exclude_vault_membership.to_s unless exclude_vault_membership.nil?
      query_params["exclude_app_licensing"] = exclude_app_licensing.to_s unless exclude_app_licensing.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve User Permissions
    # @param id [String] The ID of the user. Use the value me to retrieve information for the currently authenticated user.
    # @return [nil]
    def objects_users_id_permissions_get(id : String, filter : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_id_permissions_get_with_http_info(id, filter, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve User Permissions
    # @param id [String] The ID of the user. Use the value me to retrieve information for the currently authenticated user.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_id_permissions_get_with_http_info(id : String, filter : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_id_permissions_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_users_id_permissions_get")
      end
      # resource path
      local_var_path = "/objects/users/{id}/permissions".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["filter"] = filter.to_s unless filter.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_id_permissions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_id_permissions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Single User
    # @param id [String] The user id field value. Use the value me to get information for the currently authenticated user.
    # @return [nil]
    def objects_users_id_put(id : String, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_id_put_with_http_info(id, authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Update Single User
    # @param id [String] The user id field value. Use the value me to get information for the currently authenticated user.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_id_put_with_http_info(id : String, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_id_put ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.objects_users_id_put")
      end
      # resource path
      local_var_path = "/objects/users/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_id_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Validate Session User
    # @return [nil]
    def objects_users_me_get(exclude_vault_membership : String? = nil, exclude_app_licensing : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_me_get_with_http_info(exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Validate Session User
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_me_get_with_http_info(exclude_vault_membership : String? = nil, exclude_app_licensing : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_me_get ..."}
      end
      # resource path
      local_var_path = "/objects/users/me"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["exclude_vault_membership"] = exclude_vault_membership.to_s unless exclude_vault_membership.nil?
      query_params["exclude_app_licensing"] = exclude_app_licensing.to_s unless exclude_app_licensing.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_me_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_me_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Change My Password
    # @return [nil]
    def objects_users_me_password_post(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_me_password_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Change My Password
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_me_password_post_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_me_password_post ..."}
      end
      # resource path
      local_var_path = "/objects/users/me/password"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_me_password_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_me_password_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve My User Permissions
    # @return [nil]
    def objects_users_me_permissions_get(filter : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_me_permissions_get_with_http_info(filter, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve My User Permissions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_me_permissions_get_with_http_info(filter : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_me_permissions_get ..."}
      end
      # resource path
      local_var_path = "/objects/users/me/permissions"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["filter"] = filter.to_s unless filter.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_me_permissions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_me_permissions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update My User
    # @return [nil]
    def objects_users_me_put(authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_me_put_with_http_info(authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Update My User
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_me_put_with_http_info(authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_me_put ..."}
      end
      # resource path
      local_var_path = "/objects/users/me"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_me_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_me_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Single User
    # @return [nil]
    def objects_users_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Single User
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_post ..."}
      end
      # resource path
      local_var_path = "/objects/users"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Multiple Users
    # @return [nil]
    def objects_users_put(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_put_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Update Multiple Users
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_put_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_put ..."}
      end
      # resource path
      local_var_path = "/objects/users"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Disable User
    # @param user_id [String] The user id field value. 
    # @return [nil]
    def objects_users_user_id_delete(user_id : String, domain : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_user_id_delete_with_http_info(user_id, domain, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Disable User
    # @param user_id [String] The user id field value. 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_user_id_delete_with_http_info(user_id : String, domain : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_user_id_delete ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling DefaultApi.objects_users_user_id_delete")
      end
      # resource path
      local_var_path = "/objects/users/{user_id}".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["domain"] = domain.to_s unless domain.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_user_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_user_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Vault Membership
    # @param user_id [String] The user id field value.
    # @param vault_id [String] The system-managed id field value assigned to each vault in the domain.
    # @return [nil]
    def objects_users_user_id_vault_membership_vault_id_put(user_id : String, vault_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      objects_users_user_id_vault_membership_vault_id_put_with_http_info(user_id, vault_id, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Update Vault Membership
    # @param user_id [String] The user id field value.
    # @param vault_id [String] The system-managed id field value assigned to each vault in the domain.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_users_user_id_vault_membership_vault_id_put_with_http_info(user_id : String, vault_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_users_user_id_vault_membership_vault_id_put ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling DefaultApi.objects_users_user_id_vault_membership_vault_id_put")
      end
      # verify the required parameter "vault_id" is set
      if @api_client.config.client_side_validation && vault_id.nil?
        raise ArgumentError.new("Missing the required parameter 'vault_id' when calling DefaultApi.objects_users_user_id_vault_membership_vault_id_put")
      end
      # resource path
      local_var_path = "/objects/users/{user_id}/vault_membership/{vault_id}".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s)).sub("{" + "vault_id" + "}", URI.encode_path(vault_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.objects_users_user_id_vault_membership_vault_id_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_users_user_id_vault_membership_vault_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Vault Compare
    # @return [nil]
    def objects_vault_actions_compare_post(authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_vault_actions_compare_post_with_http_info(authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Vault Compare
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_vault_actions_compare_post_with_http_info(authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_vault_actions_compare_post ..."}
      end
      # resource path
      local_var_path = "/objects/vault/actions/compare"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_vault_actions_compare_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_vault_actions_compare_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Vault Configuration Report
    # @return [nil]
    def objects_vault_actions_configreport_post(authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      objects_vault_actions_configreport_post_with_http_info(authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Vault Configuration Report
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def objects_vault_actions_configreport_post_with_http_info(authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.objects_vault_actions_configreport_post ..."}
      end
      # resource path
      local_var_path = "/objects/vault/actions/configreport"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.objects_vault_actions_configreport_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#objects_vault_actions_configreport_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Component Definition Query
    # @return [nil]
    def query_components_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      query_components_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Component Definition Query
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def query_components_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.query_components_post ..."}
      end
      # resource path
      local_var_path = "/query/components"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.query_components_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#query_components_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Next Page URL
    # @param next_page [String] 
    # @return [nil]
    def query_next_page_post(next_page : String, authorization : String? = nil, accept : String? = nil, x_vault_api_describe_query : Bool? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      query_next_page_post_with_http_info(next_page, authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id)
      nil
    end

    # Next Page URL
    # @param next_page [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def query_next_page_post_with_http_info(next_page : String, authorization : String? = nil, accept : String? = nil, x_vault_api_describe_query : Bool? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.query_next_page_post ..."}
      end
      # verify the required parameter "next_page" is set
      if @api_client.config.client_side_validation && next_page.nil?
        raise ArgumentError.new("Missing the required parameter 'next_page' when calling DefaultApi.query_next_page_post")
      end
      # resource path
      local_var_path = "/query/{next_page}".sub("{" + "next_page" + "}", URI.encode_path(next_page.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-DescribeQuery"] = x_vault_api_describe_query
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.query_next_page_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#query_next_page_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Submitting a Query
    # @return [nil]
    def query_post(authorization : String? = nil, accept : String? = nil, x_vault_api_describe_query : Bool? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      query_post_with_http_info(authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id)
      nil
    end

    # Submitting a Query
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def query_post_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_describe_query : Bool? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.query_post ..."}
      end
      # resource path
      local_var_path = "/query"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-DescribeQuery"] = x_vault_api_describe_query
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.query_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#query_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Previous Page URL
    # @param previous_page [String] 
    # @return [nil]
    def query_previous_page_post(previous_page : String, authorization : String? = nil, accept : String? = nil, x_vault_api_describe_query : Bool? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      query_previous_page_post_with_http_info(previous_page, authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id)
      nil
    end

    # Previous Page URL
    # @param previous_page [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def query_previous_page_post_with_http_info(previous_page : String, authorization : String? = nil, accept : String? = nil, x_vault_api_describe_query : Bool? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.query_previous_page_post ..."}
      end
      # verify the required parameter "previous_page" is set
      if @api_client.config.client_side_validation && previous_page.nil?
        raise ArgumentError.new("Missing the required parameter 'previous_page' when calling DefaultApi.query_previous_page_post")
      end
      # resource path
      local_var_path = "/query/{previous_page}".sub("{" + "previous_page" + "}", URI.encode_path(previous_page.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-DescribeQuery"] = x_vault_api_describe_query
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.query_previous_page_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#query_previous_page_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Current User with SCIM
    # @return [nil]
    def scim_v2_me_get(attributes : String? = nil, excluded_attributes : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_me_get_with_http_info(attributes, excluded_attributes, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Current User with SCIM
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_me_get_with_http_info(attributes : String? = nil, excluded_attributes : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_me_get ..."}
      end
      # resource path
      local_var_path = "/scim/v2/Me"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["attributes"] = attributes.to_s unless attributes.nil?
      query_params["excludedAttributes"] = excluded_attributes.to_s unless excluded_attributes.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_me_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_me_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Current User with SCIM
    # @return [nil]
    def scim_v2_me_put(attributes : String? = nil, excluded_attributes : String? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_me_put_with_http_info(attributes, excluded_attributes, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Current User with SCIM
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_me_put_with_http_info(attributes : String? = nil, excluded_attributes : String? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_me_put ..."}
      end
      # resource path
      local_var_path = "/scim/v2/Me"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["attributes"] = attributes.to_s unless attributes.nil?
      query_params["excludedAttributes"] = excluded_attributes.to_s unless excluded_attributes.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_me_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_me_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All SCIM Resource Types
    # @return [nil]
    def scim_v2_resource_types_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_resource_types_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All SCIM Resource Types
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_resource_types_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_resource_types_get ..."}
      end
      # resource path
      local_var_path = "/scim/v2/ResourceTypes"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_resource_types_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_resource_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Single SCIM Resource Type
    # @param _type [String] A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
    # @return [nil]
    def scim_v2_resource_types_type_get(_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_resource_types_type_get_with_http_info(_type, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Single SCIM Resource Type
    # @param _type [String] A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_resource_types_type_get_with_http_info(_type : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_resource_types_type_get ..."}
      end
      # verify the required parameter "_type" is set
      if @api_client.config.client_side_validation && _type.nil?
        raise ArgumentError.new("Missing the required parameter '_type' when calling DefaultApi.scim_v2_resource_types_type_get")
      end
      # resource path
      local_var_path = "/scim/v2/ResourceTypes/{type}".sub("{" + "type" + "}", URI.encode_path(_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_resource_types_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_resource_types_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All SCIM Schema Information
    # @return [nil]
    def scim_v2_schemas_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_schemas_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All SCIM Schema Information
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_schemas_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_schemas_get ..."}
      end
      # resource path
      local_var_path = "/scim/v2/Schemas"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_schemas_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_schemas_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Single SCIM Schema Information
    # @param id [String] The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
    # @return [nil]
    def scim_v2_schemas_id_get(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_schemas_id_get_with_http_info(id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Single SCIM Schema Information
    # @param id [String] The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_schemas_id_get_with_http_info(id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_schemas_id_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.scim_v2_schemas_id_get")
      end
      # resource path
      local_var_path = "/scim/v2/Schemas/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_schemas_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_schemas_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve SCIM Provider
    # @return [nil]
    def scim_v2_service_provider_config_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_service_provider_config_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve SCIM Provider
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_service_provider_config_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_service_provider_config_get ..."}
      end
      # resource path
      local_var_path = "/scim/v2/ServiceProviderConfig"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_service_provider_config_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_service_provider_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve SCIM Resources
    # @param _type [String] The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
    # @return [nil]
    def scim_v2_type_get(_type : String, filter : String? = nil, attributes : String? = nil, excluded_attributes : String? = nil, sort_by : String? = nil, sort_order : String? = nil, start_index : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_type_get_with_http_info(_type, filter, attributes, excluded_attributes, sort_by, sort_order, start_index, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve SCIM Resources
    # @param _type [String] The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_type_get_with_http_info(_type : String, filter : String? = nil, attributes : String? = nil, excluded_attributes : String? = nil, sort_by : String? = nil, sort_order : String? = nil, start_index : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_type_get ..."}
      end
      # verify the required parameter "_type" is set
      if @api_client.config.client_side_validation && _type.nil?
        raise ArgumentError.new("Missing the required parameter '_type' when calling DefaultApi.scim_v2_type_get")
      end
      # resource path
      local_var_path = "/scim/v2/{type}".sub("{" + "type" + "}", URI.encode_path(_type.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["filter"] = filter.to_s unless filter.nil?
      query_params["attributes"] = attributes.to_s unless attributes.nil?
      query_params["excludedAttributes"] = excluded_attributes.to_s unless excluded_attributes.nil?
      query_params["sortBy"] = sort_by.to_s unless sort_by.nil?
      query_params["sortOrder"] = sort_order.to_s unless sort_order.nil?
      query_params["startIndex"] = start_index.to_s unless start_index.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_type_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Single SCIM Resource
    # @param _type [String] The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
    # @param id [String] The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
    # @return [nil]
    def scim_v2_type_id_get(_type : String, id : String, attributes : String? = nil, excluded_attributes : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_type_id_get_with_http_info(_type, id, attributes, excluded_attributes, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Single SCIM Resource
    # @param _type [String] The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
    # @param id [String] The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_type_id_get_with_http_info(_type : String, id : String, attributes : String? = nil, excluded_attributes : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_type_id_get ..."}
      end
      # verify the required parameter "_type" is set
      if @api_client.config.client_side_validation && _type.nil?
        raise ArgumentError.new("Missing the required parameter '_type' when calling DefaultApi.scim_v2_type_id_get")
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.scim_v2_type_id_get")
      end
      # resource path
      local_var_path = "/scim/v2/{type}/{id}".sub("{" + "type" + "}", URI.encode_path(_type.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["attributes"] = attributes.to_s unless attributes.nil?
      query_params["excludedAttributes"] = excluded_attributes.to_s unless excluded_attributes.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_type_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_type_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Users with SCIM
    # @return [nil]
    def scim_v2_users_get(filter : String? = nil, attributes : String? = nil, excluded_attributes : String? = nil, sort_by : String? = nil, sort_order : String? = nil, count : String? = nil, start_index : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_users_get_with_http_info(filter, attributes, excluded_attributes, sort_by, sort_order, count, start_index, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Users with SCIM
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_users_get_with_http_info(filter : String? = nil, attributes : String? = nil, excluded_attributes : String? = nil, sort_by : String? = nil, sort_order : String? = nil, count : String? = nil, start_index : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_users_get ..."}
      end
      # resource path
      local_var_path = "/scim/v2/Users"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["filter"] = filter.to_s unless filter.nil?
      query_params["attributes"] = attributes.to_s unless attributes.nil?
      query_params["excludedAttributes"] = excluded_attributes.to_s unless excluded_attributes.nil?
      query_params["sortBy"] = sort_by.to_s unless sort_by.nil?
      query_params["sortOrder"] = sort_order.to_s unless sort_order.nil?
      query_params["count"] = count.to_s unless count.nil?
      query_params["startIndex"] = start_index.to_s unless start_index.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_users_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Single User with SCIM
    # @param id [String] The id of the user you wish to update.
    # @return [nil]
    def scim_v2_users_id_get(id : String, filter : String? = nil, attributes : String? = nil, excluded_attributes : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_users_id_get_with_http_info(id, filter, attributes, excluded_attributes, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Single User with SCIM
    # @param id [String] The id of the user you wish to update.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_users_id_get_with_http_info(id : String, filter : String? = nil, attributes : String? = nil, excluded_attributes : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_users_id_get ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.scim_v2_users_id_get")
      end
      # resource path
      local_var_path = "/scim/v2/Users/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["filter"] = filter.to_s unless filter.nil?
      query_params["attributes"] = attributes.to_s unless attributes.nil?
      query_params["excludedAttributes"] = excluded_attributes.to_s unless excluded_attributes.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_users_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_users_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update User with SCIM
    # @param id [String] The id of the user you wish to update.
    # @return [nil]
    def scim_v2_users_id_put(id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_users_id_put_with_http_info(id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update User with SCIM
    # @param id [String] The id of the user you wish to update.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_users_id_put_with_http_info(id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_users_id_put ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.scim_v2_users_id_put")
      end
      # resource path
      local_var_path = "/scim/v2/Users/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_users_id_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_users_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create User with SCIM
    # @return [nil]
    def scim_v2_users_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      scim_v2_users_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create User with SCIM
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scim_v2_users_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.scim_v2_users_post ..."}
      end
      # resource path
      local_var_path = "/scim/v2/Users"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.scim_v2_users_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#scim_v2_users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Signing Certificate
    # @param cert_id [String] The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
    # @return [nil]
    def services_certificate_cert_id_get(cert_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_certificate_cert_id_get_with_http_info(cert_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Signing Certificate
    # @param cert_id [String] The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_certificate_cert_id_get_with_http_info(cert_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_certificate_cert_id_get ..."}
      end
      # verify the required parameter "cert_id" is set
      if @api_client.config.client_side_validation && cert_id.nil?
        raise ArgumentError.new("Missing the required parameter 'cert_id' when calling DefaultApi.services_certificate_cert_id_get")
      end
      # resource path
      local_var_path = "/services/certificate/{cert_id}".sub("{" + "cert_id" + "}", URI.encode_path(cert_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_certificate_cert_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_certificate_cert_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Disable Configuration Mode
    # @return [nil]
    def services_configuration_mode_actions_disable_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      services_configuration_mode_actions_disable_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Disable Configuration Mode
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_configuration_mode_actions_disable_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_configuration_mode_actions_disable_post ..."}
      end
      # resource path
      local_var_path = "/services/configuration_mode/actions/disable"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.services_configuration_mode_actions_disable_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_configuration_mode_actions_disable_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Enable Configuration Mode
    # @return [nil]
    def services_configuration_mode_actions_enable_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      services_configuration_mode_actions_enable_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Enable Configuration Mode
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_configuration_mode_actions_enable_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_configuration_mode_actions_enable_post ..."}
      end
      # resource path
      local_var_path = "/services/configuration_mode/actions/enable"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.services_configuration_mode_actions_enable_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_configuration_mode_actions_enable_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Available Direct Data Files
    # @return [nil]
    def services_directdata_files_get(extract_type : String? = nil, start_time : Int32? = nil, stop_time : Int32? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      services_directdata_files_get_with_http_info(extract_type, start_time, stop_time, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Retrieve Available Direct Data Files
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_directdata_files_get_with_http_info(extract_type : String? = nil, start_time : Int32? = nil, stop_time : Int32? = nil, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_directdata_files_get ..."}
      end
      # resource path
      local_var_path = "/services/directdata/files"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["extract_type"] = extract_type.to_s unless extract_type.nil?
      query_params["start_time"] = start_time.to_s unless start_time.nil?
      query_params["stop_time"] = stop_time.to_s unless stop_time.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_directdata_files_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_directdata_files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Direct Data File
    # @param name [String] The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
    # @return [nil]
    def services_directdata_files_name_get(name : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      services_directdata_files_name_get_with_http_info(name, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Download Direct Data File
    # @param name [String] The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_directdata_files_name_get_with_http_info(name : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_directdata_files_name_get ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling DefaultApi.services_directdata_files_name_get")
      end
      # resource path
      local_var_path = "/services/directdata/files/{name}".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_directdata_files_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_directdata_files_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Item Content
    # @param item [String] The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @return [nil]
    def services_file_staging_items_content_item_get(item : String, authorization : String? = nil, accept : String? = nil, range : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_items_content_item_get_with_http_info(item, authorization, accept, range, x_vault_api_client_id)
      nil
    end

    # Download Item Content
    # @param item [String] The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_items_content_item_get_with_http_info(item : String, authorization : String? = nil, accept : String? = nil, range : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_items_content_item_get ..."}
      end
      # verify the required parameter "item" is set
      if @api_client.config.client_side_validation && item.nil?
        raise ArgumentError.new("Missing the required parameter 'item' when calling DefaultApi.services_file_staging_items_content_item_get")
      end
      # resource path
      local_var_path = "/services/file_staging/items/content/{item}".sub("{" + "item" + "}", URI.encode_path(item.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Range"] = range
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_items_content_item_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_items_content_item_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete File or Folder
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @return [nil]
    def services_file_staging_items_item_delete(item : String, recursive : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_items_item_delete_with_http_info(item, recursive, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete File or Folder
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_items_item_delete_with_http_info(item : String, recursive : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_items_item_delete ..."}
      end
      # verify the required parameter "item" is set
      if @api_client.config.client_side_validation && item.nil?
        raise ArgumentError.new("Missing the required parameter 'item' when calling DefaultApi.services_file_staging_items_item_delete")
      end
      # resource path
      local_var_path = "/services/file_staging/items/{item}".sub("{" + "item" + "}", URI.encode_path(item.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["recursive"] = recursive.to_s unless recursive.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_items_item_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_items_item_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # List Items at a Path
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @return [nil]
    def services_file_staging_items_item_get(item : String, recursive : String? = nil, limit : String? = nil, format_result : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_items_item_get_with_http_info(item, recursive, limit, format_result, authorization, accept, x_vault_api_client_id)
      nil
    end

    # List Items at a Path
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_items_item_get_with_http_info(item : String, recursive : String? = nil, limit : String? = nil, format_result : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_items_item_get ..."}
      end
      # verify the required parameter "item" is set
      if @api_client.config.client_side_validation && item.nil?
        raise ArgumentError.new("Missing the required parameter 'item' when calling DefaultApi.services_file_staging_items_item_get")
      end
      # resource path
      local_var_path = "/services/file_staging/items/{item}".sub("{" + "item" + "}", URI.encode_path(item.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["recursive"] = recursive.to_s unless recursive.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["format_result"] = format_result.to_s unless format_result.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_items_item_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_items_item_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Folder or File
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @return [nil]
    def services_file_staging_items_item_put(item : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_items_item_put_with_http_info(item, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Update Folder or File
    # @param item [String] The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_items_item_put_with_http_info(item : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_items_item_put ..."}
      end
      # verify the required parameter "item" is set
      if @api_client.config.client_side_validation && item.nil?
        raise ArgumentError.new("Missing the required parameter 'item' when calling DefaultApi.services_file_staging_items_item_put")
      end
      # resource path
      local_var_path = "/services/file_staging/items/{item}".sub("{" + "item" + "}", URI.encode_path(item.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_items_item_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_items_item_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Folder or File
    # @return [nil]
    def services_file_staging_items_post(authorization : String? = nil, accept : String? = nil, content_md5 : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_items_post_with_http_info(authorization, accept, content_md5, x_vault_api_client_id)
      nil
    end

    # Create Folder or File
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_items_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_md5 : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_items_post ..."}
      end
      # resource path
      local_var_path = "/services/file_staging/items"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-MD5"] = content_md5
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_items_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_items_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # List Upload Sessions
    # @return [nil]
    def services_file_staging_upload_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_upload_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # List Upload Sessions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_upload_get ..."}
      end
      # resource path
      local_var_path = "/services/file_staging/upload/"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_upload_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_upload_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Resumable Upload Session
    # @return [nil]
    def services_file_staging_upload_post(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_upload_post_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Create Resumable Upload Session
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_post_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_upload_post ..."}
      end
      # resource path
      local_var_path = "/services/file_staging/upload"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_upload_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Abort Upload Session
    # @param upload_session_id [String] 
    # @return [nil]
    def services_file_staging_upload_upload_session_id_delete(upload_session_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_upload_upload_session_id_delete_with_http_info(upload_session_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Abort Upload Session
    # @param upload_session_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_upload_session_id_delete_with_http_info(upload_session_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_upload_upload_session_id_delete ..."}
      end
      # verify the required parameter "upload_session_id" is set
      if @api_client.config.client_side_validation && upload_session_id.nil?
        raise ArgumentError.new("Missing the required parameter 'upload_session_id' when calling DefaultApi.services_file_staging_upload_upload_session_id_delete")
      end
      # resource path
      local_var_path = "/services/file_staging/upload/{upload_session_id}".sub("{" + "upload_session_id" + "}", URI.encode_path(upload_session_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_upload_upload_session_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_upload_upload_session_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get Upload Session Details
    # @param upload_session_id [String] 
    # @return [nil]
    def services_file_staging_upload_upload_session_id_get(upload_session_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_upload_upload_session_id_get_with_http_info(upload_session_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Get Upload Session Details
    # @param upload_session_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_upload_session_id_get_with_http_info(upload_session_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_upload_upload_session_id_get ..."}
      end
      # verify the required parameter "upload_session_id" is set
      if @api_client.config.client_side_validation && upload_session_id.nil?
        raise ArgumentError.new("Missing the required parameter 'upload_session_id' when calling DefaultApi.services_file_staging_upload_upload_session_id_get")
      end
      # resource path
      local_var_path = "/services/file_staging/upload/{upload_session_id}".sub("{" + "upload_session_id" + "}", URI.encode_path(upload_session_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_upload_upload_session_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_upload_upload_session_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # List File Parts Uploaded to Session
    # @param upload_session_id [String] 
    # @return [nil]
    def services_file_staging_upload_upload_session_id_parts_get(upload_session_id : String, limit : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_upload_upload_session_id_parts_get_with_http_info(upload_session_id, limit, authorization, accept, x_vault_api_client_id)
      nil
    end

    # List File Parts Uploaded to Session
    # @param upload_session_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_upload_session_id_parts_get_with_http_info(upload_session_id : String, limit : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_upload_upload_session_id_parts_get ..."}
      end
      # verify the required parameter "upload_session_id" is set
      if @api_client.config.client_side_validation && upload_session_id.nil?
        raise ArgumentError.new("Missing the required parameter 'upload_session_id' when calling DefaultApi.services_file_staging_upload_upload_session_id_parts_get")
      end
      # resource path
      local_var_path = "/services/file_staging/upload/{upload_session_id}/parts".sub("{" + "upload_session_id" + "}", URI.encode_path(upload_session_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_upload_upload_session_id_parts_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_upload_upload_session_id_parts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Commit Upload Session
    # @param upload_session_id [String] 
    # @return [nil]
    def services_file_staging_upload_upload_session_id_post(upload_session_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_upload_upload_session_id_post_with_http_info(upload_session_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Commit Upload Session
    # @param upload_session_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_upload_session_id_post_with_http_info(upload_session_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_upload_upload_session_id_post ..."}
      end
      # verify the required parameter "upload_session_id" is set
      if @api_client.config.client_side_validation && upload_session_id.nil?
        raise ArgumentError.new("Missing the required parameter 'upload_session_id' when calling DefaultApi.services_file_staging_upload_upload_session_id_post")
      end
      # resource path
      local_var_path = "/services/file_staging/upload/{upload_session_id}".sub("{" + "upload_session_id" + "}", URI.encode_path(upload_session_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_upload_upload_session_id_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_upload_upload_session_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Upload to a Session
    # @param upload_session_id [String] 
    # @return [nil]
    def services_file_staging_upload_upload_session_id_put(upload_session_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_file_part_number : String? = nil, content_md5 : String? = nil, x_vault_api_client_id : String? = nil)
      services_file_staging_upload_upload_session_id_put_with_http_info(upload_session_id, authorization, accept, content_type, x_vault_api_file_part_number, content_md5, x_vault_api_client_id)
      nil
    end

    # Upload to a Session
    # @param upload_session_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_file_staging_upload_upload_session_id_put_with_http_info(upload_session_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_file_part_number : String? = nil, content_md5 : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_file_staging_upload_upload_session_id_put ..."}
      end
      # verify the required parameter "upload_session_id" is set
      if @api_client.config.client_side_validation && upload_session_id.nil?
        raise ArgumentError.new("Missing the required parameter 'upload_session_id' when calling DefaultApi.services_file_staging_upload_upload_session_id_put")
      end
      # resource path
      local_var_path = "/services/file_staging/upload/{upload_session_id}".sub("{" + "upload_session_id" + "}", URI.encode_path(upload_session_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-FilePartNumber"] = x_vault_api_file_part_number
      header_params["Content-MD5"] = content_md5
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.services_file_staging_upload_upload_session_id_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_file_staging_upload_upload_session_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Job Histories
    # @return [nil]
    def services_jobs_histories_get(start_date : String? = nil, end_date : String? = nil, status : String? = nil, limit : String? = nil, offset : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_jobs_histories_get_with_http_info(start_date, end_date, status, limit, offset, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Job Histories
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_histories_get_with_http_info(start_date : String? = nil, end_date : String? = nil, status : String? = nil, limit : String? = nil, offset : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_jobs_histories_get ..."}
      end
      # resource path
      local_var_path = "/services/jobs/histories"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["status"] = status.to_s unless status.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_jobs_histories_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_jobs_histories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Import Bulk Translation File Job Errors
    # @param job_id [String] The id value of the requested import job. This was returned from the Import Bulk Translation File request.
    # @return [nil]
    def services_jobs_job_id_errors_get(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_jobs_job_id_errors_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Import Bulk Translation File Job Errors
    # @param job_id [String] The id value of the requested import job. This was returned from the Import Bulk Translation File request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_job_id_errors_get_with_http_info(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_jobs_job_id_errors_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.services_jobs_job_id_errors_get")
      end
      # resource path
      local_var_path = "/services/jobs/{job_id}/errors".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_jobs_job_id_errors_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_jobs_job_id_errors_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Job Status
    # @param job_id [String] The ID of the job, returned from the original job request.
    # @return [nil]
    def services_jobs_job_id_get(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_jobs_job_id_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Job Status
    # @param job_id [String] The ID of the job, returned from the original job request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_job_id_get_with_http_info(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_jobs_job_id_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.services_jobs_job_id_get")
      end
      # resource path
      local_var_path = "/services/jobs/{job_id}".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_jobs_job_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_jobs_job_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Import Bulk Translation File Job Summary
    # @param job_id [String] The id value of the requested import job. This was returned from the Import Bulk Translation File request.
    # @return [nil]
    def services_jobs_job_id_summary_get(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_jobs_job_id_summary_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Import Bulk Translation File Job Summary
    # @param job_id [String] The id value of the requested import job. This was returned from the Import Bulk Translation File request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_job_id_summary_get_with_http_info(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_jobs_job_id_summary_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.services_jobs_job_id_summary_get")
      end
      # resource path
      local_var_path = "/services/jobs/{job_id}/summary".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_jobs_job_id_summary_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_jobs_job_id_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve SDK Job Tasks
    # @param job_id [String] The ID of the SDK job, returned from the original job request.
    # @return [nil]
    def services_jobs_job_id_tasks_get(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_jobs_job_id_tasks_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve SDK Job Tasks
    # @param job_id [String] The ID of the SDK job, returned from the original job request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_job_id_tasks_get_with_http_info(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_jobs_job_id_tasks_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.services_jobs_job_id_tasks_get")
      end
      # resource path
      local_var_path = "/services/jobs/{job_id}/tasks".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_jobs_job_id_tasks_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_jobs_job_id_tasks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Job Monitors
    # @return [nil]
    def services_jobs_monitors_get(start_date : String? = nil, end_date : String? = nil, status : String? = nil, limit : String? = nil, offset : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_jobs_monitors_get_with_http_info(start_date, end_date, status, limit, offset, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Job Monitors
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_monitors_get_with_http_info(start_date : String? = nil, end_date : String? = nil, status : String? = nil, limit : String? = nil, offset : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_jobs_monitors_get ..."}
      end
      # resource path
      local_var_path = "/services/jobs/monitors"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["status"] = status.to_s unless status.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_jobs_monitors_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_jobs_monitors_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Start Job
    # @param job_id [String] The ID of the scheduled job instance to start.
    # @return [nil]
    def services_jobs_start_now_job_id_post(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_jobs_start_now_job_id_post_with_http_info(job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Start Job
    # @param job_id [String] The ID of the scheduled job instance to start.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_jobs_start_now_job_id_post_with_http_info(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_jobs_start_now_job_id_post ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.services_jobs_start_now_job_id_post")
      end
      # resource path
      local_var_path = "/services/jobs/start_now/{job_id}".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.services_jobs_start_now_job_id_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_jobs_start_now_job_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Extract Data Files
    # @return [nil]
    def services_loader_extract_post(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      services_loader_extract_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Extract Data Files
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_extract_post_with_http_info(authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_loader_extract_post ..."}
      end
      # resource path
      local_var_path = "/services/loader/extract"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.services_loader_extract_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_loader_extract_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Load Failure Log Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @return [nil]
    def services_loader_job_id_tasks_task_id_failurelog_get(job_id : String, task_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_loader_job_id_tasks_task_id_failurelog_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Load Failure Log Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_job_id_tasks_task_id_failurelog_get_with_http_info(job_id : String, task_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_loader_job_id_tasks_task_id_failurelog_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_failurelog_get")
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_failurelog_get")
      end
      # resource path
      local_var_path = "/services/loader/{job_id}/tasks/{task_id}/failurelog".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s)).sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_loader_job_id_tasks_task_id_failurelog_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_loader_job_id_tasks_task_id_failurelog_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Loader Extract Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @return [nil]
    def services_loader_job_id_tasks_task_id_results_get(job_id : String, task_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_loader_job_id_tasks_task_id_results_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Loader Extract Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_job_id_tasks_task_id_results_get_with_http_info(job_id : String, task_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_loader_job_id_tasks_task_id_results_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_results_get")
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_results_get")
      end
      # resource path
      local_var_path = "/services/loader/{job_id}/tasks/{task_id}/results".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s)).sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_loader_job_id_tasks_task_id_results_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_loader_job_id_tasks_task_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Loader Extract Renditions Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @return [nil]
    def services_loader_job_id_tasks_task_id_results_renditions_get(job_id : String, task_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_loader_job_id_tasks_task_id_results_renditions_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Loader Extract Renditions Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_job_id_tasks_task_id_results_renditions_get_with_http_info(job_id : String, task_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_loader_job_id_tasks_task_id_results_renditions_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_results_renditions_get")
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_results_renditions_get")
      end
      # resource path
      local_var_path = "/services/loader/{job_id}/tasks/{task_id}/results/renditions".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s)).sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_loader_job_id_tasks_task_id_results_renditions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_loader_job_id_tasks_task_id_results_renditions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Load Success Log Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @return [nil]
    def services_loader_job_id_tasks_task_id_successlog_get(job_id : String, task_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_loader_job_id_tasks_task_id_successlog_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Load Success Log Results
    # @param job_id [String] The id value of the requested extract job.
    # @param task_id [String] The id value of the requested extract task.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_job_id_tasks_task_id_successlog_get_with_http_info(job_id : String, task_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_loader_job_id_tasks_task_id_successlog_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_successlog_get")
      end
      # verify the required parameter "task_id" is set
      if @api_client.config.client_side_validation && task_id.nil?
        raise ArgumentError.new("Missing the required parameter 'task_id' when calling DefaultApi.services_loader_job_id_tasks_task_id_successlog_get")
      end
      # resource path
      local_var_path = "/services/loader/{job_id}/tasks/{task_id}/successlog".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s)).sub("{" + "task_id" + "}", URI.encode_path(task_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_loader_job_id_tasks_task_id_successlog_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_loader_job_id_tasks_task_id_successlog_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Load Data Objects
    # @return [nil]
    def services_loader_load_post(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_loader_load_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Load Data Objects
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_loader_load_post_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_loader_load_post ..."}
      end
      # resource path
      local_var_path = "/services/loader/load"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.services_loader_load_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_loader_load_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Validate Package
    # @return [nil]
    def services_package_actions_validate_post(authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      services_package_actions_validate_post_with_http_info(authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Validate Package
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_package_actions_validate_post_with_http_info(authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_package_actions_validate_post ..."}
      end
      # resource path
      local_var_path = "/services/package/actions/validate"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.services_package_actions_validate_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_package_actions_validate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Export Package
    # @return [nil]
    def services_package_post(authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      services_package_post_with_http_info(authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Export Package
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_package_post_with_http_info(authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_package_post ..."}
      end
      # resource path
      local_var_path = "/services/package"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.services_package_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_package_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Import Package
    # @return [nil]
    def services_package_put(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_package_put_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Import Package
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_package_put_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_package_put ..."}
      end
      # resource path
      local_var_path = "/services/package"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.services_package_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_package_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Queues
    # @return [nil]
    def services_queues_get(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_queues_get_with_http_info(authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve All Queues
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_queues_get_with_http_info(authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_queues_get ..."}
      end
      # resource path
      local_var_path = "/services/queues"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_queues_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_queues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Disable Delivery
    # @param queue_name [String] The name of a specific Queue.
    # @return [nil]
    def services_queues_queue_name_actions_disable_delivery_put(queue_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_queues_queue_name_actions_disable_delivery_put_with_http_info(queue_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Disable Delivery
    # @param queue_name [String] The name of a specific Queue.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_queues_queue_name_actions_disable_delivery_put_with_http_info(queue_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_queues_queue_name_actions_disable_delivery_put ..."}
      end
      # verify the required parameter "queue_name" is set
      if @api_client.config.client_side_validation && queue_name.nil?
        raise ArgumentError.new("Missing the required parameter 'queue_name' when calling DefaultApi.services_queues_queue_name_actions_disable_delivery_put")
      end
      # resource path
      local_var_path = "/services/queues/{queue_name}/actions/disable_delivery".sub("{" + "queue_name" + "}", URI.encode_path(queue_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.services_queues_queue_name_actions_disable_delivery_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_queues_queue_name_actions_disable_delivery_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Enable Delivery
    # @param queue_name [String] The name of a specific Queue.
    # @return [nil]
    def services_queues_queue_name_actions_enable_delivery_put(queue_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_queues_queue_name_actions_enable_delivery_put_with_http_info(queue_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Enable Delivery
    # @param queue_name [String] The name of a specific Queue.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_queues_queue_name_actions_enable_delivery_put_with_http_info(queue_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_queues_queue_name_actions_enable_delivery_put ..."}
      end
      # verify the required parameter "queue_name" is set
      if @api_client.config.client_side_validation && queue_name.nil?
        raise ArgumentError.new("Missing the required parameter 'queue_name' when calling DefaultApi.services_queues_queue_name_actions_enable_delivery_put")
      end
      # resource path
      local_var_path = "/services/queues/{queue_name}/actions/enable_delivery".sub("{" + "queue_name" + "}", URI.encode_path(queue_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.services_queues_queue_name_actions_enable_delivery_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_queues_queue_name_actions_enable_delivery_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Reset Queue
    # @param queue_name [String] The name of a specific Queue.
    # @return [nil]
    def services_queues_queue_name_actions_reset_put(queue_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_queues_queue_name_actions_reset_put_with_http_info(queue_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Reset Queue
    # @param queue_name [String] The name of a specific Queue.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_queues_queue_name_actions_reset_put_with_http_info(queue_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_queues_queue_name_actions_reset_put ..."}
      end
      # verify the required parameter "queue_name" is set
      if @api_client.config.client_side_validation && queue_name.nil?
        raise ArgumentError.new("Missing the required parameter 'queue_name' when calling DefaultApi.services_queues_queue_name_actions_reset_put")
      end
      # resource path
      local_var_path = "/services/queues/{queue_name}/actions/reset".sub("{" + "queue_name" + "}", URI.encode_path(queue_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.services_queues_queue_name_actions_reset_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_queues_queue_name_actions_reset_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Queue Status
    # @param queue_name [String] The name of a specific queue. For example, queue__c.
    # @return [nil]
    def services_queues_queue_name_get(queue_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_queues_queue_name_get_with_http_info(queue_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Queue Status
    # @param queue_name [String] The name of a specific queue. For example, queue__c.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_queues_queue_name_get_with_http_info(queue_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_queues_queue_name_get ..."}
      end
      # verify the required parameter "queue_name" is set
      if @api_client.config.client_side_validation && queue_name.nil?
        raise ArgumentError.new("Missing the required parameter 'queue_name' when calling DefaultApi.services_queues_queue_name_get")
      end
      # resource path
      local_var_path = "/services/queues/{queue_name}".sub("{" + "queue_name" + "}", URI.encode_path(queue_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.services_queues_queue_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_queues_queue_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Validate Imported Package
    # @param package_id [String] The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
    # @return [nil]
    def services_vobject_vault_package_v_package_id_actions_validate_post(package_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      services_vobject_vault_package_v_package_id_actions_validate_post_with_http_info(package_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Validate Imported Package
    # @param package_id [String] The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def services_vobject_vault_package_v_package_id_actions_validate_post_with_http_info(package_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.services_vobject_vault_package_v_package_id_actions_validate_post ..."}
      end
      # verify the required parameter "package_id" is set
      if @api_client.config.client_side_validation && package_id.nil?
        raise ArgumentError.new("Missing the required parameter 'package_id' when calling DefaultApi.services_vobject_vault_package_v_package_id_actions_validate_post")
      end
      # resource path
      local_var_path = "/services/vobject/vault_package__v/{package_id}/actions/validate".sub("{" + "package_id" + "}", URI.encode_path(package_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.services_vobject_vault_package_v_package_id_actions_validate_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#services_vobject_vault_package_v_package_id_actions_validate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # End Session
    # @return [nil]
    def session_delete(accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      session_delete_with_http_info(accept, authorization, x_vault_api_client_id)
      nil
    end

    # End Session
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def session_delete_with_http_info(accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.session_delete ..."}
      end
      # resource path
      local_var_path = "/session"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.session_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#session_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Single Client Code Distribution
    # @param distribution_name [String] The name attribute of the client code distribution to download.
    # @return [nil]
    def uicode_distributions_distribution_name_code_get(distribution_name : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      uicode_distributions_distribution_name_code_get_with_http_info(distribution_name, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Download Single Client Code Distribution
    # @param distribution_name [String] The name attribute of the client code distribution to download.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def uicode_distributions_distribution_name_code_get_with_http_info(distribution_name : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.uicode_distributions_distribution_name_code_get ..."}
      end
      # verify the required parameter "distribution_name" is set
      if @api_client.config.client_side_validation && distribution_name.nil?
        raise ArgumentError.new("Missing the required parameter 'distribution_name' when calling DefaultApi.uicode_distributions_distribution_name_code_get")
      end
      # resource path
      local_var_path = "/uicode/distributions/{distribution_name}/code".sub("{" + "distribution_name" + "}", URI.encode_path(distribution_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.uicode_distributions_distribution_name_code_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#uicode_distributions_distribution_name_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Single Client Code Distribution
    # @param distribution_name [String] The name attribute of the client code distribution to delete.
    # @return [nil]
    def uicode_distributions_distribution_name_delete(distribution_name : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      uicode_distributions_distribution_name_delete_with_http_info(distribution_name, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Delete Single Client Code Distribution
    # @param distribution_name [String] The name attribute of the client code distribution to delete.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def uicode_distributions_distribution_name_delete_with_http_info(distribution_name : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.uicode_distributions_distribution_name_delete ..."}
      end
      # verify the required parameter "distribution_name" is set
      if @api_client.config.client_side_validation && distribution_name.nil?
        raise ArgumentError.new("Missing the required parameter 'distribution_name' when calling DefaultApi.uicode_distributions_distribution_name_delete")
      end
      # resource path
      local_var_path = "/uicode/distributions/{distribution_name}".sub("{" + "distribution_name" + "}", URI.encode_path(distribution_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.uicode_distributions_distribution_name_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#uicode_distributions_distribution_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Single Client Code Distribution Metadata
    # @param distribution_name [String] The name attribute of the client code distribution to delete.
    # @return [nil]
    def uicode_distributions_distribution_name_get(distribution_name : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      uicode_distributions_distribution_name_get_with_http_info(distribution_name, accept, authorization, x_vault_api_client_id)
      nil
    end

    # Retrieve Single Client Code Distribution Metadata
    # @param distribution_name [String] The name attribute of the client code distribution to delete.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def uicode_distributions_distribution_name_get_with_http_info(distribution_name : String, accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.uicode_distributions_distribution_name_get ..."}
      end
      # verify the required parameter "distribution_name" is set
      if @api_client.config.client_side_validation && distribution_name.nil?
        raise ArgumentError.new("Missing the required parameter 'distribution_name' when calling DefaultApi.uicode_distributions_distribution_name_get")
      end
      # resource path
      local_var_path = "/uicode/distributions/{distribution_name}".sub("{" + "distribution_name" + "}", URI.encode_path(distribution_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.uicode_distributions_distribution_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#uicode_distributions_distribution_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve All Client Code Distribution Metadata
    # @return [nil]
    def uicode_distributions_get(accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      uicode_distributions_get_with_http_info(accept, authorization, x_vault_api_client_id)
      nil
    end

    # Retrieve All Client Code Distribution Metadata
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def uicode_distributions_get_with_http_info(accept : String? = nil, authorization : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.uicode_distributions_get ..."}
      end
      # resource path
      local_var_path = "/uicode/distributions"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.uicode_distributions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#uicode_distributions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Add or Replace Single Client Code Distribution
    # @return [nil]
    def uicode_distributions_post(accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      uicode_distributions_post_with_http_info(accept, authorization, content_type, x_vault_api_client_id)
      nil
    end

    # Add or Replace Single Client Code Distribution
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def uicode_distributions_post_with_http_info(accept : String? = nil, authorization : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.uicode_distributions_post ..."}
      end
      # resource path
      local_var_path = "/uicode/distributions"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Accept"] = accept
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.uicode_distributions_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#uicode_distributions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Deploy Package
    # @param package_id [String] The id field value of the vault_package__v object record used for deployment. See Import Package.
    # @return [nil]
    def vobject_vault_package_v_package_id_actions_deploy_post(package_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobject_vault_package_v_package_id_actions_deploy_post_with_http_info(package_id, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Deploy Package
    # @param package_id [String] The id field value of the vault_package__v object record used for deployment. See Import Package.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobject_vault_package_v_package_id_actions_deploy_post_with_http_info(package_id : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobject_vault_package_v_package_id_actions_deploy_post ..."}
      end
      # verify the required parameter "package_id" is set
      if @api_client.config.client_side_validation && package_id.nil?
        raise ArgumentError.new("Missing the required parameter 'package_id' when calling DefaultApi.vobject_vault_package_v_package_id_actions_deploy_post")
      end
      # resource path
      local_var_path = "/vobject/vault_package__v/{package_id}/actions/deploy".sub("{" + "package_id" + "}", URI.encode_path(package_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobject_vault_package_v_package_id_actions_deploy_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobject_vault_package_v_package_id_actions_deploy_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Package Deploy Results
    # @param package_id [String] The id field value of the vault_package__v object record used for deployment. See Deploy Package.
    # @return [nil]
    def vobject_vault_package_v_package_id_actions_deploy_results_get(package_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobject_vault_package_v_package_id_actions_deploy_results_get_with_http_info(package_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Package Deploy Results
    # @param package_id [String] The id field value of the vault_package__v object record used for deployment. See Deploy Package.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobject_vault_package_v_package_id_actions_deploy_results_get_with_http_info(package_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobject_vault_package_v_package_id_actions_deploy_results_get ..."}
      end
      # verify the required parameter "package_id" is set
      if @api_client.config.client_side_validation && package_id.nil?
        raise ArgumentError.new("Missing the required parameter 'package_id' when calling DefaultApi.vobject_vault_package_v_package_id_actions_deploy_results_get")
      end
      # resource path
      local_var_path = "/vobject/vault_package__v/{package_id}/actions/deploy/results".sub("{" + "package_id" + "}", URI.encode_path(package_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobject_vault_package_v_package_id_actions_deploy_results_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobject_vault_package_v_package_id_actions_deploy_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Results of Cascade Delete Job
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param job_status [String] 
    # @param job_id [String] 
    # @return [nil]
    def vobjects_cascadedelete_results_object_name_job_status_job_id_get(object_name : String, job_status : String, job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_cascadedelete_results_object_name_job_status_job_id_get_with_http_info(object_name, job_status, job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Results of Cascade Delete Job
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param job_status [String] 
    # @param job_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_cascadedelete_results_object_name_job_status_job_id_get_with_http_info(object_name : String, job_status : String, job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_cascadedelete_results_object_name_job_status_job_id_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_cascadedelete_results_object_name_job_status_job_id_get")
      end
      # verify the required parameter "job_status" is set
      if @api_client.config.client_side_validation && job_status.nil?
        raise ArgumentError.new("Missing the required parameter 'job_status' when calling DefaultApi.vobjects_cascadedelete_results_object_name_job_status_job_id_get")
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.vobjects_cascadedelete_results_object_name_job_status_job_id_get")
      end
      # resource path
      local_var_path = "/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "job_status" + "}", URI.encode_path(job_status.to_s)).sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_cascadedelete_results_object_name_job_status_job_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_cascadedelete_results_object_name_job_status_job_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Results of Deep Copy Job
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param job_status [String] The ID of the job, retrieved from the response of the job request.
    # @param job_id [String] Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
    # @return [nil]
    def vobjects_deepcopy_results_object_name_job_status_job_id_get(object_name : String, job_status : String, job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_deepcopy_results_object_name_job_status_job_id_get_with_http_info(object_name, job_status, job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Results of Deep Copy Job
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param job_status [String] The ID of the job, retrieved from the response of the job request.
    # @param job_id [String] Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_deepcopy_results_object_name_job_status_job_id_get_with_http_info(object_name : String, job_status : String, job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_deepcopy_results_object_name_job_status_job_id_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_deepcopy_results_object_name_job_status_job_id_get")
      end
      # verify the required parameter "job_status" is set
      if @api_client.config.client_side_validation && job_status.nil?
        raise ArgumentError.new("Missing the required parameter 'job_status' when calling DefaultApi.vobjects_deepcopy_results_object_name_job_status_job_id_get")
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.vobjects_deepcopy_results_object_name_job_status_job_id_get")
      end
      # resource path
      local_var_path = "/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "job_status" + "}", URI.encode_path(job_status.to_s)).sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_deepcopy_results_object_name_job_status_job_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_deepcopy_results_object_name_job_status_job_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create a Placeholder from an EDL Item
    # @return [nil]
    def vobjects_edl_item_v_actions_createplaceholder_post(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_edl_item_v_actions_createplaceholder_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Create a Placeholder from an EDL Item
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_edl_item_v_actions_createplaceholder_post_with_http_info(authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_edl_item_v_actions_createplaceholder_post ..."}
      end
      # resource path
      local_var_path = "/vobjects/edl_item__v/actions/createplaceholder"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_edl_item_v_actions_createplaceholder_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_edl_item_v_actions_createplaceholder_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Merge Records Job Log
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @return [nil]
    def vobjects_merges_job_id_log_get(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_merges_job_id_log_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download Merge Records Job Log
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_merges_job_id_log_get_with_http_info(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_merges_job_id_log_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.vobjects_merges_job_id_log_get")
      end
      # resource path
      local_var_path = "/vobjects/merges/{job_id}/log".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_merges_job_id_log_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_merges_job_id_log_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Record Merge Results
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @return [nil]
    def vobjects_merges_job_id_results_get(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_merges_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Record Merge Results
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_merges_job_id_results_get_with_http_info(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_merges_job_id_results_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.vobjects_merges_job_id_results_get")
      end
      # resource path
      local_var_path = "/vobjects/merges/{job_id}/results".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_merges_job_id_results_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_merges_job_id_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Record Merge Status
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @return [nil]
    def vobjects_merges_job_id_status_get(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_merges_job_id_status_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Record Merge Status
    # @param job_id [String] The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_merges_job_id_status_get_with_http_info(job_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_merges_job_id_status_get ..."}
      end
      # verify the required parameter "job_id" is set
      if @api_client.config.client_side_validation && job_id.nil?
        raise ArgumentError.new("Missing the required parameter 'job_id' when calling DefaultApi.vobjects_merges_job_id_status_get")
      end
      # resource path
      local_var_path = "/vobjects/merges/{job_id}/status".sub("{" + "job_id" + "}", URI.encode_path(job_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_merges_job_id_status_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_merges_job_id_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Object Action on Multiple Records
    # @param object_name [String] The object name__v field value.
    # @param action_name [String] Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @return [nil]
    def vobjects_object_name_actions_action_name_post(object_name : String, action_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_actions_action_name_post_with_http_info(object_name, action_name, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Initiate Object Action on Multiple Records
    # @param object_name [String] The object name__v field value.
    # @param action_name [String] Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_action_name_post_with_http_info(object_name : String, action_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_actions_action_name_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_action_name_post")
      end
      # verify the required parameter "action_name" is set
      if @api_client.config.client_side_validation && action_name.nil?
        raise ArgumentError.new("Missing the required parameter 'action_name' when calling DefaultApi.vobjects_object_name_actions_action_name_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/actions/{action_name}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "action_name" + "}", URI.encode_path(action_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_actions_action_name_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_actions_action_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Change Object Type
    # @param object_name [String] The name of the object.
    # @return [nil]
    def vobjects_object_name_actions_changetype_post(object_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_actions_changetype_post_with_http_info(object_name, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Change Object Type
    # @param object_name [String] The name of the object.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_changetype_post_with_http_info(object_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_actions_changetype_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_changetype_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/actions/changetype".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_actions_changetype_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_actions_changetype_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Record Merge
    # @param object_name [String] The object name__v field value. For example, account__v. This object must have Enable Merges configured.
    # @return [nil]
    def vobjects_object_name_actions_merge_post(object_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil, vobjects_object_name_actions_merge_post_request_inner : Array(VobjectsObjectNameActionsMergePostRequestInner)? = nil)
      vobjects_object_name_actions_merge_post_with_http_info(object_name, authorization, content_type, accept, x_vault_api_client_id, vobjects_object_name_actions_merge_post_request_inner)
      nil
    end

    # Initiate Record Merge
    # @param object_name [String] The object name__v field value. For example, account__v. This object must have Enable Merges configured.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_merge_post_with_http_info(object_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil, vobjects_object_name_actions_merge_post_request_inner : Array(VobjectsObjectNameActionsMergePostRequestInner)? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_actions_merge_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_merge_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/actions/merge".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = vobjects_object_name_actions_merge_post_request_inner.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_actions_merge_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_actions_merge_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Roll-up Field Recalculation Status
    # @param object_name [String] The name of the object for which to check the status of a Roll-up field recalculation.
    # @return [nil]
    def vobjects_object_name_actions_recalculaterollups_get(object_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_actions_recalculaterollups_get_with_http_info(object_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Roll-up Field Recalculation Status
    # @param object_name [String] The name of the object for which to check the status of a Roll-up field recalculation.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_recalculaterollups_get_with_http_info(object_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_actions_recalculaterollups_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_recalculaterollups_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/actions/recalculaterollups".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_actions_recalculaterollups_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_actions_recalculaterollups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Recalculate Roll-up Fields
    # @param object_name [String] The name of the object for which to check the status of a Roll-up field recalculation.
    # @return [nil]
    def vobjects_object_name_actions_recalculaterollups_post(object_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_actions_recalculaterollups_post_with_http_info(object_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Recalculate Roll-up Fields
    # @param object_name [String] The name of the object for which to check the status of a Roll-up field recalculation.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_recalculaterollups_post_with_http_info(object_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_actions_recalculaterollups_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_recalculaterollups_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/actions/recalculaterollups".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_actions_recalculaterollups_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_actions_recalculaterollups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Corporate Currency Fields
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [nil]
    def vobjects_object_name_actions_updatecorporatecurrency_put(object_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_actions_updatecorporatecurrency_put_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Corporate Currency Fields
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_actions_updatecorporatecurrency_put_with_http_info(object_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_actions_updatecorporatecurrency_put ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_actions_updatecorporatecurrency_put")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/actions/updatecorporatecurrency".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_actions_updatecorporatecurrency_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_actions_updatecorporatecurrency_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Multiple Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [nil]
    def vobjects_object_name_attachments_batch_delete(object_name : String, id_param : String? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_attachments_batch_delete_with_http_info(object_name, id_param, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Delete Multiple Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_attachments_batch_delete_with_http_info(object_name : String, id_param : String? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_attachments_batch_delete ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_attachments_batch_delete")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/attachments/batch".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["idParam"] = id_param.to_s unless id_param.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_attachments_batch_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_attachments_batch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Multiple Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [nil]
    def vobjects_object_name_attachments_batch_post(object_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_attachments_batch_post_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Multiple Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_attachments_batch_post_with_http_info(object_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_attachments_batch_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_attachments_batch_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/attachments/batch".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_attachments_batch_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_attachments_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Multiple Object Record Attachment Descriptions
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [nil]
    def vobjects_object_name_attachments_batch_put(object_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_attachments_batch_put_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Multiple Object Record Attachment Descriptions
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_attachments_batch_put_with_http_info(object_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_attachments_batch_put ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_attachments_batch_put")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/attachments/batch".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_attachments_batch_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_attachments_batch_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [nil]
    def vobjects_object_name_delete(object_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_delete_with_http_info(object_name, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Delete Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_delete_with_http_info(object_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_delete ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_delete")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Object Record Roles
    # @param object_name [String] The object name.
    # @param id [String] The id of the document, binder, or object record.
    # @param role_name [String] Optional: Include a role name to filter for a specific role. For example, owner__v.
    # @return [nil]
    def vobjects_object_name_id_roles_role_name_get(object_name : String, id : String, role_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_id_roles_role_name_get_with_http_info(object_name, id, role_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Object Record Roles
    # @param object_name [String] The object name.
    # @param id [String] The id of the document, binder, or object record.
    # @param role_name [String] Optional: Include a role name to filter for a specific role. For example, owner__v.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_id_roles_role_name_get_with_http_info(object_name : String, id : String, role_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_id_roles_role_name_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_id_roles_role_name_get")
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling DefaultApi.vobjects_object_name_id_roles_role_name_get")
      end
      # verify the required parameter "role_name" is set
      if @api_client.config.client_side_validation && role_name.nil?
        raise ArgumentError.new("Missing the required parameter 'role_name' when calling DefaultApi.vobjects_object_name_id_roles_role_name_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{id}/roles/{role_name}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "role_name" + "}", URI.encode_path(role_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_id_roles_role_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_id_roles_role_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Object User Actions Details
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @param action_name [String] The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @return [nil]
    def vobjects_object_name_object_record_id_actions_action_name_get(object_name : String, object_record_id : String, action_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_actions_action_name_get_with_http_info(object_name, object_record_id, action_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Object User Actions Details
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @param action_name [String] The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_actions_action_name_get_with_http_info(object_name : String, object_record_id : String, action_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_actions_action_name_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_get")
      end
      # verify the required parameter "action_name" is set
      if @api_client.config.client_side_validation && action_name.nil?
        raise ArgumentError.new("Missing the required parameter 'action_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "action_name" + "}", URI.encode_path(action_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_actions_action_name_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_actions_action_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Initiate Object Action on a Single Record
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @param action_name [String] The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @return [nil]
    def vobjects_object_name_object_record_id_actions_action_name_post(object_name : String, object_record_id : String, action_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_actions_action_name_post_with_http_info(object_name, object_record_id, action_name, authorization, content_type, accept, x_vault_api_client_id)
      nil
    end

    # Initiate Object Action on a Single Record
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @param action_name [String] The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_actions_action_name_post_with_http_info(object_name : String, object_record_id : String, action_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_actions_action_name_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_post")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_post")
      end
      # verify the required parameter "action_name" is set
      if @api_client.config.client_side_validation && action_name.nil?
        raise ArgumentError.new("Missing the required parameter 'action_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_action_name_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "action_name" + "}", URI.encode_path(action_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_actions_action_name_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_actions_action_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Cascade Delete Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_actions_cascadedelete_post(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_actions_cascadedelete_post_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Cascade Delete Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_actions_cascadedelete_post_with_http_info(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_actions_cascadedelete_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_cascadedelete_post")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_actions_cascadedelete_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/actions/cascadedelete".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_actions_cascadedelete_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_actions_cascadedelete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Deep Copy Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_actions_deepcopy_post(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_actions_deepcopy_post_with_http_info(object_name, object_record_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Deep Copy Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_actions_deepcopy_post_with_http_info(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_actions_deepcopy_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_deepcopy_post")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_actions_deepcopy_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/actions/deepcopy".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_actions_deepcopy_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_actions_deepcopy_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Object Record User Actions
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_actions_get(object_name : String, object_record_id : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_actions_get_with_http_info(object_name, object_record_id, loc, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Object Record User Actions
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_actions_get_with_http_info(object_name : String, object_record_id : String, loc : Bool? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_actions_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_actions_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_actions_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/actions".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["loc"] = loc.to_s unless loc.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_actions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Attachment Field File
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @param attachment_field_name [String] The name of the Attachment field to update.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get(object_name : String, object_record_id : String, attachment_field_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get_with_http_info(object_name, object_record_id, attachment_field_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download Attachment Field File
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @param attachment_field_name [String] The name of the Attachment field to update.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get_with_http_info(object_name : String, object_record_id : String, attachment_field_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get")
      end
      # verify the required parameter "attachment_field_name" is set
      if @api_client.config.client_side_validation && attachment_field_name.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_field_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "attachment_field_name" + "}", URI.encode_path(attachment_field_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Attachment Field File
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @param attachment_field_name [String] The name of the Attachment field to update.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post(object_name : String, object_record_id : String, attachment_field_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post_with_http_info(object_name, object_record_id, attachment_field_name, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Update Attachment Field File
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @param attachment_field_name [String] The name of the Attachment field to update.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post_with_http_info(object_name : String, object_record_id : String, attachment_field_name : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post")
      end
      # verify the required parameter "attachment_field_name" is set
      if @api_client.config.client_side_validation && attachment_field_name.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_field_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "attachment_field_name" + "}", URI.encode_path(attachment_field_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download All Attachment Field Files
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachment_fields_file_get(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachment_fields_file_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download All Attachment Field Files
    # @param object_name [String] The object name__v field value. For example, product__v.
    # @param object_record_id [String] The object record id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachment_fields_file_get_with_http_info(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachment_fields_file_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_file_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachment_fields_file_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/file".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachment_fields_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachment_fields_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Object Record Attachment
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_delete(object_name : String, object_record_id : String, attachment_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachments_attachment_id_delete_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Delete Object Record Attachment
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_delete_with_http_info(object_name : String, object_record_id : String, attachment_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_delete ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_delete")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_delete")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_delete")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Object Record Attachment Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_get(object_name : String, object_record_id : String, attachment_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachments_attachment_id_get_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Object Record Attachment Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_get_with_http_info(object_name : String, object_record_id : String, attachment_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_get")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Object Record Attachment Description
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_put(object_name : String, object_record_id : String, attachment_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachments_attachment_id_put_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Update Object Record Attachment Description
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_put_with_http_info(object_name : String, object_record_id : String, attachment_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_put ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_put")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_put")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_put")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete Object Record Attachment Version
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete(object_name : String, object_record_id : String, attachment_id : String, attachment_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Delete Object Record Attachment Version
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(object_name : String, object_record_id : String, attachment_id : String, attachment_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete")
      end
      # verify the required parameter "attachment_version" is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_version' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s)).sub("{" + "attachment_version" + "}", URI.encode_path(attachment_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download Object Record Attachment File
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] 
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get(object_name : String, object_record_id : String, attachment_id : String, attachment_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download Object Record Attachment File
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(object_name : String, object_record_id : String, attachment_id : String, attachment_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # verify the required parameter "attachment_version" is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_version' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s)).sub("{" + "attachment_version" + "}", URI.encode_path(attachment_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Object Record Attachment Version Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get(object_name : String, object_record_id : String, attachment_id : String, attachment_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Object Record Attachment Version Metadata
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(object_name : String, object_record_id : String, attachment_id : String, attachment_version : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get")
      end
      # verify the required parameter "attachment_version" is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_version' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s)).sub("{" + "attachment_version" + "}", URI.encode_path(attachment_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Restore Object Record Attachment Version
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post(object_name : String, object_record_id : String, attachment_id : String, attachment_version : String, restore : Bool? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(object_name, object_record_id, attachment_id, attachment_version, restore, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Restore Object Record Attachment Version
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @param attachment_version [String] The attachment version__v field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(object_name : String, object_record_id : String, attachment_id : String, attachment_version : String, restore : Bool? = nil, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post")
      end
      # verify the required parameter "attachment_version" is set
      if @api_client.config.client_side_validation && attachment_version.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_version' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s)).sub("{" + "attachment_version" + "}", URI.encode_path(attachment_version.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["restore"] = restore.to_s unless restore.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Object Record Attachment Versions
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_get(object_name : String, object_record_id : String, attachment_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachments_attachment_id_versions_get_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Object Record Attachment Versions
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @param attachment_id [String] The attachment id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_get_with_http_info(object_name : String, object_record_id : String, attachment_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get")
      end
      # verify the required parameter "attachment_id" is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        raise ArgumentError.new("Missing the required parameter 'attachment_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s)).sub("{" + "attachment_id" + "}", URI.encode_path(attachment_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachments_attachment_id_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Download All Object Record Attachment Files
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_file_get(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachments_file_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Download All Object Record Attachment Files
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_file_get_with_http_info(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_file_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_file_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_file_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachments/file".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachments_file_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachments_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_get(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachments_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Object Record Attachments
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_get_with_http_info(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachments".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachments_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create Object Record Attachment
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_attachments_post(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_attachments_post_with_http_info(object_name, object_record_id, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Create Object Record Attachment
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_attachments_post_with_http_info(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_attachments_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_post")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_attachments_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/attachments".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_attachments_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_attachments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Complete Audit History for a Single Object Record
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @return [nil]
    def vobjects_object_name_object_record_id_audittrail_get(object_name : String, object_record_id : String, start_date : String? = nil, end_date : String? = nil, format_result : String? = nil, limit : String? = nil, offset : String? = nil, events : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_audittrail_get_with_http_info(object_name, object_record_id, start_date, end_date, format_result, limit, offset, events, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Complete Audit History for a Single Object Record
    # @param object_name [String] The object name__v field value.
    # @param object_record_id [String] The object record id field value from which to retrieve user actions.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_audittrail_get_with_http_info(object_name : String, object_record_id : String, start_date : String? = nil, end_date : String? = nil, format_result : String? = nil, limit : String? = nil, offset : String? = nil, events : String? = nil, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_audittrail_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_audittrail_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_audittrail_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}/audittrail".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["format_result"] = format_result.to_s unless format_result.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?
      query_params["events"] = events.to_s unless events.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_audittrail_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_audittrail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [nil]
    def vobjects_object_name_object_record_id_get(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_object_record_id_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Object Record
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @param object_record_id [String] The object record id field value.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_object_record_id_get_with_http_info(object_name : String, object_record_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_object_record_id_get ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_object_record_id_get")
      end
      # verify the required parameter "object_record_id" is set
      if @api_client.config.client_side_validation && object_record_id.nil?
        raise ArgumentError.new("Missing the required parameter 'object_record_id' when calling DefaultApi.vobjects_object_name_object_record_id_get")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/{object_record_id}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s)).sub("{" + "object_record_id" + "}", URI.encode_path(object_record_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_object_record_id_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_object_record_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create & Upsert Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [nil]
    def vobjects_object_name_post(object_name : String, id_param : String? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_no_triggers : Bool? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_post_with_http_info(object_name, id_param, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_no_triggers, x_vault_api_client_id)
      nil
    end

    # Create &amp; Upsert Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_post_with_http_info(object_name : String, id_param : String? = nil, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_no_triggers : Bool? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["idParam"] = id_param.to_s unless id_param.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-MigrationMode"] = x_vault_api_migration_mode
      header_params["X-VaultAPI-NoTriggers"] = x_vault_api_no_triggers
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [nil]
    def vobjects_object_name_put(object_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_no_triggers : Bool? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_put_with_http_info(object_name, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_no_triggers, x_vault_api_client_id)
      nil
    end

    # Update Object Records
    # @param object_name [String] The object name__v field value (product__v, country__v, custom_object__c, etc.).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_put_with_http_info(object_name : String, authorization : String? = nil, content_type : String? = nil, accept : String? = nil, x_vault_api_migration_mode : Bool? = nil, x_vault_api_no_triggers : Bool? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_put ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_put")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Content-Type"] = content_type
      header_params["Accept"] = accept
      header_params["X-VaultAPI-MigrationMode"] = x_vault_api_migration_mode
      header_params["X-VaultAPI-NoTriggers"] = x_vault_api_no_triggers
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_put",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Remove Users & Groups from Roles on Object Records
    # @param object_name [String] The name of the object where you want to remove roles.
    # @return [nil]
    def vobjects_object_name_roles_delete(object_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_roles_delete_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Remove Users &amp; Groups from Roles on Object Records
    # @param object_name [String] The name of the object where you want to remove roles.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_roles_delete_with_http_info(object_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_roles_delete ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_roles_delete")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/roles".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_roles_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_roles_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Assign Users & Groups to Roles on Object Records
    # @param object_name [String] The name of the object where you want to remove roles.
    # @return [nil]
    def vobjects_object_name_roles_post(object_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_object_name_roles_post_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id)
      nil
    end

    # Assign Users &amp; Groups to Roles on Object Records
    # @param object_name [String] The name of the object where you want to remove roles.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_object_name_roles_post_with_http_info(object_name : String, authorization : String? = nil, accept : String? = nil, content_type : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_object_name_roles_post ..."}
      end
      # verify the required parameter "object_name" is set
      if @api_client.config.client_side_validation && object_name.nil?
        raise ArgumentError.new("Missing the required parameter 'object_name' when calling DefaultApi.vobjects_object_name_roles_post")
      end
      # resource path
      local_var_path = "/vobjects/{object_name}/roles".sub("{" + "object_name" + "}", URI.encode_path(object_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["Content-Type"] = content_type
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_object_name_roles_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_object_name_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve Outbound Package Dependencies
    # @param package_id [String] The ID of the outbound_package__v record from which to retrieve dependencies.
    # @return [nil]
    def vobjects_outbound_package_v_package_id_dependencies_get(package_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      vobjects_outbound_package_v_package_id_dependencies_get_with_http_info(package_id, authorization, accept, x_vault_api_client_id)
      nil
    end

    # Retrieve Outbound Package Dependencies
    # @param package_id [String] The ID of the outbound_package__v record from which to retrieve dependencies.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vobjects_outbound_package_v_package_id_dependencies_get_with_http_info(package_id : String, authorization : String? = nil, accept : String? = nil, x_vault_api_client_id : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.vobjects_outbound_package_v_package_id_dependencies_get ..."}
      end
      # verify the required parameter "package_id" is set
      if @api_client.config.client_side_validation && package_id.nil?
        raise ArgumentError.new("Missing the required parameter 'package_id' when calling DefaultApi.vobjects_outbound_package_v_package_id_dependencies_get")
      end
      # resource path
      local_var_path = "/vobjects/outbound_package__v/{package_id}/dependencies".sub("{" + "package_id" + "}", URI.encode_path(package_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Authorization"] = authorization
      header_params["Accept"] = accept
      header_params["X-VaultAPI-ClientID"] = x_vault_api_client_id

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.vobjects_outbound_package_v_package_id_dependencies_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#vobjects_outbound_package_v_package_id_dependencies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end
  end
end
