// <auto-generated>
/*
 * Veeva Vault API v25.1
 *
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VobjectsObjectNameActionsMergePostRequestInner
    /// </summary>
    public partial class VobjectsObjectNameActionsMergePostRequestInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VobjectsObjectNameActionsMergePostRequestInner" /> class.
        /// </summary>
        /// <param name="duplicateRecordId">duplicateRecordId</param>
        /// <param name="mainRecordId">mainRecordId</param>
        [JsonConstructor]
        public VobjectsObjectNameActionsMergePostRequestInner(Option<string?> duplicateRecordId = default, Option<string?> mainRecordId = default)
        {
            DuplicateRecordIdOption = duplicateRecordId;
            MainRecordIdOption = mainRecordId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DuplicateRecordId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DuplicateRecordIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets DuplicateRecordId
        /// </summary>
        [JsonPropertyName("duplicate_record_id")]
        public string? DuplicateRecordId { get { return this.DuplicateRecordIdOption; } set { this.DuplicateRecordIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MainRecordId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MainRecordIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets MainRecordId
        /// </summary>
        [JsonPropertyName("main_record_id")]
        public string? MainRecordId { get { return this.MainRecordIdOption; } set { this.MainRecordIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VobjectsObjectNameActionsMergePostRequestInner {\n");
            sb.Append("  DuplicateRecordId: ").Append(DuplicateRecordId).Append("\n");
            sb.Append("  MainRecordId: ").Append(MainRecordId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VobjectsObjectNameActionsMergePostRequestInner" />
    /// </summary>
    public class VobjectsObjectNameActionsMergePostRequestInnerJsonConverter : JsonConverter<VobjectsObjectNameActionsMergePostRequestInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="VobjectsObjectNameActionsMergePostRequestInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VobjectsObjectNameActionsMergePostRequestInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> duplicateRecordId = default;
            Option<string?> mainRecordId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "duplicate_record_id":
                            duplicateRecordId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "main_record_id":
                            mainRecordId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (duplicateRecordId.IsSet && duplicateRecordId.Value == null)
                throw new ArgumentNullException(nameof(duplicateRecordId), "Property is not nullable for class VobjectsObjectNameActionsMergePostRequestInner.");

            if (mainRecordId.IsSet && mainRecordId.Value == null)
                throw new ArgumentNullException(nameof(mainRecordId), "Property is not nullable for class VobjectsObjectNameActionsMergePostRequestInner.");

            return new VobjectsObjectNameActionsMergePostRequestInner(duplicateRecordId, mainRecordId);
        }

        /// <summary>
        /// Serializes a <see cref="VobjectsObjectNameActionsMergePostRequestInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vobjectsObjectNameActionsMergePostRequestInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VobjectsObjectNameActionsMergePostRequestInner vobjectsObjectNameActionsMergePostRequestInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, vobjectsObjectNameActionsMergePostRequestInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VobjectsObjectNameActionsMergePostRequestInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vobjectsObjectNameActionsMergePostRequestInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VobjectsObjectNameActionsMergePostRequestInner vobjectsObjectNameActionsMergePostRequestInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vobjectsObjectNameActionsMergePostRequestInner.DuplicateRecordIdOption.IsSet && vobjectsObjectNameActionsMergePostRequestInner.DuplicateRecordId == null)
                throw new ArgumentNullException(nameof(vobjectsObjectNameActionsMergePostRequestInner.DuplicateRecordId), "Property is required for class VobjectsObjectNameActionsMergePostRequestInner.");

            if (vobjectsObjectNameActionsMergePostRequestInner.MainRecordIdOption.IsSet && vobjectsObjectNameActionsMergePostRequestInner.MainRecordId == null)
                throw new ArgumentNullException(nameof(vobjectsObjectNameActionsMergePostRequestInner.MainRecordId), "Property is required for class VobjectsObjectNameActionsMergePostRequestInner.");

            if (vobjectsObjectNameActionsMergePostRequestInner.DuplicateRecordIdOption.IsSet)
                writer.WriteString("duplicate_record_id", vobjectsObjectNameActionsMergePostRequestInner.DuplicateRecordId);

            if (vobjectsObjectNameActionsMergePostRequestInner.MainRecordIdOption.IsSet)
                writer.WriteString("main_record_id", vobjectsObjectNameActionsMergePostRequestInner.MainRecordId);
        }
    }
}
