#
# Veeva Vault API v25.1
# The latest GA version of the Vault REST API.
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Retrieve API Versions

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ApiGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ApiGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Content File

.DESCRIPTION

No description available.

.PARAMETER ComponentTypeAndRecordName
The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ApiMdlComponentsComponentTypeAndRecordNameFilesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ComponentTypeAndRecordName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ApiMdlComponentsComponentTypeAndRecordNameFilesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/mdl/components/{component_type_and_record_name}/files'
        if (!$ComponentTypeAndRecordName) {
            throw "Error! The required parameter `ComponentTypeAndRecordName` missing when calling apiMdlComponentsComponentTypeAndRecordNameFilesGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{component_type_and_record_name}', [System.Web.HTTPUtility]::UrlEncode($ComponentTypeAndRecordName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Component Record (MDL)

.DESCRIPTION

No description available.

.PARAMETER ComponentTypeAndRecordName
The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ApiMdlComponentsComponentTypeAndRecordNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ComponentTypeAndRecordName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ApiMdlComponentsComponentTypeAndRecordNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/mdl/components/{component_type_and_record_name}'
        if (!$ComponentTypeAndRecordName) {
            throw "Error! The required parameter `ComponentTypeAndRecordName` missing when calling apiMdlComponentsComponentTypeAndRecordNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{component_type_and_record_name}', [System.Web.HTTPUtility]::UrlEncode($ComponentTypeAndRecordName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Asynchronous MDL Script Results

.DESCRIPTION

No description available.

.PARAMETER JobId
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ApiMdlExecuteAsyncJobIdResultsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ApiMdlExecuteAsyncJobIdResultsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/mdl/execute_async/{job_id}/results'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling apiMdlExecuteAsyncJobIdResultsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Execute MDL Script Asynchronously

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ApiMdlExecuteAsyncPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ApiMdlExecuteAsyncPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/mdl/execute_async'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Execute MDL Script

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ApiMdlExecutePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ApiMdlExecutePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/mdl/execute'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Upload Content File

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ApiMdlFilesPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ApiMdlFilesPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/mdl/files'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Audit Details

.DESCRIPTION

No description available.

.PARAMETER AuditTrailType
The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.

.PARAMETER StartDate
Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.

.PARAMETER EndDate
Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.

.PARAMETER AllDates
Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.

.PARAMETER FormatResult
To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.

.PARAMETER Limit
Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.

.PARAMETER Offset
Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.

.PARAMETER Objects
This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.

.PARAMETER Events
This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-AudittrailAuditTrailTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AuditTrailType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AllDates},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FormatResult},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Limit},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Offset},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Objects},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Events},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-AudittrailAuditTrailTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/audittrail/{audit_trail_type}'
        if (!$AuditTrailType) {
            throw "Error! The required parameter `AuditTrailType` missing when calling audittrailAuditTrailTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{audit_trail_type}', [System.Web.HTTPUtility]::UrlEncode($AuditTrailType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($StartDate) {
            $LocalVarQueryParameters['start_date'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['end_date'] = $EndDate
        }

        if ($AllDates) {
            $LocalVarQueryParameters['all_dates'] = $AllDates
        }

        if ($FormatResult) {
            $LocalVarQueryParameters['format_result'] = $FormatResult
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Objects) {
            $LocalVarQueryParameters['objects'] = $Objects
        }

        if ($Events) {
            $LocalVarQueryParameters['events'] = $Events
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Authentication Type Discovery

.DESCRIPTION

No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-AuthDiscoveryPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-AuthDiscoveryPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/auth/discovery'

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

OAuth 2.0 / OpenID Connect

.DESCRIPTION

No description available.

.PARAMETER OathOidcProfileId
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-AuthOauthSessionOathOidcProfileIdPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OathOidcProfileId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-AuthOauthSessionOathOidcProfileIdPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/auth/oauth/session/{oath_oidc_profile_id}'
        if (!$OathOidcProfileId) {
            throw "Error! The required parameter `OathOidcProfileId` missing when calling authOauthSessionOathOidcProfileIdPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{oath_oidc_profile_id}', [System.Web.HTTPUtility]::UrlEncode($OathOidcProfileId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

User Name and Password

.DESCRIPTION

No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-AuthPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-AuthPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/auth'

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Single Source Code File

.DESCRIPTION

No description available.

.PARAMETER ClassName
The fully qualified class name of your file.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CodeClassNameDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ClassName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CodeClassNameDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/code/{class_name}'
        if (!$ClassName) {
            throw "Error! The required parameter `ClassName` missing when calling codeClassNameDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{class_name}', [System.Web.HTTPUtility]::UrlEncode($ClassName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Disable Vault Extension

.DESCRIPTION

No description available.

.PARAMETER ClassName
The fully qualified class name of your file.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CodeClassNameDisablePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ClassName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CodeClassNameDisablePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/code/{class_name}/disable'
        if (!$ClassName) {
            throw "Error! The required parameter `ClassName` missing when calling codeClassNameDisablePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{class_name}', [System.Web.HTTPUtility]::UrlEncode($ClassName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Enable Vault Extension

.DESCRIPTION

No description available.

.PARAMETER ClassName
The fully qualified class name of your file.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CodeClassNameEnablePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ClassName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CodeClassNameEnablePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/code/{class_name}/enable'
        if (!$ClassName) {
            throw "Error! The required parameter `ClassName` missing when calling codeClassNameEnablePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{class_name}', [System.Web.HTTPUtility]::UrlEncode($ClassName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Single Source Code File

.DESCRIPTION

No description available.

.PARAMETER ClassName
The fully qualified class name of your file.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CodeClassNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ClassName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CodeClassNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/code/{class_name}'
        if (!$ClassName) {
            throw "Error! The required parameter `ClassName` missing when calling codeClassNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{class_name}', [System.Web.HTTPUtility]::UrlEncode($ClassName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Profiling Sessions

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CodeProfilerGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CodeProfilerGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/code/profiler'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Profiling Session

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CodeProfilerPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CodeProfilerPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/code/profiler'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

End Profiling Session

.DESCRIPTION

No description available.

.PARAMETER SessionName
The name of the session, for example,  baseline__c.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CodeProfilerSessionNameActionsEndPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SessionName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CodeProfilerSessionNameActionsEndPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/code/profiler/{session_name}/actions/end'
        if (!$SessionName) {
            throw "Error! The required parameter `SessionName` missing when calling codeProfilerSessionNameActionsEndPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{session_name}', [System.Web.HTTPUtility]::UrlEncode($SessionName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Profiling Session

.DESCRIPTION

No description available.

.PARAMETER SessionName
The name of the session, for example,  baseline__c.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CodeProfilerSessionNameDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SessionName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CodeProfilerSessionNameDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/code/profiler/{session_name}'
        if (!$SessionName) {
            throw "Error! The required parameter `SessionName` missing when calling codeProfilerSessionNameDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{session_name}', [System.Web.HTTPUtility]::UrlEncode($SessionName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Profiling Session

.DESCRIPTION

No description available.

.PARAMETER SessionName
The name of the session, for example,  baseline__c.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CodeProfilerSessionNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SessionName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CodeProfilerSessionNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/code/profiler/{session_name}'
        if (!$SessionName) {
            throw "Error! The required parameter `SessionName` missing when calling codeProfilerSessionNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{session_name}', [System.Web.HTTPUtility]::UrlEncode($SessionName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Profiling Session Results

.DESCRIPTION

No description available.

.PARAMETER SessionName
The name of the session, for example,  baseline__c.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CodeProfilerSessionNameResultsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SessionName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CodeProfilerSessionNameResultsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/code/profiler/{session_name}/results'
        if (!$SessionName) {
            throw "Error! The required parameter `SessionName` missing when calling codeProfilerSessionNameResultsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{session_name}', [System.Web.HTTPUtility]::UrlEncode($SessionName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Add or Replace Single Source Code File

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CodePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CodePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/code'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Specific Root Nodes

.DESCRIPTION

No description available.

.PARAMETER EdlHierarchyOrTemplate
Choose to retrieve either edl_hierarchy__v or edl_template__v

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CompositesTreesEdlHierarchyOrTemplateActionsListnodesPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EdlHierarchyOrTemplate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CompositesTreesEdlHierarchyOrTemplateActionsListnodesPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/composites/trees/{edl_hierarchy_or_template}/actions/listnodes'
        if (!$EdlHierarchyOrTemplate) {
            throw "Error! The required parameter `EdlHierarchyOrTemplate` missing when calling compositesTreesEdlHierarchyOrTemplateActionsListnodesPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{edl_hierarchy_or_template}', [System.Web.HTTPUtility]::UrlEncode($EdlHierarchyOrTemplate))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Root Nodes

.DESCRIPTION

No description available.

.PARAMETER EdlHierarchyOrTemplate
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CompositesTreesEdlHierarchyOrTemplateGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EdlHierarchyOrTemplate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CompositesTreesEdlHierarchyOrTemplateGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/composites/trees/{edl_hierarchy_or_template}'
        if (!$EdlHierarchyOrTemplate) {
            throw "Error! The required parameter `EdlHierarchyOrTemplate` missing when calling compositesTreesEdlHierarchyOrTemplateGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{edl_hierarchy_or_template}', [System.Web.HTTPUtility]::UrlEncode($EdlHierarchyOrTemplate))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve a Node's Children

.DESCRIPTION

No description available.

.PARAMETER ParentNodeId
The ID of a parent node in the hierarchy.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CompositesTreesEdlHierarchyVParentNodeIdChildrenGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ParentNodeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CompositesTreesEdlHierarchyVParentNodeIdChildrenGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/composites/trees/edl_hierarchy__v/{parent_node_id}/children'
        if (!$ParentNodeId) {
            throw "Error! The required parameter `ParentNodeId` missing when calling compositesTreesEdlHierarchyVParentNodeIdChildrenGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{parent_node_id}', [System.Web.HTTPUtility]::UrlEncode($ParentNodeId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Node Order

.DESCRIPTION

No description available.

.PARAMETER ParentNodeId
The ID of a parent node in the hierarchy.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-CompositesTreesEdlHierarchyVParentNodeIdChildrenPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ParentNodeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-CompositesTreesEdlHierarchyVParentNodeIdChildrenPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/composites/trees/edl_hierarchy__v/{parent_node_id}/children'
        if (!$ParentNodeId) {
            throw "Error! The required parameter `ParentNodeId` missing when calling compositesTreesEdlHierarchyVParentNodeIdChildrenPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{parent_node_id}', [System.Web.HTTPUtility]::UrlEncode($ParentNodeId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Component Record (XML/JSON)

.DESCRIPTION

No description available.

.PARAMETER ComponentTypeAndRecordName
The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.

.PARAMETER Loc
When localized (translated) strings are available, retrieve them by setting loc to true.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ConfigurationComponentTypeAndRecordNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ComponentTypeAndRecordName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Loc},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ConfigurationComponentTypeAndRecordNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/configuration/{component_type_and_record_name}'
        if (!$ComponentTypeAndRecordName) {
            throw "Error! The required parameter `ComponentTypeAndRecordName` missing when calling configurationComponentTypeAndRecordNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{component_type_and_record_name}', [System.Web.HTTPUtility]::UrlEncode($ComponentTypeAndRecordName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Component Record Collection

.DESCRIPTION

No description available.

.PARAMETER ComponentType
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ConfigurationComponentTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ComponentType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ConfigurationComponentTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/configuration/{component_type}'
        if (!$ComponentType) {
            throw "Error! The required parameter `ComponentType` missing when calling configurationComponentTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{component_type}', [System.Web.HTTPUtility]::UrlEncode($ComponentType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Details from a Specific Object

.DESCRIPTION

No description available.

.PARAMETER ObjectNameAndObjectType
The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`.

.PARAMETER Loc
When localized (translated) strings are available, retrieve them by setting loc to true.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ConfigurationObjectNameAndObjectTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectNameAndObjectType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Loc},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ConfigurationObjectNameAndObjectTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/configuration/{object_name_and_object_type}'
        if (!$ObjectNameAndObjectType) {
            throw "Error! The required parameter `ObjectNameAndObjectType` missing when calling configurationObjectNameAndObjectTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name_and_object_type}', [System.Web.HTTPUtility]::UrlEncode($ObjectNameAndObjectType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Details from All Object Types

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ConfigurationObjecttypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ConfigurationObjecttypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/configuration/Objecttype'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Lifecycle Role Assignment Override Rules

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ConfigurationRoleAssignmentRuleDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ConfigurationRoleAssignmentRuleDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/configuration/role_assignment_rule'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Lifecycle Role Assignment Rules (Default & Override)

.DESCRIPTION

No description available.

.PARAMETER LifecycleV
Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c

.PARAMETER RoleV
Include the name of the role from which to retrieve information. For example: role__v=editor__c

.PARAMETER ProductV
Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap

.PARAMETER CountryV
Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States

.PARAMETER StudyV
In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study

.PARAMETER StudyCountryV
In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ConfigurationRoleAssignmentRuleGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LifecycleV},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RoleV},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProductV},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CountryV},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StudyV},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StudyCountryV},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ConfigurationRoleAssignmentRuleGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/configuration/role_assignment_rule'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($LifecycleV) {
            $LocalVarQueryParameters['lifecycle__v'] = $LifecycleV
        }

        if ($RoleV) {
            $LocalVarQueryParameters['role__v'] = $RoleV
        }

        if ($ProductV) {
            $LocalVarQueryParameters['product__v'] = $ProductV
        }

        if ($CountryV) {
            $LocalVarQueryParameters['country__v'] = $CountryV
        }

        if ($StudyV) {
            $LocalVarQueryParameters['study__v'] = $StudyV
        }

        if ($StudyCountryV) {
            $LocalVarQueryParameters['study_country__v'] = $StudyCountryV
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Lifecycle Role Assignment Override Rules

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ConfigurationRoleAssignmentRulePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ConfigurationRoleAssignmentRulePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/configuration/role_assignment_rule'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Lifecycle Role Assignment Rules (Default & Override)

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ConfigurationRoleAssignmentRulePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ConfigurationRoleAssignmentRulePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/configuration/role_assignment_rule'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Delegated Session

.DESCRIPTION

No description available.

.PARAMETER Authorization
The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DelegationLoginPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DelegationLoginPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/delegation/login'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Delegations

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DelegationVaultsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DelegationVaultsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/delegation/vaults'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Session Keep Alive

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-KeepAlivePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-KeepAlivePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/keep-alive'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Limits on Objects

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Limit-sGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Limit-sGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/limits'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Daily API Usage

.DESCRIPTION

No description available.

.PARAMETER Date
The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.

.PARAMETER LogFormat
Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-LogsApiUsageGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Date},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LogFormat},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-LogsApiUsageGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/logs/api_usage'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Date) {
            $LocalVarQueryParameters['date'] = $Date
        }

        if ($LogFormat) {
            $LocalVarQueryParameters['log_format'] = $LogFormat
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Debug Logs

.DESCRIPTION

No description available.

.PARAMETER UserId
Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.

.PARAMETER IncludeInactive
Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-LogsCodeDebugGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UserId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeInactive},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-LogsCodeDebugGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/logs/code/debug'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($UserId) {
            $LocalVarQueryParameters['user_id'] = $UserId
        }

        if ($IncludeInactive) {
            $LocalVarQueryParameters['include_inactive'] = $IncludeInactive
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Debug Log

.DESCRIPTION

No description available.

.PARAMETER Id
The ID of the debug log to delete.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-LogsCodeDebugIdActionsResetDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-LogsCodeDebugIdActionsResetDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/logs/code/debug/{id}/actions/reset'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling logsCodeDebugIdActionsResetDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Reset Debug Log

.DESCRIPTION

No description available.

.PARAMETER Id
The ID of the debug log to delete.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-LogsCodeDebugIdActionsResetPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-LogsCodeDebugIdActionsResetPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/logs/code/debug/{id}/actions/reset'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling logsCodeDebugIdActionsResetPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Debug Log Files

.DESCRIPTION

No description available.

.PARAMETER Id
The ID of the debug log to download.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-LogsCodeDebugIdFilesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-LogsCodeDebugIdFilesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/logs/code/debug/{id}/files'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling logsCodeDebugIdFilesGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Single Debug Log

.DESCRIPTION

No description available.

.PARAMETER Id
The ID of the debug log to retrieve.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-LogsCodeDebugIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-LogsCodeDebugIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/logs/code/debug/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling logsCodeDebugIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Debug Log

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-LogsCodeDebugPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-LogsCodeDebugPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/logs/code/debug'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download SDK Runtime Log

.DESCRIPTION

No description available.

.PARAMETER Date
No description available.

.PARAMETER LogFormat
Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-LogsCodeRuntimeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Date},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LogFormat},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-LogsCodeRuntimeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/logs/code/runtime'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Date) {
            $LocalVarQueryParameters['date'] = $Date
        }

        if ($LogFormat) {
            $LocalVarQueryParameters['log_format'] = $LogFormat
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Import Bulk Translation File

.DESCRIPTION

No description available.

.PARAMETER MessageType
The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MessagesMessageTypeActionsImportPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MessageType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MessagesMessageTypeActionsImportPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/messages/{message_type}/actions/import'
        if (!$MessageType) {
            throw "Error! The required parameter `MessageType` missing when calling messagesMessageTypeActionsImportPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{message_type}', [System.Web.HTTPUtility]::UrlEncode($MessageType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Export Bulk Translation File

.DESCRIPTION

No description available.

.PARAMETER MessageType
The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.

.PARAMETER Lang
A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MessagesMessageTypeLanguageLangActionsExportPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MessageType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Lang},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MessagesMessageTypeLanguageLangActionsExportPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/messages/{message_type}/language/{lang}/actions/export'
        if (!$MessageType) {
            throw "Error! The required parameter `MessageType` missing when calling messagesMessageTypeLanguageLangActionsExportPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{message_type}', [System.Web.HTTPUtility]::UrlEncode($MessageType))
        if (!$Lang) {
            throw "Error! The required parameter `Lang` missing when calling messagesMessageTypeLanguageLangActionsExportPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{lang}', [System.Web.HTTPUtility]::UrlEncode($Lang))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Audit Metadata

.DESCRIPTION

No description available.

.PARAMETER AuditTrailType
The name of the specified audit type (document_audit_trail, object_audit_trail, etc).

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataAudittrailAuditTrailTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AuditTrailType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataAudittrailAuditTrailTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/audittrail/{audit_trail_type}'
        if (!$AuditTrailType) {
            throw "Error! The required parameter `AuditTrailType` missing when calling metadataAudittrailAuditTrailTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{audit_trail_type}', [System.Web.HTTPUtility]::UrlEncode($AuditTrailType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Audit Types

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataAudittrailGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataAudittrailGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/audittrail'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Component Type Metadata

.DESCRIPTION

No description available.

.PARAMETER ComponentType
The component type name (Picklist, Docfield, Doctype, etc.).

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataComponentsComponentTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ComponentType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataComponentsComponentTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/components/{component_type}'
        if (!$ComponentType) {
            throw "Error! The required parameter `ComponentType` missing when calling metadataComponentsComponentTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{component_type}', [System.Web.HTTPUtility]::UrlEncode($ComponentType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Component Metadata

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataComponentsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataComponentsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/components'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder Template Node Metadata

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsBindersTemplatesBindernodesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsBindersTemplatesBindernodesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/binders/templates/bindernodes'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder Template Metadata

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsBindersTemplatesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsBindersTemplatesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/binders/templates'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Annotation Placemark Type Metadata

.DESCRIPTION

No description available.

.PARAMETER PlacemarkType
The name of the placemark type. For example, sticky__sys.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PlacemarkType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/annotations/placemarks/types/{placemark_type}'
        if (!$PlacemarkType) {
            throw "Error! The required parameter `PlacemarkType` missing when calling metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{placemark_type}', [System.Web.HTTPUtility]::UrlEncode($PlacemarkType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Annotation Reference Type Metadata

.DESCRIPTION

No description available.

.PARAMETER ReferenceType
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ReferenceType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/annotations/references/types/{reference_type}'
        if (!$ReferenceType) {
            throw "Error! The required parameter `ReferenceType` missing when calling metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{reference_type}', [System.Web.HTTPUtility]::UrlEncode($ReferenceType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Annotation Type Metadata

.DESCRIPTION

No description available.

.PARAMETER AnnotationType
The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys`

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AnnotationType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/annotations/types/{annotation_type}'
        if (!$AnnotationType) {
            throw "Error! The required parameter `AnnotationType` missing when calling metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{annotation_type}', [System.Web.HTTPUtility]::UrlEncode($AnnotationType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Event SubType Metadata

.DESCRIPTION

No description available.

.PARAMETER EventType
The event type. For example, distribution__v.

.PARAMETER EventSubtype
The event subtype. For example, approved_email__v.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EventType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EventSubtype},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/events/{event_type}/types/{event_subtype}'
        if (!$EventType) {
            throw "Error! The required parameter `EventType` missing when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{event_type}', [System.Web.HTTPUtility]::UrlEncode($EventType))
        if (!$EventSubtype) {
            throw "Error! The required parameter `EventSubtype` missing when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{event_subtype}', [System.Web.HTTPUtility]::UrlEncode($EventSubtype))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Event Types and Subtypes

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsEventsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsEventsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/events'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Lock Metadata

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsLockGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsLockGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/lock'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Common Document Fields

.DESCRIPTION

No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsPropertiesFindCommonPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsPropertiesFindCommonPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/properties/find_common'

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Document Fields

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsPropertiesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsPropertiesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/properties'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Template Metadata

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsTemplatesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsTemplatesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/templates'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Document Types

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsTypesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsTypesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/types'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Type

.DESCRIPTION

No description available.

.PARAMETER Type
The document type. See Retrieve Document Types.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsTypesTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsTypesTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/types/{type}'
        if (!$Type) {
            throw "Error! The required parameter `Type` missing when calling metadataObjectsDocumentsTypesTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{type}', [System.Web.HTTPUtility]::UrlEncode($Type))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Type Relationships

.DESCRIPTION

No description available.

.PARAMETER Type
The document type. See Retrieve Document Types.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsTypesTypeRelationshipsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsTypesTypeRelationshipsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/types/{type}/relationships'
        if (!$Type) {
            throw "Error! The required parameter `Type` missing when calling metadataObjectsDocumentsTypesTypeRelationshipsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{type}', [System.Web.HTTPUtility]::UrlEncode($Type))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Classification

.DESCRIPTION

No description available.

.PARAMETER Type
The document type. See Retrieve Document Types.

.PARAMETER Subtype
The document subtype. See Retrieve Document Types.

.PARAMETER Classification
The document classification. See Retrieve Document Types.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Subtype},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Classification},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}'
        if (!$Type) {
            throw "Error! The required parameter `Type` missing when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{type}', [System.Web.HTTPUtility]::UrlEncode($Type))
        if (!$Subtype) {
            throw "Error! The required parameter `Subtype` missing when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{subtype}', [System.Web.HTTPUtility]::UrlEncode($Subtype))
        if (!$Classification) {
            throw "Error! The required parameter `Classification` missing when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{classification}', [System.Web.HTTPUtility]::UrlEncode($Classification))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Subtype

.DESCRIPTION

No description available.

.PARAMETER Type
The document type. See Retrieve Document Types.

.PARAMETER Subtype
The document subtype. See Retrieve Document Types.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Subtype},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/documents/types/{type}/subtypes/{subtype}'
        if (!$Type) {
            throw "Error! The required parameter `Type` missing when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{type}', [System.Web.HTTPUtility]::UrlEncode($Type))
        if (!$Subtype) {
            throw "Error! The required parameter `Subtype` missing when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{subtype}', [System.Web.HTTPUtility]::UrlEncode($Subtype))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Group Metadata

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsGroupsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsGroupsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/groups'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Security Policy Metadata

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsSecuritypoliciesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsSecuritypoliciesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/securitypolicies'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve User Metadata

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataObjectsUsersGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataObjectsUsersGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/objects/users'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Archived Document Signature Metadata

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/query/archived_documents/relationships/document_signature__sysr'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Signature Metadata

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/query/documents/relationships/document_signature__sysr'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Object Collection

.DESCRIPTION

No description available.

.PARAMETER Loc
To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataVobjectsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Loc},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataVobjectsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/vobjects'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Cancel Raw Object Deployment

.DESCRIPTION

No description available.

.PARAMETER ObjectName
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataVobjectsObjectNameActionsCanceldeploymentPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataVobjectsObjectNameActionsCanceldeploymentPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/vobjects/{object_name}/actions/canceldeployment'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling metadataVobjectsObjectNameActionsCanceldeploymentPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Object Field Metadata

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectFieldName
The object field name value (id, name__v, external_id__v, etc.).

.PARAMETER Loc
To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataVobjectsObjectNameFieldsObjectFieldNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectFieldName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Loc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataVobjectsObjectNameFieldsObjectFieldNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/vobjects/{object_name}/fields/{object_field_name}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectFieldName) {
            throw "Error! The required parameter `ObjectFieldName` missing when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_field_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectFieldName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Object Metadata

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER Loc
To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataVobjectsObjectNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Loc},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataVobjectsObjectNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/vobjects/{object_name}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling metadataVobjectsObjectNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Page Layouts

.DESCRIPTION

No description available.

.PARAMETER ObjectName
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataVobjectsObjectNamePageLayoutsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataVobjectsObjectNamePageLayoutsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/vobjects/{object_name}/page_layouts'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling metadataVobjectsObjectNamePageLayoutsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Page Layout Metadata

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The name of the object from which to retrieve page layout metadata.

.PARAMETER LayoutName
The name of the page layout from which to retrieve metadata.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-MetadataVobjectsObjectNamePageLayoutsLayoutNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LayoutName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-MetadataVobjectsObjectNamePageLayoutsLayoutNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/metadata/vobjects/{object_name}/page_layouts/{layout_name}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$LayoutName) {
            throw "Error! The required parameter `LayoutName` missing when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{layout_name}', [System.Web.HTTPUtility]::UrlEncode($LayoutName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Email Notification Histories

.DESCRIPTION

No description available.

.PARAMETER StartDate
Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.

.PARAMETER EndDate
Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.

.PARAMETER AllDates
Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.

.PARAMETER FormatResult
To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.

.PARAMETER Limit
Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.

.PARAMETER Offset
Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-NotificationsHistoriesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AllDates},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FormatResult},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Limit},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Offset},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-NotificationsHistoriesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/notifications/histories'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($StartDate) {
            $LocalVarQueryParameters['start_date'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['end_date'] = $EndDate
        }

        if ($AllDates) {
            $LocalVarQueryParameters['all_dates'] = $AllDates
        }

        if ($FormatResult) {
            $LocalVarQueryParameters['format_result'] = $FormatResult
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Bulk Workflow Action Details

.DESCRIPTION

No description available.

.PARAMETER Action
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-WorkflowActionsActionGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Action},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-WorkflowActionsActionGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/object/workflow/actions/{action}'
        if (!$Action) {
            throw "Error! The required parameter `Action` missing when calling objectWorkflowActionsActionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{action}', [System.Web.HTTPUtility]::UrlEncode($Action))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Workflow Actions on Multiple Workflows

.DESCRIPTION

No description available.

.PARAMETER Action
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-WorkflowActionsActionPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Action},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-WorkflowActionsActionPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/object/workflow/actions/{action}'
        if (!$Action) {
            throw "Error! The required parameter `Action` missing when calling objectWorkflowActionsActionPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{action}', [System.Web.HTTPUtility]::UrlEncode($Action))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Cancel Workflow Tasks

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-WorkflowActionsCanceltasksPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-WorkflowActionsCanceltasksPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/object/workflow/actions/canceltasks'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Cancel Workflows

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-WorkflowActionsCancelworkflowsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-WorkflowActionsCancelworkflowsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/object/workflow/actions/cancelworkflows'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Bulk Workflow Actions

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-WorkflowActionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-WorkflowActionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/object/workflow/actions'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Reassign Workflow Tasks

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-WorkflowActionsReassigntasksPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-WorkflowActionsReassigntasksPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/object/workflow/actions/reassigntasks'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Replace Workflow Owner

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-WorkflowActionsReplaceworkflowownerPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-WorkflowActionsReplaceworkflowownerPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/object/workflow/actions/replaceworkflowowner'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder Export Results

.DESCRIPTION

No description available.

.PARAMETER JobId
The id value of the requested export job. This is returned with the export binder requests above.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersActionsExportJobIdResultsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersActionsExportJobIdResultsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/actions/export/{job_id}/results'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling objectsBindersActionsExportJobIdResultsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Export Binder (Latest Version)

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER Source
to include source content or not

.PARAMETER Renditiontype
to include viewable renditions

.PARAMETER Docversion
to include all major versions

.PARAMETER Attachments
to include all versions of attachments

.PARAMETER Export
configurable filename metadata

.PARAMETER Docfield
to exclude document metadata csv

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdActionsExportPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Source},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Renditiontype},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Docversion},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Attachments},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Export},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Docfield},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdActionsExportPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/actions/export'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdActionsExportPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Source) {
            $LocalVarQueryParameters['source'] = $Source
        }

        if ($Renditiontype) {
            $LocalVarQueryParameters['renditiontype'] = $Renditiontype
        }

        if ($Docversion) {
            $LocalVarQueryParameters['docversion'] = $Docversion
        }

        if ($Attachments) {
            $LocalVarQueryParameters['attachments'] = $Attachments
        }

        if ($Export) {
            $LocalVarQueryParameters['export'] = $Export
        }

        if ($Docfield) {
            $LocalVarQueryParameters['docfield'] = $Docfield
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Refresh Binder Auto-Filing

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdActionsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdActionsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/actions'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdActionsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Binding Rule

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdBindingRulePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdBindingRulePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/binding_rule'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdBindingRulePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Binder

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Binder Document Binding Rule

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER NodeId
The binder node id field value.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdDocumentsNodeIdBindingRulePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NodeId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdDocumentsNodeIdBindingRulePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/documents/{node_id}/binding_rule'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$NodeId) {
            throw "Error! The required parameter `NodeId` missing when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{node_id}', [System.Web.HTTPUtility]::UrlEncode($NodeId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Add Document to Binder

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdDocumentsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdDocumentsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/documents'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdDocumentsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Remove Document from Binder

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER SectionId
The binder node id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdDocumentsSectionIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SectionId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdDocumentsSectionIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/documents/{section_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdDocumentsSectionIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$SectionId) {
            throw "Error! The required parameter `SectionId` missing when calling objectsBindersBinderIdDocumentsSectionIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{section_id}', [System.Web.HTTPUtility]::UrlEncode($SectionId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Move Document in Binder

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER SectionId
The binder node id field value.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdDocumentsSectionIdPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SectionId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdDocumentsSectionIdPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/documents/{section_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdDocumentsSectionIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$SectionId) {
            throw "Error! The required parameter `SectionId` missing when calling objectsBindersBinderIdDocumentsSectionIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{section_id}', [System.Web.HTTPUtility]::UrlEncode($SectionId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER Depth
To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Depth},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Depth) {
            $LocalVarQueryParameters['depth'] = $Depth
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Binder Version

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Binder

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Remove Users & Groups from Roles on a Single Binder

.DESCRIPTION

No description available.

.PARAMETER BinderId
The id value of the binder from which to remove roles.

.PARAMETER RoleNameAndUserOrGroup
The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.

.PARAMETER Id
The id value of the user or group to remove from the role.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RoleNameAndUserOrGroup},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$RoleNameAndUserOrGroup) {
            throw "Error! The required parameter `RoleNameAndUserOrGroup` missing when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{role_name_and_user_or_group}', [System.Web.HTTPUtility]::UrlEncode($RoleNameAndUserOrGroup))
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Binder Section Binding Rule

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER NodeId
The binder node id field value.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdSectionsNodeIdBindingRulePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NodeId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdSectionsNodeIdBindingRulePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/sections/{node_id}/binding_rule'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$NodeId) {
            throw "Error! The required parameter `NodeId` missing when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{node_id}', [System.Web.HTTPUtility]::UrlEncode($NodeId))

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Binder Section

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER NodeId
The binder node id of the section.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdSectionsNodeIdPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NodeId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdSectionsNodeIdPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/sections/{node_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdSectionsNodeIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$NodeId) {
            throw "Error! The required parameter `NodeId` missing when calling objectsBindersBinderIdSectionsNodeIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{node_id}', [System.Web.HTTPUtility]::UrlEncode($NodeId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Binder Section

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdSectionsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdSectionsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/sections'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdSectionsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Binder Section

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER SectionId
The binder node id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdSectionsSectionIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SectionId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdSectionsSectionIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/sections/{section_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdSectionsSectionIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$SectionId) {
            throw "Error! The required parameter `SectionId` missing when calling objectsBindersBinderIdSectionsSectionIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{section_id}', [System.Web.HTTPUtility]::UrlEncode($SectionId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder Sections

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER SectionId
The binder node id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdSectionsSectionIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SectionId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdSectionsSectionIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/sections/{section_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdSectionsSectionIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$SectionId) {
            throw "Error! The required parameter `SectionId` missing when calling objectsBindersBinderIdSectionsSectionIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{section_id}', [System.Web.HTTPUtility]::UrlEncode($SectionId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Binder Versions

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdVersionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdVersionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/versions'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdVersionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Export Binder (Specific Version)

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER MajorVersion
The binder major_version_number__v field value.

.PARAMETER MinorVersion
The binder minor_version_number__v field value.

.PARAMETER Source
to include source content or not

.PARAMETER Renditiontype
to include viewable renditions

.PARAMETER Docversion
to include all major versions

.PARAMETER Attachments
to include all versions of attachments

.PARAMETER Export
configurable filename metadata

.PARAMETER Docfield
to exclude document metadata csv

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Source},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Renditiontype},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Docversion},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Attachments},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Export},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Docfield},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Source) {
            $LocalVarQueryParameters['source'] = $Source
        }

        if ($Renditiontype) {
            $LocalVarQueryParameters['renditiontype'] = $Renditiontype
        }

        if ($Docversion) {
            $LocalVarQueryParameters['docversion'] = $Docversion
        }

        if ($Attachments) {
            $LocalVarQueryParameters['attachments'] = $Attachments
        }

        if ($Export) {
            $LocalVarQueryParameters['export'] = $Export
        }

        if ($Docfield) {
            $LocalVarQueryParameters['docfield'] = $Docfield
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Binder Version

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER MajorVersion
The binder major_version_number__v field value.

.PARAMETER MinorVersion
The binder minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdVersionsMajorVersionMinorVersionDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdVersionsMajorVersionMinorVersionDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder Version

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER MajorVersion
The binder major_version_number__v field value.

.PARAMETER MinorVersion
The binder minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdVersionsMajorVersionMinorVersionGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdVersionsMajorVersionMinorVersionGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Binder Version

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER MajorVersion
The binder major_version_number__v field value.

.PARAMETER MinorVersion
The binder minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdVersionsMajorVersionMinorVersionPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdVersionsMajorVersionMinorVersionPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Binder Relationship

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER MajorVersion
The binder major_version_number__v field value.

.PARAMETER MinorVersion
The binder minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Binder Relationship

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER MajorVersion
The binder major_version_number__v field value.

.PARAMETER MinorVersion
The binder minor_version_number__v field value.

.PARAMETER RelationshipId
The binder relationship id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RelationshipId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$RelationshipId) {
            throw "Error! The required parameter `RelationshipId` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{relationship_id}', [System.Web.HTTPUtility]::UrlEncode($RelationshipId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder Relationship

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER MajorVersion
The binder major_version_number__v field value.

.PARAMETER MinorVersion
The binder minor_version_number__v field value.

.PARAMETER RelationshipId
The binder relationship id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RelationshipId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$RelationshipId) {
            throw "Error! The required parameter `RelationshipId` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{relationship_id}', [System.Web.HTTPUtility]::UrlEncode($RelationshipId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder Version Section

.DESCRIPTION

No description available.

.PARAMETER BinderId
The binder id field value.

.PARAMETER MajorVersion
The binder major_version_number__v field value.

.PARAMETER MinorVersion
The binder minor_version_number__v field value.

.PARAMETER SectionId
Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BinderId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SectionId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}'
        if (!$BinderId) {
            throw "Error! The required parameter `BinderId` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{binder_id}', [System.Web.HTTPUtility]::UrlEncode($BinderId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$SectionId) {
            throw "Error! The required parameter `SectionId` missing when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{section_id}', [System.Web.HTTPUtility]::UrlEncode($SectionId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Binder Roles

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersIdRolesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersIdRolesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{id}/roles'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsBindersIdRolesGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Assign Users & Groups to Roles on a Single Binder

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersIdRolesPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersIdRolesPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{id}/roles'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsBindersIdRolesPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Role

.DESCRIPTION

No description available.

.PARAMETER Id
The binder `id`.

.PARAMETER RoleName
The name of the role to retrieve. For example, `owner__v`.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersIdRolesRoleNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RoleName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersIdRolesRoleNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{id}/roles/{role_name}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsBindersIdRolesRoleNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))
        if (!$RoleName) {
            throw "Error! The required parameter `RoleName` missing when calling objectsBindersIdRolesRoleNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{role_name}', [System.Web.HTTPUtility]::UrlEncode($RoleName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder User Actions

.DESCRIPTION

No description available.

.PARAMETER Id
The binder id field value from which to retrieve available user actions.

.PARAMETER MajorVersion
The major version number of the binder.

.PARAMETER MinorVersion
The minor version number of the binder.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder Entry Criteria

.DESCRIPTION

No description available.

.PARAMETER Id
The binder id field value from which to retrieve available user actions.

.PARAMETER MajorVersion
The major version number of the binder.

.PARAMETER MinorVersion
The minor version number of the binder.

.PARAMETER NameV
The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NameV},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$NameV) {
            throw "Error! The required parameter `NameV` missing when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{name__v}', [System.Web.HTTPUtility]::UrlEncode($NameV))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Binder User Action

.DESCRIPTION

No description available.

.PARAMETER Id
The binder id field value from which to retrieve available user actions.

.PARAMETER MajorVersion
The major version number of the binder.

.PARAMETER MinorVersion
The minor version number of the binder.

.PARAMETER NameV
The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NameV},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$NameV) {
            throw "Error! The required parameter `NameV` missing when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{name__v}', [System.Web.HTTPUtility]::UrlEncode($NameV))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve User Actions on Multiple Binders

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersLifecycleActionsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersLifecycleActionsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/lifecycle_actions'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Bulk Binder User Actions

.DESCRIPTION

No description available.

.PARAMETER UserActionName
The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersLifecycleActionsUserActionNamePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UserActionName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersLifecycleActionsUserActionNamePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/lifecycle_actions/{user_action_name}'
        if (!$UserActionName) {
            throw "Error! The required parameter `UserActionName` missing when calling objectsBindersLifecycleActionsUserActionNamePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{user_action_name}', [System.Web.HTTPUtility]::UrlEncode($UserActionName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Binder

.DESCRIPTION

No description available.

.PARAMETER Async
When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. 

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Async},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Async) {
            $LocalVarQueryParameters['async'] = $Async
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder Template Collection

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersTemplatesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersTemplatesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/templates'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Binder Template

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersTemplatesPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersTemplatesPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/templates'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Binder Template

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersTemplatesPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersTemplatesPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/templates'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder Template Node Attributes

.DESCRIPTION

No description available.

.PARAMETER TemplateName
The binder template name__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersTemplatesTemplateNameBindernodesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TemplateName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersTemplatesTemplateNameBindernodesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/templates/{template_name}/bindernodes'
        if (!$TemplateName) {
            throw "Error! The required parameter `TemplateName` missing when calling objectsBindersTemplatesTemplateNameBindernodesGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{template_name}', [System.Web.HTTPUtility]::UrlEncode($TemplateName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Binder Template Node

.DESCRIPTION

No description available.

.PARAMETER TemplateName
The binder template name__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersTemplatesTemplateNameBindernodesPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TemplateName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersTemplatesTemplateNameBindernodesPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/templates/{template_name}/bindernodes'
        if (!$TemplateName) {
            throw "Error! The required parameter `TemplateName` missing when calling objectsBindersTemplatesTemplateNameBindernodesPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{template_name}', [System.Web.HTTPUtility]::UrlEncode($TemplateName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Replace Binder Template Nodes

.DESCRIPTION

No description available.

.PARAMETER TemplateName
The binder template name__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersTemplatesTemplateNameBindernodesPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TemplateName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersTemplatesTemplateNameBindernodesPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/templates/{template_name}/bindernodes'
        if (!$TemplateName) {
            throw "Error! The required parameter `TemplateName` missing when calling objectsBindersTemplatesTemplateNameBindernodesPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{template_name}', [System.Web.HTTPUtility]::UrlEncode($TemplateName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Binder Template

.DESCRIPTION

No description available.

.PARAMETER TemplateName
The binder template name__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersTemplatesTemplateNameDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TemplateName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersTemplatesTemplateNameDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/templates/{template_name}'
        if (!$TemplateName) {
            throw "Error! The required parameter `TemplateName` missing when calling objectsBindersTemplatesTemplateNameDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{template_name}', [System.Web.HTTPUtility]::UrlEncode($TemplateName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Binder Template Attributes

.DESCRIPTION

No description available.

.PARAMETER TemplateName
The binder template name__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sBindersTemplatesTemplateNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TemplateName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sBindersTemplatesTemplateNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/binders/templates/{template_name}'
        if (!$TemplateName) {
            throw "Error! The required parameter `TemplateName` missing when calling objectsBindersTemplatesTemplateNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{template_name}', [System.Web.HTTPUtility]::UrlEncode($TemplateName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Deleted Document IDs

.DESCRIPTION

No description available.

.PARAMETER StartDate
Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z

.PARAMETER EndDate
Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDeletionsDocumentsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDeletionsDocumentsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/deletions/documents'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($StartDate) {
            $LocalVarQueryParameters['start_date'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['end_date'] = $EndDate
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Deleted Object Record ID

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDeletionsVobjectsObjectNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDeletionsVobjectsObjectNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/deletions/vobjects/{object_name}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling objectsDeletionsVobjectsObjectNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Document Workflows

.DESCRIPTION

No description available.

.PARAMETER Loc
When localized (translated) strings are available, retrieve them by setting loc to true.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsActionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Loc},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsActionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/actions'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Controlled Copy Job Results

.DESCRIPTION

No description available.

.PARAMETER LifecycleAndStateAndAction
The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link.

.PARAMETER JobId
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LifecycleAndStateAndAction},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results'
        if (!$LifecycleAndStateAndAction) {
            throw "Error! The required parameter `LifecycleAndStateAndAction` missing when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{lifecycle_and_state_and_action}', [System.Web.HTTPUtility]::UrlEncode($LifecycleAndStateAndAction))
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Workflow Details

.DESCRIPTION

No description available.

.PARAMETER WorkflowName
The document workflow name value.

.PARAMETER Loc
When localized (translated) strings are available, retrieve them by setting loc to true.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsActionsWorkflowNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Loc},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsActionsWorkflowNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/actions/{workflow_name}'
        if (!$WorkflowName) {
            throw "Error! The required parameter `WorkflowName` missing when calling objectsDocumentsActionsWorkflowNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{workflow_name}', [System.Web.HTTPUtility]::UrlEncode($WorkflowName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Document Workflow

.DESCRIPTION

No description available.

.PARAMETER WorkflowName
The document workflow name value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsActionsWorkflowNamePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsActionsWorkflowNamePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/actions/{workflow_name}'
        if (!$WorkflowName) {
            throw "Error! The required parameter `WorkflowName` missing when calling objectsDocumentsActionsWorkflowNamePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{workflow_name}', [System.Web.HTTPUtility]::UrlEncode($WorkflowName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Annotations

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsAnnotationsBatchDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsAnnotationsBatchDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/annotations/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Multiple Annotations

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsAnnotationsBatchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsAnnotationsBatchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/annotations/batch'

        if (!$Authorization) {
            throw "Error! The required parameter `Authorization` missing when calling objectsDocumentsAnnotationsBatchPost."
        }
        $LocalVarHeaderParameters['Authorization'] = $Authorization

        if (!$ContentType) {
            throw "Error! The required parameter `ContentType` missing when calling objectsDocumentsAnnotationsBatchPost."
        }
        $LocalVarHeaderParameters['Content-Type'] = $ContentType

        if (!$Accept) {
            throw "Error! The required parameter `Accept` missing when calling objectsDocumentsAnnotationsBatchPost."
        }
        $LocalVarHeaderParameters['Accept'] = $Accept

        if (!$XVaultAPIClientID) {
            throw "Error! The required parameter `XVaultAPIClientID` missing when calling objectsDocumentsAnnotationsBatchPost."
        }
        $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Annotations

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsAnnotationsBatchPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsAnnotationsBatchPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/annotations/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Add Annotation Replies

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsAnnotationsRepliesBatchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsAnnotationsRepliesBatchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/annotations/replies/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Multiple Document Attachments

.DESCRIPTION

No description available.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsAttachmentsBatchDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsAttachmentsBatchDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/attachments/batch'

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Multiple Document Attachments

.DESCRIPTION

No description available.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsAttachmentsBatchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsAttachmentsBatchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/attachments/batch'

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Multiple Document Attachment Descriptions

.DESCRIPTION

No description available.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsAttachmentsBatchPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsAttachmentsBatchPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/attachments/batch'

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Export Results

.DESCRIPTION

No description available.

.PARAMETER JobId
The id value of the requested export job. This is returned with the export document requests.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsBatchActionsFileextractJobIdResultsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsBatchActionsFileextractJobIdResultsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/batch/actions/fileextract/{job_id}/results'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling objectsDocumentsBatchActionsFileextractJobIdResultsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Export Documents

.DESCRIPTION

No description available.

.PARAMETER Source
Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.

.PARAMETER Renditions
Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.

.PARAMETER Allversions
Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsBatchActionsFileextractPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Source},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Renditions},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Allversions},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsBatchActionsFileextractPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/batch/actions/fileextract'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Source) {
            $LocalVarQueryParameters['source'] = $Source
        }

        if ($Renditions) {
            $LocalVarQueryParameters['renditions'] = $Renditions
        }

        if ($Allversions) {
            $LocalVarQueryParameters['allversions'] = $Allversions
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Reclassify Multiple Documents

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIMigrationMode
When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=""https://platform.veevavault.help/en/gr/54028"">Document Migration Mode in Vault Help.</a>

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsBatchActionsReclassifyPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIMigrationMode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsBatchActionsReclassifyPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/batch/actions/reclassify'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIMigrationMode) {
            $LocalVarHeaderParameters['X-VaultAPI-MigrationMode'] = $XVaultAPIMigrationMode
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Multiple Document Renditions

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsBatchActionsRerenderPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsBatchActionsRerenderPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/batch/actions/rerender'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Multiple Documents

.DESCRIPTION

No description available.

.PARAMETER IdParam
If you’re identifying documents in your input by their external ID

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsBatchDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdParam},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsBatchDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($IdParam) {
            $LocalVarQueryParameters['idParam'] = $IdParam
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Undo Collaborative Authoring Checkout

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsBatchLockDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsBatchLockDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/batch/lock'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Multiple Documents

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIMigrationMode
When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=""https://platform.veevavault.help/en/gr/54028"">Document Migration Mode in Vault Help.</a>

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsBatchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIMigrationMode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsBatchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIMigrationMode) {
            $LocalVarHeaderParameters['X-VaultAPI-MigrationMode'] = $XVaultAPIMigrationMode
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Multiple Documents

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIMigrationMode
When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=""https://platform.veevavault.help/en/gr/54028"">Document Migration Mode in Vault Help.</a>

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsBatchPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIMigrationMode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsBatchPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIMigrationMode) {
            $LocalVarHeaderParameters['X-VaultAPI-MigrationMode'] = $XVaultAPIMigrationMode
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Anchor IDs

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAnchorsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAnchorsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/anchors'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAnchorsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Export Document Annotations to PDF

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAnnotationsFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAnnotationsFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/annotations/file'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAnnotationsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Import Document Annotations from PDF

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAnnotationsFilePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAnnotationsFilePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/annotations/file'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAnnotationsFilePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Single Document Attachment

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsAttachmentIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsAttachmentIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments/{attachment_id}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Document Attachment

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsAttachmentIdFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsAttachmentIdFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments/{attachment_id}/file'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Attachment Metadata

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsAttachmentIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsAttachmentIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments/{attachment_id}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Document Attachment Description

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsAttachmentIdPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsAttachmentIdPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments/{attachment_id}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Single Document Attachment Version

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER AttachmentVersion
The attachment version__v field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))
        if (!$AttachmentVersion) {
            throw "Error! The required parameter `AttachmentVersion` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_version}', [System.Web.HTTPUtility]::UrlEncode($AttachmentVersion))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Document Attachment Version

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER AttachmentVersion
The attachment version__v field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))
        if (!$AttachmentVersion) {
            throw "Error! The required parameter `AttachmentVersion` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_version}', [System.Web.HTTPUtility]::UrlEncode($AttachmentVersion))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Attachment Version Metadata

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER AttachmentVersion
The attachment version__v field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))
        if (!$AttachmentVersion) {
            throw "Error! The required parameter `AttachmentVersion` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_version}', [System.Web.HTTPUtility]::UrlEncode($AttachmentVersion))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Restore Document Attachment Version

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER AttachmentVersion
The attachment version__v field value.

.PARAMETER Restore
The parameter restore must be set to true. 

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Restore},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))
        if (!$AttachmentVersion) {
            throw "Error! The required parameter `AttachmentVersion` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_version}', [System.Web.HTTPUtility]::UrlEncode($AttachmentVersion))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Restore) {
            $LocalVarQueryParameters['restore'] = $Restore
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Attachment Versions

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsAttachmentIdVersionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsAttachmentIdVersionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download All Document Attachments

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments/file'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Attachments

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Document Attachment

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAttachmentsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAttachmentsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/attachments'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAttachmentsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Complete Audit History for a Single Document

.DESCRIPTION

No description available.

.PARAMETER DocId
The document ID for which to retrieve audit history.

.PARAMETER StartDate
Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 

.PARAMETER EndDate
Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 

.PARAMETER FormatResult
To request a CSV file of your audit history, use csv. 

.PARAMETER Limit
Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.

.PARAMETER Offset
Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.

.PARAMETER Events
Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdAudittrailGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FormatResult},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Limit},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Offset},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Events},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdAudittrailGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/audittrail'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdAudittrailGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($StartDate) {
            $LocalVarQueryParameters['start_date'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['end_date'] = $EndDate
        }

        if ($FormatResult) {
            $LocalVarQueryParameters['format_result'] = $FormatResult
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Events) {
            $LocalVarQueryParameters['events'] = $Events
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Single Document

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Events

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdEventsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdEventsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/events'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdEventsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Document File

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER LockDocument
Set to true to Check Out this document before retrieval. If omitted, defaults to false.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LockDocument},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/file'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($LockDocument) {
            $LocalVarQueryParameters['lockDocument'] = $LockDocument
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Document Lock

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdLockDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdLockDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/lock'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdLockDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Lock

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdLockGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdLockGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/lock'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdLockGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Document Lock

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdLockPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdLockPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/lock'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdLockPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download All Document Version Attachments

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Single Document Version

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER SuppressRendition
Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SuppressRendition},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($SuppressRendition) {
            $LocalVarQueryParameters['suppressRendition'] = $SuppressRendition
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Single Document

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIMigrationMode
When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=""https://platform.veevavault.help/en/gr/54028"">Document Migration Mode in Vault Help.</a>

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIMigrationMode},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIMigrationMode) {
            $LocalVarHeaderParameters['X-VaultAPI-MigrationMode'] = $XVaultAPIMigrationMode
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Renditions

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdRenditionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdRenditionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/renditions'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdRenditionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Single Document Rendition

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER RenditionType
The document rendition type.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdRenditionsRenditionTypeDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RenditionType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdRenditionsRenditionTypeDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/renditions/{rendition_type}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$RenditionType) {
            throw "Error! The required parameter `RenditionType` missing when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{rendition_type}', [System.Web.HTTPUtility]::UrlEncode($RenditionType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Document Rendition File

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER RenditionType
The document rendition type.

.PARAMETER SteadyState
Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdRenditionsRenditionTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RenditionType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SteadyState},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdRenditionsRenditionTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/renditions/{rendition_type}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdRenditionsRenditionTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$RenditionType) {
            throw "Error! The required parameter `RenditionType` missing when calling objectsDocumentsDocIdRenditionsRenditionTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{rendition_type}', [System.Web.HTTPUtility]::UrlEncode($RenditionType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($SteadyState) {
            $LocalVarQueryParameters['steadyState'] = $SteadyState
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Add Single Document Rendition

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER RenditionType
The document rendition type.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdRenditionsRenditionTypePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RenditionType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdRenditionsRenditionTypePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/renditions/{rendition_type}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdRenditionsRenditionTypePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$RenditionType) {
            throw "Error! The required parameter `RenditionType` missing when calling objectsDocumentsDocIdRenditionsRenditionTypePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{rendition_type}', [System.Web.HTTPUtility]::UrlEncode($RenditionType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Replace Document Rendition

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER RenditionType
The document rendition type.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdRenditionsRenditionTypePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RenditionType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdRenditionsRenditionTypePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/renditions/{rendition_type}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdRenditionsRenditionTypePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$RenditionType) {
            throw "Error! The required parameter `RenditionType` missing when calling objectsDocumentsDocIdRenditionsRenditionTypePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{rendition_type}', [System.Web.HTTPUtility]::UrlEncode($RenditionType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Remove Users & Groups from Roles on a Single Document

.DESCRIPTION

No description available.

.PARAMETER DocId
The id value of the document from which to remove roles.

.PARAMETER RoleNameAndUserOrGroup
The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.

.PARAMETER Id
The id value of the user or group to remove from the role.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RoleNameAndUserOrGroup},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$RoleNameAndUserOrGroup) {
            throw "Error! The required parameter `RoleNameAndUserOrGroup` missing when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{role_name_and_user_or_group}', [System.Web.HTTPUtility]::UrlEncode($RoleNameAndUserOrGroup))
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Version Attachments

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Versions

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read Annotations by ID

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER AnnotationId
The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AnnotationId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$AnnotationId) {
            throw "Error! The required parameter `AnnotationId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{annotation_id}', [System.Web.HTTPUtility]::UrlEncode($AnnotationId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read Replies of Parent Annotation

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER AnnotationId
The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AnnotationId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$AnnotationId) {
            throw "Error! The required parameter `AnnotationId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{annotation_id}', [System.Web.HTTPUtility]::UrlEncode($AnnotationId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Export Document Version Annotations to PDF

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Import Document Version Annotations from PDF

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read Annotations by Document Version and Type

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Limit
Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.

.PARAMETER Offset
This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.

.PARAMETER AnnotationTypes
The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` 

.PARAMETER PaginationId
A unique identifier used to load requests with paginated results.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Limit},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Offset},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AnnotationTypes},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PaginationId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($AnnotationTypes) {
            $LocalVarQueryParameters['annotation_types'] = $AnnotationTypes
        }

        if ($PaginationId) {
            $LocalVarQueryParameters['pagination_id'] = $PaginationId
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Document Version Attachment Version

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER AttachmentId
The id field value of the attachment.

.PARAMETER AttachmentVersion
The version of the attachment.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentVersion},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))
        if (!$AttachmentVersion) {
            throw "Error! The required parameter `AttachmentVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_version}', [System.Web.HTTPUtility]::UrlEncode($AttachmentVersion))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Version Attachment Versions

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER AttachmentId
The id of the document attachment to retrieve.

.PARAMETER AttachmentVersion
Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentVersion},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))
        if (!$AttachmentVersion) {
            throw "Error! The required parameter `AttachmentVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_version}', [System.Web.HTTPUtility]::UrlEncode($AttachmentVersion))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Single Document Version

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Version Notes as CSV

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Document Event

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Video Annotations

.DESCRIPTION

No description available.

.PARAMETER DocId
The video document id field value.

.PARAMETER MajorVersion
The video document major_version_number__v field value.

.PARAMETER MinorVersion
The video document minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Document Version File

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Version

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Document Version

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIMigrationMode
When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=""https://platform.veevavault.help/en/gr/54028"">Document Migration Mode in Vault Help.</a>

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIMigrationMode},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIMigrationMode) {
            $LocalVarHeaderParameters['X-VaultAPI-MigrationMode'] = $XVaultAPIMigrationMode
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Relationships

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Single Document Relationship

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Single Document Relationship

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER RelationshipId
The relationship id field value. See Retrieve Document Relationships.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RelationshipId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$RelationshipId) {
            throw "Error! The required parameter `RelationshipId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{relationship_id}', [System.Web.HTTPUtility]::UrlEncode($RelationshipId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Relationship

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER RelationshipId
The relationship id field value. See Retrieve Document Relationships.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RelationshipId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$RelationshipId) {
            throw "Error! The required parameter `RelationshipId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{relationship_id}', [System.Web.HTTPUtility]::UrlEncode($RelationshipId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Version Renditions

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Document Version Rendition

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER RenditionType
The document rendition type.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RenditionType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$RenditionType) {
            throw "Error! The required parameter `RenditionType` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{rendition_type}', [System.Web.HTTPUtility]::UrlEncode($RenditionType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Document Version Rendition File

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER RenditionType
The document rendition type.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RenditionType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$RenditionType) {
            throw "Error! The required parameter `RenditionType` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{rendition_type}', [System.Web.HTTPUtility]::UrlEncode($RenditionType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Upload Document Version Rendition

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER RenditionType
The document rendition type.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RenditionType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$RenditionType) {
            throw "Error! The required parameter `RenditionType` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{rendition_type}', [System.Web.HTTPUtility]::UrlEncode($RenditionType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Replace Document Version Rendition

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER RenditionType
The document rendition type.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RenditionType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$RenditionType) {
            throw "Error! The required parameter `RenditionType` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{rendition_type}', [System.Web.HTTPUtility]::UrlEncode($RenditionType))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Document Version Thumbnail File

.DESCRIPTION

No description available.

.PARAMETER DocId
The document id field value.

.PARAMETER MajorVersion
The document major_version_number__v field value.

.PARAMETER MinorVersion
The document minor_version_number__v field value.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail'
        if (!$DocId) {
            throw "Error! The required parameter `DocId` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{doc_id}', [System.Web.HTTPUtility]::UrlEncode($DocId))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Documents

.DESCRIPTION

No description available.

.PARAMETER NamedFilter
Retrieves only documents which you have created.

.PARAMETER Scope
Searches only within the document content.

.PARAMETER Versionscope
Retrieves all document versions, rather than only the latest version.

.PARAMETER Search
Search for documents based on a {keyword} in searchable document fields.

.PARAMETER Limit
See VQL documentation for more information.

.PARAMETER Sort
See VQL documentation for more information.

.PARAMETER Start
See VQL documentation for more information.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NamedFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Scope},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Versionscope},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Search},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Limit},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Sort},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Start},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($NamedFilter) {
            $LocalVarQueryParameters['named_filter'] = $NamedFilter
        }

        if ($Scope) {
            $LocalVarQueryParameters['scope'] = $Scope
        }

        if ($Versionscope) {
            $LocalVarQueryParameters['versionscope'] = $Versionscope
        }

        if ($Search) {
            $LocalVarQueryParameters['search'] = $Search
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Sort) {
            $LocalVarQueryParameters['sort'] = $Sort
        }

        if ($Start) {
            $LocalVarQueryParameters['start'] = $Start
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Document Roles

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsIdRolesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsIdRolesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{id}/roles'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsDocumentsIdRolesGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Assign Users & Groups to Roles on a Single Document

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsIdRolesPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsIdRolesPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{id}/roles'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsDocumentsIdRolesPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Role

.DESCRIPTION

No description available.

.PARAMETER Id
The document `id`.

.PARAMETER RoleName
The name of the role to retrieve. For example, `owner__v`.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsIdRolesRoleNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RoleName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsIdRolesRoleNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{id}/roles/{role_name}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsDocumentsIdRolesRoleNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))
        if (!$RoleName) {
            throw "Error! The required parameter `RoleName` missing when calling objectsDocumentsIdRolesRoleNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{role_name}', [System.Web.HTTPUtility]::UrlEncode($RoleName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document User Actions

.DESCRIPTION

No description available.

.PARAMETER Id
The document id field value from which to retrieve available user actions.

.PARAMETER MajorVersion
The major version number of the document.

.PARAMETER MinorVersion
The minor version number of the document.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Entry Criteria

.DESCRIPTION

No description available.

.PARAMETER Id
The document id field value from which to retrieve available user actions.

.PARAMETER MajorVersion
The major version number of the document.

.PARAMETER MinorVersion
The minor version number of the document.

.PARAMETER NameV
The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NameV},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$NameV) {
            throw "Error! The required parameter `NameV` missing when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{name__v}', [System.Web.HTTPUtility]::UrlEncode($NameV))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Document User Action

.DESCRIPTION

No description available.

.PARAMETER Id
The document id field value from which to retrieve available user actions.

.PARAMETER MajorVersion
The major version number of the document.

.PARAMETER MinorVersion
The minor version number of the document.

.PARAMETER NameV
The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MajorVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MinorVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NameV},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))
        if (!$MajorVersion) {
            throw "Error! The required parameter `MajorVersion` missing when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{major_version}', [System.Web.HTTPUtility]::UrlEncode($MajorVersion))
        if (!$MinorVersion) {
            throw "Error! The required parameter `MinorVersion` missing when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{minor_version}', [System.Web.HTTPUtility]::UrlEncode($MinorVersion))
        if (!$NameV) {
            throw "Error! The required parameter `NameV` missing when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{name__v}', [System.Web.HTTPUtility]::UrlEncode($NameV))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve User Actions on Multiple Documents

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsLifecycleActionsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsLifecycleActionsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/lifecycle_actions'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Bulk Document User Actions

.DESCRIPTION

No description available.

.PARAMETER UserActionName
The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsLifecycleActionsUserActionNamePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UserActionName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsLifecycleActionsUserActionNamePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/lifecycle_actions/{user_action_name}'
        if (!$UserActionName) {
            throw "Error! The required parameter `UserActionName` missing when calling objectsDocumentsLifecycleActionsUserActionNamePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{user_action_name}', [System.Web.HTTPUtility]::UrlEncode($UserActionName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Single Document

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIMigrationMode
When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=""https://platform.veevavault.help/en/gr/54028"">Document Migration Mode in Vault Help.</a>

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIMigrationMode},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIMigrationMode) {
            $LocalVarHeaderParameters['X-VaultAPI-MigrationMode'] = $XVaultAPIMigrationMode
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Multiple Document Relationships

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsRelationshipsBatchDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsRelationshipsBatchDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/relationships/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Multiple Document Relationships

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsRelationshipsBatchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsRelationshipsBatchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/relationships/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Multiple Document Renditions

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsRenditionsBatchDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsRenditionsBatchDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/renditions/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Add Multiple Document Renditions

.DESCRIPTION

No description available.

.PARAMETER IdParam
If you’re identifying documents in your input by their external ID

.PARAMETER LargeSizeAsset
If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIMigrationMode
Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=""https://platform.veevavault.help/en/gr/54028"">Document Migration Mode in Vault Help.</a>

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsRenditionsBatchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdParam},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LargeSizeAsset},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIMigrationMode},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsRenditionsBatchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/renditions/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIMigrationMode) {
            $LocalVarHeaderParameters['X-VaultAPI-MigrationMode'] = $XVaultAPIMigrationMode
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($IdParam) {
            $LocalVarQueryParameters['idParam'] = $IdParam
        }

        if ($LargeSizeAsset) {
            $LocalVarQueryParameters['largeSizeAsset'] = $LargeSizeAsset
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Remove Users and Groups from Roles on Multiple Documents & Binders

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsRolesBatchDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsRolesBatchDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/roles/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Assign Users & Groups to Roles on Multiple Documents & Binders

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsRolesBatchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsRolesBatchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/roles/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Template Collection

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsTemplatesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsTemplatesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/templates'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Single Document Template

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsTemplatesPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsTemplatesPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/templates'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Multiple Document Templates

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsTemplatesPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsTemplatesPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/templates'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Basic Document Template

.DESCRIPTION

No description available.

.PARAMETER TemplateName
The document template name__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsTemplatesTemplateNameDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TemplateName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsTemplatesTemplateNameDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/templates/{template_name}'
        if (!$TemplateName) {
            throw "Error! The required parameter `TemplateName` missing when calling objectsDocumentsTemplatesTemplateNameDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{template_name}', [System.Web.HTTPUtility]::UrlEncode($TemplateName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Document Template File

.DESCRIPTION

No description available.

.PARAMETER TemplateName
The document template name__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsTemplatesTemplateNameFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TemplateName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsTemplatesTemplateNameFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/templates/{template_name}/file'
        if (!$TemplateName) {
            throw "Error! The required parameter `TemplateName` missing when calling objectsDocumentsTemplatesTemplateNameFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{template_name}', [System.Web.HTTPUtility]::UrlEncode($TemplateName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Document Template Attributes

.DESCRIPTION

No description available.

.PARAMETER TemplateName
The document template name__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsTemplatesTemplateNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TemplateName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsTemplatesTemplateNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/templates/{template_name}'
        if (!$TemplateName) {
            throw "Error! The required parameter `TemplateName` missing when calling objectsDocumentsTemplatesTemplateNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{template_name}', [System.Web.HTTPUtility]::UrlEncode($TemplateName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Single Document Template

.DESCRIPTION

No description available.

.PARAMETER TemplateName
The document template name__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsTemplatesTemplateNamePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TemplateName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsTemplatesTemplateNamePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/templates/{template_name}'
        if (!$TemplateName) {
            throw "Error! The required parameter `TemplateName` missing when calling objectsDocumentsTemplatesTemplateNamePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{template_name}', [System.Web.HTTPUtility]::UrlEncode($TemplateName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Document Tokens

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsTokensPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsTokensPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/tokens'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Export Document Versions

.DESCRIPTION

No description available.

.PARAMETER Source
Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.

.PARAMETER Renditions
Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsVersionsBatchActionsFileextractPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Source},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Renditions},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsVersionsBatchActionsFileextractPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/versions/batch/actions/fileextract'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Source) {
            $LocalVarQueryParameters['source'] = $Source
        }

        if ($Renditions) {
            $LocalVarQueryParameters['renditions'] = $Renditions
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Multiple Document Versions

.DESCRIPTION

No description available.

.PARAMETER IdParam
If you’re identifying documents in your input by their external ID

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsVersionsBatchDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdParam},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsVersionsBatchDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/versions/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($IdParam) {
            $LocalVarQueryParameters['idParam'] = $IdParam
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Multiple Document Versions

.DESCRIPTION

No description available.

.PARAMETER IdParam
If you’re identifying documents in your input by their external ID

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIMigrationMode
Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=""https://platform.veevavault.help/en/gr/54028"">Document Migration Mode in Vault Help.</a>

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDocumentsVersionsBatchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdParam},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIMigrationMode},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDocumentsVersionsBatchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/documents/versions/batch'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIMigrationMode) {
            $LocalVarHeaderParameters['X-VaultAPI-MigrationMode'] = $XVaultAPIMigrationMode
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($IdParam) {
            $LocalVarQueryParameters['idParam'] = $IdParam
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Domain Information

.DESCRIPTION

No description available.

.PARAMETER IncludeApplication
To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDomainGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeApplication},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDomainGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/domain'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($IncludeApplication) {
            $LocalVarQueryParameters['include_application'] = $IncludeApplication
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Domains

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sDomainsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sDomainsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/domains'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Add EDL Matched Documents

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sEdlMatchedDocumentsBatchActionsAddPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sEdlMatchedDocumentsBatchActionsAddPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/edl_matched_documents/batch/actions/add'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Remove EDL Matched Documents

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sEdlMatchedDocumentsBatchActionsRemovePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sEdlMatchedDocumentsBatchActionsRemovePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/edl_matched_documents/batch/actions/remove'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Auto Managed Groups

.DESCRIPTION

No description available.

.PARAMETER Limit
Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 

.PARAMETER Offset
Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sGroupsAutoGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Limit},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Offset},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sGroupsAutoGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/groups/auto'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Groups

.DESCRIPTION

No description available.

.PARAMETER IncludeImplied
When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sGroupsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IncludeImplied},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sGroupsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/groups'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($IncludeImplied) {
            $LocalVarQueryParameters['includeImplied'] = $IncludeImplied
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Group

.DESCRIPTION

No description available.

.PARAMETER GroupId
The group id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sGroupsGroupIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${GroupId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sGroupsGroupIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/groups/{group_id}'
        if (!$GroupId) {
            throw "Error! The required parameter `GroupId` missing when calling objectsGroupsGroupIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{group_id}', [System.Web.HTTPUtility]::UrlEncode($GroupId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Group

.DESCRIPTION

No description available.

.PARAMETER GroupId
The group id field value.

.PARAMETER IncludeImplied
When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sGroupsGroupIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${GroupId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeImplied},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sGroupsGroupIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/groups/{group_id}'
        if (!$GroupId) {
            throw "Error! The required parameter `GroupId` missing when calling objectsGroupsGroupIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{group_id}', [System.Web.HTTPUtility]::UrlEncode($GroupId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($IncludeImplied) {
            $LocalVarQueryParameters['includeImplied'] = $IncludeImplied
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Group

.DESCRIPTION

No description available.

.PARAMETER GroupId
The group id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sGroupsGroupIdPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${GroupId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sGroupsGroupIdPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/groups/{group_id}'
        if (!$GroupId) {
            throw "Error! The required parameter `GroupId` missing when calling objectsGroupsGroupIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{group_id}', [System.Web.HTTPUtility]::UrlEncode($GroupId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Group 

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sGroupsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sGroupsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/groups'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Application License Usage

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sLicensesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sLicensesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/licenses'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Multi-Record Workflows

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsActionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsActionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/actions'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Multi-Record Workflow Details

.DESCRIPTION

No description available.

.PARAMETER WorkflowName
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsActionsWorkflowNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsActionsWorkflowNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/actions/{workflow_name}'
        if (!$WorkflowName) {
            throw "Error! The required parameter `WorkflowName` missing when calling objectsObjectworkflowsActionsWorkflowNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{workflow_name}', [System.Web.HTTPUtility]::UrlEncode($WorkflowName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Multi-Record Workflow

.DESCRIPTION

No description available.

.PARAMETER WorkflowName
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsActionsWorkflowNamePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsActionsWorkflowNamePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/actions/{workflow_name}'
        if (!$WorkflowName) {
            throw "Error! The required parameter `WorkflowName` missing when calling objectsObjectworkflowsActionsWorkflowNamePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{workflow_name}', [System.Web.HTTPUtility]::UrlEncode($WorkflowName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Workflows

.DESCRIPTION

No description available.

.PARAMETER ObjectV
To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 

.PARAMETER RecordIdV
To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 

.PARAMETER Participant
To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. 

.PARAMETER StatusV
To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v

.PARAMETER Offset
This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 

.PARAMETER PageSize
This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 

.PARAMETER Loc
When localized (translated) strings are available, retrieve them by including ?loc=true. 

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectV},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RecordIdV},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Participant},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StatusV},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Offset},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PageSize},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Loc},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($ObjectV) {
            $LocalVarQueryParameters['object__v'] = $ObjectV
        }

        if ($RecordIdV) {
            $LocalVarQueryParameters['record_id__v'] = $RecordIdV
        }

        if ($Participant) {
            $LocalVarQueryParameters['participant'] = $Participant
        }

        if ($StatusV) {
            $LocalVarQueryParameters['status__v'] = $StatusV
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($PageSize) {
            $LocalVarQueryParameters['page_size'] = $PageSize
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Workflow Tasks

.DESCRIPTION

No description available.

.PARAMETER ObjectV
To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.

.PARAMETER RecordIdV
To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.

.PARAMETER AssigneeV
To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. 

.PARAMETER StatusV
To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. 

.PARAMETER Offset
This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 

.PARAMETER PageSize
This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 

.PARAMETER Loc
When localized (translated) strings are available, retrieve them by including ?loc=true. 

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectV},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RecordIdV},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AssigneeV},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StatusV},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Offset},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PageSize},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Loc},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($ObjectV) {
            $LocalVarQueryParameters['object__v'] = $ObjectV
        }

        if ($RecordIdV) {
            $LocalVarQueryParameters['record_id__v'] = $RecordIdV
        }

        if ($AssigneeV) {
            $LocalVarQueryParameters['assignee__v'] = $AssigneeV
        }

        if ($StatusV) {
            $LocalVarQueryParameters['status__v'] = $StatusV
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($PageSize) {
            $LocalVarQueryParameters['page_size'] = $PageSize
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Accept Single Record Workflow Task

.DESCRIPTION

No description available.

.PARAMETER TaskId
The task id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsAcceptPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsAcceptPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions/accept'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsAcceptPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Cancel Workflow Task

.DESCRIPTION

No description available.

.PARAMETER TaskId
The task id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsCancelPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsCancelPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions/cancel'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsCancelPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Complete Single Record Workflow Task

.DESCRIPTION

No description available.

.PARAMETER TaskId
The task id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsCompletePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsCompletePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions/complete'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsCompletePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Workflow Task Actions

.DESCRIPTION

No description available.

.PARAMETER TaskId
The task id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Accept Multi-item Workflow Task

.DESCRIPTION

No description available.

.PARAMETER TaskId
The task id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsMdwacceptPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsMdwacceptPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Complete Multi-item Workflow Task

.DESCRIPTION

No description available.

.PARAMETER TaskId
The task id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsMdwcompletePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsMdwcompletePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Manage Multi-Item Workflow Content

.DESCRIPTION

No description available.

.PARAMETER TaskId
The task id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Reassign Multi-item Workflow Task

.DESCRIPTION

No description available.

.PARAMETER TaskId
The id of the task to reassign.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsMdwreassignPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsMdwreassignPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Reassign Single Record Workflow Task

.DESCRIPTION

No description available.

.PARAMETER TaskId
The id of the task to reassign.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsReassignPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsReassignPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions/reassign'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsReassignPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Workflow Task Action Details

.DESCRIPTION

No description available.

.PARAMETER TaskId
The task id field value.

.PARAMETER TaskAction
The name of the task action retrieved from Retrieve Workflow Task Actions.

.PARAMETER Loc
When localized (translated) strings are available, retrieve them by including loc=true. 

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsTaskActionGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskAction},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Loc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsTaskActionGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions/{task_action}'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))
        if (!$TaskAction) {
            throw "Error! The required parameter `TaskAction` missing when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_action}', [System.Web.HTTPUtility]::UrlEncode($TaskAction))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Undo Workflow Task Acceptance

.DESCRIPTION

No description available.

.PARAMETER TaskId
The task id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsUndoacceptPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsUndoacceptPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions/undoaccept'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Workflow Task Due Date

.DESCRIPTION

No description available.

.PARAMETER TaskId
The id of the task.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdActionsUpdateduedatePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdActionsUpdateduedatePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}/actions/updateduedate'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Workflow Task Details

.DESCRIPTION

No description available.

.PARAMETER TaskId
The task id field value.

.PARAMETER Loc
When localized (translated) strings are available, retrieve them by including loc=true.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsTasksTaskIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Loc},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsTasksTaskIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/tasks/{task_id}'
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling objectsObjectworkflowsTasksTaskIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Workflow Actions

.DESCRIPTION

No description available.

.PARAMETER WorkflowId
The workflow id field value.

.PARAMETER Loc
When localized (translated) strings are available, retrieve them by including loc=true. 

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsWorkflowIdActionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Loc},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsWorkflowIdActionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/{workflow_id}/actions'
        if (!$WorkflowId) {
            throw "Error! The required parameter `WorkflowId` missing when calling objectsObjectworkflowsWorkflowIdActionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{workflow_id}', [System.Web.HTTPUtility]::UrlEncode($WorkflowId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Workflow Action Details

.DESCRIPTION

No description available.

.PARAMETER WorkflowId
The workflow id field value.

.PARAMETER WorkflowAction
The workflow action name retrieved from Retrieve Workflow Actions.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsWorkflowIdActionsWorkflowActionGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowAction},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsWorkflowIdActionsWorkflowActionGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'
        if (!$WorkflowId) {
            throw "Error! The required parameter `WorkflowId` missing when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{workflow_id}', [System.Web.HTTPUtility]::UrlEncode($WorkflowId))
        if (!$WorkflowAction) {
            throw "Error! The required parameter `WorkflowAction` missing when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{workflow_action}', [System.Web.HTTPUtility]::UrlEncode($WorkflowAction))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Workflow Action

.DESCRIPTION

No description available.

.PARAMETER WorkflowId
The workflow id field value.

.PARAMETER WorkflowAction
The workflow action name retrieved from Retrieve Workflow Actions.

.PARAMETER DocumentsSys
Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsWorkflowIdActionsWorkflowActionPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowAction},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DocumentsSys},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsWorkflowIdActionsWorkflowActionPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'
        if (!$WorkflowId) {
            throw "Error! The required parameter `WorkflowId` missing when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{workflow_id}', [System.Web.HTTPUtility]::UrlEncode($WorkflowId))
        if (!$WorkflowAction) {
            throw "Error! The required parameter `WorkflowAction` missing when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{workflow_action}', [System.Web.HTTPUtility]::UrlEncode($WorkflowAction))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($DocumentsSys) {
            $LocalVarQueryParameters['documents__sys'] = $DocumentsSys
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Workflow Details

.DESCRIPTION

No description available.

.PARAMETER WorkflowId
The workflow id field value.

.PARAMETER Loc
When localized (translated) strings are available, retrieve them by including loc=true.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sObjectworkflowsWorkflowIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Loc},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sObjectworkflowsWorkflowIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/objectworkflows/{workflow_id}'
        if (!$WorkflowId) {
            throw "Error! The required parameter `WorkflowId` missing when calling objectsObjectworkflowsWorkflowIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{workflow_id}', [System.Web.HTTPUtility]::UrlEncode($WorkflowId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Picklists

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sPicklistsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sPicklistsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/picklists'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Picklist Values

.DESCRIPTION

No description available.

.PARAMETER PicklistName
The picklist name field value (license_type__v, product_family__c, region__c, etc.)

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sPicklistsPicklistNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PicklistName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sPicklistsPicklistNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/picklists/{picklist_name}'
        if (!$PicklistName) {
            throw "Error! The required parameter `PicklistName` missing when calling objectsPicklistsPicklistNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{picklist_name}', [System.Web.HTTPUtility]::UrlEncode($PicklistName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Inactivate Picklist Value

.DESCRIPTION

No description available.

.PARAMETER PicklistName
The picklist name field value (license_type__v, product_family__c, region__c, etc.)

.PARAMETER PicklistValueName
The picklist value name field value (north_america__c, south_america__c, etc.)

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sPicklistsPicklistNamePicklistValueNameDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PicklistName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PicklistValueName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sPicklistsPicklistNamePicklistValueNameDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/picklists/{picklist_name}/{picklist_value_name}'
        if (!$PicklistName) {
            throw "Error! The required parameter `PicklistName` missing when calling objectsPicklistsPicklistNamePicklistValueNameDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{picklist_name}', [System.Web.HTTPUtility]::UrlEncode($PicklistName))
        if (!$PicklistValueName) {
            throw "Error! The required parameter `PicklistValueName` missing when calling objectsPicklistsPicklistNamePicklistValueNameDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{picklist_value_name}', [System.Web.HTTPUtility]::UrlEncode($PicklistValueName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Picklist Value

.DESCRIPTION

No description available.

.PARAMETER PicklistName
The picklist name field value (license_type__v, product_family__c, region__c, etc.)

.PARAMETER PicklistValueName
The picklist value name field value (north_america__c, south_america__c, etc.)

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sPicklistsPicklistNamePicklistValueNamePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PicklistName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PicklistValueName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sPicklistsPicklistNamePicklistValueNamePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/picklists/{picklist_name}/{picklist_value_name}'
        if (!$PicklistName) {
            throw "Error! The required parameter `PicklistName` missing when calling objectsPicklistsPicklistNamePicklistValueNamePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{picklist_name}', [System.Web.HTTPUtility]::UrlEncode($PicklistName))
        if (!$PicklistValueName) {
            throw "Error! The required parameter `PicklistValueName` missing when calling objectsPicklistsPicklistNamePicklistValueNamePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{picklist_value_name}', [System.Web.HTTPUtility]::UrlEncode($PicklistValueName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Picklist Values

.DESCRIPTION

No description available.

.PARAMETER PicklistName
The picklist name field value (license_type__v, product_family__c, region__c, etc.)

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sPicklistsPicklistNamePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PicklistName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sPicklistsPicklistNamePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/picklists/{picklist_name}'
        if (!$PicklistName) {
            throw "Error! The required parameter `PicklistName` missing when calling objectsPicklistsPicklistNamePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{picklist_name}', [System.Web.HTTPUtility]::UrlEncode($PicklistName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Picklist Value Label

.DESCRIPTION

No description available.

.PARAMETER PicklistName
The picklist name field value (license_type__v, product_family__c, region__c, etc.)

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sPicklistsPicklistNamePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PicklistName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sPicklistsPicklistNamePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/picklists/{picklist_name}'
        if (!$PicklistName) {
            throw "Error! The required parameter `PicklistName` missing when calling objectsPicklistsPicklistNamePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{picklist_name}', [System.Web.HTTPUtility]::UrlEncode($PicklistName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Build Production Vault

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxActionsBuildproductionPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxActionsBuildproductionPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/actions/buildproduction'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Promote to Production

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxActionsPromoteproductionPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxActionsPromoteproductionPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/actions/promoteproduction'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Recheck Sandbox Usage Limit

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxActionsRecheckusagePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxActionsRecheckusagePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/actions/recheckusage'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Change Sandbox Size

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxBatchChangesizePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxBatchChangesizePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/batch/changesize'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Set Sandbox Entitlements

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxEntitlementsSetPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxEntitlementsSetPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/entitlements/set'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Sandboxes

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Sandbox

.DESCRIPTION

No description available.

.PARAMETER Name
The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxNameDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxNameDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/{name}'
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling objectsSandboxNameDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create or Refresh Sandbox

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Sandbox Snapshot

.DESCRIPTION

No description available.

.PARAMETER ApiName
The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxSnapshotApiNameActionsUpdatePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxSnapshotApiNameActionsUpdatePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/snapshot/{api_name}/actions/update'
        if (!$ApiName) {
            throw "Error! The required parameter `ApiName` missing when calling objectsSandboxSnapshotApiNameActionsUpdatePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{api_name}', [System.Web.HTTPUtility]::UrlEncode($ApiName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Upgrade Sandbox Snapshot

.DESCRIPTION

No description available.

.PARAMETER ApiName
The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxSnapshotApiNameActionsUpgradePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxSnapshotApiNameActionsUpgradePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/snapshot/{api_name}/actions/upgrade'
        if (!$ApiName) {
            throw "Error! The required parameter `ApiName` missing when calling objectsSandboxSnapshotApiNameActionsUpgradePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{api_name}', [System.Web.HTTPUtility]::UrlEncode($ApiName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Sandbox Snapshot

.DESCRIPTION

No description available.

.PARAMETER ApiName
The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxSnapshotApiNameDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxSnapshotApiNameDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/snapshot/{api_name}'
        if (!$ApiName) {
            throw "Error! The required parameter `ApiName` missing when calling objectsSandboxSnapshotApiNameDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{api_name}', [System.Web.HTTPUtility]::UrlEncode($ApiName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Sandbox Snapshots

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxSnapshotGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxSnapshotGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/snapshot'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Sandbox Snapshot

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxSnapshotPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxSnapshotPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/snapshot'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Refresh Sandbox from Snapshot

.DESCRIPTION

No description available.

.PARAMETER VaultId
The Vault ID of the sandbox to be refreshed.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxVaultIdActionsRefreshPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VaultId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxVaultIdActionsRefreshPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/{vault_id}/actions/refresh'
        if (!$VaultId) {
            throw "Error! The required parameter `VaultId` missing when calling objectsSandboxVaultIdActionsRefreshPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{vault_id}', [System.Web.HTTPUtility]::UrlEncode($VaultId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Sandbox Details by ID

.DESCRIPTION

No description available.

.PARAMETER VaultId
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSandboxVaultIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VaultId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSandboxVaultIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/sandbox/{vault_id}'
        if (!$VaultId) {
            throw "Error! The required parameter `VaultId` missing when calling objectsSandboxVaultIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{vault_id}', [System.Web.HTTPUtility]::UrlEncode($VaultId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Security Policies

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSecuritypoliciesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSecuritypoliciesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/securitypolicies'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Security Policy

.DESCRIPTION

No description available.

.PARAMETER SecurityPolicyName
Security policy name__v field value (retrieved from previous request). This is typically a numeric value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sSecuritypoliciesSecurityPolicyNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SecurityPolicyName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sSecuritypoliciesSecurityPolicyNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/securitypolicies/{security_policy_name}'
        if (!$SecurityPolicyName) {
            throw "Error! The required parameter `SecurityPolicyName` missing when calling objectsSecuritypoliciesSecurityPolicyNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{security_policy_name}', [System.Web.HTTPUtility]::UrlEncode($SecurityPolicyName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Users

.DESCRIPTION

No description available.

.PARAMETER Vaults
Retrieve all users assigned to all Vaults in your domain.

.PARAMETER ExcludeVaultMembership
Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.

.PARAMETER ExcludeAppLicensing
Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Vaults},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludeVaultMembership},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludeAppLicensing},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users/'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Vaults) {
            $LocalVarQueryParameters['vaults'] = $Vaults
        }

        if ($ExcludeVaultMembership) {
            $LocalVarQueryParameters['exclude_vault_membership'] = $ExcludeVaultMembership
        }

        if ($ExcludeAppLicensing) {
            $LocalVarQueryParameters['exclude_app_licensing'] = $ExcludeAppLicensing
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve User

.DESCRIPTION

No description available.

.PARAMETER Id
The user id field value. Use the value me to get information for the currently authenticated user.

.PARAMETER ExcludeVaultMembership
Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.

.PARAMETER ExcludeAppLicensing
Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludeVaultMembership},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludeAppLicensing},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsUsersIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($ExcludeVaultMembership) {
            $LocalVarQueryParameters['exclude_vault_membership'] = $ExcludeVaultMembership
        }

        if ($ExcludeAppLicensing) {
            $LocalVarQueryParameters['exclude_app_licensing'] = $ExcludeAppLicensing
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve User Permissions

.DESCRIPTION

No description available.

.PARAMETER Id
The ID of the user. Use the value me to retrieve information for the currently authenticated user.

.PARAMETER Filter
Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersIdPermissionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Filter},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersIdPermissionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users/{id}/permissions'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsUsersIdPermissionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Filter) {
            $LocalVarQueryParameters['filter'] = $Filter
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Single User

.DESCRIPTION

No description available.

.PARAMETER Id
The user id field value. Use the value me to get information for the currently authenticated user.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersIdPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersIdPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling objectsUsersIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Validate Session User

.DESCRIPTION

No description available.

.PARAMETER ExcludeVaultMembership
Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.

.PARAMETER ExcludeAppLicensing
Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersMeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludeVaultMembership},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludeAppLicensing},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersMeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users/me'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($ExcludeVaultMembership) {
            $LocalVarQueryParameters['exclude_vault_membership'] = $ExcludeVaultMembership
        }

        if ($ExcludeAppLicensing) {
            $LocalVarQueryParameters['exclude_app_licensing'] = $ExcludeAppLicensing
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Change My Password

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersMePasswordPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersMePasswordPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users/me/password'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve My User Permissions

.DESCRIPTION

No description available.

.PARAMETER Filter
Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersMePermissionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Filter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersMePermissionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users/me/permissions'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Filter) {
            $LocalVarQueryParameters['filter'] = $Filter
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update My User

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersMePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersMePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users/me'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Single User

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Multiple Users

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Disable User

.DESCRIPTION

No description available.

.PARAMETER UserId
The user id field value. 

.PARAMETER Domain
When true, this disables the user account in all vaults in the domain.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersUserIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UserId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Domain},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersUserIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users/{user_id}'
        if (!$UserId) {
            throw "Error! The required parameter `UserId` missing when calling objectsUsersUserIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{user_id}', [System.Web.HTTPUtility]::UrlEncode($UserId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Domain) {
            $LocalVarQueryParameters['domain'] = $Domain
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Vault Membership

.DESCRIPTION

No description available.

.PARAMETER UserId
The user id field value.

.PARAMETER VaultId
The system-managed id field value assigned to each vault in the domain.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sUsersUserIdVaultMembershipVaultIdPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UserId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VaultId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sUsersUserIdVaultMembershipVaultIdPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/users/{user_id}/vault_membership/{vault_id}'
        if (!$UserId) {
            throw "Error! The required parameter `UserId` missing when calling objectsUsersUserIdVaultMembershipVaultIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{user_id}', [System.Web.HTTPUtility]::UrlEncode($UserId))
        if (!$VaultId) {
            throw "Error! The required parameter `VaultId` missing when calling objectsUsersUserIdVaultMembershipVaultIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{vault_id}', [System.Web.HTTPUtility]::UrlEncode($VaultId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Vault Compare

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sVaultActionsComparePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sVaultActionsComparePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/vault/actions/compare'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Vault Configuration Report

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Deny-sVaultActionsConfigreportPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Deny-sVaultActionsConfigreportPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/objects/vault/actions/configreport'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Component Definition Query

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-QueryComponentsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-QueryComponentsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/query/components'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Next Page URL

.DESCRIPTION

No description available.

.PARAMETER NextPage
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIDescribeQuery
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-QueryNextPagePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NextPage},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIDescribeQuery},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-QueryNextPagePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/query/{next_page}'
        if (!$NextPage) {
            throw "Error! The required parameter `NextPage` missing when calling queryNextPagePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{next_page}', [System.Web.HTTPUtility]::UrlEncode($NextPage))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIDescribeQuery) {
            $LocalVarHeaderParameters['X-VaultAPI-DescribeQuery'] = $XVaultAPIDescribeQuery
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Submitting a Query

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIDescribeQuery
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-QueryPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIDescribeQuery},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-QueryPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/query'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIDescribeQuery) {
            $LocalVarHeaderParameters['X-VaultAPI-DescribeQuery'] = $XVaultAPIDescribeQuery
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Previous Page URL

.DESCRIPTION

No description available.

.PARAMETER PreviousPage
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIDescribeQuery
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-QueryPreviousPagePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PreviousPage},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIDescribeQuery},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-QueryPreviousPagePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/query/{previous_page}'
        if (!$PreviousPage) {
            throw "Error! The required parameter `PreviousPage` missing when calling queryPreviousPagePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{previous_page}', [System.Web.HTTPUtility]::UrlEncode($PreviousPage))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIDescribeQuery) {
            $LocalVarHeaderParameters['X-VaultAPI-DescribeQuery'] = $XVaultAPIDescribeQuery
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Current User with SCIM

.DESCRIPTION

No description available.

.PARAMETER Attributes
Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.

.PARAMETER ExcludedAttributes
Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2MeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Attributes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludedAttributes},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2MeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/Me'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Attributes) {
            $LocalVarQueryParameters['attributes'] = $Attributes
        }

        if ($ExcludedAttributes) {
            $LocalVarQueryParameters['excludedAttributes'] = $ExcludedAttributes
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Current User with SCIM

.DESCRIPTION

No description available.

.PARAMETER Attributes
Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.

.PARAMETER ExcludedAttributes
Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2MePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Attributes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludedAttributes},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2MePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/Me'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Attributes) {
            $LocalVarQueryParameters['attributes'] = $Attributes
        }

        if ($ExcludedAttributes) {
            $LocalVarQueryParameters['excludedAttributes'] = $ExcludedAttributes
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All SCIM Resource Types

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2ResourceTypesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2ResourceTypesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/ResourceTypes'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Single SCIM Resource Type

.DESCRIPTION

No description available.

.PARAMETER Type
A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2ResourceTypesTypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2ResourceTypesTypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/ResourceTypes/{type}'
        if (!$Type) {
            throw "Error! The required parameter `Type` missing when calling scimV2ResourceTypesTypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{type}', [System.Web.HTTPUtility]::UrlEncode($Type))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All SCIM Schema Information

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2SchemasGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2SchemasGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/Schemas'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Single SCIM Schema Information

.DESCRIPTION

No description available.

.PARAMETER Id
The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2SchemasIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2SchemasIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/Schemas/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling scimV2SchemasIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve SCIM Provider

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2ServiceProviderConfigGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2ServiceProviderConfigGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/ServiceProviderConfig'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve SCIM Resources

.DESCRIPTION

No description available.

.PARAMETER Type
The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.

.PARAMETER Filter
Optional: Filter for a specific attribute value. Must be in the format {attribute} eq ""{value}"". For example, to filter for a particular user name, userName eq ""john"". Complex expressions are not supported, and eq is the only supported operator.

.PARAMETER Attributes
Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.

.PARAMETER ExcludedAttributes
Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.

.PARAMETER SortBy
Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage

.PARAMETER SortOrder
Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.

.PARAMETER StartIndex
Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2TypeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Filter},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Attributes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludedAttributes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SortBy},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SortOrder},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartIndex},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2TypeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/{type}'
        if (!$Type) {
            throw "Error! The required parameter `Type` missing when calling scimV2TypeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{type}', [System.Web.HTTPUtility]::UrlEncode($Type))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Filter) {
            $LocalVarQueryParameters['filter'] = $Filter
        }

        if ($Attributes) {
            $LocalVarQueryParameters['attributes'] = $Attributes
        }

        if ($ExcludedAttributes) {
            $LocalVarQueryParameters['excludedAttributes'] = $ExcludedAttributes
        }

        if ($SortBy) {
            $LocalVarQueryParameters['sortBy'] = $SortBy
        }

        if ($SortOrder) {
            $LocalVarQueryParameters['sortOrder'] = $SortOrder
        }

        if ($StartIndex) {
            $LocalVarQueryParameters['startIndex'] = $StartIndex
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Single SCIM Resource

.DESCRIPTION

No description available.

.PARAMETER Type
The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.

.PARAMETER Id
The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.

.PARAMETER Attributes
Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.

.PARAMETER ExcludedAttributes
Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2TypeIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Attributes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludedAttributes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2TypeIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/{type}/{id}'
        if (!$Type) {
            throw "Error! The required parameter `Type` missing when calling scimV2TypeIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{type}', [System.Web.HTTPUtility]::UrlEncode($Type))
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling scimV2TypeIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Attributes) {
            $LocalVarQueryParameters['attributes'] = $Attributes
        }

        if ($ExcludedAttributes) {
            $LocalVarQueryParameters['excludedAttributes'] = $ExcludedAttributes
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Users with SCIM

.DESCRIPTION

No description available.

.PARAMETER Filter
Optional: Filter for a specific attribute value. Must be in the format {attribute} eq ""{value}"". For example, to filter for a particular user name, userName eq ""john"". Complex expressions are not supported, and eq is the only supported operator.

.PARAMETER Attributes
Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.

.PARAMETER ExcludedAttributes
Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.

.PARAMETER SortBy
Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage

.PARAMETER SortOrder
Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.

.PARAMETER Count
Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.

.PARAMETER StartIndex
Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2UsersGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Filter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Attributes},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludedAttributes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SortBy},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SortOrder},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Count},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartIndex},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2UsersGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/Users'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Filter) {
            $LocalVarQueryParameters['filter'] = $Filter
        }

        if ($Attributes) {
            $LocalVarQueryParameters['attributes'] = $Attributes
        }

        if ($ExcludedAttributes) {
            $LocalVarQueryParameters['excludedAttributes'] = $ExcludedAttributes
        }

        if ($SortBy) {
            $LocalVarQueryParameters['sortBy'] = $SortBy
        }

        if ($SortOrder) {
            $LocalVarQueryParameters['sortOrder'] = $SortOrder
        }

        if ($Count) {
            $LocalVarQueryParameters['count'] = $Count
        }

        if ($StartIndex) {
            $LocalVarQueryParameters['startIndex'] = $StartIndex
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Single User with SCIM

.DESCRIPTION

No description available.

.PARAMETER Id
The id of the user you wish to update.

.PARAMETER Filter
Optional: Filter for a specific attribute value. Must be in the format {attribute} eq ""{value}"". For example, to filter for a particular user name, userName eq ""john"". Complex expressions are not supported, and eq is the only supported operator.

.PARAMETER Attributes
Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.

.PARAMETER ExcludedAttributes
Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2UsersIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Filter},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Attributes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExcludedAttributes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2UsersIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/Users/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling scimV2UsersIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Filter) {
            $LocalVarQueryParameters['filter'] = $Filter
        }

        if ($Attributes) {
            $LocalVarQueryParameters['attributes'] = $Attributes
        }

        if ($ExcludedAttributes) {
            $LocalVarQueryParameters['excludedAttributes'] = $ExcludedAttributes
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update User with SCIM

.DESCRIPTION

No description available.

.PARAMETER Id
The id of the user you wish to update.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2UsersIdPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2UsersIdPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/Users/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling scimV2UsersIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create User with SCIM

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ScimV2UsersPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ScimV2UsersPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/scim/v2/Users'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Signing Certificate

.DESCRIPTION

No description available.

.PARAMETER CertId
The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesCertificateCertIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CertId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesCertificateCertIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/certificate/{cert_id}'
        if (!$CertId) {
            throw "Error! The required parameter `CertId` missing when calling servicesCertificateCertIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{cert_id}', [System.Web.HTTPUtility]::UrlEncode($CertId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Disable Configuration Mode

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesConfigurationModeActionsDisablePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesConfigurationModeActionsDisablePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/configuration_mode/actions/disable'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Enable Configuration Mode

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesConfigurationModeActionsEnablePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesConfigurationModeActionsEnablePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/configuration_mode/actions/enable'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Available Direct Data Files

.DESCRIPTION

No description available.

.PARAMETER ExtractType
The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.

.PARAMETER StartTime
Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.

.PARAMETER StopTime
Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesDirectdataFilesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExtractType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${StartTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${StopTime},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesDirectdataFilesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/directdata/files'

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($ExtractType) {
            $LocalVarQueryParameters['extract_type'] = $ExtractType
        }

        if ($StartTime) {
            $LocalVarQueryParameters['start_time'] = $StartTime
        }

        if ($StopTime) {
            $LocalVarQueryParameters['stop_time'] = $StopTime
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Direct Data File

.DESCRIPTION

No description available.

.PARAMETER Name
The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesDirectdataFilesNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesDirectdataFilesNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/directdata/files/{name}'
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling servicesDirectdataFilesNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Item Content

.DESCRIPTION

No description available.

.PARAMETER Item
The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER Range
Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingItemsContentItemGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Item},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Range},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingItemsContentItemGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/items/content/{item}'
        if (!$Item) {
            throw "Error! The required parameter `Item` missing when calling servicesFileStagingItemsContentItemGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{item}', [System.Web.HTTPUtility]::UrlEncode($Item))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Range) {
            $LocalVarHeaderParameters['Range'] = $Range
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete File or Folder

.DESCRIPTION

No description available.

.PARAMETER Item
The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.

.PARAMETER Recursive
Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingItemsItemDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Item},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Recursive},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingItemsItemDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/items/{item}'
        if (!$Item) {
            throw "Error! The required parameter `Item` missing when calling servicesFileStagingItemsItemDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{item}', [System.Web.HTTPUtility]::UrlEncode($Item))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Recursive) {
            $LocalVarQueryParameters['recursive'] = $Recursive
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

List Items at a Path

.DESCRIPTION

No description available.

.PARAMETER Item
The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.

.PARAMETER Recursive
If true, the response will contain the contents of all subfolders. If not specified, the default value is false.

.PARAMETER Limit
Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.

.PARAMETER FormatResult
If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingItemsItemGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Item},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Recursive},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Limit},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FormatResult},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingItemsItemGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/items/{item}'
        if (!$Item) {
            throw "Error! The required parameter `Item` missing when calling servicesFileStagingItemsItemGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{item}', [System.Web.HTTPUtility]::UrlEncode($Item))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Recursive) {
            $LocalVarQueryParameters['recursive'] = $Recursive
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($FormatResult) {
            $LocalVarQueryParameters['format_result'] = $FormatResult
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Folder or File

.DESCRIPTION

No description available.

.PARAMETER Item
The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingItemsItemPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Item},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingItemsItemPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/items/{item}'
        if (!$Item) {
            throw "Error! The required parameter `Item` missing when calling servicesFileStagingItemsItemPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{item}', [System.Web.HTTPUtility]::UrlEncode($Item))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Folder or File

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentMD5
Optional: The MD5 checksum of the file being uploaded.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingItemsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentMD5},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingItemsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/items'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentMD5) {
            $LocalVarHeaderParameters['Content-MD5'] = $ContentMD5
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

List Upload Sessions

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingUploadGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingUploadGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/upload/'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Resumable Upload Session

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingUploadPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingUploadPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/upload'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Abort Upload Session

.DESCRIPTION

No description available.

.PARAMETER UploadSessionId
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingUploadUploadSessionIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UploadSessionId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingUploadUploadSessionIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/upload/{upload_session_id}'
        if (!$UploadSessionId) {
            throw "Error! The required parameter `UploadSessionId` missing when calling servicesFileStagingUploadUploadSessionIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{upload_session_id}', [System.Web.HTTPUtility]::UrlEncode($UploadSessionId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Get Upload Session Details

.DESCRIPTION

No description available.

.PARAMETER UploadSessionId
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingUploadUploadSessionIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UploadSessionId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingUploadUploadSessionIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/upload/{upload_session_id}'
        if (!$UploadSessionId) {
            throw "Error! The required parameter `UploadSessionId` missing when calling servicesFileStagingUploadUploadSessionIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{upload_session_id}', [System.Web.HTTPUtility]::UrlEncode($UploadSessionId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

List File Parts Uploaded to Session

.DESCRIPTION

No description available.

.PARAMETER UploadSessionId
No description available.

.PARAMETER Limit
Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingUploadUploadSessionIdPartsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UploadSessionId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Limit},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingUploadUploadSessionIdPartsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/upload/{upload_session_id}/parts'
        if (!$UploadSessionId) {
            throw "Error! The required parameter `UploadSessionId` missing when calling servicesFileStagingUploadUploadSessionIdPartsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{upload_session_id}', [System.Web.HTTPUtility]::UrlEncode($UploadSessionId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Commit Upload Session

.DESCRIPTION

No description available.

.PARAMETER UploadSessionId
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingUploadUploadSessionIdPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UploadSessionId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingUploadUploadSessionIdPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/upload/{upload_session_id}'
        if (!$UploadSessionId) {
            throw "Error! The required parameter `UploadSessionId` missing when calling servicesFileStagingUploadUploadSessionIdPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{upload_session_id}', [System.Web.HTTPUtility]::UrlEncode($UploadSessionId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Upload to a Session

.DESCRIPTION

No description available.

.PARAMETER UploadSessionId
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIFilePartNumber
The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.

.PARAMETER ContentMD5
Optional: The MD5 checksum of the file part being uploaded.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesFileStagingUploadUploadSessionIdPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UploadSessionId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIFilePartNumber},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentMD5},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesFileStagingUploadUploadSessionIdPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/file_staging/upload/{upload_session_id}'
        if (!$UploadSessionId) {
            throw "Error! The required parameter `UploadSessionId` missing when calling servicesFileStagingUploadUploadSessionIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{upload_session_id}', [System.Web.HTTPUtility]::UrlEncode($UploadSessionId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIFilePartNumber) {
            $LocalVarHeaderParameters['X-VaultAPI-FilePartNumber'] = $XVaultAPIFilePartNumber
        }

        if ($ContentMD5) {
            $LocalVarHeaderParameters['Content-MD5'] = $ContentMD5
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Job Histories

.DESCRIPTION

No description available.

.PARAMETER StartDate
Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.

.PARAMETER EndDate
Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.

.PARAMETER Status
Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.

.PARAMETER Limit
Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.

.PARAMETER Offset
Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesJobsHistoriesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Status},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Limit},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Offset},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesJobsHistoriesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/jobs/histories'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($StartDate) {
            $LocalVarQueryParameters['start_date'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['end_date'] = $EndDate
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Import Bulk Translation File Job Errors

.DESCRIPTION

No description available.

.PARAMETER JobId
The id value of the requested import job. This was returned from the Import Bulk Translation File request.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesJobsJobIdErrorsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesJobsJobIdErrorsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/jobs/{job_id}/errors'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling servicesJobsJobIdErrorsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Job Status

.DESCRIPTION

No description available.

.PARAMETER JobId
The ID of the job, returned from the original job request.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesJobsJobIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesJobsJobIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/jobs/{job_id}'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling servicesJobsJobIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Import Bulk Translation File Job Summary

.DESCRIPTION

No description available.

.PARAMETER JobId
The id value of the requested import job. This was returned from the Import Bulk Translation File request.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesJobsJobIdSummaryGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesJobsJobIdSummaryGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/jobs/{job_id}/summary'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling servicesJobsJobIdSummaryGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve SDK Job Tasks

.DESCRIPTION

No description available.

.PARAMETER JobId
The ID of the SDK job, returned from the original job request.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesJobsJobIdTasksGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesJobsJobIdTasksGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/jobs/{job_id}/tasks'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling servicesJobsJobIdTasksGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Job Monitors

.DESCRIPTION

No description available.

.PARAMETER StartDate
Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.

.PARAMETER EndDate
Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.

.PARAMETER Status
Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.

.PARAMETER Limit
Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.

.PARAMETER Offset
Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesJobsMonitorsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Status},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Limit},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Offset},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesJobsMonitorsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/jobs/monitors'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($StartDate) {
            $LocalVarQueryParameters['start_date'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['end_date'] = $EndDate
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Start Job

.DESCRIPTION

No description available.

.PARAMETER JobId
The ID of the scheduled job instance to start.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesJobsStartNowJobIdPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesJobsStartNowJobIdPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/jobs/start_now/{job_id}'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling servicesJobsStartNowJobIdPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Extract Data Files

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesLoaderExtractPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesLoaderExtractPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/loader/extract'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Load Failure Log Results

.DESCRIPTION

No description available.

.PARAMETER JobId
The id value of the requested extract job.

.PARAMETER TaskId
The id value of the requested extract task.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesLoaderJobIdTasksTaskIdFailurelogGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesLoaderJobIdTasksTaskIdFailurelogGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/loader/{job_id}/tasks/{task_id}/failurelog'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling servicesLoaderJobIdTasksTaskIdFailurelogGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling servicesLoaderJobIdTasksTaskIdFailurelogGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Loader Extract Results

.DESCRIPTION

No description available.

.PARAMETER JobId
The id value of the requested extract job.

.PARAMETER TaskId
The id value of the requested extract task.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesLoaderJobIdTasksTaskIdResultsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesLoaderJobIdTasksTaskIdResultsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/loader/{job_id}/tasks/{task_id}/results'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling servicesLoaderJobIdTasksTaskIdResultsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling servicesLoaderJobIdTasksTaskIdResultsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Loader Extract Renditions Results

.DESCRIPTION

No description available.

.PARAMETER JobId
The id value of the requested extract job.

.PARAMETER TaskId
The id value of the requested extract task.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesLoaderJobIdTasksTaskIdResultsRenditionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesLoaderJobIdTasksTaskIdResultsRenditionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/loader/{job_id}/tasks/{task_id}/results/renditions'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Load Success Log Results

.DESCRIPTION

No description available.

.PARAMETER JobId
The id value of the requested extract job.

.PARAMETER TaskId
The id value of the requested extract task.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesLoaderJobIdTasksTaskIdSuccesslogGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TaskId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesLoaderJobIdTasksTaskIdSuccesslogGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/loader/{job_id}/tasks/{task_id}/successlog'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))
        if (!$TaskId) {
            throw "Error! The required parameter `TaskId` missing when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{task_id}', [System.Web.HTTPUtility]::UrlEncode($TaskId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Load Data Objects

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesLoaderLoadPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesLoaderLoadPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/loader/load'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Validate Package

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesPackageActionsValidatePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesPackageActionsValidatePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/package/actions/validate'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Export Package

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesPackagePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesPackagePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/package'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Import Package

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesPackagePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesPackagePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/package'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Queues

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesQueuesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesQueuesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/queues'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Disable Delivery

.DESCRIPTION

No description available.

.PARAMETER QueueName
The name of a specific Queue.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesQueuesQueueNameActionsDisableDeliveryPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${QueueName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesQueuesQueueNameActionsDisableDeliveryPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/queues/{queue_name}/actions/disable_delivery'
        if (!$QueueName) {
            throw "Error! The required parameter `QueueName` missing when calling servicesQueuesQueueNameActionsDisableDeliveryPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{queue_name}', [System.Web.HTTPUtility]::UrlEncode($QueueName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Enable Delivery

.DESCRIPTION

No description available.

.PARAMETER QueueName
The name of a specific Queue.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesQueuesQueueNameActionsEnableDeliveryPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${QueueName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesQueuesQueueNameActionsEnableDeliveryPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/queues/{queue_name}/actions/enable_delivery'
        if (!$QueueName) {
            throw "Error! The required parameter `QueueName` missing when calling servicesQueuesQueueNameActionsEnableDeliveryPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{queue_name}', [System.Web.HTTPUtility]::UrlEncode($QueueName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Reset Queue

.DESCRIPTION

No description available.

.PARAMETER QueueName
The name of a specific Queue.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesQueuesQueueNameActionsResetPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${QueueName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesQueuesQueueNameActionsResetPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/queues/{queue_name}/actions/reset'
        if (!$QueueName) {
            throw "Error! The required parameter `QueueName` missing when calling servicesQueuesQueueNameActionsResetPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{queue_name}', [System.Web.HTTPUtility]::UrlEncode($QueueName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Queue Status

.DESCRIPTION

No description available.

.PARAMETER QueueName
The name of a specific queue. For example, queue__c.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesQueuesQueueNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${QueueName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesQueuesQueueNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/queues/{queue_name}'
        if (!$QueueName) {
            throw "Error! The required parameter `QueueName` missing when calling servicesQueuesQueueNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{queue_name}', [System.Web.HTTPUtility]::UrlEncode($QueueName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Validate Imported Package

.DESCRIPTION

No description available.

.PARAMETER PackageId
The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ServicesVobjectVaultPackageVPackageIdActionsValidatePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PackageId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ServicesVobjectVaultPackageVPackageIdActionsValidatePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/services/vobject/vault_package__v/{package_id}/actions/validate'
        if (!$PackageId) {
            throw "Error! The required parameter `PackageId` missing when calling servicesVobjectVaultPackageVPackageIdActionsValidatePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{package_id}', [System.Web.HTTPUtility]::UrlEncode($PackageId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

End Session

.DESCRIPTION

No description available.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
The Vault sessionId to end.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-SessionDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-SessionDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/session'

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Single Client Code Distribution

.DESCRIPTION

No description available.

.PARAMETER DistributionName
The name attribute of the client code distribution to download.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-UicodeDistributionsDistributionNameCodeGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DistributionName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-UicodeDistributionsDistributionNameCodeGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/uicode/distributions/{distribution_name}/code'
        if (!$DistributionName) {
            throw "Error! The required parameter `DistributionName` missing when calling uicodeDistributionsDistributionNameCodeGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{distribution_name}', [System.Web.HTTPUtility]::UrlEncode($DistributionName))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Single Client Code Distribution

.DESCRIPTION

No description available.

.PARAMETER DistributionName
The name attribute of the client code distribution to delete.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-UicodeDistributionsDistributionNameDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DistributionName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-UicodeDistributionsDistributionNameDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/uicode/distributions/{distribution_name}'
        if (!$DistributionName) {
            throw "Error! The required parameter `DistributionName` missing when calling uicodeDistributionsDistributionNameDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{distribution_name}', [System.Web.HTTPUtility]::UrlEncode($DistributionName))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Single Client Code Distribution Metadata

.DESCRIPTION

No description available.

.PARAMETER DistributionName
The name attribute of the client code distribution to delete.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-UicodeDistributionsDistributionNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DistributionName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-UicodeDistributionsDistributionNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/uicode/distributions/{distribution_name}'
        if (!$DistributionName) {
            throw "Error! The required parameter `DistributionName` missing when calling uicodeDistributionsDistributionNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{distribution_name}', [System.Web.HTTPUtility]::UrlEncode($DistributionName))

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve All Client Code Distribution Metadata

.DESCRIPTION

No description available.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-UicodeDistributionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-UicodeDistributionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/uicode/distributions'

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Add or Replace Single Client Code Distribution

.DESCRIPTION

No description available.

.PARAMETER Accept
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-UicodeDistributionsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-UicodeDistributionsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/uicode/distributions'

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Deploy Package

.DESCRIPTION

No description available.

.PARAMETER PackageId
The id field value of the vault_package__v object record used for deployment. See Import Package.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectVaultPackageVPackageIdActionsDeployPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PackageId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectVaultPackageVPackageIdActionsDeployPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobject/vault_package__v/{package_id}/actions/deploy'
        if (!$PackageId) {
            throw "Error! The required parameter `PackageId` missing when calling vobjectVaultPackageVPackageIdActionsDeployPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{package_id}', [System.Web.HTTPUtility]::UrlEncode($PackageId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Package Deploy Results

.DESCRIPTION

No description available.

.PARAMETER PackageId
The id field value of the vault_package__v object record used for deployment. See Deploy Package.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectVaultPackageVPackageIdActionsDeployResultsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PackageId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectVaultPackageVPackageIdActionsDeployResultsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobject/vault_package__v/{package_id}/actions/deploy/results'
        if (!$PackageId) {
            throw "Error! The required parameter `PackageId` missing when calling vobjectVaultPackageVPackageIdActionsDeployResultsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{package_id}', [System.Web.HTTPUtility]::UrlEncode($PackageId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Results of Cascade Delete Job

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER JobStatus
No description available.

.PARAMETER JobId
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobStatus},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$JobStatus) {
            throw "Error! The required parameter `JobStatus` missing when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_status}', [System.Web.HTTPUtility]::UrlEncode($JobStatus))
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Results of Deep Copy Job

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER JobStatus
The ID of the job, retrieved from the response of the job request.

.PARAMETER JobId
Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsDeepcopyResultsObjectNameJobStatusJobIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobStatus},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsDeepcopyResultsObjectNameJobStatusJobIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$JobStatus) {
            throw "Error! The required parameter `JobStatus` missing when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_status}', [System.Web.HTTPUtility]::UrlEncode($JobStatus))
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create a Placeholder from an EDL Item

.DESCRIPTION

No description available.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsEdlItemVActionsCreateplaceholderPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsEdlItemVActionsCreateplaceholderPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/edl_item__v/actions/createplaceholder'

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Merge Records Job Log

.DESCRIPTION

No description available.

.PARAMETER JobId
The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsMergesJobIdLogGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsMergesJobIdLogGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/merges/{job_id}/log'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling vobjectsMergesJobIdLogGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Record Merge Results

.DESCRIPTION

No description available.

.PARAMETER JobId
The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsMergesJobIdResultsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsMergesJobIdResultsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/merges/{job_id}/results'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling vobjectsMergesJobIdResultsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Record Merge Status

.DESCRIPTION

No description available.

.PARAMETER JobId
The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsMergesJobIdStatusGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsMergesJobIdStatusGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/merges/{job_id}/status'
        if (!$JobId) {
            throw "Error! The required parameter `JobId` missing when calling vobjectsMergesJobIdStatusGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{job_id}', [System.Web.HTTPUtility]::UrlEncode($JobId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Object Action on Multiple Records

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value.

.PARAMETER ActionName
Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameActionsActionNamePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ActionName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameActionsActionNamePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/actions/{action_name}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameActionsActionNamePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ActionName) {
            throw "Error! The required parameter `ActionName` missing when calling vobjectsObjectNameActionsActionNamePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{action_name}', [System.Web.HTTPUtility]::UrlEncode($ActionName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Change Object Type

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The name of the object.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameActionsChangetypePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameActionsChangetypePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/actions/changetype'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameActionsChangetypePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Record Merge

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value. For example, account__v. This object must have Enable Merges configured.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER VobjectsObjectNameActionsMergePostRequestInner
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameActionsMergePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${VobjectsObjectNameActionsMergePostRequestInner},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameActionsMergePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json')

        $LocalVarUri = '/vobjects/{object_name}/actions/merge'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameActionsMergePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarBodyParameter = ConvertTo-Json @($VobjectsObjectNameActionsMergePostRequestInner) -Depth 100

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Roll-up Field Recalculation Status

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The name of the object for which to check the status of a Roll-up field recalculation.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameActionsRecalculaterollupsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameActionsRecalculaterollupsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/actions/recalculaterollups'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameActionsRecalculaterollupsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Recalculate Roll-up Fields

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The name of the object for which to check the status of a Roll-up field recalculation.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameActionsRecalculaterollupsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameActionsRecalculaterollupsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/actions/recalculaterollups'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameActionsRecalculaterollupsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Corporate Currency Fields

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameActionsUpdatecorporatecurrencyPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameActionsUpdatecorporatecurrencyPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/actions/updatecorporatecurrency'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameActionsUpdatecorporatecurrencyPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Multiple Object Record Attachments

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER IdParam
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameAttachmentsBatchDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdParam},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameAttachmentsBatchDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/attachments/batch'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameAttachmentsBatchDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($IdParam) {
            $LocalVarQueryParameters['idParam'] = $IdParam
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Multiple Object Record Attachments

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameAttachmentsBatchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameAttachmentsBatchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/attachments/batch'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameAttachmentsBatchPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Multiple Object Record Attachment Descriptions

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameAttachmentsBatchPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameAttachmentsBatchPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/attachments/batch'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameAttachmentsBatchPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Object Records

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
Can be text/csv or application/json

.PARAMETER Accept
Can be text/csv or application/json

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Object Record Roles

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name.

.PARAMETER Id
The id of the document, binder, or object record.

.PARAMETER RoleName
Optional: Include a role name to filter for a specific role. For example, owner__v.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameIdRolesRoleNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RoleName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameIdRolesRoleNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{id}/roles/{role_name}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameIdRolesRoleNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling vobjectsObjectNameIdRolesRoleNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))
        if (!$RoleName) {
            throw "Error! The required parameter `RoleName` missing when calling vobjectsObjectNameIdRolesRoleNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{role_name}', [System.Web.HTTPUtility]::UrlEncode($RoleName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Object User Actions Details

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value.

.PARAMETER ObjectRecordId
The object record id field value from which to retrieve user actions.

.PARAMETER ActionName
The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdActionsActionNameGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ActionName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdActionsActionNameGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/actions/{action_name}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$ActionName) {
            throw "Error! The required parameter `ActionName` missing when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{action_name}', [System.Web.HTTPUtility]::UrlEncode($ActionName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Initiate Object Action on a Single Record

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value.

.PARAMETER ObjectRecordId
The object record id field value from which to retrieve user actions.

.PARAMETER ActionName
The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdActionsActionNamePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ActionName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdActionsActionNamePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/actions/{action_name}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$ActionName) {
            throw "Error! The required parameter `ActionName` missing when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{action_name}', [System.Web.HTTPUtility]::UrlEncode($ActionName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Cascade Delete Object Record

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdActionsCascadedeletePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdActionsCascadedeletePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/actions/cascadedelete'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Deep Copy Object Record

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdActionsDeepcopyPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdActionsDeepcopyPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/actions/deepcopy'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Object Record User Actions

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value.

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER Loc
Optional: When true, retrieves localized (translated) strings for the label. 

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdActionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Loc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdActionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/actions'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdActionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdActionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Loc) {
            $LocalVarQueryParameters['loc'] = $Loc
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Attachment Field File

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value. For example, product__v.

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER AttachmentFieldName
The name of the Attachment field to update.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentFieldName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$AttachmentFieldName) {
            throw "Error! The required parameter `AttachmentFieldName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_field_name}', [System.Web.HTTPUtility]::UrlEncode($AttachmentFieldName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Attachment Field File

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value. For example, product__v.

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER AttachmentFieldName
The name of the Attachment field to update.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentFieldName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$AttachmentFieldName) {
            throw "Error! The required parameter `AttachmentFieldName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_field_name}', [System.Web.HTTPUtility]::UrlEncode($AttachmentFieldName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download All Attachment Field Files

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value. For example, product__v.

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachment_fields/file'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Object Record Attachment

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Object Record Attachment Metadata

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Object Record Attachment Description

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete Object Record Attachment Version

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER AttachmentVersion
The attachment version__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentVersion},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))
        if (!$AttachmentVersion) {
            throw "Error! The required parameter `AttachmentVersion` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_version}', [System.Web.HTTPUtility]::UrlEncode($AttachmentVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download Object Record Attachment File

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER AttachmentVersion
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentVersion},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))
        if (!$AttachmentVersion) {
            throw "Error! The required parameter `AttachmentVersion` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_version}', [System.Web.HTTPUtility]::UrlEncode($AttachmentVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Object Record Attachment Version Metadata

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER AttachmentVersion
The attachment version__v field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentVersion},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))
        if (!$AttachmentVersion) {
            throw "Error! The required parameter `AttachmentVersion` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_version}', [System.Web.HTTPUtility]::UrlEncode($AttachmentVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Restore Object Record Attachment Version

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER AttachmentVersion
The attachment version__v field value.

.PARAMETER Restore
No description available.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentVersion},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Restore},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))
        if (!$AttachmentVersion) {
            throw "Error! The required parameter `AttachmentVersion` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_version}', [System.Web.HTTPUtility]::UrlEncode($AttachmentVersion))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($Restore) {
            $LocalVarQueryParameters['restore'] = $Restore
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Object Record Attachment Versions

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER AttachmentId
The attachment id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))
        if (!$AttachmentId) {
            throw "Error! The required parameter `AttachmentId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{attachment_id}', [System.Web.HTTPUtility]::UrlEncode($AttachmentId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Download All Object Record Attachment Files

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentsFileGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentsFileGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachments/file'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Object Record Attachments

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachments'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create Object Record Attachment

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAttachmentsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAttachmentsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/attachments'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAttachmentsPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Complete Audit History for a Single Object Record

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value.

.PARAMETER ObjectRecordId
The object record id field value from which to retrieve user actions.

.PARAMETER StartDate
Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 

.PARAMETER EndDate
Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 

.PARAMETER FormatResult
To request a CSV file of your audit history, use csv. 

.PARAMETER Limit
Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.

.PARAMETER Offset
Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.

.PARAMETER Events
Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdAudittrailGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FormatResult},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Limit},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Offset},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Events},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdAudittrailGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}/audittrail'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdAudittrailGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdAudittrailGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($StartDate) {
            $LocalVarQueryParameters['start_date'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['end_date'] = $EndDate
        }

        if ($FormatResult) {
            $LocalVarQueryParameters['format_result'] = $FormatResult
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Events) {
            $LocalVarQueryParameters['events'] = $Events
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Object Record

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER ObjectRecordId
The object record id field value.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameObjectRecordIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectRecordId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameObjectRecordIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/{object_record_id}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameObjectRecordIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))
        if (!$ObjectRecordId) {
            throw "Error! The required parameter `ObjectRecordId` missing when calling vobjectsObjectNameObjectRecordIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_record_id}', [System.Web.HTTPUtility]::UrlEncode($ObjectRecordId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create & Upsert Object Records

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER IdParam
To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
Can be text/csv or application/json

.PARAMETER Accept
Can be text/csv or application/json

.PARAMETER XVaultAPIMigrationMode
If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.

.PARAMETER XVaultAPINoTriggers
If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNamePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdParam},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIMigrationMode},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPINoTriggers},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNamePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNamePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIMigrationMode) {
            $LocalVarHeaderParameters['X-VaultAPI-MigrationMode'] = $XVaultAPIMigrationMode
        }

        if ($XVaultAPINoTriggers) {
            $LocalVarHeaderParameters['X-VaultAPI-NoTriggers'] = $XVaultAPINoTriggers
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        if ($IdParam) {
            $LocalVarQueryParameters['idParam'] = $IdParam
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update Object Records

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The object name__v field value (product__v, country__v, custom_object__c, etc.).

.PARAMETER Authorization
No description available.

.PARAMETER ContentType
Can be text/csv or application/json

.PARAMETER Accept
Can be text/csv or application/json

.PARAMETER XVaultAPIMigrationMode
If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.

.PARAMETER XVaultAPINoTriggers
If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNamePut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPIMigrationMode},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${XVaultAPINoTriggers},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNamePut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNamePut."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIMigrationMode) {
            $LocalVarHeaderParameters['X-VaultAPI-MigrationMode'] = $XVaultAPIMigrationMode
        }

        if ($XVaultAPINoTriggers) {
            $LocalVarHeaderParameters['X-VaultAPI-NoTriggers'] = $XVaultAPINoTriggers
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Remove Users & Groups from Roles on Object Records

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The name of the object where you want to remove roles.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameRolesDelete {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameRolesDelete' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/roles'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameRolesDelete."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Assign Users & Groups to Roles on Object Records

.DESCRIPTION

No description available.

.PARAMETER ObjectName
The name of the object where you want to remove roles.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsObjectNameRolesPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsObjectNameRolesPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/{object_name}/roles'
        if (!$ObjectName) {
            throw "Error! The required parameter `ObjectName` missing when calling vobjectsObjectNameRolesPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{object_name}', [System.Web.HTTPUtility]::UrlEncode($ObjectName))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($ContentType) {
            $LocalVarHeaderParameters['Content-Type'] = $ContentType
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve Outbound Package Dependencies

.DESCRIPTION

No description available.

.PARAMETER PackageId
The ID of the outbound_package__v record from which to retrieve dependencies.

.PARAMETER Authorization
No description available.

.PARAMETER Accept
No description available.

.PARAMETER XVaultAPIClientID
Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-VobjectsOutboundPackageVPackageIdDependenciesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PackageId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Accept},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${XVaultAPIClientID},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-VobjectsOutboundPackageVPackageIdDependenciesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/vobjects/outbound_package__v/{package_id}/dependencies'
        if (!$PackageId) {
            throw "Error! The required parameter `PackageId` missing when calling vobjectsOutboundPackageVPackageIdDependenciesGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{package_id}', [System.Web.HTTPUtility]::UrlEncode($PackageId))

        if ($Authorization) {
            $LocalVarHeaderParameters['Authorization'] = $Authorization
        }

        if ($Accept) {
            $LocalVarHeaderParameters['Accept'] = $Accept
        }

        if ($XVaultAPIClientID) {
            $LocalVarHeaderParameters['X-VaultAPI-ClientID'] = $XVaultAPIClientID
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

