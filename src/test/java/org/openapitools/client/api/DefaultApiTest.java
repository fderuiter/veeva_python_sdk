/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.client.model.VobjectsObjectNameActionsMergePostRequestInner;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import org.eclipse.microprofile.rest.client.RestClientBuilder;

import java.net.URL;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Veeva Vault API v25.1 Test
 *
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private static DefaultApi client;
    private static final String baseUrl = "http://localhost:8080";

    @BeforeAll
    public static void setup() throws MalformedURLException {
        client = RestClientBuilder.newBuilder()
                        .baseUrl(new URL(baseUrl))
                        .register(ApiException.class)
                        .build(DefaultApi.class);
    }

    
    /**
     * Retrieve API Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiGetTest() throws Exception {
        //void response = client.apiGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Content File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlComponentsComponentTypeAndRecordNameFilesGetTest() throws Exception {
        //void response = client.apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Component Record (MDL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlComponentsComponentTypeAndRecordNameGetTest() throws Exception {
        //void response = client.apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Asynchronous MDL Script Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlExecuteAsyncJobIdResultsGetTest() throws Exception {
        //void response = client.apiMdlExecuteAsyncJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Execute MDL Script Asynchronously
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlExecuteAsyncPostTest() throws Exception {
        //void response = client.apiMdlExecuteAsyncPost(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Execute MDL Script
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlExecutePostTest() throws Exception {
        //void response = client.apiMdlExecutePost(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Upload Content File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlFilesPostTest() throws Exception {
        //void response = client.apiMdlFilesPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Audit Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void audittrailAuditTrailTypeGetTest() throws Exception {
        //void response = client.audittrailAuditTrailTypeGet(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Authentication Type Discovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authDiscoveryPostTest() throws Exception {
        //void response = client.authDiscoveryPost(accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * OAuth 2.0 / OpenID Connect
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authOauthSessionOathOidcProfileIdPostTest() throws Exception {
        //void response = client.authOauthSessionOathOidcProfileIdPost(oathOidcProfileId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * User Name and Password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authPostTest() throws Exception {
        //void response = client.authPost(contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Single Source Code File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeClassNameDeleteTest() throws Exception {
        //void response = client.codeClassNameDelete(className, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Disable Vault Extension
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeClassNameDisablePutTest() throws Exception {
        //void response = client.codeClassNameDisablePut(className, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Enable Vault Extension
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeClassNameEnablePutTest() throws Exception {
        //void response = client.codeClassNameEnablePut(className, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Single Source Code File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeClassNameGetTest() throws Exception {
        //void response = client.codeClassNameGet(className, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Profiling Sessions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerGetTest() throws Exception {
        //void response = client.codeProfilerGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Profiling Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerPostTest() throws Exception {
        //void response = client.codeProfilerPost(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * End Profiling Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerSessionNameActionsEndPostTest() throws Exception {
        //void response = client.codeProfilerSessionNameActionsEndPost(sessionName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Profiling Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerSessionNameDeleteTest() throws Exception {
        //void response = client.codeProfilerSessionNameDelete(sessionName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Profiling Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerSessionNameGetTest() throws Exception {
        //void response = client.codeProfilerSessionNameGet(sessionName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Profiling Session Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerSessionNameResultsGetTest() throws Exception {
        //void response = client.codeProfilerSessionNameResultsGet(sessionName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Add or Replace Single Source Code File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codePutTest() throws Exception {
        //void response = client.codePut(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Specific Root Nodes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compositesTreesEdlHierarchyOrTemplateActionsListnodesPostTest() throws Exception {
        //void response = client.compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Root Nodes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compositesTreesEdlHierarchyOrTemplateGetTest() throws Exception {
        //void response = client.compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve a Node&#39;s Children
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compositesTreesEdlHierarchyVParentNodeIdChildrenGetTest() throws Exception {
        //void response = client.compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Node Order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compositesTreesEdlHierarchyVParentNodeIdChildrenPutTest() throws Exception {
        //void response = client.compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Component Record (XML/JSON)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationComponentTypeAndRecordNameGetTest() throws Exception {
        //void response = client.configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Component Record Collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationComponentTypeGetTest() throws Exception {
        //void response = client.configurationComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Details from a Specific Object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationObjectNameAndObjectTypeGetTest() throws Exception {
        //void response = client.configurationObjectNameAndObjectTypeGet(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Details from All Object Types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationObjecttypeGetTest() throws Exception {
        //void response = client.configurationObjecttypeGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Lifecycle Role Assignment Override Rules
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationRoleAssignmentRuleDeleteTest() throws Exception {
        //void response = client.configurationRoleAssignmentRuleDelete(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationRoleAssignmentRuleGetTest() throws Exception {
        //void response = client.configurationRoleAssignmentRuleGet(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Lifecycle Role Assignment Override Rules
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationRoleAssignmentRulePostTest() throws Exception {
        //void response = client.configurationRoleAssignmentRulePost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Lifecycle Role Assignment Rules (Default &amp; Override)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationRoleAssignmentRulePutTest() throws Exception {
        //void response = client.configurationRoleAssignmentRulePut(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Delegated Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delegationLoginPostTest() throws Exception {
        //void response = client.delegationLoginPost(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Delegations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delegationVaultsGetTest() throws Exception {
        //void response = client.delegationVaultsGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Session Keep Alive
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void keepAlivePostTest() throws Exception {
        //void response = client.keepAlivePost(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Limits on Objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void limitsGetTest() throws Exception {
        //void response = client.limitsGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Daily API Usage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsApiUsageGetTest() throws Exception {
        //void response = client.logsApiUsageGet(date, logFormat, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Debug Logs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugGetTest() throws Exception {
        //void response = client.logsCodeDebugGet(userId, includeInactive, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Debug Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugIdActionsResetDeleteTest() throws Exception {
        //void response = client.logsCodeDebugIdActionsResetDelete(id, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Reset Debug Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugIdActionsResetPostTest() throws Exception {
        //void response = client.logsCodeDebugIdActionsResetPost(id, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Debug Log Files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugIdFilesGetTest() throws Exception {
        //void response = client.logsCodeDebugIdFilesGet(id, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Single Debug Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugIdGetTest() throws Exception {
        //void response = client.logsCodeDebugIdGet(id, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Debug Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugPostTest() throws Exception {
        //void response = client.logsCodeDebugPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download SDK Runtime Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeRuntimeGetTest() throws Exception {
        //void response = client.logsCodeRuntimeGet(date, logFormat, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Import Bulk Translation File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void messagesMessageTypeActionsImportPostTest() throws Exception {
        //void response = client.messagesMessageTypeActionsImportPost(messageType, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Export Bulk Translation File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void messagesMessageTypeLanguageLangActionsExportPostTest() throws Exception {
        //void response = client.messagesMessageTypeLanguageLangActionsExportPost(messageType, lang, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Audit Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataAudittrailAuditTrailTypeGetTest() throws Exception {
        //void response = client.metadataAudittrailAuditTrailTypeGet(auditTrailType, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Audit Types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataAudittrailGetTest() throws Exception {
        //void response = client.metadataAudittrailGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Component Type Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataComponentsComponentTypeGetTest() throws Exception {
        //void response = client.metadataComponentsComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Component Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataComponentsGetTest() throws Exception {
        //void response = client.metadataComponentsGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder Template Node Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsBindersTemplatesBindernodesGetTest() throws Exception {
        //void response = client.metadataObjectsBindersTemplatesBindernodesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder Template Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsBindersTemplatesGetTest() throws Exception {
        //void response = client.metadataObjectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Annotation Placemark Type Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Annotation Reference Type Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Annotation Type Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Event SubType Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType, eventSubtype, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Event Types and Subtypes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsEventsGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsEventsGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Lock Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsLockGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsLockGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Common Document Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsPropertiesFindCommonPostTest() throws Exception {
        //void response = client.metadataObjectsDocumentsPropertiesFindCommonPost(contentType, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Document Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsPropertiesGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsPropertiesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Template Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTemplatesGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Document Types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTypesGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsTypesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTypesTypeGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsTypesTypeGet(type, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Type Relationships
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTypesTypeRelationshipsGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsTypesTypeRelationshipsGet(type, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Classification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type, subtype, classification, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Subtype
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetTest() throws Exception {
        //void response = client.metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type, subtype, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Group Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsGroupsGetTest() throws Exception {
        //void response = client.metadataObjectsGroupsGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Security Policy Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsSecuritypoliciesGetTest() throws Exception {
        //void response = client.metadataObjectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve User Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsUsersGetTest() throws Exception {
        //void response = client.metadataObjectsUsersGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Archived Document Signature Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetTest() throws Exception {
        //void response = client.metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Signature Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetTest() throws Exception {
        //void response = client.metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Object Collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsGetTest() throws Exception {
        //void response = client.metadataVobjectsGet(loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Cancel Raw Object Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsObjectNameActionsCanceldeploymentPostTest() throws Exception {
        //void response = client.metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Object Field Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsObjectNameFieldsObjectFieldNameGetTest() throws Exception {
        //void response = client.metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Object Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsObjectNameGetTest() throws Exception {
        //void response = client.metadataVobjectsObjectNameGet(objectName, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Page Layouts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsObjectNamePageLayoutsGetTest() throws Exception {
        //void response = client.metadataVobjectsObjectNamePageLayoutsGet(objectName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Page Layout Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsObjectNamePageLayoutsLayoutNameGetTest() throws Exception {
        //void response = client.metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName, layoutName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Email Notification Histories
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationsHistoriesGetTest() throws Exception {
        //void response = client.notificationsHistoriesGet(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Bulk Workflow Action Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsActionGetTest() throws Exception {
        //void response = client.objectWorkflowActionsActionGet(action, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Workflow Actions on Multiple Workflows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsActionPostTest() throws Exception {
        //void response = client.objectWorkflowActionsActionPost(action, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Cancel Workflow Tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsCanceltasksPostTest() throws Exception {
        //void response = client.objectWorkflowActionsCanceltasksPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Cancel Workflows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsCancelworkflowsPostTest() throws Exception {
        //void response = client.objectWorkflowActionsCancelworkflowsPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Bulk Workflow Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsGetTest() throws Exception {
        //void response = client.objectWorkflowActionsGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Reassign Workflow Tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsReassigntasksPostTest() throws Exception {
        //void response = client.objectWorkflowActionsReassigntasksPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Replace Workflow Owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsReplaceworkflowownerPostTest() throws Exception {
        //void response = client.objectWorkflowActionsReplaceworkflowownerPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder Export Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersActionsExportJobIdResultsGetTest() throws Exception {
        //void response = client.objectsBindersActionsExportJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Export Binder (Latest Version)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdActionsExportPostTest() throws Exception {
        //void response = client.objectsBindersBinderIdActionsExportPost(binderId, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Refresh Binder Auto-Filing
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdActionsPostTest() throws Exception {
        //void response = client.objectsBindersBinderIdActionsPost(binderId, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Binding Rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdBindingRulePutTest() throws Exception {
        //void response = client.objectsBindersBinderIdBindingRulePut(binderId, contentType, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdDeleteTest() throws Exception {
        //void response = client.objectsBindersBinderIdDelete(binderId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Binder Document Binding Rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdDocumentsNodeIdBindingRulePutTest() throws Exception {
        //void response = client.objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Add Document to Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdDocumentsPostTest() throws Exception {
        //void response = client.objectsBindersBinderIdDocumentsPost(binderId, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Remove Document from Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdDocumentsSectionIdDeleteTest() throws Exception {
        //void response = client.objectsBindersBinderIdDocumentsSectionIdDelete(binderId, sectionId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Move Document in Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdDocumentsSectionIdPutTest() throws Exception {
        //void response = client.objectsBindersBinderIdDocumentsSectionIdPut(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdGetTest() throws Exception {
        //void response = client.objectsBindersBinderIdGet(binderId, depth, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Binder Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdPostTest() throws Exception {
        //void response = client.objectsBindersBinderIdPost(binderId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdPutTest() throws Exception {
        //void response = client.objectsBindersBinderIdPut(binderId, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Remove Users &amp; Groups from Roles on a Single Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteTest() throws Exception {
        //void response = client.objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Binder Section Binding Rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdSectionsNodeIdBindingRulePutTest() throws Exception {
        //void response = client.objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Binder Section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdSectionsNodeIdPutTest() throws Exception {
        //void response = client.objectsBindersBinderIdSectionsNodeIdPut(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Binder Section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdSectionsPostTest() throws Exception {
        //void response = client.objectsBindersBinderIdSectionsPost(binderId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Binder Section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdSectionsSectionIdDeleteTest() throws Exception {
        //void response = client.objectsBindersBinderIdSectionsSectionIdDelete(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder Sections
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdSectionsSectionIdGetTest() throws Exception {
        //void response = client.objectsBindersBinderIdSectionsSectionIdGet(binderId, sectionId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Binder Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsGetTest() throws Exception {
        //void response = client.objectsBindersBinderIdVersionsGet(binderId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Export Binder (Specific Version)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostTest() throws Exception {
        //void response = client.objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Binder Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteTest() throws Exception {
        //void response = client.objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionGetTest() throws Exception {
        //void response = client.objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Binder Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionPutTest() throws Exception {
        //void response = client.objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Binder Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostTest() throws Exception {
        //void response = client.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Binder Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteTest() throws Exception {
        //void response = client.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetTest() throws Exception {
        //void response = client.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder Version Section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetTest() throws Exception {
        //void response = client.objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Binder Roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdRolesGetTest() throws Exception {
        //void response = client.objectsBindersIdRolesGet(id, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Assign Users &amp; Groups to Roles on a Single Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdRolesPostTest() throws Exception {
        //void response = client.objectsBindersIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdRolesRoleNameGetTest() throws Exception {
        //void response = client.objectsBindersIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder User Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetTest() throws Exception {
        //void response = client.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder Entry Criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetTest() throws Exception {
        //void response = client.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Binder User Action
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutTest() throws Exception {
        //void response = client.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve User Actions on Multiple Binders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersLifecycleActionsPostTest() throws Exception {
        //void response = client.objectsBindersLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Bulk Binder User Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersLifecycleActionsUserActionNamePutTest() throws Exception {
        //void response = client.objectsBindersLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersPostTest() throws Exception {
        //void response = client.objectsBindersPost(async, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder Template Collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesGetTest() throws Exception {
        //void response = client.objectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Binder Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesPostTest() throws Exception {
        //void response = client.objectsBindersTemplatesPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Binder Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesPutTest() throws Exception {
        //void response = client.objectsBindersTemplatesPut(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder Template Node Attributes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesTemplateNameBindernodesGetTest() throws Exception {
        //void response = client.objectsBindersTemplatesTemplateNameBindernodesGet(templateName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Binder Template Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesTemplateNameBindernodesPostTest() throws Exception {
        //void response = client.objectsBindersTemplatesTemplateNameBindernodesPost(templateName, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Replace Binder Template Nodes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesTemplateNameBindernodesPutTest() throws Exception {
        //void response = client.objectsBindersTemplatesTemplateNameBindernodesPut(templateName, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Binder Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesTemplateNameDeleteTest() throws Exception {
        //void response = client.objectsBindersTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Binder Template Attributes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesTemplateNameGetTest() throws Exception {
        //void response = client.objectsBindersTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Deleted Document IDs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDeletionsDocumentsGetTest() throws Exception {
        //void response = client.objectsDeletionsDocumentsGet(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Deleted Object Record ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDeletionsVobjectsObjectNameGetTest() throws Exception {
        //void response = client.objectsDeletionsVobjectsObjectNameGet(objectName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Document Workflows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsActionsGetTest() throws Exception {
        //void response = client.objectsDocumentsActionsGet(loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Controlled Copy Job Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetTest() throws Exception {
        //void response = client.objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Workflow Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsActionsWorkflowNameGetTest() throws Exception {
        //void response = client.objectsDocumentsActionsWorkflowNameGet(workflowName, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Document Workflow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsActionsWorkflowNamePostTest() throws Exception {
        //void response = client.objectsDocumentsActionsWorkflowNamePost(workflowName, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Annotations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAnnotationsBatchDeleteTest() throws Exception {
        //void response = client.objectsDocumentsAnnotationsBatchDelete(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Multiple Annotations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAnnotationsBatchPostTest() throws Exception {
        //void response = client.objectsDocumentsAnnotationsBatchPost(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Annotations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAnnotationsBatchPutTest() throws Exception {
        //void response = client.objectsDocumentsAnnotationsBatchPut(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Add Annotation Replies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAnnotationsRepliesBatchPostTest() throws Exception {
        //void response = client.objectsDocumentsAnnotationsRepliesBatchPost(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Multiple Document Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAttachmentsBatchDeleteTest() throws Exception {
        //void response = client.objectsDocumentsAttachmentsBatchDelete(accept, authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Multiple Document Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAttachmentsBatchPostTest() throws Exception {
        //void response = client.objectsDocumentsAttachmentsBatchPost(accept, authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Multiple Document Attachment Descriptions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAttachmentsBatchPutTest() throws Exception {
        //void response = client.objectsDocumentsAttachmentsBatchPut(accept, authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Export Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchActionsFileextractJobIdResultsGetTest() throws Exception {
        //void response = client.objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Export Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchActionsFileextractPostTest() throws Exception {
        //void response = client.objectsDocumentsBatchActionsFileextractPost(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Reclassify Multiple Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchActionsReclassifyPutTest() throws Exception {
        //void response = client.objectsDocumentsBatchActionsReclassifyPut(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Multiple Document Renditions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchActionsRerenderPostTest() throws Exception {
        //void response = client.objectsDocumentsBatchActionsRerenderPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Multiple Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchDeleteTest() throws Exception {
        //void response = client.objectsDocumentsBatchDelete(idParam, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Undo Collaborative Authoring Checkout
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchLockDeleteTest() throws Exception {
        //void response = client.objectsDocumentsBatchLockDelete(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Multiple Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchPostTest() throws Exception {
        //void response = client.objectsDocumentsBatchPost(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Multiple Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchPutTest() throws Exception {
        //void response = client.objectsDocumentsBatchPut(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Anchor IDs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAnchorsGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAnchorsGet(docId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Export Document Annotations to PDF
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAnnotationsFileGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAnnotationsFileGet(docId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Import Document Annotations from PDF
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAnnotationsFilePostTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAnnotationsFilePost(docId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Single Document Attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdDeleteTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Document Attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdFileGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Attachment Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Document Attachment Description
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdPutTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Single Document Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Document Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Attachment Version Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Restore Document Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Attachment Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download All Document Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsFileGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsFileGet(docId, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsGet(docId, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Document Attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsPostTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAttachmentsPost(docId, accept, authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Complete Audit History for a Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAudittrailGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdAudittrailGet(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdDeleteTest() throws Exception {
        //void response = client.objectsDocumentsDocIdDelete(docId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Events
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdEventsGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdEventsGet(docId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Document File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdFileGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdFileGet(docId, lockDocument, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdGet(docId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Document Lock
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdLockDeleteTest() throws Exception {
        //void response = client.objectsDocumentsDocIdLockDelete(docId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Lock
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdLockGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdLockGet(docId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Document Lock
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdLockPostTest() throws Exception {
        //void response = client.objectsDocumentsDocIdLockPost(docId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download All Document Version Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Single Document Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdPostTest() throws Exception {
        //void response = client.objectsDocumentsDocIdPost(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdPutTest() throws Exception {
        //void response = client.objectsDocumentsDocIdPut(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Renditions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRenditionsGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdRenditionsGet(docId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Single Document Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRenditionsRenditionTypeDeleteTest() throws Exception {
        //void response = client.objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId, renditionType, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Document Rendition File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRenditionsRenditionTypeGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdRenditionsRenditionTypeGet(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Add Single Document Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRenditionsRenditionTypePostTest() throws Exception {
        //void response = client.objectsDocumentsDocIdRenditionsRenditionTypePost(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Replace Document Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRenditionsRenditionTypePutTest() throws Exception {
        //void response = client.objectsDocumentsDocIdRenditionsRenditionTypePut(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Remove Users &amp; Groups from Roles on a Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteTest() throws Exception {
        //void response = client.objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Version Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsGet(docId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Read Annotations by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Read Replies of Parent Annotation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Export Document Version Annotations to PDF
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Import Document Version Annotations from PDF
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Read Annotations by Document Version and Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Document Version Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Version Attachment Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Single Document Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Version Notes as CSV
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Document Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Video Annotations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Document Version File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Document Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Relationships
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Single Document Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Single Document Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Version Renditions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Document Version Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Document Version Rendition File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Upload Document Version Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Replace Document Version Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Document Version Thumbnail File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetTest() throws Exception {
        //void response = client.objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsGetTest() throws Exception {
        //void response = client.objectsDocumentsGet(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Document Roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdRolesGetTest() throws Exception {
        //void response = client.objectsDocumentsIdRolesGet(id, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Assign Users &amp; Groups to Roles on a Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdRolesPostTest() throws Exception {
        //void response = client.objectsDocumentsIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdRolesRoleNameGetTest() throws Exception {
        //void response = client.objectsDocumentsIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document User Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetTest() throws Exception {
        //void response = client.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Entry Criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetTest() throws Exception {
        //void response = client.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Document User Action
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutTest() throws Exception {
        //void response = client.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve User Actions on Multiple Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsLifecycleActionsPostTest() throws Exception {
        //void response = client.objectsDocumentsLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Bulk Document User Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsLifecycleActionsUserActionNamePutTest() throws Exception {
        //void response = client.objectsDocumentsLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsPostTest() throws Exception {
        //void response = client.objectsDocumentsPost(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Multiple Document Relationships
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRelationshipsBatchDeleteTest() throws Exception {
        //void response = client.objectsDocumentsRelationshipsBatchDelete(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Multiple Document Relationships
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRelationshipsBatchPostTest() throws Exception {
        //void response = client.objectsDocumentsRelationshipsBatchPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Multiple Document Renditions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRenditionsBatchDeleteTest() throws Exception {
        //void response = client.objectsDocumentsRenditionsBatchDelete(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Add Multiple Document Renditions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRenditionsBatchPostTest() throws Exception {
        //void response = client.objectsDocumentsRenditionsBatchPost(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRolesBatchDeleteTest() throws Exception {
        //void response = client.objectsDocumentsRolesBatchDelete(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRolesBatchPostTest() throws Exception {
        //void response = client.objectsDocumentsRolesBatchPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Template Collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesGetTest() throws Exception {
        //void response = client.objectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Single Document Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesPostTest() throws Exception {
        //void response = client.objectsDocumentsTemplatesPost(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Multiple Document Templates
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesPutTest() throws Exception {
        //void response = client.objectsDocumentsTemplatesPut(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Basic Document Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesTemplateNameDeleteTest() throws Exception {
        //void response = client.objectsDocumentsTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Document Template File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesTemplateNameFileGetTest() throws Exception {
        //void response = client.objectsDocumentsTemplatesTemplateNameFileGet(templateName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Document Template Attributes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesTemplateNameGetTest() throws Exception {
        //void response = client.objectsDocumentsTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Single Document Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesTemplateNamePutTest() throws Exception {
        //void response = client.objectsDocumentsTemplatesTemplateNamePut(templateName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Document Tokens
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTokensPostTest() throws Exception {
        //void response = client.objectsDocumentsTokensPost(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Export Document Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsVersionsBatchActionsFileextractPostTest() throws Exception {
        //void response = client.objectsDocumentsVersionsBatchActionsFileextractPost(source, renditions, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Multiple Document Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsVersionsBatchDeleteTest() throws Exception {
        //void response = client.objectsDocumentsVersionsBatchDelete(idParam, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Multiple Document Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsVersionsBatchPostTest() throws Exception {
        //void response = client.objectsDocumentsVersionsBatchPost(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Domain Information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDomainGetTest() throws Exception {
        //void response = client.objectsDomainGet(includeApplication, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Domains
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDomainsGetTest() throws Exception {
        //void response = client.objectsDomainsGet(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Add EDL Matched Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsEdlMatchedDocumentsBatchActionsAddPostTest() throws Exception {
        //void response = client.objectsEdlMatchedDocumentsBatchActionsAddPost(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Remove EDL Matched Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsEdlMatchedDocumentsBatchActionsRemovePostTest() throws Exception {
        //void response = client.objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Auto Managed Groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsAutoGetTest() throws Exception {
        //void response = client.objectsGroupsAutoGet(limit, offset, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsGetTest() throws Exception {
        //void response = client.objectsGroupsGet(includeImplied, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsGroupIdDeleteTest() throws Exception {
        //void response = client.objectsGroupsGroupIdDelete(groupId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsGroupIdGetTest() throws Exception {
        //void response = client.objectsGroupsGroupIdGet(groupId, includeImplied, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsGroupIdPutTest() throws Exception {
        //void response = client.objectsGroupsGroupIdPut(groupId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Group 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsPostTest() throws Exception {
        //void response = client.objectsGroupsPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Application License Usage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsLicensesGetTest() throws Exception {
        //void response = client.objectsLicensesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Multi-Record Workflows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsActionsGetTest() throws Exception {
        //void response = client.objectsObjectworkflowsActionsGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Multi-Record Workflow Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsActionsWorkflowNameGetTest() throws Exception {
        //void response = client.objectsObjectworkflowsActionsWorkflowNameGet(workflowName, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Multi-Record Workflow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsActionsWorkflowNamePostTest() throws Exception {
        //void response = client.objectsObjectworkflowsActionsWorkflowNamePost(workflowName, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Workflows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsGetTest() throws Exception {
        //void response = client.objectsObjectworkflowsGet(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Workflow Tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksGetTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksGet(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Accept Single Record Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsAcceptPostTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Cancel Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsCancelPostTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Complete Single Record Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsCompletePostTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Workflow Task Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsGetTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsGet(taskId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Accept Multi-item Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Complete Multi-item Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Manage Multi-Item Workflow Content
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Reassign Multi-item Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Reassign Single Record Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsReassignPostTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Workflow Task Action Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsTaskActionGetTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Undo Workflow Task Acceptance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Workflow Task Due Date
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Workflow Task Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdGetTest() throws Exception {
        //void response = client.objectsObjectworkflowsTasksTaskIdGet(taskId, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Workflow Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsWorkflowIdActionsGetTest() throws Exception {
        //void response = client.objectsObjectworkflowsWorkflowIdActionsGet(workflowId, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Workflow Action Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetTest() throws Exception {
        //void response = client.objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId, workflowAction, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Workflow Action
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostTest() throws Exception {
        //void response = client.objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Workflow Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsWorkflowIdGetTest() throws Exception {
        //void response = client.objectsObjectworkflowsWorkflowIdGet(workflowId, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Picklists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsGetTest() throws Exception {
        //void response = client.objectsPicklistsGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Picklist Values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsPicklistNameGetTest() throws Exception {
        //void response = client.objectsPicklistsPicklistNameGet(picklistName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Inactivate Picklist Value
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsPicklistNamePicklistValueNameDeleteTest() throws Exception {
        //void response = client.objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Picklist Value
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsPicklistNamePicklistValueNamePutTest() throws Exception {
        //void response = client.objectsPicklistsPicklistNamePicklistValueNamePut(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Picklist Values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsPicklistNamePostTest() throws Exception {
        //void response = client.objectsPicklistsPicklistNamePost(picklistName, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Picklist Value Label
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsPicklistNamePutTest() throws Exception {
        //void response = client.objectsPicklistsPicklistNamePut(picklistName, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Build Production Vault
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxActionsBuildproductionPostTest() throws Exception {
        //void response = client.objectsSandboxActionsBuildproductionPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Promote to Production
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxActionsPromoteproductionPostTest() throws Exception {
        //void response = client.objectsSandboxActionsPromoteproductionPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Recheck Sandbox Usage Limit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxActionsRecheckusagePostTest() throws Exception {
        //void response = client.objectsSandboxActionsRecheckusagePost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Change Sandbox Size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxBatchChangesizePostTest() throws Exception {
        //void response = client.objectsSandboxBatchChangesizePost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Set Sandbox Entitlements
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxEntitlementsSetPostTest() throws Exception {
        //void response = client.objectsSandboxEntitlementsSetPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Sandboxes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxGetTest() throws Exception {
        //void response = client.objectsSandboxGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Sandbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxNameDeleteTest() throws Exception {
        //void response = client.objectsSandboxNameDelete(name, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create or Refresh Sandbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxPostTest() throws Exception {
        //void response = client.objectsSandboxPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Sandbox Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxSnapshotApiNameActionsUpdatePostTest() throws Exception {
        //void response = client.objectsSandboxSnapshotApiNameActionsUpdatePost(apiName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Upgrade Sandbox Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxSnapshotApiNameActionsUpgradePostTest() throws Exception {
        //void response = client.objectsSandboxSnapshotApiNameActionsUpgradePost(apiName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Sandbox Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxSnapshotApiNameDeleteTest() throws Exception {
        //void response = client.objectsSandboxSnapshotApiNameDelete(apiName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Sandbox Snapshots
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxSnapshotGetTest() throws Exception {
        //void response = client.objectsSandboxSnapshotGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Sandbox Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxSnapshotPostTest() throws Exception {
        //void response = client.objectsSandboxSnapshotPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Refresh Sandbox from Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxVaultIdActionsRefreshPostTest() throws Exception {
        //void response = client.objectsSandboxVaultIdActionsRefreshPost(vaultId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Sandbox Details by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxVaultIdGetTest() throws Exception {
        //void response = client.objectsSandboxVaultIdGet(vaultId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Security Policies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSecuritypoliciesGetTest() throws Exception {
        //void response = client.objectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Security Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSecuritypoliciesSecurityPolicyNameGetTest() throws Exception {
        //void response = client.objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersGetTest() throws Exception {
        //void response = client.objectsUsersGet(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersIdGetTest() throws Exception {
        //void response = client.objectsUsersIdGet(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve User Permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersIdPermissionsGetTest() throws Exception {
        //void response = client.objectsUsersIdPermissionsGet(id, filter, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Single User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersIdPutTest() throws Exception {
        //void response = client.objectsUsersIdPut(id, authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Validate Session User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersMeGetTest() throws Exception {
        //void response = client.objectsUsersMeGet(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Change My Password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersMePasswordPostTest() throws Exception {
        //void response = client.objectsUsersMePasswordPost(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve My User Permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersMePermissionsGetTest() throws Exception {
        //void response = client.objectsUsersMePermissionsGet(filter, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update My User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersMePutTest() throws Exception {
        //void response = client.objectsUsersMePut(authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Single User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersPostTest() throws Exception {
        //void response = client.objectsUsersPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Multiple Users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersPutTest() throws Exception {
        //void response = client.objectsUsersPut(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Disable User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersUserIdDeleteTest() throws Exception {
        //void response = client.objectsUsersUserIdDelete(userId, domain, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Vault Membership
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersUserIdVaultMembershipVaultIdPutTest() throws Exception {
        //void response = client.objectsUsersUserIdVaultMembershipVaultIdPut(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Vault Compare
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsVaultActionsComparePostTest() throws Exception {
        //void response = client.objectsVaultActionsComparePost(authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Vault Configuration Report
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsVaultActionsConfigreportPostTest() throws Exception {
        //void response = client.objectsVaultActionsConfigreportPost(authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Component Definition Query
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryComponentsPostTest() throws Exception {
        //void response = client.queryComponentsPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Next Page URL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryNextPagePostTest() throws Exception {
        //void response = client.queryNextPagePost(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Submitting a Query
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryPostTest() throws Exception {
        //void response = client.queryPost(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Previous Page URL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryPreviousPagePostTest() throws Exception {
        //void response = client.queryPreviousPagePost(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Current User with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2MeGetTest() throws Exception {
        //void response = client.scimV2MeGet(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Current User with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2MePutTest() throws Exception {
        //void response = client.scimV2MePut(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All SCIM Resource Types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2ResourceTypesGetTest() throws Exception {
        //void response = client.scimV2ResourceTypesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Single SCIM Resource Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2ResourceTypesTypeGetTest() throws Exception {
        //void response = client.scimV2ResourceTypesTypeGet(type, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All SCIM Schema Information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2SchemasGetTest() throws Exception {
        //void response = client.scimV2SchemasGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Single SCIM Schema Information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2SchemasIdGetTest() throws Exception {
        //void response = client.scimV2SchemasIdGet(id, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve SCIM Provider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2ServiceProviderConfigGetTest() throws Exception {
        //void response = client.scimV2ServiceProviderConfigGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve SCIM Resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2TypeGetTest() throws Exception {
        //void response = client.scimV2TypeGet(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Single SCIM Resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2TypeIdGetTest() throws Exception {
        //void response = client.scimV2TypeIdGet(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Users with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2UsersGetTest() throws Exception {
        //void response = client.scimV2UsersGet(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Single User with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2UsersIdGetTest() throws Exception {
        //void response = client.scimV2UsersIdGet(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update User with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2UsersIdPutTest() throws Exception {
        //void response = client.scimV2UsersIdPut(id, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create User with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2UsersPostTest() throws Exception {
        //void response = client.scimV2UsersPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Signing Certificate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesCertificateCertIdGetTest() throws Exception {
        //void response = client.servicesCertificateCertIdGet(certId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Disable Configuration Mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesConfigurationModeActionsDisablePostTest() throws Exception {
        //void response = client.servicesConfigurationModeActionsDisablePost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Enable Configuration Mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesConfigurationModeActionsEnablePostTest() throws Exception {
        //void response = client.servicesConfigurationModeActionsEnablePost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Available Direct Data Files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesDirectdataFilesGetTest() throws Exception {
        //void response = client.servicesDirectdataFilesGet(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Direct Data File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesDirectdataFilesNameGetTest() throws Exception {
        //void response = client.servicesDirectdataFilesNameGet(name, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Item Content
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingItemsContentItemGetTest() throws Exception {
        //void response = client.servicesFileStagingItemsContentItemGet(item, authorization, accept, range, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete File or Folder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingItemsItemDeleteTest() throws Exception {
        //void response = client.servicesFileStagingItemsItemDelete(item, recursive, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * List Items at a Path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingItemsItemGetTest() throws Exception {
        //void response = client.servicesFileStagingItemsItemGet(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Folder or File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingItemsItemPutTest() throws Exception {
        //void response = client.servicesFileStagingItemsItemPut(item, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Folder or File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingItemsPostTest() throws Exception {
        //void response = client.servicesFileStagingItemsPost(authorization, accept, contentMD5, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * List Upload Sessions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadGetTest() throws Exception {
        //void response = client.servicesFileStagingUploadGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Resumable Upload Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadPostTest() throws Exception {
        //void response = client.servicesFileStagingUploadPost(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Abort Upload Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadUploadSessionIdDeleteTest() throws Exception {
        //void response = client.servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Get Upload Session Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadUploadSessionIdGetTest() throws Exception {
        //void response = client.servicesFileStagingUploadUploadSessionIdGet(uploadSessionId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * List File Parts Uploaded to Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadUploadSessionIdPartsGetTest() throws Exception {
        //void response = client.servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId, limit, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Commit Upload Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadUploadSessionIdPostTest() throws Exception {
        //void response = client.servicesFileStagingUploadUploadSessionIdPost(uploadSessionId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Upload to a Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadUploadSessionIdPutTest() throws Exception {
        //void response = client.servicesFileStagingUploadUploadSessionIdPut(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Job Histories
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsHistoriesGetTest() throws Exception {
        //void response = client.servicesJobsHistoriesGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Import Bulk Translation File Job Errors
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsJobIdErrorsGetTest() throws Exception {
        //void response = client.servicesJobsJobIdErrorsGet(jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Job Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsJobIdGetTest() throws Exception {
        //void response = client.servicesJobsJobIdGet(jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Import Bulk Translation File Job Summary
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsJobIdSummaryGetTest() throws Exception {
        //void response = client.servicesJobsJobIdSummaryGet(jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve SDK Job Tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsJobIdTasksGetTest() throws Exception {
        //void response = client.servicesJobsJobIdTasksGet(jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Job Monitors
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsMonitorsGetTest() throws Exception {
        //void response = client.servicesJobsMonitorsGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Start Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsStartNowJobIdPostTest() throws Exception {
        //void response = client.servicesJobsStartNowJobIdPost(jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Extract Data Files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderExtractPostTest() throws Exception {
        //void response = client.servicesLoaderExtractPost(authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Load Failure Log Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderJobIdTasksTaskIdFailurelogGetTest() throws Exception {
        //void response = client.servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId, taskId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Loader Extract Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderJobIdTasksTaskIdResultsGetTest() throws Exception {
        //void response = client.servicesLoaderJobIdTasksTaskIdResultsGet(jobId, taskId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Loader Extract Renditions Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderJobIdTasksTaskIdResultsRenditionsGetTest() throws Exception {
        //void response = client.servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId, taskId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Load Success Log Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderJobIdTasksTaskIdSuccesslogGetTest() throws Exception {
        //void response = client.servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId, taskId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Load Data Objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderLoadPostTest() throws Exception {
        //void response = client.servicesLoaderLoadPost(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Validate Package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesPackageActionsValidatePostTest() throws Exception {
        //void response = client.servicesPackageActionsValidatePost(authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Export Package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesPackagePostTest() throws Exception {
        //void response = client.servicesPackagePost(authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Import Package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesPackagePutTest() throws Exception {
        //void response = client.servicesPackagePut(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Queues
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesQueuesGetTest() throws Exception {
        //void response = client.servicesQueuesGet(authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Disable Delivery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesQueuesQueueNameActionsDisableDeliveryPutTest() throws Exception {
        //void response = client.servicesQueuesQueueNameActionsDisableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Enable Delivery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesQueuesQueueNameActionsEnableDeliveryPutTest() throws Exception {
        //void response = client.servicesQueuesQueueNameActionsEnableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Reset Queue
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesQueuesQueueNameActionsResetPutTest() throws Exception {
        //void response = client.servicesQueuesQueueNameActionsResetPut(queueName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Queue Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesQueuesQueueNameGetTest() throws Exception {
        //void response = client.servicesQueuesQueueNameGet(queueName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Validate Imported Package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesVobjectVaultPackageVPackageIdActionsValidatePostTest() throws Exception {
        //void response = client.servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * End Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionDeleteTest() throws Exception {
        //void response = client.sessionDelete(accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Single Client Code Distribution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uicodeDistributionsDistributionNameCodeGetTest() throws Exception {
        //void response = client.uicodeDistributionsDistributionNameCodeGet(distributionName, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Single Client Code Distribution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uicodeDistributionsDistributionNameDeleteTest() throws Exception {
        //void response = client.uicodeDistributionsDistributionNameDelete(distributionName, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Single Client Code Distribution Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uicodeDistributionsDistributionNameGetTest() throws Exception {
        //void response = client.uicodeDistributionsDistributionNameGet(distributionName, accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve All Client Code Distribution Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uicodeDistributionsGetTest() throws Exception {
        //void response = client.uicodeDistributionsGet(accept, authorization, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Add or Replace Single Client Code Distribution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uicodeDistributionsPostTest() throws Exception {
        //void response = client.uicodeDistributionsPost(accept, authorization, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Deploy Package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectVaultPackageVPackageIdActionsDeployPostTest() throws Exception {
        //void response = client.vobjectVaultPackageVPackageIdActionsDeployPost(packageId, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Package Deploy Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectVaultPackageVPackageIdActionsDeployResultsGetTest() throws Exception {
        //void response = client.vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Results of Cascade Delete Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetTest() throws Exception {
        //void response = client.vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Results of Deep Copy Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetTest() throws Exception {
        //void response = client.vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create a Placeholder from an EDL Item
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsEdlItemVActionsCreateplaceholderPostTest() throws Exception {
        //void response = client.vobjectsEdlItemVActionsCreateplaceholderPost(authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Merge Records Job Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsMergesJobIdLogGetTest() throws Exception {
        //void response = client.vobjectsMergesJobIdLogGet(jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Record Merge Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsMergesJobIdResultsGetTest() throws Exception {
        //void response = client.vobjectsMergesJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Record Merge Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsMergesJobIdStatusGetTest() throws Exception {
        //void response = client.vobjectsMergesJobIdStatusGet(jobId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Object Action on Multiple Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsActionNamePostTest() throws Exception {
        //void response = client.vobjectsObjectNameActionsActionNamePost(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Change Object Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsChangetypePostTest() throws Exception {
        //void response = client.vobjectsObjectNameActionsChangetypePost(objectName, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Record Merge
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsMergePostTest() throws Exception {
        //void response = client.vobjectsObjectNameActionsMergePost(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Roll-up Field Recalculation Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsRecalculaterollupsGetTest() throws Exception {
        //void response = client.vobjectsObjectNameActionsRecalculaterollupsGet(objectName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Recalculate Roll-up Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsRecalculaterollupsPostTest() throws Exception {
        //void response = client.vobjectsObjectNameActionsRecalculaterollupsPost(objectName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Corporate Currency Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsUpdatecorporatecurrencyPutTest() throws Exception {
        //void response = client.vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Multiple Object Record Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameAttachmentsBatchDeleteTest() throws Exception {
        //void response = client.vobjectsObjectNameAttachmentsBatchDelete(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Multiple Object Record Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameAttachmentsBatchPostTest() throws Exception {
        //void response = client.vobjectsObjectNameAttachmentsBatchPost(objectName, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Multiple Object Record Attachment Descriptions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameAttachmentsBatchPutTest() throws Exception {
        //void response = client.vobjectsObjectNameAttachmentsBatchPut(objectName, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Object Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameDeleteTest() throws Exception {
        //void response = client.vobjectsObjectNameDelete(objectName, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Object Record Roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameIdRolesRoleNameGetTest() throws Exception {
        //void response = client.vobjectsObjectNameIdRolesRoleNameGet(objectName, id, roleName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Object User Actions Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdActionsActionNameGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Initiate Object Action on a Single Record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdActionsActionNamePostTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Cascade Delete Object Record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdActionsCascadedeletePostTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Deep Copy Object Record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdActionsDeepcopyPostTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Object Record User Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdActionsGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdActionsGet(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Attachment Field File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Attachment Field File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download All Attachment Field Files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Object Record Attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Object Record Attachment Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Object Record Attachment Description
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Delete Object Record Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download Object Record Attachment File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Object Record Attachment Version Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Restore Object Record Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Object Record Attachment Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Download All Object Record Attachment Files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsFileGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Object Record Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create Object Record Attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsPostTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Complete Audit History for a Single Object Record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAudittrailGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdAudittrailGet(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Object Record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdGetTest() throws Exception {
        //void response = client.vobjectsObjectNameObjectRecordIdGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Create &amp; Upsert Object Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNamePostTest() throws Exception {
        //void response = client.vobjectsObjectNamePost(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Update Object Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNamePutTest() throws Exception {
        //void response = client.vobjectsObjectNamePut(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Remove Users &amp; Groups from Roles on Object Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameRolesDeleteTest() throws Exception {
        //void response = client.vobjectsObjectNameRolesDelete(objectName, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Assign Users &amp; Groups to Roles on Object Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameRolesPostTest() throws Exception {
        //void response = client.vobjectsObjectNameRolesPost(objectName, authorization, accept, contentType, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
    /**
     * Retrieve Outbound Package Dependencies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsOutboundPackageVPackageIdDependenciesGetTest() throws Exception {
        //void response = client.vobjectsOutboundPackageVPackageIdDependenciesGet(packageId, authorization, accept, xVaultAPIClientID);
        //assertNotNull(response);
    }
    
}
