/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import VobjectsObjectNameActionsMergePostRequestInner from '../model/VobjectsObjectNameActionsMergePostRequestInner';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi extends ApiClient {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    */
    constructor(baseURL = 'http://}/api/v25.1') {
      super(baseURL);
    }


    /**
     * Retrieve API Versions
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async apiGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['{{vaultDNS}}/api', 'login.veevavault.com/api'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }


      return this.callApi(
        '/api/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Content File
     * @param {String} componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'componentTypeAndRecordName' is set
      if (componentTypeAndRecordName === undefined || componentTypeAndRecordName === null) {
        throw new Error("Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameFilesGet");
      }

      let pathParams = {
        'component_type_and_record_name': componentTypeAndRecordName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/api/mdl/components/{component_type_and_record_name}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Component Record (MDL)
     * @param {String} componentTypeAndRecordName The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'componentTypeAndRecordName' is set
      if (componentTypeAndRecordName === undefined || componentTypeAndRecordName === null) {
        throw new Error("Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameGet");
      }

      let pathParams = {
        'component_type_and_record_name': componentTypeAndRecordName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/api/mdl/components/{component_type_and_record_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Asynchronous MDL Script Results
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async apiMdlExecuteAsyncJobIdResultsGet(jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling apiMdlExecuteAsyncJobIdResultsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/api/mdl/execute_async/{job_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Execute MDL Script Asynchronously
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async apiMdlExecuteAsyncPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/api/mdl/execute_async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Execute MDL Script
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async apiMdlExecutePost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/api/mdl/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Upload Content File
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async apiMdlFilesPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/api/mdl/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Audit Details
     * @param {String} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param {String} opts.endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param {String} opts.allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
     * @param {String} opts.formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
     * @param {String} opts.limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {String} opts.offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
     * @param {String} opts.objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.
     * @param {String} opts.events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async audittrailAuditTrailTypeGet(auditTrailType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'auditTrailType' is set
      if (auditTrailType === undefined || auditTrailType === null) {
        throw new Error("Missing the required parameter 'auditTrailType' when calling audittrailAuditTrailTypeGet");
      }

      let pathParams = {
        'audit_trail_type': auditTrailType
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'all_dates': opts['allDates'],
        'format_result': opts['formatResult'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'objects': opts['objects'],
        'events': opts['events']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/audittrail/{audit_trail_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Authentication Type Discovery
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async authDiscoveryPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/auth/discovery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * OAuth 2.0 / OpenID Connect
     * @param {String} oathOidcProfileId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async authOauthSessionOathOidcProfileIdPost(oathOidcProfileId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'oathOidcProfileId' is set
      if (oathOidcProfileId === undefined || oathOidcProfileId === null) {
        throw new Error("Missing the required parameter 'oathOidcProfileId' when calling authOauthSessionOathOidcProfileIdPost");
      }

      let pathParams = {
        'oath_oidc_profile_id': oathOidcProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/auth/oauth/session/{oath_oidc_profile_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * User Name and Password
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async authPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Single Source Code File
     * @param {String} className The fully qualified class name of your file.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async codeClassNameDelete(className, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling codeClassNameDelete");
      }

      let pathParams = {
        'class_name': className
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/code/{class_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Disable Vault Extension
     * @param {String} className The fully qualified class name of your file.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async codeClassNameDisablePut(className, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling codeClassNameDisablePut");
      }

      let pathParams = {
        'class_name': className
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/code/{class_name}/disable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Enable Vault Extension
     * @param {String} className The fully qualified class name of your file.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async codeClassNameEnablePut(className, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling codeClassNameEnablePut");
      }

      let pathParams = {
        'class_name': className
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/code/{class_name}/enable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Single Source Code File
     * @param {String} className The fully qualified class name of your file.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async codeClassNameGet(className, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling codeClassNameGet");
      }

      let pathParams = {
        'class_name': className
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/code/{class_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Profiling Sessions
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async codeProfilerGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/code/profiler', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Profiling Session
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async codeProfilerPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/code/profiler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * End Profiling Session
     * @param {String} sessionName The name of the session, for example,  baseline__c.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async codeProfilerSessionNameActionsEndPost(sessionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameActionsEndPost");
      }

      let pathParams = {
        'session_name': sessionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/code/profiler/{session_name}/actions/end', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Profiling Session
     * @param {String} sessionName The name of the session, for example,  baseline__c.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async codeProfilerSessionNameDelete(sessionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameDelete");
      }

      let pathParams = {
        'session_name': sessionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/code/profiler/{session_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Profiling Session
     * @param {String} sessionName The name of the session, for example,  baseline__c.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async codeProfilerSessionNameGet(sessionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameGet");
      }

      let pathParams = {
        'session_name': sessionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/code/profiler/{session_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Profiling Session Results
     * @param {String} sessionName The name of the session, for example,  baseline__c.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async codeProfilerSessionNameResultsGet(sessionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameResultsGet");
      }

      let pathParams = {
        'session_name': sessionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/code/profiler/{session_name}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Add or Replace Single Source Code File
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async codePut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/code', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Specific Root Nodes
     * @param {String} edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edlHierarchyOrTemplate' is set
      if (edlHierarchyOrTemplate === undefined || edlHierarchyOrTemplate === null) {
        throw new Error("Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateActionsListnodesPost");
      }

      let pathParams = {
        'edl_hierarchy_or_template': edlHierarchyOrTemplate
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/composites/trees/{edl_hierarchy_or_template}/actions/listnodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Root Nodes
     * @param {String} edlHierarchyOrTemplate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edlHierarchyOrTemplate' is set
      if (edlHierarchyOrTemplate === undefined || edlHierarchyOrTemplate === null) {
        throw new Error("Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateGet");
      }

      let pathParams = {
        'edl_hierarchy_or_template': edlHierarchyOrTemplate
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/composites/trees/{edl_hierarchy_or_template}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve a Node's Children
     * @param {String} parentNodeId The ID of a parent node in the hierarchy.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parentNodeId' is set
      if (parentNodeId === undefined || parentNodeId === null) {
        throw new Error("Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenGet");
      }

      let pathParams = {
        'parent_node_id': parentNodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/composites/trees/edl_hierarchy__v/{parent_node_id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Node Order
     * @param {String} parentNodeId The ID of a parent node in the hierarchy.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parentNodeId' is set
      if (parentNodeId === undefined || parentNodeId === null) {
        throw new Error("Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenPut");
      }

      let pathParams = {
        'parent_node_id': parentNodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/composites/trees/edl_hierarchy__v/{parent_node_id}/children', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Component Record (XML/JSON)
     * @param {String} componentTypeAndRecordName The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} opts.loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'componentTypeAndRecordName' is set
      if (componentTypeAndRecordName === undefined || componentTypeAndRecordName === null) {
        throw new Error("Missing the required parameter 'componentTypeAndRecordName' when calling configurationComponentTypeAndRecordNameGet");
      }

      let pathParams = {
        'component_type_and_record_name': componentTypeAndRecordName
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/configuration/{component_type_and_record_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Component Record Collection
     * @param {String} componentType 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async configurationComponentTypeGet(componentType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'componentType' is set
      if (componentType === undefined || componentType === null) {
        throw new Error("Missing the required parameter 'componentType' when calling configurationComponentTypeGet");
      }

      let pathParams = {
        'component_type': componentType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/configuration/{component_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Details from a Specific Object
     * @param {String} objectNameAndObjectType The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`.
     * @param {Object} opts Optional parameters
     * @param {String} opts.loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async configurationObjectNameAndObjectTypeGet(objectNameAndObjectType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectNameAndObjectType' is set
      if (objectNameAndObjectType === undefined || objectNameAndObjectType === null) {
        throw new Error("Missing the required parameter 'objectNameAndObjectType' when calling configurationObjectNameAndObjectTypeGet");
      }

      let pathParams = {
        'object_name_and_object_type': objectNameAndObjectType
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/configuration/{object_name_and_object_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Details from All Object Types
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async configurationObjecttypeGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/configuration/Objecttype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Lifecycle Role Assignment Override Rules
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async configurationRoleAssignmentRuleDelete(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/configuration/role_assignment_rule', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default & Override)
     * @param {Object} opts Optional parameters
     * @param {String} opts.lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c
     * @param {String} opts.roleV Include the name of the role from which to retrieve information. For example: role__v=editor__c
     * @param {String} opts.productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap
     * @param {String} opts.countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States
     * @param {String} opts.studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study
     * @param {String} opts.studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async configurationRoleAssignmentRuleGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lifecycle__v': opts['lifecycleV'],
        'role__v': opts['roleV'],
        'product__v': opts['productV'],
        'country__v': opts['countryV'],
        'study__v': opts['studyV'],
        'study_country__v': opts['studyCountryV']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/configuration/role_assignment_rule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Lifecycle Role Assignment Override Rules
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async configurationRoleAssignmentRulePost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/configuration/role_assignment_rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Lifecycle Role Assignment Rules (Default & Override)
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async configurationRoleAssignmentRulePut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/configuration/role_assignment_rule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Delegated Session
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async delegationLoginPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/delegation/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Delegations
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async delegationVaultsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/delegation/vaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Session Keep Alive
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async keepAlivePost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/keep-alive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Limits on Objects
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async limitsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/limits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Daily API Usage
     * @param {Object} opts Optional parameters
     * @param {String} opts.date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
     * @param {String} opts.logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async logsApiUsageGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date'],
        'log_format': opts['logFormat']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/logs/api_usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Debug Logs
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
     * @param {Boolean} opts.includeInactive Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async logsCodeDebugGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user_id': opts['userId'],
        'include_inactive': opts['includeInactive']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/logs/code/debug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Debug Log
     * @param {String} id The ID of the debug log to delete.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async logsCodeDebugIdActionsResetDelete(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/logs/code/debug/{id}/actions/reset', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Reset Debug Log
     * @param {String} id The ID of the debug log to delete.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async logsCodeDebugIdActionsResetPost(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/logs/code/debug/{id}/actions/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Debug Log Files
     * @param {String} id The ID of the debug log to download.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async logsCodeDebugIdFilesGet(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logsCodeDebugIdFilesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/logs/code/debug/{id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Single Debug Log
     * @param {String} id The ID of the debug log to retrieve.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async logsCodeDebugIdGet(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logsCodeDebugIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/logs/code/debug/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Debug Log
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async logsCodeDebugPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/logs/code/debug', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download SDK Runtime Log
     * @param {Object} opts Optional parameters
     * @param {String} opts.date 
     * @param {String} opts.logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async logsCodeRuntimeGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date'],
        'log_format': opts['logFormat']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/logs/code/runtime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Import Bulk Translation File
     * @param {String} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async messagesMessageTypeActionsImportPost(messageType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'messageType' is set
      if (messageType === undefined || messageType === null) {
        throw new Error("Missing the required parameter 'messageType' when calling messagesMessageTypeActionsImportPost");
      }

      let pathParams = {
        'message_type': messageType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/messages/{message_type}/actions/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Export Bulk Translation File
     * @param {String} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param {String} lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async messagesMessageTypeLanguageLangActionsExportPost(messageType, lang, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'messageType' is set
      if (messageType === undefined || messageType === null) {
        throw new Error("Missing the required parameter 'messageType' when calling messagesMessageTypeLanguageLangActionsExportPost");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling messagesMessageTypeLanguageLangActionsExportPost");
      }

      let pathParams = {
        'message_type': messageType,
        'lang': lang
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/messages/{message_type}/language/{lang}/actions/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Audit Metadata
     * @param {String} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataAudittrailAuditTrailTypeGet(auditTrailType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'auditTrailType' is set
      if (auditTrailType === undefined || auditTrailType === null) {
        throw new Error("Missing the required parameter 'auditTrailType' when calling metadataAudittrailAuditTrailTypeGet");
      }

      let pathParams = {
        'audit_trail_type': auditTrailType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/audittrail/{audit_trail_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Audit Types
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataAudittrailGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/audittrail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Component Type Metadata
     * @param {String} componentType The component type name (Picklist, Docfield, Doctype, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataComponentsComponentTypeGet(componentType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'componentType' is set
      if (componentType === undefined || componentType === null) {
        throw new Error("Missing the required parameter 'componentType' when calling metadataComponentsComponentTypeGet");
      }

      let pathParams = {
        'component_type': componentType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/components/{component_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Component Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataComponentsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder Template Node Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsBindersTemplatesBindernodesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/binders/templates/bindernodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder Template Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsBindersTemplatesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/binders/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Annotation Placemark Type Metadata
     * @param {String} placemarkType The name of the placemark type. For example, sticky__sys.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'placemarkType' is set
      if (placemarkType === undefined || placemarkType === null) {
        throw new Error("Missing the required parameter 'placemarkType' when calling metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet");
      }

      let pathParams = {
        'placemark_type': placemarkType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/annotations/placemarks/types/{placemark_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Annotation Reference Type Metadata
     * @param {String} referenceType 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'referenceType' is set
      if (referenceType === undefined || referenceType === null) {
        throw new Error("Missing the required parameter 'referenceType' when calling metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet");
      }

      let pathParams = {
        'reference_type': referenceType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/annotations/references/types/{reference_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Annotation Type Metadata
     * @param {String} annotationType The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys`
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'annotationType' is set
      if (annotationType === undefined || annotationType === null) {
        throw new Error("Missing the required parameter 'annotationType' when calling metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet");
      }

      let pathParams = {
        'annotation_type': annotationType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/annotations/types/{annotation_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Event SubType Metadata
     * @param {String} eventType The event type. For example, distribution__v.
     * @param {String} eventSubtype The event subtype. For example, approved_email__v.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType, eventSubtype, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventType' is set
      if (eventType === undefined || eventType === null) {
        throw new Error("Missing the required parameter 'eventType' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet");
      }
      // verify the required parameter 'eventSubtype' is set
      if (eventSubtype === undefined || eventSubtype === null) {
        throw new Error("Missing the required parameter 'eventSubtype' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet");
      }

      let pathParams = {
        'event_type': eventType,
        'event_subtype': eventSubtype
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/events/{event_type}/types/{event_subtype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Event Types and Subtypes
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsEventsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Lock Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsLockGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/lock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Common Document Fields
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsPropertiesFindCommonPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/properties/find_common', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Document Fields
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsPropertiesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Template Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsTemplatesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Document Types
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsTypesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Type
     * @param {String} type The document type. See Retrieve Document Types.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsTypesTypeGet(type, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/types/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Type Relationships
     * @param {String} type The document type. See Retrieve Document Types.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsTypesTypeRelationshipsGet(type, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeRelationshipsGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/types/{type}/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Classification
     * @param {String} type The document type. See Retrieve Document Types.
     * @param {String} subtype The document subtype. See Retrieve Document Types.
     * @param {String} classification The document classification. See Retrieve Document Types.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type, subtype, classification, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet");
      }
      // verify the required parameter 'subtype' is set
      if (subtype === undefined || subtype === null) {
        throw new Error("Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet");
      }
      // verify the required parameter 'classification' is set
      if (classification === undefined || classification === null) {
        throw new Error("Missing the required parameter 'classification' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet");
      }

      let pathParams = {
        'type': type,
        'subtype': subtype,
        'classification': classification
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Subtype
     * @param {String} type The document type. See Retrieve Document Types.
     * @param {String} subtype The document subtype. See Retrieve Document Types.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type, subtype, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet");
      }
      // verify the required parameter 'subtype' is set
      if (subtype === undefined || subtype === null) {
        throw new Error("Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet");
      }

      let pathParams = {
        'type': type,
        'subtype': subtype
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/documents/types/{type}/subtypes/{subtype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Group Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsGroupsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Security Policy Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsSecuritypoliciesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/securitypolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve User Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataObjectsUsersGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/objects/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Archived Document Signature Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/query/archived_documents/relationships/document_signature__sysr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Signature Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/query/documents/relationships/document_signature__sysr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Object Collection
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loc To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataVobjectsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/vobjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Cancel Raw Object Deployment
     * @param {String} objectName 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameActionsCanceldeploymentPost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/vobjects/{object_name}/actions/canceldeployment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Object Field Metadata
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectFieldName The object field name value (id, name__v, external_id__v, etc.).
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loc To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName, objectFieldName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet");
      }
      // verify the required parameter 'objectFieldName' is set
      if (objectFieldName === undefined || objectFieldName === null) {
        throw new Error("Missing the required parameter 'objectFieldName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_field_name': objectFieldName
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/vobjects/{object_name}/fields/{object_field_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Object Metadata
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loc To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataVobjectsObjectNameGet(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameGet");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/vobjects/{object_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Page Layouts
     * @param {String} objectName 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataVobjectsObjectNamePageLayoutsGet(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsGet");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/vobjects/{object_name}/page_layouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Page Layout Metadata
     * @param {String} objectName The name of the object from which to retrieve page layout metadata.
     * @param {String} layoutName The name of the page layout from which to retrieve metadata.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName, layoutName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet");
      }
      // verify the required parameter 'layoutName' is set
      if (layoutName === undefined || layoutName === null) {
        throw new Error("Missing the required parameter 'layoutName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet");
      }

      let pathParams = {
        'object_name': objectName,
        'layout_name': layoutName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/metadata/vobjects/{object_name}/page_layouts/{layout_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Email Notification Histories
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
     * @param {String} opts.endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
     * @param {Boolean} opts.allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
     * @param {String} opts.formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
     * @param {String} opts.limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {String} opts.offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async notificationsHistoriesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'all_dates': opts['allDates'],
        'format_result': opts['formatResult'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/notifications/histories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Bulk Workflow Action Details
     * @param {String} action 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectWorkflowActionsActionGet(action, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling objectWorkflowActionsActionGet");
      }

      let pathParams = {
        'action': action
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/object/workflow/actions/{action}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Workflow Actions on Multiple Workflows
     * @param {String} action 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectWorkflowActionsActionPost(action, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling objectWorkflowActionsActionPost");
      }

      let pathParams = {
        'action': action
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/object/workflow/actions/{action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Cancel Workflow Tasks
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectWorkflowActionsCanceltasksPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/object/workflow/actions/canceltasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Cancel Workflows
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectWorkflowActionsCancelworkflowsPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/object/workflow/actions/cancelworkflows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Bulk Workflow Actions
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectWorkflowActionsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/object/workflow/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Reassign Workflow Tasks
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectWorkflowActionsReassigntasksPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/object/workflow/actions/reassigntasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Replace Workflow Owner
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectWorkflowActionsReplaceworkflowownerPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/object/workflow/actions/replaceworkflowowner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder Export Results
     * @param {String} jobId The id value of the requested export job. This is returned with the export binder requests above.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersActionsExportJobIdResultsGet(jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling objectsBindersActionsExportJobIdResultsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/actions/export/{job_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Export Binder (Latest Version)
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.source to include source content or not
     * @param {String} opts.renditiontype to include viewable renditions
     * @param {String} opts.docversion to include all major versions
     * @param {String} opts.attachments to include all versions of attachments
     * @param {String} opts._export configurable filename metadata
     * @param {Boolean} opts.docfield to exclude document metadata csv
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdActionsExportPost(binderId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsExportPost");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
        'source': opts['source'],
        'renditiontype': opts['renditiontype'],
        'docversion': opts['docversion'],
        'attachments': opts['attachments'],
        'export': opts['_export'],
        'docfield': opts['docfield']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/actions/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Refresh Binder Auto-Filing
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdActionsPost(binderId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsPost");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Binding Rule
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdBindingRulePut(binderId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdBindingRulePut");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/binding_rule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Binder
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdDelete(binderId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDelete");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Binder Document Binding Rule
     * @param {String} binderId The binder id field value.
     * @param {String} nodeId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId, nodeId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut");
      }

      let pathParams = {
        'binder_id': binderId,
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/documents/{node_id}/binding_rule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Add Document to Binder
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdDocumentsPost(binderId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsPost");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Remove Document from Binder
     * @param {String} binderId The binder id field value.
     * @param {String} sectionId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdDocumentsSectionIdDelete(binderId, sectionId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdDelete");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdDelete");
      }

      let pathParams = {
        'binder_id': binderId,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/documents/{section_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Move Document in Binder
     * @param {String} binderId The binder id field value.
     * @param {String} sectionId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdDocumentsSectionIdPut(binderId, sectionId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdPut");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdPut");
      }

      let pathParams = {
        'binder_id': binderId,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/documents/{section_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdGet(binderId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdGet");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
        'depth': opts['depth']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Binder Version
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdPost(binderId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdPost");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Binder
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdPut(binderId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdPut");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Remove Users & Groups from Roles on a Single Binder
     * @param {String} binderId The id value of the binder from which to remove roles.
     * @param {String} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
     * @param {String} id The id value of the user or group to remove from the role.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId, roleNameAndUserOrGroup, id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete");
      }
      // verify the required parameter 'roleNameAndUserOrGroup' is set
      if (roleNameAndUserOrGroup === undefined || roleNameAndUserOrGroup === null) {
        throw new Error("Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete");
      }

      let pathParams = {
        'binder_id': binderId,
        'role_name_and_user_or_group': roleNameAndUserOrGroup,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Binder Section Binding Rule
     * @param {String} binderId The binder id field value.
     * @param {String} nodeId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId, nodeId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut");
      }

      let pathParams = {
        'binder_id': binderId,
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/sections/{node_id}/binding_rule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Binder Section
     * @param {String} binderId The binder id field value.
     * @param {String} nodeId The binder node id of the section.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdSectionsNodeIdPut(binderId, nodeId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdPut");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdPut");
      }

      let pathParams = {
        'binder_id': binderId,
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/sections/{node_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Binder Section
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdSectionsPost(binderId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsPost");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/sections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Binder Section
     * @param {String} binderId The binder id field value.
     * @param {String} sectionId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdSectionsSectionIdDelete(binderId, sectionId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdDelete");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdDelete");
      }

      let pathParams = {
        'binder_id': binderId,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/sections/{section_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder Sections
     * @param {String} binderId The binder id field value.
     * @param {String} sectionId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdSectionsSectionIdGet(binderId, sectionId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdGet");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdGet");
      }

      let pathParams = {
        'binder_id': binderId,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/sections/{section_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Binder Versions
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdVersionsGet(binderId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsGet");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Export Binder (Specific Version)
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.source to include source content or not
     * @param {String} opts.renditiontype to include viewable renditions
     * @param {String} opts.docversion to include all major versions
     * @param {String} opts.attachments to include all versions of attachments
     * @param {String} opts._export configurable filename metadata
     * @param {Boolean} opts.docfield to exclude document metadata csv
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
        'source': opts['source'],
        'renditiontype': opts['renditiontype'],
        'docversion': opts['docversion'],
        'attachments': opts['attachments'],
        'export': opts['_export'],
        'docfield': opts['docfield']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Binder Version
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder Version
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Binder Version
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Binder Relationship
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Binder Relationship
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {String} relationshipId The binder relationship id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId, majorVersion, minorVersion, relationshipId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'relationshipId' is set
      if (relationshipId === undefined || relationshipId === null) {
        throw new Error("Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'relationship_id': relationshipId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder Relationship
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {String} relationshipId The binder relationship id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId, majorVersion, minorVersion, relationshipId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'relationshipId' is set
      if (relationshipId === undefined || relationshipId === null) {
        throw new Error("Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'relationship_id': relationshipId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder Version Section
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {String} sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId, majorVersion, minorVersion, sectionId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Binder Roles
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersIdRolesGet(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdRolesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{id}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Assign Users & Groups to Roles on a Single Binder
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersIdRolesPost(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdRolesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{id}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Role
     * @param {String} id The binder `id`.
     * @param {String} roleName The name of the role to retrieve. For example, `owner__v`.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersIdRolesRoleNameGet(id, roleName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdRolesRoleNameGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling objectsBindersIdRolesRoleNameGet");
      }

      let pathParams = {
        'id': id,
        'role_name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{id}/roles/{role_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder User Actions
     * @param {String} id The binder id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the binder.
     * @param {String} minorVersion The minor version number of the binder.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder Entry Criteria
     * @param {String} id The binder id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the binder.
     * @param {String} minorVersion The minor version number of the binder.
     * @param {String} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'nameV' is set
      if (nameV === undefined || nameV === null) {
        throw new Error("Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'name__v': nameV
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Binder User Action
     * @param {String} id The binder id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the binder.
     * @param {String} minorVersion The minor version number of the binder.
     * @param {String} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'nameV' is set
      if (nameV === undefined || nameV === null) {
        throw new Error("Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'name__v': nameV
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve User Actions on Multiple Binders
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersLifecycleActionsPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/lifecycle_actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Bulk Binder User Actions
     * @param {String} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersLifecycleActionsUserActionNamePut(userActionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userActionName' is set
      if (userActionName === undefined || userActionName === null) {
        throw new Error("Missing the required parameter 'userActionName' when calling objectsBindersLifecycleActionsUserActionNamePut");
      }

      let pathParams = {
        'user_action_name': userActionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/lifecycle_actions/{user_action_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Binder
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. 
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'async': opts['async']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder Template Collection
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersTemplatesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Binder Template
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersTemplatesPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Binder Template
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersTemplatesPut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/templates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder Template Node Attributes
     * @param {String} templateName The binder template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersTemplatesTemplateNameBindernodesGet(templateName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesGet");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/templates/{template_name}/bindernodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Binder Template Node
     * @param {String} templateName The binder template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersTemplatesTemplateNameBindernodesPost(templateName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPost");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/templates/{template_name}/bindernodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Replace Binder Template Nodes
     * @param {String} templateName The binder template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersTemplatesTemplateNameBindernodesPut(templateName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPut");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/templates/{template_name}/bindernodes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Binder Template
     * @param {String} templateName The binder template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersTemplatesTemplateNameDelete(templateName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameDelete");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/templates/{template_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Binder Template Attributes
     * @param {String} templateName The binder template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsBindersTemplatesTemplateNameGet(templateName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameGet");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/binders/templates/{template_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Deleted Document IDs
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
     * @param {String} opts.endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDeletionsDocumentsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/deletions/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Deleted Object Record ID
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDeletionsVobjectsObjectNameGet(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling objectsDeletionsVobjectsObjectNameGet");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/deletions/vobjects/{object_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Document Workflows
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsActionsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Controlled Copy Job Results
     * @param {String} lifecycleAndStateAndAction The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link.
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction, jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lifecycleAndStateAndAction' is set
      if (lifecycleAndStateAndAction === undefined || lifecycleAndStateAndAction === null) {
        throw new Error("Missing the required parameter 'lifecycleAndStateAndAction' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet");
      }

      let pathParams = {
        'lifecycle_and_state_and_action': lifecycleAndStateAndAction,
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Workflow Details
     * @param {String} workflowName The document workflow name value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsActionsWorkflowNameGet(workflowName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNameGet");
      }

      let pathParams = {
        'workflow_name': workflowName
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/actions/{workflow_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Document Workflow
     * @param {String} workflowName The document workflow name value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsActionsWorkflowNamePost(workflowName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNamePost");
      }

      let pathParams = {
        'workflow_name': workflowName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/actions/{workflow_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Annotations
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsAnnotationsBatchDelete(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/annotations/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Multiple Annotations
     * @param {String} authorization 
     * @param {String} contentType 
     * @param {String} accept 
     * @param {String} xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsAnnotationsBatchPost(authorization, contentType, accept, xVaultAPIClientID, requestInit) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling objectsDocumentsAnnotationsBatchPost");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling objectsDocumentsAnnotationsBatchPost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling objectsDocumentsAnnotationsBatchPost");
      }
      // verify the required parameter 'xVaultAPIClientID' is set
      if (xVaultAPIClientID === undefined || xVaultAPIClientID === null) {
        throw new Error("Missing the required parameter 'xVaultAPIClientID' when calling objectsDocumentsAnnotationsBatchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': authorization,
        'Content-Type': contentType,
        'Accept': accept,
        'X-VaultAPI-ClientID': xVaultAPIClientID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/annotations/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Annotations
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsAnnotationsBatchPut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/annotations/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Add Annotation Replies
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsAnnotationsRepliesBatchPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/annotations/replies/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Multiple Document Attachments
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsAttachmentsBatchDelete(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/attachments/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Multiple Document Attachments
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsAttachmentsBatchPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/attachments/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Multiple Document Attachment Descriptions
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsAttachmentsBatchPut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/attachments/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Export Results
     * @param {String} jobId The id value of the requested export job. This is returned with the export document requests.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling objectsDocumentsBatchActionsFileextractJobIdResultsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/batch/actions/fileextract/{job_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Export Documents
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.source Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
     * @param {Boolean} opts.renditions Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
     * @param {Boolean} opts.allversions Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsBatchActionsFileextractPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'source': opts['source'],
        'renditions': opts['renditions'],
        'allversions': opts['allversions']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/batch/actions/fileextract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Reclassify Multiple Documents
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {Boolean} opts.xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsBatchActionsReclassifyPut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/batch/actions/reclassify', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Multiple Document Renditions
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsBatchActionsRerenderPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/batch/actions/rerender', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Multiple Documents
     * @param {Object} opts Optional parameters
     * @param {String} opts.idParam If you’re identifying documents in your input by their external ID
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsBatchDelete(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'idParam': opts['idParam']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Undo Collaborative Authoring Checkout
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsBatchLockDelete(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/batch/lock', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Multiple Documents
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {Boolean} opts.xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsBatchPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Multiple Documents
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {Boolean} opts.xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsBatchPut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Anchor IDs
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAnchorsGet(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnchorsGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/anchors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Export Document Annotations to PDF
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAnnotationsFileGet(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFileGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/annotations/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Import Document Annotations from PDF
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAnnotationsFilePost(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFilePost");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/annotations/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Single Document Attachment
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId, attachmentId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Document Attachment
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId, attachmentId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Attachment Metadata
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId, attachmentId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Document Attachment Description
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId, attachmentId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Single Document Attachment Version
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId, attachmentId, attachmentVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Document Attachment Version
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, attachmentId, attachmentVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Attachment Version Metadata
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, attachmentId, attachmentVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Restore Document Attachment Version
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.restore The parameter restore must be set to true. 
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId, attachmentId, attachmentVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
        'restore': opts['restore']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Attachment Versions
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId, attachmentId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download All Document Attachments
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsFileGet(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsFileGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Attachments
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsGet(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Document Attachment
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAttachmentsPost(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsPost");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Complete Audit History for a Single Document
     * @param {String} docId The document ID for which to retrieve audit history.
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
     * @param {String} opts.endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param {String} opts.formatResult To request a CSV file of your audit history, use csv. 
     * @param {String} opts.limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {String} opts.offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
     * @param {String} opts.events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdAudittrailGet(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAudittrailGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'format_result': opts['formatResult'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'events': opts['events']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/audittrail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Single Document
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdDelete(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdDelete");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Events
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdEventsGet(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdEventsGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Document File
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false.
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdFileGet(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdFileGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
        'lockDocument': opts['lockDocument']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdGet(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Document Lock
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdLockDelete(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockDelete");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/lock', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Lock
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdLockGet(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/lock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Document Lock
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdLockPost(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockPost");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download All Document Version Attachments
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Single Document Version
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdPost(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdPost");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
        'suppressRendition': opts['suppressRendition']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Single Document
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {Boolean} opts.xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdPut(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdPut");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Renditions
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdRenditionsGet(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/renditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Single Document Rendition
     * @param {String} docId The document id field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId, renditionType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/renditions/{rendition_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Document Rendition File
     * @param {String} docId The document id field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdRenditionsRenditionTypeGet(docId, renditionType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet");
      }

      let pathParams = {
        'doc_id': docId,
        'rendition_type': renditionType
      };
      let queryParams = {
        'steadyState': opts['steadyState']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/renditions/{rendition_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Add Single Document Rendition
     * @param {String} docId The document id field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdRenditionsRenditionTypePost(docId, renditionType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePost");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePost");
      }

      let pathParams = {
        'doc_id': docId,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/renditions/{rendition_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Replace Document Rendition
     * @param {String} docId The document id field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdRenditionsRenditionTypePut(docId, renditionType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePut");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePut");
      }

      let pathParams = {
        'doc_id': docId,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/renditions/{rendition_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Remove Users & Groups from Roles on a Single Document
     * @param {String} docId The id value of the document from which to remove roles.
     * @param {String} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
     * @param {String} id The id value of the user or group to remove from the role.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId, roleNameAndUserOrGroup, id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete");
      }
      // verify the required parameter 'roleNameAndUserOrGroup' is set
      if (roleNameAndUserOrGroup === undefined || roleNameAndUserOrGroup === null) {
        throw new Error("Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'role_name_and_user_or_group': roleNameAndUserOrGroup,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Version Attachments
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Versions
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsGet(docId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Read Annotations by ID
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId, majorVersion, minorVersion, annotationId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet");
      }
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'annotation_id': annotationId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Read Replies of Parent Annotation
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId, majorVersion, minorVersion, annotationId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet");
      }
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'annotation_id': annotationId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Export Document Version Annotations to PDF
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Import Document Version Annotations from PDF
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Read Annotations by Document Version and Type
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
     * @param {String} opts.offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.
     * @param {String} opts.annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` 
     * @param {String} opts.paginationId A unique identifier used to load requests with paginated results.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'annotation_types': opts['annotationTypes'],
        'pagination_id': opts['paginationId']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Document Version Attachment Version
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} attachmentId The id field value of the attachment.
     * @param {String} attachmentVersion The version of the attachment.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Version Attachment Versions
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} attachmentId The id of the document attachment to retrieve.
     * @param {String} attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Single Document Version
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Version Notes as CSV
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Document Event
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Video Annotations
     * @param {String} docId The video document id field value.
     * @param {String} majorVersion The video document major_version_number__v field value.
     * @param {String} minorVersion The video document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Document Version File
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Version
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Document Version
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {Boolean} opts.xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Relationships
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Single Document Relationship
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Single Document Relationship
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId, majorVersion, minorVersion, relationshipId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'relationshipId' is set
      if (relationshipId === undefined || relationshipId === null) {
        throw new Error("Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'relationship_id': relationshipId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Relationship
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId, majorVersion, minorVersion, relationshipId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'relationshipId' is set
      if (relationshipId === undefined || relationshipId === null) {
        throw new Error("Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'relationship_id': relationshipId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Version Renditions
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Document Version Rendition
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId, majorVersion, minorVersion, renditionType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Document Version Rendition File
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId, majorVersion, minorVersion, renditionType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Upload Document Version Rendition
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId, majorVersion, minorVersion, renditionType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Replace Document Version Rendition
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId, majorVersion, minorVersion, renditionType, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Document Version Thumbnail File
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Documents
     * @param {Object} opts Optional parameters
     * @param {String} opts.namedFilter Retrieves only documents which you have created.
     * @param {String} opts.scope Searches only within the document content.
     * @param {String} opts.versionscope Retrieves all document versions, rather than only the latest version.
     * @param {String} opts.search Search for documents based on a {keyword} in searchable document fields.
     * @param {String} opts.limit See VQL documentation for more information.
     * @param {String} opts.sort See VQL documentation for more information.
     * @param {String} opts.start See VQL documentation for more information.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'named_filter': opts['namedFilter'],
        'scope': opts['scope'],
        'versionscope': opts['versionscope'],
        'search': opts['search'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'start': opts['start']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Document Roles
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsIdRolesGet(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdRolesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{id}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Assign Users & Groups to Roles on a Single Document
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsIdRolesPost(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdRolesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{id}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Role
     * @param {String} id The document `id`.
     * @param {String} roleName The name of the role to retrieve. For example, `owner__v`.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsIdRolesRoleNameGet(id, roleName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdRolesRoleNameGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling objectsDocumentsIdRolesRoleNameGet");
      }

      let pathParams = {
        'id': id,
        'role_name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{id}/roles/{role_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document User Actions
     * @param {String} id The document id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the document.
     * @param {String} minorVersion The minor version number of the document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Entry Criteria
     * @param {String} id The document id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the document.
     * @param {String} minorVersion The minor version number of the document.
     * @param {String} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'nameV' is set
      if (nameV === undefined || nameV === null) {
        throw new Error("Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'name__v': nameV
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Document User Action
     * @param {String} id The document id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the document.
     * @param {String} minorVersion The minor version number of the document.
     * @param {String} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'nameV' is set
      if (nameV === undefined || nameV === null) {
        throw new Error("Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'name__v': nameV
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve User Actions on Multiple Documents
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsLifecycleActionsPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/lifecycle_actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Bulk Document User Actions
     * @param {String} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsLifecycleActionsUserActionNamePut(userActionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userActionName' is set
      if (userActionName === undefined || userActionName === null) {
        throw new Error("Missing the required parameter 'userActionName' when calling objectsDocumentsLifecycleActionsUserActionNamePut");
      }

      let pathParams = {
        'user_action_name': userActionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/lifecycle_actions/{user_action_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Single Document
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {Boolean} opts.xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Multiple Document Relationships
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsRelationshipsBatchDelete(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/relationships/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Multiple Document Relationships
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsRelationshipsBatchPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/relationships/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Multiple Document Renditions
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsRenditionsBatchDelete(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/renditions/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Add Multiple Document Renditions
     * @param {Object} opts Optional parameters
     * @param {String} opts.idParam If you’re identifying documents in your input by their external ID
     * @param {String} opts.largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {Boolean} opts.xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsRenditionsBatchPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'idParam': opts['idParam'],
        'largeSizeAsset': opts['largeSizeAsset']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/renditions/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Remove Users and Groups from Roles on Multiple Documents & Binders
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsRolesBatchDelete(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/roles/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Assign Users & Groups to Roles on Multiple Documents & Binders
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsRolesBatchPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/roles/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Template Collection
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsTemplatesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Single Document Template
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsTemplatesPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Multiple Document Templates
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsTemplatesPut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/templates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Basic Document Template
     * @param {String} templateName The document template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsTemplatesTemplateNameDelete(templateName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameDelete");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/templates/{template_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Document Template File
     * @param {String} templateName The document template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsTemplatesTemplateNameFileGet(templateName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameFileGet");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/templates/{template_name}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Document Template Attributes
     * @param {String} templateName The document template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsTemplatesTemplateNameGet(templateName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameGet");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/templates/{template_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Single Document Template
     * @param {String} templateName The document template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsTemplatesTemplateNamePut(templateName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNamePut");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/templates/{template_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Document Tokens
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsTokensPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Export Document Versions
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.source Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
     * @param {Boolean} opts.renditions Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsVersionsBatchActionsFileextractPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'source': opts['source'],
        'renditions': opts['renditions']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/versions/batch/actions/fileextract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Multiple Document Versions
     * @param {Object} opts Optional parameters
     * @param {String} opts.idParam If you’re identifying documents in your input by their external ID
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsVersionsBatchDelete(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'idParam': opts['idParam']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/versions/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Multiple Document Versions
     * @param {Object} opts Optional parameters
     * @param {String} opts.idParam If you’re identifying documents in your input by their external ID
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDocumentsVersionsBatchPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'idParam': opts['idParam']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/documents/versions/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Domain Information
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDomainGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include_application': opts['includeApplication']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/domain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Domains
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsDomainsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Add EDL Matched Documents
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsEdlMatchedDocumentsBatchActionsAddPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/edl_matched_documents/batch/actions/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Remove EDL Matched Documents
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsEdlMatchedDocumentsBatchActionsRemovePost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/edl_matched_documents/batch/actions/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Auto Managed Groups
     * @param {Object} opts Optional parameters
     * @param {String} opts.limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
     * @param {String} opts.offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsGroupsAutoGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/groups/auto', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Groups
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsGroupsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includeImplied': opts['includeImplied']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Group
     * @param {String} groupId The group id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsGroupsGroupIdDelete(groupId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdDelete");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/groups/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Group
     * @param {String} groupId The group id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsGroupsGroupIdGet(groupId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdGet");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
        'includeImplied': opts['includeImplied']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/groups/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Group
     * @param {String} groupId The group id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsGroupsGroupIdPut(groupId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdPut");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/groups/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Group 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsGroupsPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Application License Usage
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsLicensesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Multi-Record Workflows
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsActionsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Multi-Record Workflow Details
     * @param {String} workflowName 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsActionsWorkflowNameGet(workflowName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNameGet");
      }

      let pathParams = {
        'workflow_name': workflowName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/actions/{workflow_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Multi-Record Workflow
     * @param {String} workflowName 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsActionsWorkflowNamePost(workflowName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNamePost");
      }

      let pathParams = {
        'workflow_name': workflowName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/actions/{workflow_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Workflows
     * @param {Object} opts Optional parameters
     * @param {String} opts.objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
     * @param {String} opts.recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
     * @param {String} opts.participant To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param {String} opts.statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
     * @param {String} opts.offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
     * @param {String} opts.pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
     * @param {String} opts.loc When localized (translated) strings are available, retrieve them by including ?loc=true. 
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'object__v': opts['objectV'],
        'record_id__v': opts['recordIdV'],
        'participant': opts['participant'],
        'status__v': opts['statusV'],
        'offset': opts['offset'],
        'page_size': opts['pageSize'],
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Workflow Tasks
     * @param {Object} opts Optional parameters
     * @param {String} opts.objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
     * @param {String} opts.recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
     * @param {String} opts.assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param {String} opts.statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. 
     * @param {String} opts.offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
     * @param {String} opts.pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
     * @param {String} opts.loc When localized (translated) strings are available, retrieve them by including ?loc=true. 
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'object__v': opts['objectV'],
        'record_id__v': opts['recordIdV'],
        'assignee__v': opts['assigneeV'],
        'status__v': opts['statusV'],
        'offset': opts['offset'],
        'page_size': opts['pageSize'],
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Accept Single Record Workflow Task
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsAcceptPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Cancel Workflow Task
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCancelPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Complete Single Record Workflow Task
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCompletePost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Workflow Task Actions
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsGet(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsGet");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Accept Multi-item Workflow Task
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Complete Multi-item Workflow Task
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Manage Multi-Item Workflow Content
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Reassign Multi-item Workflow Task
     * @param {String} taskId The id of the task to reassign.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Reassign Single Record Workflow Task
     * @param {String} taskId The id of the task to reassign.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsReassignPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/reassign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Workflow Task Action Details
     * @param {String} taskId The task id field value.
     * @param {String} taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
     * @param {Object} opts Optional parameters
     * @param {String} opts.loc When localized (translated) strings are available, retrieve them by including loc=true. 
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId, taskAction, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet");
      }
      // verify the required parameter 'taskAction' is set
      if (taskAction === undefined || taskAction === null) {
        throw new Error("Missing the required parameter 'taskAction' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet");
      }

      let pathParams = {
        'task_id': taskId,
        'task_action': taskAction
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/{task_action}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Undo Workflow Task Acceptance
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/undoaccept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Workflow Task Due Date
     * @param {String} taskId The id of the task.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/updateduedate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Workflow Task Details
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loc When localized (translated) strings are available, retrieve them by including loc=true.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsTasksTaskIdGet(taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdGet");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/tasks/{task_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Workflow Actions
     * @param {String} workflowId The workflow id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.loc When localized (translated) strings are available, retrieve them by including loc=true. 
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsWorkflowIdActionsGet(workflowId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsGet");
      }

      let pathParams = {
        'workflow_id': workflowId
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/{workflow_id}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Workflow Action Details
     * @param {String} workflowId The workflow id field value.
     * @param {String} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId, workflowAction, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet");
      }
      // verify the required parameter 'workflowAction' is set
      if (workflowAction === undefined || workflowAction === null) {
        throw new Error("Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet");
      }

      let pathParams = {
        'workflow_id': workflowId,
        'workflow_action': workflowAction
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Workflow Action
     * @param {String} workflowId The workflow id field value.
     * @param {String} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param {Object} opts Optional parameters
     * @param {String} opts.documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId, workflowAction, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost");
      }
      // verify the required parameter 'workflowAction' is set
      if (workflowAction === undefined || workflowAction === null) {
        throw new Error("Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost");
      }

      let pathParams = {
        'workflow_id': workflowId,
        'workflow_action': workflowAction
      };
      let queryParams = {
        'documents__sys': opts['documentsSys']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Workflow Details
     * @param {String} workflowId The workflow id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loc When localized (translated) strings are available, retrieve them by including loc=true.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsObjectworkflowsWorkflowIdGet(workflowId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdGet");
      }

      let pathParams = {
        'workflow_id': workflowId
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/objectworkflows/{workflow_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Picklists
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsPicklistsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/picklists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Picklist Values
     * @param {String} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsPicklistsPicklistNameGet(picklistName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'picklistName' is set
      if (picklistName === undefined || picklistName === null) {
        throw new Error("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNameGet");
      }

      let pathParams = {
        'picklist_name': picklistName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/picklists/{picklist_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Inactivate Picklist Value
     * @param {String} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {String} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName, picklistValueName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'picklistName' is set
      if (picklistName === undefined || picklistName === null) {
        throw new Error("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete");
      }
      // verify the required parameter 'picklistValueName' is set
      if (picklistValueName === undefined || picklistValueName === null) {
        throw new Error("Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete");
      }

      let pathParams = {
        'picklist_name': picklistName,
        'picklist_value_name': picklistValueName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/picklists/{picklist_name}/{picklist_value_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Picklist Value
     * @param {String} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {String} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsPicklistsPicklistNamePicklistValueNamePut(picklistName, picklistValueName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'picklistName' is set
      if (picklistName === undefined || picklistName === null) {
        throw new Error("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNamePut");
      }
      // verify the required parameter 'picklistValueName' is set
      if (picklistValueName === undefined || picklistValueName === null) {
        throw new Error("Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNamePut");
      }

      let pathParams = {
        'picklist_name': picklistName,
        'picklist_value_name': picklistValueName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/picklists/{picklist_name}/{picklist_value_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Picklist Values
     * @param {String} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsPicklistsPicklistNamePost(picklistName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'picklistName' is set
      if (picklistName === undefined || picklistName === null) {
        throw new Error("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePost");
      }

      let pathParams = {
        'picklist_name': picklistName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/picklists/{picklist_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Picklist Value Label
     * @param {String} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsPicklistsPicklistNamePut(picklistName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'picklistName' is set
      if (picklistName === undefined || picklistName === null) {
        throw new Error("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePut");
      }

      let pathParams = {
        'picklist_name': picklistName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/picklists/{picklist_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Build Production Vault
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxActionsBuildproductionPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/actions/buildproduction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Promote to Production
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxActionsPromoteproductionPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/actions/promoteproduction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Recheck Sandbox Usage Limit
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxActionsRecheckusagePost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/actions/recheckusage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Change Sandbox Size
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxBatchChangesizePost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/batch/changesize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Set Sandbox Entitlements
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxEntitlementsSetPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/entitlements/set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Sandboxes
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Sandbox
     * @param {String} name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxNameDelete(name, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling objectsSandboxNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create or Refresh Sandbox
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Sandbox Snapshot
     * @param {String} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxSnapshotApiNameActionsUpdatePost(apiName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiName' is set
      if (apiName === undefined || apiName === null) {
        throw new Error("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpdatePost");
      }

      let pathParams = {
        'api_name': apiName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/snapshot/{api_name}/actions/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Upgrade Sandbox Snapshot
     * @param {String} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxSnapshotApiNameActionsUpgradePost(apiName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiName' is set
      if (apiName === undefined || apiName === null) {
        throw new Error("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpgradePost");
      }

      let pathParams = {
        'api_name': apiName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/snapshot/{api_name}/actions/upgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Sandbox Snapshot
     * @param {String} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxSnapshotApiNameDelete(apiName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiName' is set
      if (apiName === undefined || apiName === null) {
        throw new Error("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameDelete");
      }

      let pathParams = {
        'api_name': apiName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/snapshot/{api_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Sandbox Snapshots
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxSnapshotGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/snapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Sandbox Snapshot
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxSnapshotPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/snapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Refresh Sandbox from Snapshot
     * @param {String} vaultId The Vault ID of the sandbox to be refreshed.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxVaultIdActionsRefreshPost(vaultId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdActionsRefreshPost");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/{vault_id}/actions/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Sandbox Details by ID
     * @param {String} vaultId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSandboxVaultIdGet(vaultId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdGet");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/sandbox/{vault_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Security Policies
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSecuritypoliciesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/securitypolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Security Policy
     * @param {String} securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'securityPolicyName' is set
      if (securityPolicyName === undefined || securityPolicyName === null) {
        throw new Error("Missing the required parameter 'securityPolicyName' when calling objectsSecuritypoliciesSecurityPolicyNameGet");
      }

      let pathParams = {
        'security_policy_name': securityPolicyName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/securitypolicies/{security_policy_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Users
     * @param {Object} opts Optional parameters
     * @param {String} opts.vaults Retrieve all users assigned to all Vaults in your domain.
     * @param {String} opts.excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
     * @param {String} opts.excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'vaults': opts['vaults'],
        'exclude_vault_membership': opts['excludeVaultMembership'],
        'exclude_app_licensing': opts['excludeAppLicensing']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve User
     * @param {String} id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param {String} opts.excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersIdGet(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsUsersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'exclude_vault_membership': opts['excludeVaultMembership'],
        'exclude_app_licensing': opts['excludeAppLicensing']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve User Permissions
     * @param {String} id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersIdPermissionsGet(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsUsersIdPermissionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users/{id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Single User
     * @param {String} id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersIdPut(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsUsersIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Validate Session User
     * @param {Object} opts Optional parameters
     * @param {String} opts.excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param {String} opts.excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersMeGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'exclude_vault_membership': opts['excludeVaultMembership'],
        'exclude_app_licensing': opts['excludeAppLicensing']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Change My Password
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersMePasswordPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users/me/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve My User Permissions
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersMePermissionsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users/me/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update My User
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersMePut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users/me', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Single User
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Multiple Users
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersPut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Disable User
     * @param {String} userId The user id field value. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.domain When true, this disables the user account in all vaults in the domain.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersUserIdDelete(userId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling objectsUsersUserIdDelete");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'domain': opts['domain']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Vault Membership
     * @param {String} userId The user id field value.
     * @param {String} vaultId The system-managed id field value assigned to each vault in the domain.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsUsersUserIdVaultMembershipVaultIdPut(userId, vaultId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling objectsUsersUserIdVaultMembershipVaultIdPut");
      }
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling objectsUsersUserIdVaultMembershipVaultIdPut");
      }

      let pathParams = {
        'user_id': userId,
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/users/{user_id}/vault_membership/{vault_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Vault Compare
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsVaultActionsComparePost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/vault/actions/compare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Vault Configuration Report
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async objectsVaultActionsConfigreportPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/objects/vault/actions/configreport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Component Definition Query
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async queryComponentsPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/query/components', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Next Page URL
     * @param {String} nextPage 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {Boolean} opts.xVaultAPIDescribeQuery 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async queryNextPagePost(nextPage, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nextPage' is set
      if (nextPage === undefined || nextPage === null) {
        throw new Error("Missing the required parameter 'nextPage' when calling queryNextPagePost");
      }

      let pathParams = {
        'next_page': nextPage
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-DescribeQuery': opts['xVaultAPIDescribeQuery'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/query/{next_page}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Submitting a Query
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {Boolean} opts.xVaultAPIDescribeQuery 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async queryPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-DescribeQuery': opts['xVaultAPIDescribeQuery'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Previous Page URL
     * @param {String} previousPage 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {Boolean} opts.xVaultAPIDescribeQuery 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async queryPreviousPagePost(previousPage, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'previousPage' is set
      if (previousPage === undefined || previousPage === null) {
        throw new Error("Missing the required parameter 'previousPage' when calling queryPreviousPagePost");
      }

      let pathParams = {
        'previous_page': previousPage
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-DescribeQuery': opts['xVaultAPIDescribeQuery'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/query/{previous_page}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Current User with SCIM
     * @param {Object} opts Optional parameters
     * @param {String} opts.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} opts.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2MeGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/Me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Current User with SCIM
     * @param {Object} opts Optional parameters
     * @param {String} opts.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} opts.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2MePut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/Me', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All SCIM Resource Types
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2ResourceTypesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/ResourceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Single SCIM Resource Type
     * @param {String} type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2ResourceTypesTypeGet(type, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling scimV2ResourceTypesTypeGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/ResourceTypes/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All SCIM Schema Information
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2SchemasGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/Schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Single SCIM Schema Information
     * @param {String} id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2SchemasIdGet(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scimV2SchemasIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/Schemas/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve SCIM Provider
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2ServiceProviderConfigGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/ServiceProviderConfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve SCIM Resources
     * @param {String} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
     * @param {String} opts.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} opts.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} opts.sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param {String} opts.sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param {String} opts.startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2TypeGet(type, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling scimV2TypeGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'filter': opts['filter'],
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Single SCIM Resource
     * @param {String} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param {String} id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
     * @param {Object} opts Optional parameters
     * @param {String} opts.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} opts.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2TypeIdGet(type, id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling scimV2TypeIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scimV2TypeIdGet");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/{type}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Users with SCIM
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
     * @param {String} opts.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} opts.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} opts.sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param {String} opts.sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
     * @param {String} opts.count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param {String} opts.startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2UsersGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'count': opts['count'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Single User with SCIM
     * @param {String} id The id of the user you wish to update.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
     * @param {String} opts.attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} opts.excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2UsersIdGet(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scimV2UsersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/Users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update User with SCIM
     * @param {String} id The id of the user you wish to update.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2UsersIdPut(id, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scimV2UsersIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/Users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create User with SCIM
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async scimV2UsersPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/scim/v2/Users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Signing Certificate
     * @param {String} certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesCertificateCertIdGet(certId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'certId' is set
      if (certId === undefined || certId === null) {
        throw new Error("Missing the required parameter 'certId' when calling servicesCertificateCertIdGet");
      }

      let pathParams = {
        'cert_id': certId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/certificate/{cert_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Disable Configuration Mode
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesConfigurationModeActionsDisablePost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/configuration_mode/actions/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Enable Configuration Mode
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesConfigurationModeActionsEnablePost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/configuration_mode/actions/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Available Direct Data Files
     * @param {Object} opts Optional parameters
     * @param {String} opts.extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
     * @param {Number} opts.startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
     * @param {Number} opts.stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesDirectdataFilesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'extract_type': opts['extractType'],
        'start_time': opts['startTime'],
        'stop_time': opts['stopTime']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/directdata/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Direct Data File
     * @param {String} name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesDirectdataFilesNameGet(name, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling servicesDirectdataFilesNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/directdata/files/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Item Content
     * @param {String} item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingItemsContentItemGet(item, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling servicesFileStagingItemsContentItemGet");
      }

      let pathParams = {
        'item': item
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Range': opts['range'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/items/content/{item}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete File or Folder
     * @param {String} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {Object} opts Optional parameters
     * @param {String} opts.recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingItemsItemDelete(item, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling servicesFileStagingItemsItemDelete");
      }

      let pathParams = {
        'item': item
      };
      let queryParams = {
        'recursive': opts['recursive']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/items/{item}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * List Items at a Path
     * @param {String} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {Object} opts Optional parameters
     * @param {String} opts.recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
     * @param {String} opts.limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param {String} opts.formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingItemsItemGet(item, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling servicesFileStagingItemsItemGet");
      }

      let pathParams = {
        'item': item
      };
      let queryParams = {
        'recursive': opts['recursive'],
        'limit': opts['limit'],
        'format_result': opts['formatResult']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/items/{item}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Folder or File
     * @param {String} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingItemsItemPut(item, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling servicesFileStagingItemsItemPut");
      }

      let pathParams = {
        'item': item
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/items/{item}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Folder or File
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentMD5 Optional: The MD5 checksum of the file being uploaded.
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingItemsPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-MD5': opts['contentMD5'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * List Upload Sessions
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingUploadGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/upload/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Resumable Upload Session
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingUploadPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Abort Upload Session
     * @param {String} uploadSessionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadSessionId' is set
      if (uploadSessionId === undefined || uploadSessionId === null) {
        throw new Error("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdDelete");
      }

      let pathParams = {
        'upload_session_id': uploadSessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/upload/{upload_session_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Get Upload Session Details
     * @param {String} uploadSessionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingUploadUploadSessionIdGet(uploadSessionId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadSessionId' is set
      if (uploadSessionId === undefined || uploadSessionId === null) {
        throw new Error("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdGet");
      }

      let pathParams = {
        'upload_session_id': uploadSessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/upload/{upload_session_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * List File Parts Uploaded to Session
     * @param {String} uploadSessionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadSessionId' is set
      if (uploadSessionId === undefined || uploadSessionId === null) {
        throw new Error("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPartsGet");
      }

      let pathParams = {
        'upload_session_id': uploadSessionId
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/upload/{upload_session_id}/parts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Commit Upload Session
     * @param {String} uploadSessionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingUploadUploadSessionIdPost(uploadSessionId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadSessionId' is set
      if (uploadSessionId === undefined || uploadSessionId === null) {
        throw new Error("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPost");
      }

      let pathParams = {
        'upload_session_id': uploadSessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/upload/{upload_session_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Upload to a Session
     * @param {String} uploadSessionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
     * @param {String} opts.contentMD5 Optional: The MD5 checksum of the file part being uploaded.
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesFileStagingUploadUploadSessionIdPut(uploadSessionId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadSessionId' is set
      if (uploadSessionId === undefined || uploadSessionId === null) {
        throw new Error("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPut");
      }

      let pathParams = {
        'upload_session_id': uploadSessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-FilePartNumber': opts['xVaultAPIFilePartNumber'],
        'Content-MD5': opts['contentMD5'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/file_staging/upload/{upload_session_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Job Histories
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param {String} opts.endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param {String} opts.status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
     * @param {String} opts.limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param {String} opts.offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesJobsHistoriesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'status': opts['status'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/jobs/histories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Import Bulk Translation File Job Errors
     * @param {String} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesJobsJobIdErrorsGet(jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesJobsJobIdErrorsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/jobs/{job_id}/errors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Job Status
     * @param {String} jobId The ID of the job, returned from the original job request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesJobsJobIdGet(jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesJobsJobIdGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/jobs/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Import Bulk Translation File Job Summary
     * @param {String} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesJobsJobIdSummaryGet(jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesJobsJobIdSummaryGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/jobs/{job_id}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve SDK Job Tasks
     * @param {String} jobId The ID of the SDK job, returned from the original job request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesJobsJobIdTasksGet(jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesJobsJobIdTasksGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/jobs/{job_id}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Job Monitors
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param {String} opts.endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param {String} opts.status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
     * @param {String} opts.limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param {String} opts.offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesJobsMonitorsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'status': opts['status'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/jobs/monitors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Start Job
     * @param {String} jobId The ID of the scheduled job instance to start.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesJobsStartNowJobIdPost(jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesJobsStartNowJobIdPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/jobs/start_now/{job_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Extract Data Files
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesLoaderExtractPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/loader/extract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Load Failure Log Results
     * @param {String} jobId The id value of the requested extract job.
     * @param {String} taskId The id value of the requested extract task.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId, taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet");
      }

      let pathParams = {
        'job_id': jobId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/loader/{job_id}/tasks/{task_id}/failurelog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Loader Extract Results
     * @param {String} jobId The id value of the requested extract job.
     * @param {String} taskId The id value of the requested extract task.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesLoaderJobIdTasksTaskIdResultsGet(jobId, taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsGet");
      }

      let pathParams = {
        'job_id': jobId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/loader/{job_id}/tasks/{task_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Loader Extract Renditions Results
     * @param {String} jobId The id value of the requested extract job.
     * @param {String} taskId The id value of the requested extract task.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId, taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet");
      }

      let pathParams = {
        'job_id': jobId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/loader/{job_id}/tasks/{task_id}/results/renditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Load Success Log Results
     * @param {String} jobId The id value of the requested extract job.
     * @param {String} taskId The id value of the requested extract task.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId, taskId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet");
      }

      let pathParams = {
        'job_id': jobId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/loader/{job_id}/tasks/{task_id}/successlog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Load Data Objects
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesLoaderLoadPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/loader/load', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Validate Package
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesPackageActionsValidatePost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/package/actions/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Export Package
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesPackagePost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/package', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Import Package
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesPackagePut(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/package', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Queues
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesQueuesGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/queues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Disable Delivery
     * @param {String} queueName The name of a specific Queue.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesQueuesQueueNameActionsDisableDeliveryPut(queueName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsDisableDeliveryPut");
      }

      let pathParams = {
        'queue_name': queueName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/queues/{queue_name}/actions/disable_delivery', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Enable Delivery
     * @param {String} queueName The name of a specific Queue.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesQueuesQueueNameActionsEnableDeliveryPut(queueName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsEnableDeliveryPut");
      }

      let pathParams = {
        'queue_name': queueName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/queues/{queue_name}/actions/enable_delivery', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Reset Queue
     * @param {String} queueName The name of a specific Queue.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesQueuesQueueNameActionsResetPut(queueName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsResetPut");
      }

      let pathParams = {
        'queue_name': queueName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/queues/{queue_name}/actions/reset', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Queue Status
     * @param {String} queueName The name of a specific queue. For example, queue__c.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesQueuesQueueNameGet(queueName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameGet");
      }

      let pathParams = {
        'queue_name': queueName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/queues/{queue_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Validate Imported Package
     * @param {String} packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling servicesVobjectVaultPackageVPackageIdActionsValidatePost");
      }

      let pathParams = {
        'package_id': packageId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/services/vobject/vault_package__v/{package_id}/actions/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * End Session
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization The Vault sessionId to end.
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async sessionDelete(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/session', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Single Client Code Distribution
     * @param {String} distributionName The name attribute of the client code distribution to download.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async uicodeDistributionsDistributionNameCodeGet(distributionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionName' is set
      if (distributionName === undefined || distributionName === null) {
        throw new Error("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameCodeGet");
      }

      let pathParams = {
        'distribution_name': distributionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/uicode/distributions/{distribution_name}/code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Single Client Code Distribution
     * @param {String} distributionName The name attribute of the client code distribution to delete.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async uicodeDistributionsDistributionNameDelete(distributionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionName' is set
      if (distributionName === undefined || distributionName === null) {
        throw new Error("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameDelete");
      }

      let pathParams = {
        'distribution_name': distributionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/uicode/distributions/{distribution_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Single Client Code Distribution Metadata
     * @param {String} distributionName The name attribute of the client code distribution to delete.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async uicodeDistributionsDistributionNameGet(distributionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionName' is set
      if (distributionName === undefined || distributionName === null) {
        throw new Error("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameGet");
      }

      let pathParams = {
        'distribution_name': distributionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/uicode/distributions/{distribution_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve All Client Code Distribution Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async uicodeDistributionsGet(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/uicode/distributions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Add or Replace Single Client Code Distribution
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async uicodeDistributionsPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/uicode/distributions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Deploy Package
     * @param {String} packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectVaultPackageVPackageIdActionsDeployPost(packageId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployPost");
      }

      let pathParams = {
        'package_id': packageId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobject/vault_package__v/{package_id}/actions/deploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Package Deploy Results
     * @param {String} packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployResultsGet");
      }

      let pathParams = {
        'package_id': packageId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobject/vault_package__v/{package_id}/actions/deploy/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Results of Cascade Delete Job
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} jobStatus 
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet");
      }
      // verify the required parameter 'jobStatus' is set
      if (jobStatus === undefined || jobStatus === null) {
        throw new Error("Missing the required parameter 'jobStatus' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet");
      }

      let pathParams = {
        'object_name': objectName,
        'job_status': jobStatus,
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Results of Deep Copy Job
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} jobStatus The ID of the job, retrieved from the response of the job request.
     * @param {String} jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet");
      }
      // verify the required parameter 'jobStatus' is set
      if (jobStatus === undefined || jobStatus === null) {
        throw new Error("Missing the required parameter 'jobStatus' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet");
      }

      let pathParams = {
        'object_name': objectName,
        'job_status': jobStatus,
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create a Placeholder from an EDL Item
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsEdlItemVActionsCreateplaceholderPost(opts, requestInit) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/edl_item__v/actions/createplaceholder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Merge Records Job Log
     * @param {String} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsMergesJobIdLogGet(jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdLogGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/merges/{job_id}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Record Merge Results
     * @param {String} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsMergesJobIdResultsGet(jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdResultsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/merges/{job_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Record Merge Status
     * @param {String} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsMergesJobIdStatusGet(jobId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdStatusGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/merges/{job_id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Object Action on Multiple Records
     * @param {String} objectName The object name__v field value.
     * @param {String} actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameActionsActionNamePost(objectName, actionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsActionNamePost");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling vobjectsObjectNameActionsActionNamePost");
      }

      let pathParams = {
        'object_name': objectName,
        'action_name': actionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/actions/{action_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Change Object Type
     * @param {String} objectName The name of the object.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameActionsChangetypePost(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsChangetypePost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/actions/changetype', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Record Merge
     * @param {String} objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {Array.<module:model/VobjectsObjectNameActionsMergePostRequestInner>} opts.vobjectsObjectNameActionsMergePostRequestInner 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameActionsMergePost(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = opts['vobjectsObjectNameActionsMergePostRequestInner'];
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsMergePost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/actions/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Roll-up Field Recalculation Status
     * @param {String} objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameActionsRecalculaterollupsGet(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsGet");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/actions/recalculaterollups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Recalculate Roll-up Fields
     * @param {String} objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameActionsRecalculaterollupsPost(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsPost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/actions/recalculaterollups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Corporate Currency Fields
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsUpdatecorporatecurrencyPut");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/actions/updatecorporatecurrency', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Multiple Object Record Attachments
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} opts.idParam 
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameAttachmentsBatchDelete(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchDelete");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
        'idParam': opts['idParam']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/attachments/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Multiple Object Record Attachments
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameAttachmentsBatchPost(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/attachments/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Multiple Object Record Attachment Descriptions
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameAttachmentsBatchPut(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPut");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/attachments/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Object Records
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType Can be text/csv or application/json
     * @param {String} opts.accept Can be text/csv or application/json
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameDelete(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameDelete");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Object Record Roles
     * @param {String} objectName The object name.
     * @param {String} id The id of the document, binder, or object record.
     * @param {String} roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameIdRolesRoleNameGet(objectName, id, roleName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameIdRolesRoleNameGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vobjectsObjectNameIdRolesRoleNameGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling vobjectsObjectNameIdRolesRoleNameGet");
      }

      let pathParams = {
        'object_name': objectName,
        'id': id,
        'role_name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{id}/roles/{role_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Object User Actions Details
     * @param {String} objectName The object name__v field value.
     * @param {String} objectRecordId The object record id field value from which to retrieve user actions.
     * @param {String} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName, objectRecordId, actionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'action_name': actionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/actions/{action_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Initiate Object Action on a Single Record
     * @param {String} objectName The object name__v field value.
     * @param {String} objectRecordId The object record id field value from which to retrieve user actions.
     * @param {String} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName, objectRecordId, actionName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'action_name': actionName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/actions/{action_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Cascade Delete Object Record
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName, objectRecordId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/actions/cascadedelete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Deep Copy Object Record
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName, objectRecordId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/actions/deepcopy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Object Record User Actions
     * @param {String} objectName The object name__v field value.
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loc Optional: When true, retrieves localized (translated) strings for the label. 
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdActionsGet(objectName, objectRecordId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Attachment Field File
     * @param {String} objectName The object name__v field value. For example, product__v.
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentFieldName The name of the Attachment field to update.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName, objectRecordId, attachmentFieldName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet");
      }
      // verify the required parameter 'attachmentFieldName' is set
      if (attachmentFieldName === undefined || attachmentFieldName === null) {
        throw new Error("Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_field_name': attachmentFieldName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Attachment Field File
     * @param {String} objectName The object name__v field value. For example, product__v.
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentFieldName The name of the Attachment field to update.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName, objectRecordId, attachmentFieldName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost");
      }
      // verify the required parameter 'attachmentFieldName' is set
      if (attachmentFieldName === undefined || attachmentFieldName === null) {
        throw new Error("Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_field_name': attachmentFieldName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download All Attachment Field Files
     * @param {String} objectName The object name__v field value. For example, product__v.
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName, objectRecordId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachment_fields/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Object Record Attachment
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName, objectRecordId, attachmentId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Object Record Attachment Metadata
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName, objectRecordId, attachmentId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Object Record Attachment Description
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName, objectRecordId, attachmentId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Delete Object Record Attachment Version
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName, objectRecordId, attachmentId, attachmentVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download Object Record Attachment File
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName, objectRecordId, attachmentId, attachmentVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Object Record Attachment Version Metadata
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName, objectRecordId, attachmentId, attachmentVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Restore Object Record Attachment Version
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.restore 
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName, objectRecordId, attachmentId, attachmentVersion, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
        'restore': opts['restore']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Object Record Attachment Versions
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName, objectRecordId, attachmentId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Download All Object Record Attachment Files
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName, objectRecordId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Object Record Attachments
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName, objectRecordId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create Object Record Attachment
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName, objectRecordId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Complete Audit History for a Single Object Record
     * @param {String} objectName The object name__v field value.
     * @param {String} objectRecordId The object record id field value from which to retrieve user actions.
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
     * @param {String} opts.endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param {String} opts.formatResult To request a CSV file of your audit history, use csv. 
     * @param {String} opts.limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {String} opts.offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
     * @param {String} opts.events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdAudittrailGet(objectName, objectRecordId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAudittrailGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAudittrailGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'format_result': opts['formatResult'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'events': opts['events']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}/audittrail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Object Record
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameObjectRecordIdGet(objectName, objectRecordId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/{object_record_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Create & Upsert Object Records
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} opts.idParam To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.
     * @param {String} opts.authorization 
     * @param {String} opts.contentType Can be text/csv or application/json
     * @param {String} opts.accept Can be text/csv or application/json
     * @param {Boolean} opts.xVaultAPIMigrationMode If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param {Boolean} opts.xVaultAPINoTriggers If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNamePost(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNamePost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
        'idParam': opts['idParam']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-NoTriggers': opts['xVaultAPINoTriggers'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Update Object Records
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType Can be text/csv or application/json
     * @param {String} opts.accept Can be text/csv or application/json
     * @param {Boolean} opts.xVaultAPIMigrationMode If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param {Boolean} opts.xVaultAPINoTriggers If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNamePut(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNamePut");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-NoTriggers': opts['xVaultAPINoTriggers'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Remove Users & Groups from Roles on Object Records
     * @param {String} objectName The name of the object where you want to remove roles.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameRolesDelete(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesDelete");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/roles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Assign Users & Groups to Roles on Object Records
     * @param {String} objectName The name of the object where you want to remove roles.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsObjectNameRolesPost(objectName, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesPost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/{object_name}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Retrieve Outbound Package Dependencies
     * @param {String} packageId The ID of the outbound_package__v record from which to retrieve dependencies.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.accept 
     * @param {String} opts.xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise}
     */
    async vobjectsOutboundPackageVPackageIdDependenciesGet(packageId, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling vobjectsOutboundPackageVPackageIdDependenciesGet");
      }

      let pathParams = {
        'package_id': packageId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.0.0/Javascript',
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/vobjects/outbound_package__v/{package_id}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }


}
