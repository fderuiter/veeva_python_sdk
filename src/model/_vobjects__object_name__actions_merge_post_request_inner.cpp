/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/_vobjects__object_name__actions_merge_post_request_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

_vobjects__object_name__actions_merge_post_request_inner::_vobjects__object_name__actions_merge_post_request_inner()
{
    m_Duplicate_record_id = utility::conversions::to_string_t("");
    m_Duplicate_record_idIsSet = false;
    m_Main_record_id = utility::conversions::to_string_t("");
    m_Main_record_idIsSet = false;
}

_vobjects__object_name__actions_merge_post_request_inner::~_vobjects__object_name__actions_merge_post_request_inner()
{
}

void _vobjects__object_name__actions_merge_post_request_inner::validate()
{
    // TODO: implement validation
}

web::json::value _vobjects__object_name__actions_merge_post_request_inner::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Duplicate_record_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("duplicate_record_id"))] = ModelBase::toJson(m_Duplicate_record_id);
    }
    if(m_Main_record_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("main_record_id"))] = ModelBase::toJson(m_Main_record_id);
    }

    return val;
}

bool _vobjects__object_name__actions_merge_post_request_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("duplicate_record_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("duplicate_record_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDuplicateRecordId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDuplicateRecordId);
            setDuplicateRecordId(refVal_setDuplicateRecordId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("main_record_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("main_record_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMainRecordId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMainRecordId);
            setMainRecordId(refVal_setMainRecordId);
            
        }
    }
    return ok;
}

void _vobjects__object_name__actions_merge_post_request_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Duplicate_record_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("duplicate_record_id")), m_Duplicate_record_id));
    }
    if(m_Main_record_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("main_record_id")), m_Main_record_id));
    }
}

bool _vobjects__object_name__actions_merge_post_request_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("duplicate_record_id"))))
    {
        utility::string_t refVal_setDuplicateRecordId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("duplicate_record_id"))), refVal_setDuplicateRecordId );
        setDuplicateRecordId(refVal_setDuplicateRecordId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("main_record_id"))))
    {
        utility::string_t refVal_setMainRecordId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("main_record_id"))), refVal_setMainRecordId );
        setMainRecordId(refVal_setMainRecordId);
    }
    return ok;
}


utility::string_t _vobjects__object_name__actions_merge_post_request_inner::getDuplicateRecordId() const
{
    return m_Duplicate_record_id;
}


void _vobjects__object_name__actions_merge_post_request_inner::setDuplicateRecordId(const utility::string_t& value)
{
    m_Duplicate_record_id = value;
    m_Duplicate_record_idIsSet = true;
}

bool _vobjects__object_name__actions_merge_post_request_inner::duplicateRecordIdIsSet() const
{
    return m_Duplicate_record_idIsSet;
}

void _vobjects__object_name__actions_merge_post_request_inner::unsetDuplicate_record_id()
{
    m_Duplicate_record_idIsSet = false;
}
utility::string_t _vobjects__object_name__actions_merge_post_request_inner::getMainRecordId() const
{
    return m_Main_record_id;
}


void _vobjects__object_name__actions_merge_post_request_inner::setMainRecordId(const utility::string_t& value)
{
    m_Main_record_id = value;
    m_Main_record_idIsSet = true;
}

bool _vobjects__object_name__actions_merge_post_request_inner::mainRecordIdIsSet() const
{
    return m_Main_record_idIsSet;
}

void _vobjects__object_name__actions_merge_post_request_inner::unsetMain_record_id()
{
    m_Main_record_idIsSet = false;
}

}
}
}
}


